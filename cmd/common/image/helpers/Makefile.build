# This makefile is used by the build command, don't execute it manually

CLANG ?= clang
LLVM_STRIP ?= llvm-strip
# We need <asm/types.h> and depending on Linux distributions, it is installed
# at different paths:
#
# * Ubuntu, package linux-libc-dev:
#   /usr/include/x86_64-linux-gnu/asm/types.h
#
# * Fedora, package kernel-headers
#   /usr/include/asm/types.h
#
# Since Ubuntu does not install it in a standard path, add a compiler flag for
# it.
BASECFLAGS = -target bpf -Wall -g -O2 -I/usr/include/$(shell uname -m)-linux-gnu
CFLAGS ?=
OUTPUTDIR ?= /tmp
EBPFSOURCE ?= program.bpf.c

ARCHS = amd64 arm64
TARGETS = $(foreach ARCH,$(ARCHS),$(OUTPUTDIR)/$(ARCH).bpf.o)

.PHONY: ebpf
ebpf: $(TARGETS)

$(OUTPUTDIR)/%.bpf.o: $(EBPFSOURCE)
	$(CLANG) $(BASECFLAGS) $(CFLAGS) -D __TARGET_ARCH_$(subst amd64,x86,$*) \
		-c $< -I /usr/include/gadget/$*/ -o $@
	$(LLVM_STRIP) -g $@

.PHONY: wasm
ifeq ($(WASM),)
wasm:
	# No wasm file found. Nothing to do.
else ifeq (go,$(patsubst %.go,go,$(WASM)))
wasm: $(WASM)
	# -buildmode=c-shared to build the wasm as a reactor module. See https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi
	cd $(dir $(WASM)) && \
	CGO_ENABLED=0 GOOS=wasip1 GOARCH=wasm go build -o $(OUTPUTDIR)/program.wasm -buildmode=c-shared -ldflags "-w -s" $(notdir $(WASM))
else ifeq (rs, $(patsubst %.rs,rs,$(WASM)))
wasm: $(WASM)
	cd $(dir $(WASM)) && \
	cargo build --target wasm32-wasip1 --release && \
	PACKAGE_NAME=$(shell awk -F\" '/^name *=/ { print $$2; exit }' $(dir $(WASM))/../Cargo.toml) && \
	cp ../target/wasm32-wasip1/release/$$PACKAGE_NAME.wasm $(OUTPUTDIR)/program.wasm && \
	cd /work
else ifeq (wasm,$(patsubst %.wasm,wasm,$(WASM)))
wasm:
	# Wasm file already compiled. Nothing to do.
else
wasm:
	$(error Unsupported wasm file type: $(notdir $(WASM)))
endif

# Get value of -f parameter
ALT_MAKEFILE := $(lastword $(MAKEFILE_LIST))
MAKEFILE_DIR := $(dir $(ALT_MAKEFILE))

.PHONY: btfgen
btfgen: $(foreach ARCH,$(ARCHS),btfgen-$(ARCH))

btfgen-%: $(OUTPUTDIR)/%.bpf.o
	$(MAKE) -f $(MAKEFILE_DIR)/Makefile.build.btfgen BPF_OBJECT=$^ ARCH=$(subst amd64,x86_64,$*) btfs; \
