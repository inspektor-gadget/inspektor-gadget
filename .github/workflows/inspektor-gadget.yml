name: Inspektor Gadget CI
env:
  REGISTRY: ghcr.io
  CONTAINER_IMAGE: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && format('{0}', github.repository) || format('{0}-ci', github.repository) }}
  IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || github.ref }}
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
on:
  push:

# Jobs are given a level in a comment.
# Jobs of the same level run in parallel.
# Jobs of level N depend of, at least, one job on level N - 1 expect job whom
# level is 0.
jobs:
  documentation-checks:
    name: Documentation checks
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - name: Setup go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Cache go 1.17
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check out code
      uses: actions/checkout@v1
    - name: Check if generated files are updated
      run: |
        make manifests generate generate-documentation
        git diff --exit-code HEAD --

  lint:
    name: Lint
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - name: Setup go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Cache go 1.17
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check out code
      uses: actions/checkout@v1
    - name: Cache debian packages
      uses: actions/cache@v2
      id: cache-debs
      with:
        path: "~/cache-debs"
        key: cache-debs-libbpf-1:0.4.0-1ubuntu1-libseccomp-2.5.1-1ubuntu1~20.04.1
    - name: Install debian packages
      # ALERT This action must be run after code was checkout otherwise it will
      # not find this file.
      uses: ./.github/actions/install-debian-packages
      with:
        cache-hit: ${{steps.cache-debs.outputs.cache-hit}}
    - name: Build eBPF objects
      run: |
        make -C gadget-container ebpf-objects
    - name: Lint
      uses: golangci/golangci-lint-action@v3.1.0
      with:
        version: v1.44.2
        working-directory: /home/runner/work/inspektor-gadget/inspektor-gadget
        # Workaround to display the output:
        # https://github.com/golangci/golangci-lint-action/issues/119#issuecomment-981090648
        args: "--out-${NO_FUTURE}format colored-line-number"

  build-kubectl-gadget:
    name: Build kubectl-gadget
    # level: 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
    - name: Setup go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Cache go 1.17
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check out code
      uses: actions/checkout@v1
    - name: Cache debian packages
      uses: actions/cache@v2
      id: cache-debs
      with:
        path: "~/cache-debs"
        key: cache-debs-libbpf-1:0.4.0-1ubuntu1-libseccomp-2.5.1-1ubuntu1~20.04.1
    - name: Install debian packages
      uses: ./.github/actions/install-debian-packages
      with:
        cache-hit: ${{steps.cache-debs.outputs.cache-hit}}
    - name: Set IMAGE_TAG for branch or tag.
      if: ${{ startsWith(env.IMAGE_TAG, 'refs/heads/') }}
      run: |
        # Remove ref/*/.
        tag=${IMAGE_TAG#refs/*/}
        # Replace / by - to avoid docker push crying.
        tag=${tag/\//-}
        echo IMAGE_TAG=${tag} >> $GITHUB_ENV
    - name: Build kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}
      run: |
        git checkout

        # Prevent releases with -dirty suffix due to forgotten entries in
        # .gitignore.
        changes="$(git status --porcelain)"
        if [ -n "$changes" ] ; then
          echo "$changes"
          exit 1
        fi

        kubectl_gadget=kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}

        CONTAINER_REPO="${{ env.REGISTRY }}/${{ env.CONTAINER_IMAGE }}" make $kubectl_gadget

        # Prepare assets for release and actions artifacts
        platform=$(echo ${kubectl_gadget} | cut -d- -f3-4)
        mkdir $platform
        cp $kubectl_gadget $platform/kubectl-gadget
        cp LICENSE $platform/
        tar --sort=name --owner=root:0 --group=root:0 \
          -czf ${kubectl_gadget}.tar.gz -C $platform \
          kubectl-gadget LICENSE
        rm -rf $platform
    - name: Add kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}.tar.gz as artifact.
      uses: actions/upload-artifact@master
      with:
        name: kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}-tar-gz
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  build-local-gadget:
    name: Build local-gadget
    # level: 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO add local-gadget-linux-arm64
        local-gadget-target: [local-gadget-linux-amd64]
    steps:
    - name: Setup go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Cache go 1.17
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check out code
      uses: actions/checkout@v1
    - name: Cache debian packages
      uses: actions/cache@v2
      id: cache-debs
      with:
        path: "~/cache-debs"
        key: cache-debs-libbpf-1:0.4.0-1ubuntu1-libseccomp-2.5.1-1ubuntu1~20.04.1
    - name: Install debian packages
      # ALERT This action must be run after code was checkout otherwise it will
      # not find this file.
      uses: ./.github/actions/install-debian-packages
    - name: Build ${{ matrix.local-gadget-target }}
      run: |
        make ${{ matrix.local-gadget-target }}

        # Prepare assets for release and actions artifacts
        platform=$(echo ${{ matrix.local-gadget-target }} | cut -d- -f3-4)
        mkdir $platform
        cp ${{ matrix.local-gadget-target }} $platform/local-gadget
        cp LICENSE $platform/
        tar --sort=name --owner=root:0 --group=root:0 \
          -czf ${{ matrix.local-gadget-target }}.tar.gz -C $platform \
          local-gadget LICENSE
        rm -rf $platform
    - name: Add ${{ matrix.local-gadget-target }}.tar.gz as artifact.
      uses: actions/upload-artifact@master
      with:
        name: ${{ matrix.local-gadget-target }}-tar-gz
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/${{ matrix.local-gadget-target }}.tar.gz

  build-docker-image:
    name: Build gadget container image
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - name: Set IMAGE_TAG for branch or tag
      if: ${{ startsWith(env.IMAGE_TAG, 'refs/heads/') }}
      run: |
        # Remove ref/*/.
        tag=${IMAGE_TAG#refs/*/}
        # Replace / by - to avoid docker push crying.
        tag=${tag/\//-}
        echo IMAGE_TAG=${tag} >> $GITHUB_ENV
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-single-buildx-${{ hashFiles('gadget.Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-single-buildx
    - name: Login to Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN}}
    - name: Check out code
      uses: actions/checkout@v1
    - name: Build gadget container
      uses: docker/build-push-action@v2
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/gadget.Dockerfile
        build-args: |
          ENABLE_BTFGEN=true
        # TODO: how to avoid pushing a container before running integration tests
        # Answer: push to runner registry first, if integration tests are OK
        # push to final registry
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.CONTAINER_IMAGE }}:${{ env.IMAGE_TAG }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

  test-unit:
    name: Unit tests
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - name: Setup go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Cache go 1.17
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check out code
      uses: actions/checkout@v1
    - name: Cache debian packages
      uses: actions/cache@v2
      id: cache-debs
      with:
        path: "~/cache-debs"
        key: cache-debs-libbpf-1:0.4.0-1ubuntu1-libseccomp-2.5.1-1ubuntu1~20.04.1
    - name: Install debian packages
      uses: ./.github/actions/install-debian-packages
      with:
        cache-hit: ${{steps.cache-debs.outputs.cache-hit}}
    - name: Basic unit tests
      run: |
        make test
    - name: Controller unit tests
      run: |
        make controller-tests

  test-local-gadget:
    name: Unit tests for local-gadget
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - name: Setup go 1.17
      uses: actions/setup-go@v1
      with:
        go-version: 1.17
      id: go
    - name: Cache go 1.17
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check out code
      uses: actions/checkout@v1
    - name: Cache debian packages
      uses: actions/cache@v2
      id: cache-debs
      with:
        path: "~/cache-debs"
        key: cache-debs-libbpf-1:0.4.0-1ubuntu1-libseccomp-2.5.1-1ubuntu1~20.04.1
    - name: Install debian packages
      uses: ./.github/actions/install-debian-packages
      with:
        cache-hit: ${{steps.cache-debs.outputs.cache-hit}}
    - name: Unit tests for local-gadget (as root)
      run: |
        KERNEL=$(uname -r)
        ARCH=$(uname -m)
        if test -f /sys/kernel/btf/vmlinux; then
          echo "BTF is available at /sys/kernel/btf/vmlinux"
        else
          echo "BTF is not available: Trying BTFHub"
          source /etc/os-release
          URL="https://github.com/aquasecurity/btfhub-archive/raw/main/$ID/$VERSION_ID/$ARCH/$KERNEL.btf.tar.xz"
          echo "Trying to download vmlinux from $URL"

          if [[ $(wget -S --spider "$URL" 2>&1 | grep 'HTTP/1.1 200 OK') ]]; then
            wget -q -O /tmp/vmlinux.btf.tar.xz "$URL"
            tar -xvf /tmp/vmlinux.btf.tar.xz
            # Use objcopy to put the btf info in an ELF file as libbpf and cilium/ebpf
            # by default check if there is an ELF file with the .BTF section at
            # /boot/vmlinux-$KERNEL.
            sudo objcopy --input binary --output elf64-little --rename-section .data=.BTF *.btf /boot/vmlinux-$KERNEL
            rm *.btf
            echo "vmlinux downloaded at /boot/vmlinux-$KERNEL"
          else
            echo "vmlinux not found"
          fi
        fi

        make local-gadget-tests

  test-integration:
    name: Integration tests
    # level: 1
    needs: [test-unit, build-kubectl-gadget, build-local-gadget, build-docker-image]
    runs-on: ubuntu-latest
    steps:
    - name: Setup Minikube
      uses: manusa/actions-setup-minikube@v2.4.3
      with:
        minikube version: 'v1.25.2'
        kubernetes version: 'v1.23.0'
        github token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set IMAGE_TAG for branch or tag
      if: ${{ startsWith(env.IMAGE_TAG, 'refs/heads/') }}
      run: |
        # Remove ref/*/.
        tag=${IMAGE_TAG#refs/*/}
        # Replace / by - to avoid docker push crying.
        tag=${tag/\//-}
        echo IMAGE_TAG=${tag} >> $GITHUB_ENV
    - name: Check out code
      uses: actions/checkout@v1
    - name: Get kubectl-gadget-linux-amd64.tar.gz from artifact.
      uses: actions/download-artifact@v2
      with:
        name: kubectl-gadget-linux-amd64-tar-gz
        path: /home/runner/work/inspektor-gadget/
    - name: Integration tests
      run: |
        echo "Using IMAGE_TAG=$IMAGE_TAG"

        tar zxvf /home/runner/work/inspektor-gadget/kubectl-gadget-linux-amd64.tar.gz
        mv kubectl-gadget kubectl-gadget-linux-amd64

        TESTS_DOCKER_ARGS="-e KUBECONFIG=/root/.kube/config -v /home/runner/.kube:/root/.kube -v /home/runner/work/_temp/.minikube:/home/runner/work/_temp/.minikube" \
            make -C integration build test

        sed -i "s/latest/$IMAGE_TAG/g" integration/gadget-integration-tests-job.yaml
    - name: Add integration asset as artifact.
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@master
      with:
        name: integration-asset
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/integration/gadget-integration-tests-job.yaml
    - name: Login to Container Registry
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN}}
    - name: Push Integration Test Image
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        CONTAINER_REPO="${{ env.REGISTRY }}/${{ env.CONTAINER_IMAGE }}" make -C integration push

  release:
    name: Release
    # level: 2
    needs: [documentation-checks, lint, test-integration, test-local-gadget]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Get all artifacts.
      uses: actions/download-artifact@v2
    - name: Upload Gadget Release *-gadget-*-*.tar.gz
      uses: csexton/release-asset-action@v2
      with:
        pattern: "*-gadget-*-*-tar-gz/*-gadget-*-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload Testing Asset
      id: upload-release-asset-testing
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: integration-asset/gadget-integration-tests-job.yaml
        asset_name: gadget-integration-tests-job.yaml
        asset_content_type: application/x-yaml
    - name: Check out code
      uses: actions/checkout@v1
    - name: Update new version in krew-index
      if: github.repository == 'kinvolk/inspektor-gadget'
      uses: rajatjindal/krew-release-bot@v0.0.40
      with:
        workdir: /home/runner/work/inspektor-gadget/inspektor-gadget
        krew_template_file: .krew.yaml
