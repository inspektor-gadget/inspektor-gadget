name: Inspektor Gadget CI
env:
  REGISTRY: ghcr.io
  RELEASE_CONTAINER_REPO: ${{ github.repository }}
  DEVELOPMENT_CONTAINER_REPO: ${{ github.repository }}-dev
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
on:
  push:

# Jobs are given a level in a comment.
# Jobs of the same level run in parallel.
# Jobs of level N depend of, at least, one job on level N - 1 expect job whom
# level is 0.
jobs:
  documentation-checks:
    name: Documentation checks
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
      id: go
    - name: Check if generated files are updated
      run: |
        make manifests generate generate-documentation
        git diff --exit-code HEAD --

  lint:
    name: Lint
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
      id: go
    - name: Install debian packages
      # ALERT This action must be run after code was checkout otherwise it will
      # not find this file.
      uses: ./.github/actions/install-debian-packages
    - name: Lint
      uses: golangci/golangci-lint-action@v3.2.0
      with:
        # This version number must be kept in sync with Makefile lint one.
        version: v1.46.2
        working-directory: /home/runner/work/inspektor-gadget/inspektor-gadget
        # Workaround to display the output:
        # https://github.com/golangci/golangci-lint-action/issues/119#issuecomment-981090648
        args: "--out-${NO_FUTURE}format colored-line-number"

  build-kubectl-gadget:
    name: Build kubectl-gadget
    # level: 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
      id: go
    - name: Install debian packages
      uses: ./.github/actions/install-debian-packages
    - name: Choose container repository and determine image tag
      id: choose-repo-determine-image-tag
      uses: ./.github/actions/choose-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image-release: ${{ env.RELEASE_CONTAINER_REPO }}
        container-image-dev: ${{ env.DEVELOPMENT_CONTAINER_REPO }}
    - name: Build kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}
      run: |
        git checkout

        # Prevent releases with -dirty suffix due to forgotten entries in
        # .gitignore.
        changes="$(git status --porcelain)"
        if [ -n "$changes" ] ; then
          echo "$changes"
          exit 1
        fi

        kubectl_gadget=kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}

        CONTAINER_REPO=${{ steps.choose-repo-determine-image-tag.outputs.container-repo }} \
        IMAGE_TAG=${{ steps.choose-repo-determine-image-tag.outputs.image-tag }} \
        make $kubectl_gadget

        # Prepare assets for release and actions artifacts
        platform=$(echo ${kubectl_gadget} | cut -d- -f3-4)
        mkdir $platform
        cp $kubectl_gadget $platform/kubectl-gadget
        cp LICENSE $platform/
        tar --sort=name --owner=root:0 --group=root:0 \
          -czf ${kubectl_gadget}.tar.gz -C $platform \
          kubectl-gadget LICENSE
        rm -rf $platform
    - name: Add kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}.tar.gz as artifact.
      uses: actions/upload-artifact@master
      with:
        name: kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}-tar-gz
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/kubectl-gadget-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  build-local-gadget:
    name: Build local-gadget
    # level: 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        local-gadget-target: [local-gadget-linux-amd64, local-gadget-linux-arm64]
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
      id: go
    - name: Install debian packages
      # ALERT This action must be run after code was checkout otherwise it will
      # not find this file.
      uses: ./.github/actions/install-debian-packages
    - name: Build ${{ matrix.local-gadget-target }}
      run: |
        make ${{ matrix.local-gadget-target }}

        # Prepare assets for release and actions artifacts
        platform=$(echo ${{ matrix.local-gadget-target }} | cut -d- -f3-4)
        mkdir $platform
        cp ${{ matrix.local-gadget-target }} $platform/local-gadget
        cp LICENSE $platform/
        tar --sort=name --owner=root:0 --group=root:0 \
          -czf ${{ matrix.local-gadget-target }}.tar.gz -C $platform \
          local-gadget LICENSE
        rm -rf $platform
    - name: Add ${{ matrix.local-gadget-target }}.tar.gz as artifact.
      uses: actions/upload-artifact@master
      with:
        name: ${{ matrix.local-gadget-target }}-tar-gz
        path: /home/runner/work/inspektor-gadget/inspektor-gadget/${{ matrix.local-gadget-target }}.tar.gz

  build-gadget-container-images:
    name: Build gadget container images
    # level: 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: [default, core]
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ matrix.type }}-${{ hashFiles('gadget-${{ matrix.type }}.Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ matrix.type }}-
    - name: Login to Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Choose container repository and determine image tag
      id: choose-repo-determine-image-tag
      uses: ./.github/actions/choose-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image-release: ${{ env.RELEASE_CONTAINER_REPO }}
        container-image-dev: ${{ env.DEVELOPMENT_CONTAINER_REPO }}
    - name: Build gadget ${{ matrix.type }} container
      uses: docker/build-push-action@v2
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget/
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/gadget-${{ matrix.type }}.Dockerfile
        build-args: |
          ENABLE_BTFGEN=true
        push: true
        tags: ${{ steps.choose-repo-determine-image-tag.outputs.container-repo }}:${{ steps.choose-repo-determine-image-tag.outputs.image-tag }}${{ matrix.type == 'core' && '-core' || ''}}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        # For the moment, we only support these two platforms.
        platforms: linux/amd64,linux/arm64

  build-examples:
    name: Build examples
    # level: 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [runc-hook, kube-container-collection]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Choose container repository and determine image tag
      id: choose-repo-determine-image-tag
      uses: ./.github/actions/choose-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image-release: ${{ env.RELEASE_CONTAINER_REPO }}
        container-image-dev: ${{ env.DEVELOPMENT_CONTAINER_REPO }}
    - name: Build example container
      uses: docker/build-push-action@v2
      with:
        context: /home/runner/work/inspektor-gadget/inspektor-gadget
        file: /home/runner/work/inspektor-gadget/inspektor-gadget/examples/${{ matrix.example }}/Dockerfile
        push: ${{ secrets.PUSH_EXAMPLES == 'ENABLE_PUSH_EXAMPLES' }}
        tags: ${{ steps.choose-repo-determine-image-tag.outputs.container-repo }}-${{ matrix.example }}:${{ steps.choose-repo-determine-image-tag.outputs.image-tag }}

  build-gadgets-examples:
    name: Build Gadgets examples
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
    - name: Build example binaries
      run: |
        for dir in $(dirname $(find examples/gadgets -name README.md)); do
          go build ./$dir;
        done

  test-unit:
    name: Unit tests
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
      id: go
    - name: Install debian packages
      uses: ./.github/actions/install-debian-packages
    - name: Basic unit tests
      run: |
        make test
    - name: Controller unit tests
      run: |
        make controller-tests

  test-local-gadget:
    name: Unit tests for local-gadget
    # level: 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.3
        cache: true
      id: go
    - name: Install debian packages
      uses: ./.github/actions/install-debian-packages
    - name: Unit tests for local-gadget (as root)
      run: |
        KERNEL=$(uname -r)
        ARCH=$(uname -m)
        if test -f /sys/kernel/btf/vmlinux; then
          echo "BTF is available at /sys/kernel/btf/vmlinux"
        else
          echo "BTF is not available: Trying BTFHub"
          source /etc/os-release
          URL="https://github.com/aquasecurity/btfhub-archive/raw/main/$ID/$VERSION_ID/$ARCH/$KERNEL.btf.tar.xz"
          echo "Trying to download vmlinux from $URL"

          if [[ $(wget -S --spider "$URL" 2>&1 | grep 'HTTP/1.1 200 OK') ]]; then
            wget -q -O /tmp/vmlinux.btf.tar.xz "$URL"
            tar -xvf /tmp/vmlinux.btf.tar.xz
            # Use objcopy to put the btf info in an ELF file as libbpf and cilium/ebpf
            # by default check if there is an ELF file with the .BTF section at
            # /boot/vmlinux-$KERNEL.
            sudo objcopy --input binary --output elf64-little --rename-section .data=.BTF *.btf /boot/vmlinux-$KERNEL
            rm *.btf
            echo "vmlinux downloaded at /boot/vmlinux-$KERNEL"
          else
            echo "vmlinux not found"
          fi
        fi

        make local-gadget-tests

  check-secrets:
    name: Check repo secrets
    # level: 0
    runs-on: ubuntu-latest
    outputs:
      aro: ${{ steps.set_output.outputs.aro }}
    steps:
      # Secrets cannot be used as if condition, use job output as workaround.
      # https://github.com/actions/runner/issues/520
      - id: set_output
        run: |
          if [[ "${{ secrets.OPENSHIFT_SERVER }}" != "" && \
                "${{ secrets.OPENSHIFT_USER }}" != "" && \
                "${{ secrets.OPENSHIFT_PASSWORD }}" != "" ]]; \
          then
            echo "Secrets to use an ARO cluster were configured in the repo"
            echo "::set-output name=aro::true"
          else
            echo "Secrets to use an ARO cluster were not configured in the repo"
            echo "::set-output name=aro::false"
          fi

  check-readme-up-to-date:
    name: Check that README is up to date
    # level: 1
    needs: build-kubectl-gadget
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Get kubectl-gadget-linux-amd64.tar.gz from artifact.
      uses: actions/download-artifact@v2
      with:
        name: kubectl-gadget-linux-amd64-tar-gz
        path: /home/runner/work/inspektor-gadget/
    - name: Check that README is up to date
      shell: bash
      run: |
        tar zxvf /home/runner/work/inspektor-gadget/kubectl-gadget-linux-amd64.tar.gz

        perl tools/check-readme.pl ./kubectl-gadget README.md

  # Integration tests for ARO are separated from others distributions because it
  # is a pre-created cluster. It implies that we need to use a concurrency group
  # to ensure that only one test-integration-aro job runs at a time so that we
  # never try to use IG on that unique ARO cluster from different workflow runs.
  test-integration-aro:
    name: Integration tests on ARO
    # level: 1
    needs: [check-secrets, test-unit, build-kubectl-gadget, build-local-gadget, build-gadget-container-images]
    # Run this job only if an ARO cluster is available on repo secrets. See
    # docs/ci.md for further details.
    if: needs.check-secrets.outputs.aro == 'true'
    runs-on: ubuntu-latest
    concurrency:
      group: no-simultaneous-test-integration-aro
    steps:
    - uses: actions/checkout@v3
    - name: Authenticate and set ARO cluster context
      # NOTE: This action generates the Kubernetes config file in the current
      # directory. Therefore, it must be run after checking out code otherwise
      # the file will be cleaned up.
      uses: redhat-actions/oc-login@v1
      with:
        # API Server URL
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        # Credentials (TODO: Use a functional Service Account, see issue #574)
        openshift_username: ${{ secrets.OPENSHIFT_USER }}
        openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}
    - name: Choose container repository and determine image tag
      id: choose-repo-determine-image-tag
      uses: ./.github/actions/choose-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image-release: ${{ env.RELEASE_CONTAINER_REPO }}
        container-image-dev: ${{ env.DEVELOPMENT_CONTAINER_REPO }}
    - name: Run integration tests
      uses: ./.github/actions/run-integration-tests
      env:
        KUBERNETES_DISTRIBUTION: "aro"
      with:
        registry: ${{ env.REGISTRY }}
        container_repo: ${{ steps.choose-repo-determine-image-tag.outputs.container-repo }}
        image_tag: ${{ steps.choose-repo-determine-image-tag.outputs.image-tag }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

  test-integration:
    name: Integration tests
    # level: 1
    needs: [test-unit, build-kubectl-gadget, build-local-gadget, build-gadget-container-images]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Minikube
      uses: manusa/actions-setup-minikube@v2.4.3
      with:
        minikube version: 'v1.25.2'
        kubernetes version: 'v1.23.0'
        github token: ${{ secrets.GITHUB_TOKEN }}
    - name: Choose container repository and determine image tag
      id: choose-repo-determine-image-tag
      uses: ./.github/actions/choose-container-repo-and-determine-image-tag
      with:
        registry: ${{ env.REGISTRY }}
        container-image-release: ${{ env.RELEASE_CONTAINER_REPO }}
        container-image-dev: ${{ env.DEVELOPMENT_CONTAINER_REPO }}
    - name: Run integration tests
      uses: ./.github/actions/run-integration-tests
      env:
        KUBERNETES_DISTRIBUTION: "minikube-github"
      with:
        registry: ${{ env.REGISTRY }}
        container_repo: ${{ steps.choose-repo-determine-image-tag.outputs.container-repo }}
        image_tag: ${{ steps.choose-repo-determine-image-tag.outputs.image-tag }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    # level: 2
    needs:
      - documentation-checks
      - lint
      - test-integration
      - test-integration-aro
      - test-local-gadget
      - check-readme-up-to-date
      - build-examples
      - build-gadgets-examples
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Get all artifacts.
      uses: actions/download-artifact@v2
    - name: Upload Gadget Release *-gadget-*-*.tar.gz
      uses: csexton/release-asset-action@v2
      with:
        pattern: "*-gadget-*-*-tar-gz/*-gadget-*-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Upload Testing Asset
      id: upload-release-asset-testing
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: integration-asset/gadget-integration-tests-job.yaml
        asset_name: gadget-integration-tests-job.yaml
        asset_content_type: application/x-yaml
    - name: Update new version in krew-index
      if: github.repository == 'kinvolk/inspektor-gadget'
      uses: rajatjindal/krew-release-bot@v0.0.40
      with:
        workdir: /home/runner/work/inspektor-gadget/inspektor-gadget
        krew_template_file: .krew.yaml
