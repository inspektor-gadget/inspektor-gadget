package tracer

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/bind/types"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
)

func TestGadgetDescriptor(t *testing.T) {
	t.Parallel()

	desc := &GadgetDesc{}

	// Test Name
	t.Run("Name", func(t *testing.T) {
		assert.Equal(t, "bind", desc.Name())
	})

	// Test Category
	t.Run("Category", func(t *testing.T) {
		assert.Equal(t, gadgets.CategoryTrace, desc.Category())
	})

	// Test Type
	t.Run("Type", func(t *testing.T) {
		assert.Equal(t, gadgets.TypeTrace, desc.Type())
	})

	// Test Description
	t.Run("Description", func(t *testing.T) {
		assert.Equal(t, "Trace socket bindings", desc.Description())
	})

	// Test EventPrototype
	t.Run("EventPrototype", func(t *testing.T) {
		event := desc.EventPrototype()
		_, ok := event.(*types.Event)
		assert.True(t, ok, "EventPrototype should return *types.Event")
	})

	// Test Parser
	t.Run("Parser", func(t *testing.T) {
		parser := desc.Parser()
		assert.NotNil(t, parser, "Parser should not be nil")
	})
}

func TestGadgetParamDescs(t *testing.T) {
	t.Parallel()

	desc := &GadgetDesc{}
	paramDescs := desc.ParamDescs()

	// Test PID parameter
	t.Run("PID Parameter", func(t *testing.T) {
		pid := findParamDesc(paramDescs, ParamPID)
		require.NotNil(t, pid, "PID parameter should exist")
		assert.Equal(t, "PID", pid.Title)
		assert.Equal(t, "0", pid.DefaultValue)
		assert.Equal(t, params.TypeInt32, pid.TypeHint)
		assert.Equal(t, "Show only bind events generated by this particular PID", pid.Description)
	})

	// Test Ports parameter
	t.Run("Ports Parameter", func(t *testing.T) {
		ports := findParamDesc(paramDescs, ParamPorts)
		require.NotNil(t, ports, "Ports parameter should exist")
		assert.Equal(t, "P", ports.Alias)
		assert.Equal(t, "", ports.DefaultValue)
		assert.Equal(t, "Trace only bind events involving these ports", ports.Description)
		assert.NotNil(t, ports.Validator, "Ports parameter should have a validator")
	})

	// Test IgnoreErrors parameter
	t.Run("IgnoreErrors Parameter", func(t *testing.T) {
		ignoreErrors := findParamDesc(paramDescs, ParamIgnoreErrors)
		require.NotNil(t, ignoreErrors, "IgnoreErrors parameter should exist")
		assert.Equal(t, "Ignore Errors", ignoreErrors.Title)
		assert.Equal(t, "i", ignoreErrors.Alias)
		assert.Equal(t, "true", ignoreErrors.DefaultValue)
		assert.Equal(t, params.TypeBool, ignoreErrors.TypeHint)
		assert.Equal(t, "Show only events where the bind succeeded", ignoreErrors.Description)
	})
}

// TestNewInstance verifies that NewInstance creates a valid gadget instance
func TestNewInstance(t *testing.T) {
	t.Parallel()

	desc := &GadgetDesc{}
	gadget, err := desc.NewInstance()
	require.NoError(t, err, "NewInstance should not return an error")
	assert.NotNil(t, gadget, "NewInstance should return a non-nil gadget")

	// Verify the type of the returned gadget
	_, ok := gadget.(*Tracer)
	assert.True(t, ok, "NewInstance should return a *Tracer")
}

// Helper function to find a parameter description by key
func findParamDesc(descs params.ParamDescs, key string) *params.ParamDesc {
	for i := range descs {
		if descs[i].Key == key {
			return descs[i]
		}
	}
	return nil
}
