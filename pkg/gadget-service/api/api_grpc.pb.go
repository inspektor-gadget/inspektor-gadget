// Copyright 2019-2023 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BuiltInGadgetManager_GetInfo_FullMethodName          = "/api.BuiltInGadgetManager/GetInfo"
	BuiltInGadgetManager_RunBuiltInGadget_FullMethodName = "/api.BuiltInGadgetManager/RunBuiltInGadget"
)

// BuiltInGadgetManagerClient is the client API for BuiltInGadgetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuiltInGadgetManagerClient interface {
	GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuiltInGadgetControlRequest, GadgetEvent], error)
}

type builtInGadgetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBuiltInGadgetManagerClient(cc grpc.ClientConnInterface) BuiltInGadgetManagerClient {
	return &builtInGadgetManagerClient{cc}
}

func (c *builtInGadgetManagerClient) GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, BuiltInGadgetManager_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builtInGadgetManagerClient) RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuiltInGadgetControlRequest, GadgetEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BuiltInGadgetManager_ServiceDesc.Streams[0], BuiltInGadgetManager_RunBuiltInGadget_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BuiltInGadgetControlRequest, GadgetEvent]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BuiltInGadgetManager_RunBuiltInGadgetClient = grpc.BidiStreamingClient[BuiltInGadgetControlRequest, GadgetEvent]

// BuiltInGadgetManagerServer is the server API for BuiltInGadgetManager service.
// All implementations must embed UnimplementedBuiltInGadgetManagerServer
// for forward compatibility.
type BuiltInGadgetManagerServer interface {
	GetInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	RunBuiltInGadget(grpc.BidiStreamingServer[BuiltInGadgetControlRequest, GadgetEvent]) error
	mustEmbedUnimplementedBuiltInGadgetManagerServer()
}

// UnimplementedBuiltInGadgetManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBuiltInGadgetManagerServer struct{}

func (UnimplementedBuiltInGadgetManagerServer) GetInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedBuiltInGadgetManagerServer) RunBuiltInGadget(grpc.BidiStreamingServer[BuiltInGadgetControlRequest, GadgetEvent]) error {
	return status.Errorf(codes.Unimplemented, "method RunBuiltInGadget not implemented")
}
func (UnimplementedBuiltInGadgetManagerServer) mustEmbedUnimplementedBuiltInGadgetManagerServer() {}
func (UnimplementedBuiltInGadgetManagerServer) testEmbeddedByValue()                              {}

// UnsafeBuiltInGadgetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuiltInGadgetManagerServer will
// result in compilation errors.
type UnsafeBuiltInGadgetManagerServer interface {
	mustEmbedUnimplementedBuiltInGadgetManagerServer()
}

func RegisterBuiltInGadgetManagerServer(s grpc.ServiceRegistrar, srv BuiltInGadgetManagerServer) {
	// If the following call pancis, it indicates UnimplementedBuiltInGadgetManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BuiltInGadgetManager_ServiceDesc, srv)
}

func _BuiltInGadgetManager_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuiltInGadgetManagerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuiltInGadgetManager_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuiltInGadgetManagerServer).GetInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuiltInGadgetManager_RunBuiltInGadget_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuiltInGadgetManagerServer).RunBuiltInGadget(&grpc.GenericServerStream[BuiltInGadgetControlRequest, GadgetEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BuiltInGadgetManager_RunBuiltInGadgetServer = grpc.BidiStreamingServer[BuiltInGadgetControlRequest, GadgetEvent]

// BuiltInGadgetManager_ServiceDesc is the grpc.ServiceDesc for BuiltInGadgetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuiltInGadgetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BuiltInGadgetManager",
	HandlerType: (*BuiltInGadgetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _BuiltInGadgetManager_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunBuiltInGadget",
			Handler:       _BuiltInGadgetManager_RunBuiltInGadget_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}

const (
	GadgetManager_GetGadgetInfo_FullMethodName = "/api.GadgetManager/GetGadgetInfo"
	GadgetManager_RunGadget_FullMethodName     = "/api.GadgetManager/RunGadget"
)

// GadgetManagerClient is the client API for GadgetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GadgetManagerClient interface {
	GetGadgetInfo(ctx context.Context, in *GetGadgetInfoRequest, opts ...grpc.CallOption) (*GetGadgetInfoResponse, error)
	RunGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GadgetControlRequest, GadgetEvent], error)
}

type gadgetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGadgetManagerClient(cc grpc.ClientConnInterface) GadgetManagerClient {
	return &gadgetManagerClient{cc}
}

func (c *gadgetManagerClient) GetGadgetInfo(ctx context.Context, in *GetGadgetInfoRequest, opts ...grpc.CallOption) (*GetGadgetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGadgetInfoResponse)
	err := c.cc.Invoke(ctx, GadgetManager_GetGadgetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetManagerClient) RunGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GadgetControlRequest, GadgetEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GadgetManager_ServiceDesc.Streams[0], GadgetManager_RunGadget_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GadgetControlRequest, GadgetEvent]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GadgetManager_RunGadgetClient = grpc.BidiStreamingClient[GadgetControlRequest, GadgetEvent]

// GadgetManagerServer is the server API for GadgetManager service.
// All implementations must embed UnimplementedGadgetManagerServer
// for forward compatibility.
type GadgetManagerServer interface {
	GetGadgetInfo(context.Context, *GetGadgetInfoRequest) (*GetGadgetInfoResponse, error)
	RunGadget(grpc.BidiStreamingServer[GadgetControlRequest, GadgetEvent]) error
	mustEmbedUnimplementedGadgetManagerServer()
}

// UnimplementedGadgetManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGadgetManagerServer struct{}

func (UnimplementedGadgetManagerServer) GetGadgetInfo(context.Context, *GetGadgetInfoRequest) (*GetGadgetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGadgetInfo not implemented")
}
func (UnimplementedGadgetManagerServer) RunGadget(grpc.BidiStreamingServer[GadgetControlRequest, GadgetEvent]) error {
	return status.Errorf(codes.Unimplemented, "method RunGadget not implemented")
}
func (UnimplementedGadgetManagerServer) mustEmbedUnimplementedGadgetManagerServer() {}
func (UnimplementedGadgetManagerServer) testEmbeddedByValue()                       {}

// UnsafeGadgetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GadgetManagerServer will
// result in compilation errors.
type UnsafeGadgetManagerServer interface {
	mustEmbedUnimplementedGadgetManagerServer()
}

func RegisterGadgetManagerServer(s grpc.ServiceRegistrar, srv GadgetManagerServer) {
	// If the following call pancis, it indicates UnimplementedGadgetManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GadgetManager_ServiceDesc, srv)
}

func _GadgetManager_GetGadgetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGadgetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetManagerServer).GetGadgetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GadgetManager_GetGadgetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetManagerServer).GetGadgetInfo(ctx, req.(*GetGadgetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetManager_RunGadget_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GadgetManagerServer).RunGadget(&grpc.GenericServerStream[GadgetControlRequest, GadgetEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GadgetManager_RunGadgetServer = grpc.BidiStreamingServer[GadgetControlRequest, GadgetEvent]

// GadgetManager_ServiceDesc is the grpc.ServiceDesc for GadgetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GadgetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GadgetManager",
	HandlerType: (*GadgetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGadgetInfo",
			Handler:    _GadgetManager_GetGadgetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunGadget",
			Handler:       _GadgetManager_RunGadget_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}

const (
	GadgetInstanceManager_CreateGadgetInstance_FullMethodName = "/api.GadgetInstanceManager/CreateGadgetInstance"
	GadgetInstanceManager_ListGadgetInstances_FullMethodName  = "/api.GadgetInstanceManager/ListGadgetInstances"
	GadgetInstanceManager_GetGadgetInstance_FullMethodName    = "/api.GadgetInstanceManager/GetGadgetInstance"
	GadgetInstanceManager_RemoveGadgetInstance_FullMethodName = "/api.GadgetInstanceManager/RemoveGadgetInstance"
)

// GadgetInstanceManagerClient is the client API for GadgetInstanceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GadgetInstanceManagerClient interface {
	CreateGadgetInstance(ctx context.Context, in *CreateGadgetInstanceRequest, opts ...grpc.CallOption) (*CreateGadgetInstanceResponse, error)
	ListGadgetInstances(ctx context.Context, in *ListGadgetInstancesRequest, opts ...grpc.CallOption) (*ListGadgetInstanceResponse, error)
	GetGadgetInstance(ctx context.Context, in *GadgetInstanceId, opts ...grpc.CallOption) (*GadgetInstance, error)
	RemoveGadgetInstance(ctx context.Context, in *GadgetInstanceId, opts ...grpc.CallOption) (*StatusResponse, error)
}

type gadgetInstanceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGadgetInstanceManagerClient(cc grpc.ClientConnInterface) GadgetInstanceManagerClient {
	return &gadgetInstanceManagerClient{cc}
}

func (c *gadgetInstanceManagerClient) CreateGadgetInstance(ctx context.Context, in *CreateGadgetInstanceRequest, opts ...grpc.CallOption) (*CreateGadgetInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGadgetInstanceResponse)
	err := c.cc.Invoke(ctx, GadgetInstanceManager_CreateGadgetInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetInstanceManagerClient) ListGadgetInstances(ctx context.Context, in *ListGadgetInstancesRequest, opts ...grpc.CallOption) (*ListGadgetInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGadgetInstanceResponse)
	err := c.cc.Invoke(ctx, GadgetInstanceManager_ListGadgetInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetInstanceManagerClient) GetGadgetInstance(ctx context.Context, in *GadgetInstanceId, opts ...grpc.CallOption) (*GadgetInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GadgetInstance)
	err := c.cc.Invoke(ctx, GadgetInstanceManager_GetGadgetInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gadgetInstanceManagerClient) RemoveGadgetInstance(ctx context.Context, in *GadgetInstanceId, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GadgetInstanceManager_RemoveGadgetInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GadgetInstanceManagerServer is the server API for GadgetInstanceManager service.
// All implementations must embed UnimplementedGadgetInstanceManagerServer
// for forward compatibility.
type GadgetInstanceManagerServer interface {
	CreateGadgetInstance(context.Context, *CreateGadgetInstanceRequest) (*CreateGadgetInstanceResponse, error)
	ListGadgetInstances(context.Context, *ListGadgetInstancesRequest) (*ListGadgetInstanceResponse, error)
	GetGadgetInstance(context.Context, *GadgetInstanceId) (*GadgetInstance, error)
	RemoveGadgetInstance(context.Context, *GadgetInstanceId) (*StatusResponse, error)
	mustEmbedUnimplementedGadgetInstanceManagerServer()
}

// UnimplementedGadgetInstanceManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGadgetInstanceManagerServer struct{}

func (UnimplementedGadgetInstanceManagerServer) CreateGadgetInstance(context.Context, *CreateGadgetInstanceRequest) (*CreateGadgetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGadgetInstance not implemented")
}
func (UnimplementedGadgetInstanceManagerServer) ListGadgetInstances(context.Context, *ListGadgetInstancesRequest) (*ListGadgetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGadgetInstances not implemented")
}
func (UnimplementedGadgetInstanceManagerServer) GetGadgetInstance(context.Context, *GadgetInstanceId) (*GadgetInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGadgetInstance not implemented")
}
func (UnimplementedGadgetInstanceManagerServer) RemoveGadgetInstance(context.Context, *GadgetInstanceId) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGadgetInstance not implemented")
}
func (UnimplementedGadgetInstanceManagerServer) mustEmbedUnimplementedGadgetInstanceManagerServer() {}
func (UnimplementedGadgetInstanceManagerServer) testEmbeddedByValue()                               {}

// UnsafeGadgetInstanceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GadgetInstanceManagerServer will
// result in compilation errors.
type UnsafeGadgetInstanceManagerServer interface {
	mustEmbedUnimplementedGadgetInstanceManagerServer()
}

func RegisterGadgetInstanceManagerServer(s grpc.ServiceRegistrar, srv GadgetInstanceManagerServer) {
	// If the following call pancis, it indicates UnimplementedGadgetInstanceManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GadgetInstanceManager_ServiceDesc, srv)
}

func _GadgetInstanceManager_CreateGadgetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGadgetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetInstanceManagerServer).CreateGadgetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GadgetInstanceManager_CreateGadgetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetInstanceManagerServer).CreateGadgetInstance(ctx, req.(*CreateGadgetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetInstanceManager_ListGadgetInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGadgetInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetInstanceManagerServer).ListGadgetInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GadgetInstanceManager_ListGadgetInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetInstanceManagerServer).ListGadgetInstances(ctx, req.(*ListGadgetInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetInstanceManager_GetGadgetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetInstanceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetInstanceManagerServer).GetGadgetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GadgetInstanceManager_GetGadgetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetInstanceManagerServer).GetGadgetInstance(ctx, req.(*GadgetInstanceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GadgetInstanceManager_RemoveGadgetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetInstanceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GadgetInstanceManagerServer).RemoveGadgetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GadgetInstanceManager_RemoveGadgetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GadgetInstanceManagerServer).RemoveGadgetInstance(ctx, req.(*GadgetInstanceId))
	}
	return interceptor(ctx, in, info, handler)
}

// GadgetInstanceManager_ServiceDesc is the grpc.ServiceDesc for GadgetInstanceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GadgetInstanceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GadgetInstanceManager",
	HandlerType: (*GadgetInstanceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGadgetInstance",
			Handler:    _GadgetInstanceManager_CreateGadgetInstance_Handler,
		},
		{
			MethodName: "ListGadgetInstances",
			Handler:    _GadgetInstanceManager_ListGadgetInstances_Handler,
		},
		{
			MethodName: "GetGadgetInstance",
			Handler:    _GadgetInstanceManager_GetGadgetInstance_Handler,
		},
		{
			MethodName: "RemoveGadgetInstance",
			Handler:    _GadgetInstanceManager_RemoveGadgetInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
