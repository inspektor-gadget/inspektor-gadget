diff --git a/.github/actions/prepare-and-publish-test-reports/action.yml b/.github/actions/prepare-and-publish-test-reports/action.yml
index be57967fa..d121aaf1e 100644
--- a/.github/actions/prepare-and-publish-test-reports/action.yml
+++ b/.github/actions/prepare-and-publish-test-reports/action.yml
@@ -39,5 +39,5 @@ runs:
     - name: Upload test reports summary as artifacts
       uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
       with:
-        name: test-reports
+        name: test-reports-${{ github.job }}-${{ inputs.test-summary-suffix }}
         path: ./test-report_*_*.json
diff --git a/.github/actions/run-integration-tests/action.yml b/.github/actions/run-integration-tests/action.yml
index 728b8151f..61481ea24 100644
--- a/.github/actions/run-integration-tests/action.yml
+++ b/.github/actions/run-integration-tests/action.yml
@@ -16,7 +16,7 @@ inputs:
     required: true
   dnstester_image:
     description: 'The image used for the dnstester.'
-    default: 'ghcr.io/inspektor-gadget/dnstester:latest'
+    default: 'ghcr.io/inspektor-gadget/dnstester:main'
   gadget_repository:
     description: 'Repository where gadget images are stored.'
     required: true
@@ -85,12 +85,17 @@ runs:
         trap 'cleanup SIGTERM' SIGTERM
 
         # https://mywiki.wooledge.org/SignalTrap#When_is_the_signal_handled.3F
-        echo "IntegrationTestsJob: Start"
+        echo "BuiltinIntegrationTestsJob: Start"
         set -o pipefail
         make \
-          IG_PATH=/home/runner/work/inspektor-gadget/inspektor-gadget/kubectl-gadget \
+          integration-tests -o kubectl-gadget |& tee integration.log & wait $!
+        echo "BuiltinIntegrationTestsJob: Done"
+
+        echo "IntegrationTestsJob: Start"
+        make \
+          KUBECTL_GADGET=/home/runner/work/inspektor-gadget/inspektor-gadget/kubectl-gadget \
           IG_RUNTIME=kubernetes \
-          -o kubectl-gadget integration-tests integration-test-gadgets |& tee integration.log & wait $!
+          -C gadgets/ test-k8s -o build |& tee -a integration.log & wait $!
         echo "IntegrationTestsJob: Done"
     - name: Undeploy Inspektor Gadget
       id: undeploy-ig
diff --git a/.github/actions/set-container-repo-and-determine-image-tag/action.yml b/.github/actions/set-container-repo-and-determine-image-tag/action.yml
index 0f20889ad..b23bd3896 100644
--- a/.github/actions/set-container-repo-and-determine-image-tag/action.yml
+++ b/.github/actions/set-container-repo-and-determine-image-tag/action.yml
@@ -1,6 +1,6 @@
 name: "Output the container repository and image tag to be used"
 description: "Container repository is inputs.registry/inputs.container-image.
-  Image tag is latest if branch is main, otherwise it is the tag or branch name with slashes replaced by hyphens."
+  Image tag is the tag or branch name with slashes replaced by hyphens."
 
 inputs:
   registry:
@@ -52,10 +52,6 @@ runs:
         # If GITHUB_REF_NAME is 'foo/bar', image_tag will be 'foo-bar', we need
         # this because it is not possible to have slash in image tag.
         image_tag=${GITHUB_REF_NAME//\//-}
-        if [ "$image_tag" = "main" ]; then
-            image_tag="latest"
-        fi
-
         echo "image-tag=${image_tag}" >> $GITHUB_OUTPUT
     - name: Output gadgets repository
       id: gadget-repository
@@ -79,8 +75,4 @@ runs:
         # If GITHUB_REF_NAME is 'foo/bar', image_tag will be 'foo-bar', we need
         # this because it is not possible to have slash in image tag.
         gadget_tag=${GITHUB_REF_NAME//\//-}
-        if [ "$gadget_tag" = "main" ]; then
-            gadget_tag="latest"
-        fi
-
         echo "gadget-tag=${gadget_tag}" >> $GITHUB_OUTPUT
diff --git a/.github/workflows/check-artifacthub-tags.yml b/.github/workflows/check-artifacthub-tags.yml
index 0669a4b5a..a135af803 100644
--- a/.github/workflows/check-artifacthub-tags.yml
+++ b/.github/workflows/check-artifacthub-tags.yml
@@ -25,7 +25,7 @@ jobs:
     - name: Gather valid gadgets
       id: filter-gadgets
       run: |
-        gadgets=$(find gadgets -name 'artifacthub-pkg.yml' | cut -d'/' -f2 | perl -p -e 's/_/-/')
+        gadgets=$(find gadgets -name 'artifacthub-pkg.yml' | cut -d'/' -f2 | perl -p -e 's/_/-/g')
         gadgets=$(echo "$gadgets" | tr '\n' ',' | sed 's/,$//')
 
         echo "valid-gadgets-string=${gadgets}" >> $GITHUB_OUTPUT
diff --git a/.github/workflows/check-links.yml b/.github/workflows/check-links.yml
index eccc7fb80..7aca045a0 100644
--- a/.github/workflows/check-links.yml
+++ b/.github/workflows/check-links.yml
@@ -1,4 +1,5 @@
 name: Links check
+permissions: read-all
 
 on:
   workflow_dispatch:
@@ -15,7 +16,7 @@ jobs:
       uses: actions/checkout@v4
 
     - name: Check that there are not broken links
-      uses: gaurav-nelson/github-action-markdown-link-check@1b916f2cf6c36510a6059943104e3c42ce6c16bc # v1.0.16
+      uses: gaurav-nelson/github-action-markdown-link-check@3c3b66f1f7d0900e37b71eca45b63ea9eedfce31 # v1.0.17
       with:
         config-file: .github/workflows/mlc_config.json
         use-quiet-mode: 'yes'
diff --git a/.github/workflows/cloud-cleanup.yml b/.github/workflows/cloud-cleanup.yml
index d839ea4fd..005ec3c65 100644
--- a/.github/workflows/cloud-cleanup.yml
+++ b/.github/workflows/cloud-cleanup.yml
@@ -1,6 +1,6 @@
 name: Cleanup Cloud Resources
 env:
-  GO_VERSION: 1.23.4
+  GO_VERSION: 1.24.2
 on:
   schedule:
     - cron: "0 */3 * * *"
@@ -20,12 +20,12 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Setup go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
           go-version: ${{ env.GO_VERSION }}
         id: go
       - name: Configure AWS credentials
-        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
+        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
         with:
           role-to-assume: ${{ vars.AWS_ROLE }}
           aws-region: ${{ env.AWS_REGION }}
diff --git a/.github/workflows/dockerhub-mirror.yml b/.github/workflows/dockerhub-mirror.yml
index 51dbb2dbf..0a36c82f8 100644
--- a/.github/workflows/dockerhub-mirror.yml
+++ b/.github/workflows/dockerhub-mirror.yml
@@ -7,7 +7,7 @@ name: Mirror Dockerhub
 env:
   REGISTRY: ghcr.io
   CONTAINER_REPO: ${{ github.repository_owner }}
-  GO_VERSION: 1.23.4
+  GO_VERSION: 1.24.2
 on:
   workflow_dispatch:
   schedule:
@@ -22,8 +22,6 @@ jobs:
       fail-fast: false
       matrix:
         include:
-          - image: alpine:latest
-            repo: docker.io/library
           - image: busybox:latest
             repo: docker.io/library
           - image: gcc:latest
@@ -39,13 +37,13 @@ jobs:
       packages: write
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
-      - uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
         with:
             registry: ${{ env.REGISTRY }}
             username: ${{ github.actor }}
             password: ${{ secrets.GITHUB_TOKEN }}
       - name: Setup go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
          go-version: ${{ env.GO_VERSION }}
       - uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4
diff --git a/.github/workflows/inspektor-gadget.yml b/.github/workflows/inspektor-gadget.yml
index 3ab8d6529..2895b01c7 100644
--- a/.github/workflows/inspektor-gadget.yml
+++ b/.github/workflows/inspektor-gadget.yml
@@ -2,12 +2,12 @@ name: Inspektor Gadget CI
 env:
   REGISTRY: ghcr.io
   CONTAINER_REPO: ${{ github.repository }}
-  GO_VERSION: 1.23.4
+  GO_VERSION: 1.24.2
   # controller-gen with go >1.21 panics, but we can't update controller-gen itself
   GO_VERSION_DOC_CHECK: 1.21.3
   AZURE_AKS_CLUSTER_PREFIX: ig-ci-aks-
-  DEFAULT_DNSTESTER_IMAGE: ghcr.io/inspektor-gadget/dnstester:latest
-  DEFAULT_EBPF_BUILDER_IMAGE: ghcr.io/inspektor-gadget/ebpf-builder:latest
+  DEFAULT_DNSTESTER_IMAGE: ghcr.io/inspektor-gadget/dnstester:main
+  DEFAULT_GADGET_BUILDER_IMAGE: ghcr.io/inspektor-gadget/gadget-builder:main
   # With the recent update of docker/build-push-action to v6, this action
   # started creating docker build summary files (i.e. .dockerbuild).
   # Sadly, these files create troubles when trying to download artifact in the
@@ -44,7 +44,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION_DOC_CHECK }}
         cache: true
@@ -54,7 +54,7 @@ jobs:
         make manifests generate generate-documentation
         git diff --exit-code HEAD --
     - name: Check that there are not broken links
-      uses: gaurav-nelson/github-action-markdown-link-check@1b916f2cf6c36510a6059943104e3c42ce6c16bc # v1.0.16
+      uses: gaurav-nelson/github-action-markdown-link-check@3c3b66f1f7d0900e37b71eca45b63ea9eedfce31 # v1.0.17
       with:
         config-file: .github/workflows/mlc_config.json
         use-quiet-mode: 'yes'
@@ -68,7 +68,7 @@ jobs:
             - 'docs/**'
     - name: Setup Node
       if: steps.filter.outputs.docs == 'true'
-      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
+      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
       with:
         node-version: 18
     - name: Check website build
@@ -102,20 +102,16 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
       id: go
     - name: Lint
-      uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837 # v6.5.0
+      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
       with:
         # This version number must be kept in sync with Makefile lint one.
-        version: v1.63.4
+        version: v2.1.6
         working-directory: /home/runner/work/inspektor-gadget/inspektor-gadget
-        # Workaround to display the output:
-        # https://github.com/golangci/golangci-lint-action/issues/119#issuecomment-981090648
-        args: "--out-${NO_FUTURE}format colored-line-number"
-        skip-pkg-cache: true
 
   semgrep:
     name: semgrep
@@ -142,6 +138,8 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Check ebpf formatting
+        env:
+          GADGET_BUILDER: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
         run: |
           make clang-format
           changes="$(git status --porcelain)"
@@ -152,7 +150,7 @@ jobs:
           fi
       - name: Detect changes for ebpf objects
         env:
-          EBPF_BUILDER: ${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+          GADGET_BUILDER: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
         run: |
           make ebpf-objects
           changes="$(git status --porcelain)"
@@ -161,6 +159,8 @@ jobs:
             exit 1
           fi
       - name: Check that testdata is updated
+        env:
+          GADGET_BUILDER: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
         run: |
           make testdata
           changes="$(git status --porcelain)"
@@ -180,7 +180,7 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Check if added dependencies do not contain CVE.
-        uses: actions/dependency-review-action@3b139cfc5fae8b618d3eae3675e383bb1769c019 # v4.5.0
+        uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4.7.1
 
   build-clients:
     name: clients
@@ -200,7 +200,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -211,7 +211,7 @@ jobs:
       with:
         registry: ${{ env.REGISTRY }}
         container-image: ${{ env.CONTAINER_REPO }}
-    - uses: github/codeql-action/init@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+    - uses: github/codeql-action/init@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
       with:
         languages: go
     - name: Build ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}
@@ -245,11 +245,11 @@ jobs:
           ${{ matrix.client }}${dot_exe} LICENSE
         rm -rf "$platform"
     - name: CWE checks for ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}
-      uses: github/codeql-action/analyze@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+      uses: github/codeql-action/analyze@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
       with:
         category: ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}
     - name: Add ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz as artifact.
-      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
+      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
       with:
         name: ${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}-tar-gz
         path: /home/runner/work/inspektor-gadget/inspektor-gadget/${{ matrix.client }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
@@ -271,7 +271,7 @@ jobs:
       shell: bash
     - name: Cache BTFGen
       id: cache-btfgen
-      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
       with:
         path: pkg/btfgen/btfs
         # key is composed by
@@ -303,7 +303,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -315,7 +315,7 @@ jobs:
       shell: bash
     - name: Cache BTFGen
       id: cache-btfgen
-      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
       with:
         path: pkg/btfgen/btfs
         # key is composed by
@@ -325,7 +325,7 @@ jobs:
         key: btfgen-${{ matrix.platform }}-${{ steps.get-btfhub-head.outputs.head }}-${{ hashFiles('pkg/**/*.o') }}
     - name: Build ig-linux-${{ matrix.platform }}
       env:
-        EBPF_BUILDER: ${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+        GADGET_BUILDER: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
       run: |
         if [ "${{ matrix.platform }}" = 'arm64' ]; then
           sudo apt-get update
@@ -343,7 +343,7 @@ jobs:
           ig LICENSE
         rm -rf ${{ matrix.platform }}
     - name: Add ig-linux-${{ matrix.platform }}.tar.gz as artifact.
-      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
+      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
       with:
         name: ig-linux-${{ matrix.platform }}-tar-gz
         path: /home/runner/work/inspektor-gadget/inspektor-gadget/ig-linux-${{ matrix.platform }}.tar.gz
@@ -361,12 +361,12 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
       id: go
-    - uses: github/codeql-action/init@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+    - uses: github/codeql-action/init@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
       with:
         languages: go
     - name: Build ig-linux-${{ matrix.platform }} for CWE checks
@@ -378,7 +378,7 @@ jobs:
           -ldflags "-extldflags '-static'" \
           github.com/inspektor-gadget/inspektor-gadget/cmd/ig
     - name: CWE checks for ig-linux-${{ matrix.platform }}
-      uses: github/codeql-action/analyze@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+      uses: github/codeql-action/analyze@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
       with:
         category: ig-linux-${{ matrix.platform }}
 
@@ -392,19 +392,19 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
       id: go
-    - uses: github/codeql-action/init@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+    - uses: github/codeql-action/init@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
       with:
         languages: go
     - name: Build gadget-container-deps
       run: |
         make -C gadget-container
     - name: CWE checks for gadget-container-deps
-      uses: github/codeql-action/analyze@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+      uses: github/codeql-action/analyze@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
       with:
         category: gadget-container-deps
 
@@ -432,19 +432,19 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Set up QEMU
-      uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0
+      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
     - name: Set up Docker Buildx
       id: buildx
-      uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
+      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
     - name: Cache Docker layers
-      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
       with:
         path: /tmp/.buildx-cache
         key: ${{ runner.os }}-docker-${{ matrix.platform }}-${{ hashFiles('Dockerfiles/gadget.Dockerfile') }}
         restore-keys: |
           ${{ runner.os }}-docker-${{ matrix.platform }}-
     - name: Login to Container Registry
-      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
       with:
         registry: ${{ env.REGISTRY }}
         username: ${{ github.actor }}
@@ -462,7 +462,7 @@ jobs:
       shell: bash
     - name: Cache BTFGen
       id: cache-btfgen
-      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
       with:
         path: pkg/btfgen/btfs
         # key is composed by
@@ -474,7 +474,7 @@ jobs:
     # mode=max results in builder image layer of ~7GB because of btfhub files in a layer, which is too
     # large (gloabal limit 10GB) to work with GH caches. (TODO: if we can work with mode=max in future?)
     - name: Build gadget ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget/
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/gadget.Dockerfile
@@ -486,13 +486,13 @@ jobs:
         build-args: |
           VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
     - name: Publish gadget ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
-      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
+      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
       with:
         name: gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
         path: /tmp/gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
         retention-days: 1
     - name: Generate SBOM for gadget ${{ matrix.os }} ${{ matrix.platform }} image
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget/
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/gadget.Dockerfile
@@ -509,7 +509,7 @@ jobs:
     - name: Publish gadget ${{ matrix.os }} ${{ matrix.platform }} container image to registry
       id: publish-gadget-container-images
       if: github.event_name != 'pull_request'
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget/
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/gadget.Dockerfile
@@ -520,7 +520,7 @@ jobs:
           VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
     - name: Setup oras
       if: github.event_name != 'pull_request'
-      uses: oras-project/setup-oras@5c0b487ce3fe0ce3ab0d034e63669e426e294e4d # v1.2.2
+      uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3
     - name: Attach SBOM to container image
       if: github.event_name != 'pull_request'
       id: gadget-container-images-attach-sbom
@@ -582,19 +582,19 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Set up QEMU
-      uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0
+      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
     - name: Set up Docker Buildx
       id: buildx
-      uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
+      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
     - name: Cache Docker layers
-      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
       with:
         path: /tmp/.buildx-cache
         key: ${{ runner.os }}-docker-${{ matrix.platform }}-${{ hashFiles('Dockerfiles/ig.Dockerfile') }}
         restore-keys: |
           ${{ runner.os }}-docker-${{ matrix.platform }}-
     - name: Login to Container Registry
-      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
       with:
         registry: ${{ env.REGISTRY }}
         username: ${{ github.actor }}
@@ -612,7 +612,7 @@ jobs:
       shell: bash
     - name: Cache BTFGen
       id: cache-btfgen
-      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
       with:
         path: pkg/btfgen/btfs
         # key is composed by
@@ -621,7 +621,7 @@ jobs:
         # - hash of all bpf objects
         key: btfgen-${{ matrix.platform }}-${{ steps.get-btfhub-head.outputs.head }}-${{ hashFiles('pkg/**/*.o') }}
     - name: Build ig ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget/
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/ig.Dockerfile
@@ -632,15 +632,15 @@ jobs:
         platforms: ${{ matrix.os }}/${{ matrix.platform }}
         build-args: |
           VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
-          EBPF_BUILDER=${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+          GADGET_BUILDER=${{ needs.build-helper-images.outputs.gadget_builder_image }}
     - name: Publish ig ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
-      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
+      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
       with:
         name: ig-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
         path: /tmp/ig-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
         retention-days: 1
     - name: Generate ig ${{ matrix.os }} ${{ matrix.platform }} container image SBOM
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget/
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/ig.Dockerfile
@@ -651,14 +651,14 @@ jobs:
         platforms: ${{ matrix.os }}/${{ matrix.platform }}
         build-args: |
           VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
-          EBPF_BUILDER=${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+          GADGET_BUILDER=${{ needs.build-helper-images.outputs.gadget_builder_image }}
           BUILDKIT_SYNTAX=crazymax/dockerfile:sbom
     # build time will not be increased with this workflow because of internal cache
     # buildx is used here since it allows push-by-digest to avoid platform specific tags
     - name: Publish ig ${{ matrix.os }} ${{ matrix.platform }} container image to registry
       id: publish-ig-container-images
       if: github.event_name != 'pull_request'
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget/
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/Dockerfiles/ig.Dockerfile
@@ -667,10 +667,10 @@ jobs:
         platforms: ${{ matrix.os }}/${{ matrix.platform }}
         build-args: |
           VERSION=${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
-          EBPF_BUILDER=${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+          GADGET_BUILDER=${{ needs.build-helper-images.outputs.gadget_builder_image }}
     - name: Setup oras
       if: github.event_name != 'pull_request'
-      uses: oras-project/setup-oras@5c0b487ce3fe0ce3ab0d034e63669e426e294e4d # v1.2.2
+      uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3
     - name: Attach SBOM to container image
       if: github.event_name != 'pull_request'
       id: ig-container-images-attach-sbom
@@ -716,7 +716,7 @@ jobs:
         platform: [amd64, arm64]
     steps:
       - name: Set up Go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
           go-version: ${{ env.GO_VERSION }}
           cache: true
@@ -725,7 +725,7 @@ jobs:
         run: |
           go install github.com/Zxilly/go-size-analyzer/cmd/gsa@e47aa2561e70b937f2be7441b2eeca984ff60e8b # v1.7.6
       - name: Get ig-linux-${{matrix.platform}}.tar.gz from artifact
-        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
         with:
           name: ig-linux-${{matrix.platform}}-tar-gz
           path: /home/runner/work/inspektor-gadget/
@@ -755,20 +755,20 @@ jobs:
       - build-and-push-gadgets
     steps:
       - name: Set up Go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
-          go-version: '1.23.4'
+          go-version: ${{ env.GO_VERSION }}
           cache: true
         id: go
       - name: Get ig-linux-amd64.tar.gz from artifact.
-        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
         with:
           name: ig-linux-amd64-tar-gz
           path: /home/runner/work/inspektor-gadget/
       - name: Unpack ig-linux-amd64.tar.gz & Analyze memory
         run: |
           tar zxvf /home/runner/work/inspektor-gadget/ig-linux-amd64.tar.gz
-          sudo ./ig run trace_dns:latest --pprof-addr=localhost:6060 &
+          sudo ./ig run trace_dns:main --pprof-addr=localhost:6060 &
           sleep 10
           curl http://localhost:6060/debug/pprof/heap | tee heap.out
           go tool pprof -top -inuse_space ./ig heap.out | tee inuse_space.txt
@@ -809,12 +809,12 @@ jobs:
         platform: [ amd64 ]
     steps:
       - name: Download gadget ${{ matrix.os }} ${{ matrix.platform }} container image as artifacts
-        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
         with:
           name: gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
           path: ${{ github.workspace }}
       - name: Scan gadget ${{ matrix.os }} ${{ matrix.platform }} container image
-        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 # v0.29.0
+        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
         with:
           input: gadget-container-image-${{ matrix.os }}-${{ matrix.platform }}.tar
           format: 'table'
@@ -842,9 +842,9 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Set up Docker Buildx
-        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
+        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
       - name: Login to Container Registry
-        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
         with:
           registry: ${{ env.REGISTRY }}
           username: ${{ github.actor }}
@@ -910,9 +910,9 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Set up Docker Buildx
-        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
+        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
       - name: Login to Container Registry
-        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
         with:
           registry: ${{ env.REGISTRY }}
           username: ${{ github.actor }}
@@ -970,7 +970,7 @@ jobs:
       - check-secrets
     outputs:
       dnstester_image: ${{ steps.image-tag.outputs.dnstester }}
-      ebpf_builder_image: ${{ steps.image-tag.outputs.ebpf-builder }}
+      gadget_builder_image: ${{ steps.image-tag.outputs.gadget-builder }}
     permissions:
       # allow publishing container image
       # in case of public fork repo/packages permissions will always be read
@@ -984,42 +984,33 @@ jobs:
             context: "tools/dnstester"
             dockerfile: "tools/dnstester/Dockerfile"
             platform: "linux/amd64,linux/arm64"
-            filter-patterns:
-              - "tools/dnstester/*"
-          - name: "ebpf-builder"
+            key-files: "tools/dnstester/*"
+          - name: "gadget-builder"
             context: "/home/runner/work/inspektor-gadget/inspektor-gadget"
-            dockerfile: "Dockerfiles/ebpf-builder.Dockerfile"
+            dockerfile: "Dockerfiles/gadget-builder.Dockerfile"
             platform: "linux/amd64,linux/arm64"
-            filter-patterns:
-              - "include/**"
-              - "Dockerfiles/ebpf-builder.Dockerfile"
-              - "cmd/common/image/Makefile.build"
+            key-files: |
+              include/**
+              Dockerfiles/gadget-builder.Dockerfile
+              cmd/common/image/Makefile.build
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
-    - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
-      id: filter
-      with:
-        # https://github.com/rhysd/actionlint/blob/main/docs/checks.md#check-type-check-expression
-        filters: |
-          pattern: ${{ toJson(matrix.image.filter-patterns) }}
-    - name: Check if we should build helpers
-      id: check-build-helpers
-      # always build the images on release, merge to main or to a release branch
-      if: steps.filter.outputs.pattern == 'true' || startsWith(github.ref_name, 'v') || startsWith(github.ref_name, 'release-') || github.ref_name == 'main'
-      run: |
-          echo "build=true" >> $GITHUB_OUTPUT
     - name: Set up Docker Buildx
-      if: steps.check-build-helpers.outputs.build == 'true'
-      uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
+      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
+    - name: Cache Docker layers
+      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
+      with:
+        path: /tmp/.buildx-cache
+        key: ${{ runner.os }}-docker-${{ matrix.image.name }}-${{ hashFiles(matrix.image.key-files) }}
+        restore-keys: |
+          ${{ runner.os }}-docker-${{ matrix.image.name}}-
     - name: Login to Container Registry
-      if: steps.check-build-helpers.outputs.build == 'true'
-      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
       with:
         registry: ${{ env.REGISTRY }}
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
     - name: Set container repository and determine image tag
-      if: steps.check-build-helpers.outputs.build == 'true'
       id: set-repo-determine-image-tag
       uses: ./.github/actions/set-container-repo-and-determine-image-tag
       with:
@@ -1027,8 +1018,7 @@ jobs:
         container-image: ${{ github.repository_owner }}/${{ matrix.image.name }}
     - name: Build ${{ matrix.image.name }} image
       id: build-image
-      if: steps.check-build-helpers.outputs.build == 'true'
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: ${{ matrix.image.context }}
         file: ${{ matrix.image.dockerfile }}
@@ -1037,6 +1027,8 @@ jobs:
         # https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository
         push: ${{ vars.PUSH_HELPERS == 'ENABLE_PUSH_HELPERS' }}
         tags: ${{ steps.set-repo-determine-image-tag.outputs.container-repo }}:${{ steps.set-repo-determine-image-tag.outputs.image-tag }}
+        cache-from: type=local,src=/tmp/.buildx-cache
+        cache-to: type=local,dest=/tmp/.buildx-cache-new
         platforms: ${{ matrix.image.platform }}
     - name: Save ${{ matrix.image.name }} image tag output
       id: image-tag
@@ -1049,8 +1041,8 @@ jobs:
         else
           if [ ${{ matrix.image.name }} == "dnstester" ]; then
             image=${{ env.DEFAULT_DNSTESTER_IMAGE }}
-          elif [ ${{ matrix.image.name }} == "ebpf-builder" ]; then
-            image=${{ env.DEFAULT_EBPF_BUILDER_IMAGE }}
+          elif [ ${{ matrix.image.name }} == "gadget-builder" ]; then
+            image=${{ env.DEFAULT_GADGET_BUILDER_IMAGE }}
           else
             >&2 echo "No default image for ${{ matrix.image.name }}!"
             exit 1
@@ -1059,12 +1051,19 @@ jobs:
 
         echo "${{ matrix.image.name }}=${image}" >> $GITHUB_OUTPUT
     - name: Sign ${{ matrix.image.name }} image
-      if: steps.check-build-helpers.outputs.build == 'true' && needs.check-secrets.outputs.cosign == 'true' && vars.PUSH_HELPERS == 'ENABLE_PUSH_HELPERS'
+      if:  needs.check-secrets.outputs.cosign == 'true' && vars.PUSH_HELPERS == 'ENABLE_PUSH_HELPERS'
       uses: ./.github/actions/sign-container-image
       with:
         password: '${{ secrets.COSIGN_PASSWORD }}'
         private_key: '${{ secrets.COSIGN_PRIVATE_KEY }}'
         image: "${{ steps.set-repo-determine-image-tag.outputs.container-repo }}@${{ steps.build-image.outputs.digest }}"
+    # old cache entries aren’t deleted, so the cache size keeps growing
+    # remove old cache and move new cache to cache path to workaround the issue
+    # https://github.com/docker/build-push-action/issues/252
+    - name: Move ig container image cache to correct location
+      run: |
+          rm -rf /tmp/.buildx-cache
+          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
 
   build-examples:
     name: example
@@ -1083,9 +1082,9 @@ jobs:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Set up Docker Buildx
       id: buildx
-      uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
+      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
     - name: Login to Container Registry
-      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
       with:
         registry: ${{ env.REGISTRY }}
         username: ${{ github.actor }}
@@ -1097,7 +1096,7 @@ jobs:
         registry: ${{ env.REGISTRY }}
         container-image: ${{ env.CONTAINER_REPO }}
     - name: Build example container
-      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
+      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
       with:
         context: /home/runner/work/inspektor-gadget/inspektor-gadget
         file: /home/runner/work/inspektor-gadget/inspektor-gadget/examples/${{ matrix.example }}/Dockerfile
@@ -1111,7 +1110,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1137,13 +1136,13 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
       id: go
     - name: Get ig-linux-amd64.tar.gz from artifact
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
       with:
         name: ig-linux-amd64-tar-gz
         path: /home/runner/work/inspektor-gadget/
@@ -1165,7 +1164,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1261,11 +1260,45 @@ jobs:
       run: |
         make -C charts package
     - name: Upload Helm charts
-      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
+      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
       with:
         name: gadget-charts-tgz
         path: charts/bin/*.tgz
 
+  publish-helm-charts:
+    name: Publish Helm charts
+    # level: 1
+    if: github.event_name != 'pull_request'
+    needs: package-helm-charts
+    runs-on: ubuntu-latest
+    permissions:
+      # allow publishing helm charts
+      # in case of public fork repo/packages permissions will always be read
+      contents: read
+      packages: write
+    steps:
+    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
+    - name: Login to Container Registry
+      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
+      with:
+        registry: ${{ env.REGISTRY }}
+        username: ${{ github.actor }}
+        password: ${{ secrets.GITHUB_TOKEN }}
+    - name: Install Helm
+      uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
+      with:
+        token: ${{ secrets.GITHUB_TOKEN }}
+    - name: Download Helm charts
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
+      with:
+        name: gadget-charts-tgz
+    - name: Publish Helm charts
+      run: |
+        # Final name of the chart will be REGISTRY/CONTAINER_REPO/charts/CHART_NAME:CHART_VERSION
+        # where CHART_NAME and CHART_VERSION are derived from the Chart.yaml packaged in the tgz
+        helm push gadget-*.tgz \
+          oci://${{ env.REGISTRY }}/${{ env.CONTAINER_REPO }}/charts
+
   test-ig:
     name: Unit tests for ig
     # level: 0
@@ -1273,7 +1306,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1315,13 +1348,13 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
     - name: Run component tests
       env:
-        EBPF_BUILDER: ${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+        GADGET_BUILDER: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
       run: |
         make component-tests
 
@@ -1409,7 +1442,7 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Install Cosign
-        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1
+        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
       - name: Check if public key is up-to-date.
         env:
           COSIGN_PASSWORD: '${{ secrets.COSIGN_PASSWORD }}'
@@ -1425,7 +1458,7 @@ jobs:
   test-integration-k8s-ig:
     name: Test ig w/ k8s
     # level: 3
-    needs: [ test-unit, test-ig, build-ig, build-helper-images ]
+    needs: [ test-ig, build-ig, build-helper-images ]
     runs-on: ubuntu-latest
     strategy:
       fail-fast: false
@@ -1433,13 +1466,19 @@ jobs:
         runtime: [ docker, containerd, cri-o ]
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
+      - name: Set container repository and determine image tag
+        id: set-repo-determine-image-tag
+        uses: ./.github/actions/set-container-repo-and-determine-image-tag
+        with:
+          registry: ${{ env.REGISTRY }}
+          container-image: ${{ env.CONTAINER_REPO }}
       - name: Setup go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
           go-version: ${{ env.GO_VERSION }}
           cache: true
       - name: Get ig-linux-amd64.tar.gz from artifact.
-        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
         with:
           name: ig-linux-amd64-tar-gz
           path: /home/runner/work/inspektor-gadget/
@@ -1455,6 +1494,8 @@ jobs:
         id: integration-tests
         env:
           DNSTESTER_IMAGE: ${{ needs.build-helper-images.outputs.dnstester_image }}
+          GADGET_REPOSITORY: ${{ steps.set-repo-determine-image-tag.outputs.gadget-repository }}
+          GADGET_TAG: ${{ steps.set-repo-determine-image-tag.outputs.gadget-tag }}
         run: |
           set -o pipefail
           make -C integration/k8s \
@@ -1485,7 +1526,7 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Login to Container Registry
-        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
         with:
           registry: ${{ env.REGISTRY }}
           username: ${{ github.actor }}
@@ -1497,7 +1538,7 @@ jobs:
           registry: ${{ env.REGISTRY }}
           container-image: ${{ env.CONTAINER_REPO }}
       - name: Get ig-linux-amd64.tar.gz from artifact.
-        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
         with:
           name: ig-linux-amd64-tar-gz
           path: /home/runner/work/inspektor-gadget/
@@ -1507,14 +1548,14 @@ jobs:
           sudo mv ig /usr/bin/ig
       - name: Install Cosign
         if: needs.check-secrets.outputs.cosign == 'true'
-        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1
-      - name: Verify eBPF builder image
+        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
+      - name: Verify gadget builder image
         if: needs.check-secrets.outputs.cosign == 'true'
         run: |
-          cosign verify --key pkg/resources/inspektor-gadget.pub ${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+          cosign verify --key pkg/resources/inspektor-gadget.pub ${{ needs.build-helper-images.outputs.gadget_builder_image }}
       - name: Build gadgets
         env:
-          BUILDER_IMAGE: ${{ needs.build-helper-images.outputs.ebpf_builder_image }}
+          BUILDER_IMAGE: ${{ needs.build-helper-images.outputs.gadget_builder_image }}
           GADGET_REPOSITORY: ${{ steps.set-repo-determine-image-tag.outputs.gadget-repository }}
           GADGET_TAG: ${{ steps.set-repo-determine-image-tag.outputs.gadget-tag }}
         run: |
@@ -1553,7 +1594,7 @@ jobs:
           registry: ${{ env.REGISTRY }}
           container-image: ${{ env.CONTAINER_REPO }}
       - name: Setup go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
           go-version: ${{ env.GO_VERSION }}
           cache: true
@@ -1601,7 +1642,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1613,7 +1654,7 @@ jobs:
         registry: ${{ env.REGISTRY }}
         container-image: ${{ env.CONTAINER_REPO }}
     - name: Get ig-linux-amd64.tar.gz from artifact.
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
       with:
         name: ig-linux-amd64-tar-gz
         path: /home/runner/work/inspektor-gadget/
@@ -1675,7 +1716,7 @@ jobs:
         registry: ${{ env.REGISTRY }}
         container-image: ${{ env.CONTAINER_REPO }}
     - name: Get ig-linux-amd64.tar.gz from artifact.
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
       with:
         name: ig-linux-amd64-tar-gz
         path: /home/runner/work/inspektor-gadget/
@@ -1684,7 +1725,7 @@ jobs:
         tar zxvf /home/runner/work/inspektor-gadget/ig-linux-amd64.tar.gz
         sudo mv ig /usr/bin/ig
     - name: Get gadgetctl-linux-amd64.tar.gz from artifact.
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
       with:
         name: gadgetctl-linux-amd64-tar-gz
         path: /home/runner/work/inspektor-gadget/
@@ -1693,7 +1734,7 @@ jobs:
         tar zxvf /home/runner/work/inspektor-gadget/gadgetctl-linux-amd64.tar.gz
         sudo mv gadgetctl /usr/bin/gadgetctl
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1725,7 +1766,6 @@ jobs:
     name: Test ig w/o k8s
     # level: 3
     needs:
-      - test-unit
       - test-ig
       - build-ig
       - build-helper-images
@@ -1738,12 +1778,12 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Setup go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
           go-version: ${{ env.GO_VERSION }}
           cache: true
       - name: Get ig-linux-amd64.tar.gz from artifact.
-        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
         with:
           name: ig-linux-amd64-tar-gz
           path: /home/runner/work/inspektor-gadget/
@@ -1774,7 +1814,6 @@ jobs:
     # level: 4
     needs:
       - check-secrets
-      - test-unit
       - build-clients
       - build-gadget-container-images
       - publish-gadget-images-manifest
@@ -1797,7 +1836,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1807,7 +1846,7 @@ jobs:
       with:
         registry: ${{ env.REGISTRY }}
         container-image: ${{ env.CONTAINER_REPO }}
-    - uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
+    - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
       name: Login to Azure
       with:
         client-id: ${{ secrets.AZURE_AKS_CLIENT_ID }}
@@ -1833,7 +1872,7 @@ jobs:
         az extension add --name aks-preview
 
         az aks create -l eastus2 -g "${AZURE_AKS_RESOURCE_GROUP}" -n ${{ env.CLUSTER_NAME }} -s "$node_size" --os-sku ${{ matrix.os-sku }} --no-ssh-key
-    - uses: azure/aks-set-context@feeca6405be94202afcb1c395616ff29b1811b9f # v4.0.2
+    - uses: azure/aks-set-context@c7eb093e5a5d47caa333f64974d5fd1cd4bf069d # v4.0.3
       name: Set AKS cluster ${{ env.CLUSTER_NAME }} context
       with:
         cluster-name: ${{ env.CLUSTER_NAME }}
@@ -1850,7 +1889,7 @@ jobs:
         gadget_tag: ${{ steps.set-repo-determine-image-tag.outputs.gadget-tag }}
         test_summary_suffix: "${{ matrix.os-sku }}-${{ matrix.arch }}"
     # This step ensures we get fresh credentials before removing the cluster
-    - uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
+    - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
       if: always()
       name: Login to Azure
       with:
@@ -1872,7 +1911,6 @@ jobs:
     # level: 4
     needs:
       - check-secrets
-      - test-unit
       - build-clients
       - build-gadget-container-images
       - publish-gadget-images-manifest
@@ -1886,7 +1924,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1922,7 +1960,6 @@ jobs:
     name: Integration tests on EKS
     # level: 4
     needs:
-      - test-unit
       - build-clients
       - build-gadget-container-images
       - publish-gadget-images-manifest
@@ -1943,7 +1980,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -1967,7 +2004,7 @@ jobs:
         tar -xzf "eksctl_${PLATFORM}.tar.gz" -C /tmp && rm "eksctl_${PLATFORM}.tar.gz"
         sudo mv /tmp/eksctl /usr/local/bin
     - name: Configure AWS credentials
-      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
+      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
       with:
         role-to-assume: ${{ vars.AWS_ROLE }}
         aws-region: ${{ env.AWS_REGION }}
@@ -2003,7 +2040,6 @@ jobs:
     if: needs.check-secrets.outputs.gke == 'true'
     needs:
       - check-secrets
-      - test-unit
       - build-clients
       - build-gadget-container-images
       - publish-gadget-images-manifest
@@ -2028,7 +2064,7 @@ jobs:
     steps:
       - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       - name: Setup go
-        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
         with:
           go-version: ${{ env.GO_VERSION }}
           cache: true
@@ -2039,7 +2075,7 @@ jobs:
           registry: ${{ env.REGISTRY }}
           container-image: ${{ env.CONTAINER_REPO }}
       - name: Authenticate with GKE
-        uses: google-github-actions/auth@71f986410dfbc7added4569d411d040a91dc6935 # v2.1.8
+        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
         with:
           project_id: ${{ secrets.GKE_PROJECT }}
           service_account: ${{ secrets.GKE_SERVICE_ACCOUNT }}
@@ -2061,7 +2097,7 @@ jobs:
           gcloud container clusters create ${{ env.CLUSTER_NAME }} --project ${{ secrets.GKE_PROJECT }} \
             --region ${{ matrix.flavor.region }} --machine-type ${{ matrix.flavor.machine_type }} --num-nodes 1 --disk-size 50 $extra_args
       - name: Set GKE cluster ${{ env.CLUSTER_NAME }} context
-        uses: google-github-actions/get-gke-credentials@7a108e64ed8546fe38316b4086e91da13f4785e1 # v2.3.1
+        uses: google-github-actions/get-gke-credentials@d0cee45012069b163a631894b98904a9e6723729 # v2.3.3
         with:
           cluster_name: ${{ env.CLUSTER_NAME }}
           location: ${{ matrix.flavor.region }}
@@ -2100,7 +2136,6 @@ jobs:
     name: Integr. tests
     # level: 3
     needs:
-      - test-unit
       - build-clients
       - build-gadget-container-images
       - build-helper-images
@@ -2114,7 +2149,7 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -2124,7 +2159,7 @@ jobs:
         runtime: ${{ matrix.runtime }}
         multi-node: true
     - name: Get gadget-container-image-linux-amd64.tar from artifact.
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
       with:
         name: gadget-container-image-linux-amd64.tar
         path: /home/runner/work/inspektor-gadget/
@@ -2175,10 +2210,10 @@ jobs:
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Get all reports
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
       with:
-        name: "test-reports"
-    - name: Store test reports
+        pattern: "test-reports-*-*"
+    - name: Store test report
       shell: bash {0}
       run: ./tools/store-test-reports.sh
       env:
@@ -2230,15 +2265,15 @@ jobs:
         perl -pi -e 's@(image:) ".+\"@$1 "$ENV{IMAGE}"@; s@"latest"@"$ENV{IMAGE_TAG}"@;' "inspektor-gadget-${REF_NAME}.yaml"
     - name: Create Draft Release
       id: create_release
-      uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
+      uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
       with:
         token: ${{ secrets.GITHUB_TOKEN }}
         name: Release ${{ github.ref_name }}
         draft: true
     - name: Get all artifacts.
-      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
+      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
     - name: Setup go
-      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
+      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
       with:
         go-version: ${{ env.GO_VERSION }}
         cache: true
@@ -2277,15 +2312,6 @@ jobs:
         for i in kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz ig-*-*-tar-gz/ig-*-*.tar.gz gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz; do
           mv $i $(dirname $i)/$(basename $i .tar.gz)-$REF_NAME.tar.gz
         done
-    - name: Compute checksums for all artifacts
-      shell: bash
-      env:
-        REF_NAME: ${{ github.ref_name }}
-      run: |
-        for i in kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz ig-*-*-tar-gz/ig-*-*.tar.gz gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz inspektor-gadget-$REF_NAME.yaml ig_packages/*; do
-          hash=$(sha256sum $i | cut -d' ' -f1)
-          echo "${hash}  $(basename $i)" >> SHA256SUMS
-        done
     - name: Install cyclonedx-gomod
       uses: CycloneDX/gh-gomod-generate-sbom@efc74245d6802c8cefd925620515442756c70d8f # v2.0.0
     - name: Compute SBOM for all binary artifacts
@@ -2305,9 +2331,18 @@ jobs:
 
           rm -fr "$temp_dir"
         done
+    - name: Compute checksums for all artifacts
+      shell: bash
+      env:
+        REF_NAME: ${{ github.ref_name }}
+      run: |
+        for i in kubectl-gadget-*-*-tar-gz/kubectl-gadget-*-*.tar.gz ig-*-*-tar-gz/ig-*-*.tar.gz gadgetctl-*-*-tar-gz/gadgetctl-*-*.tar.gz inspektor-gadget-$REF_NAME.yaml ig_packages/* sbom/*.bom.json; do
+          hash=$(sha256sum $i | cut -d' ' -f1)
+          echo "${hash}  $(basename $i)" >> SHA256SUMS
+        done
     - name: Install Cosign
       if: needs.check-secrets.outputs.cosign == 'true'
-      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1
+      uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
     - name: Sign checksums file
       if: needs.check-secrets.outputs.cosign == 'true'
       shell: bash
@@ -2323,7 +2358,7 @@ jobs:
         # artifact, so people can verify our signature.
         cosign public-key --key env://COSIGN_PRIVATE_KEY > inspektor-gadget.pub
     - name: Login to Container Registry
-      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
+      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
       with:
         registry: ${{ env.REGISTRY }}
         username: ${{ github.actor }}
diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
index 387e8677f..77fc709b4 100644
--- a/.github/workflows/release.yml
+++ b/.github/workflows/release.yml
@@ -1,4 +1,6 @@
 name: Inspektor Gadget Release
+env:
+  REGISTRY: ghcr.io
 on:
   release:
     types: [published]
@@ -14,6 +16,7 @@ jobs:
       # https://github.com/peter-evans/create-pull-request#token
       contents: write
       pull-requests: write
+      packages: write
     steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     - name: Update new version in krew-index
@@ -51,7 +54,7 @@ jobs:
         echo "EOF" >> $GITHUB_OUTPUT
     - name: Create PR
       if: ${{ steps.bump_gadgets.outputs.changes != '' }}
-      uses: peter-evans/create-pull-request@67ccf781d68cd99b580ae25a5c18a1cc84ffff1f # v7.0.6
+      uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
       with:
         token: ${{ secrets.GITHUB_TOKEN }}
         commit-message: 'Artifact Hub: Update gadgets version to v${{ steps.bump_gadgets.outputs.version }}'
@@ -82,3 +85,15 @@ jobs:
           In case of problems, please check the logs in the [Artifact Hub control panel](https://artifacthub.io/control-panel).
 
           Best regards.
+    - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
+      with:
+        registry: ${{ env.REGISTRY }}
+        username: ${{ github.actor }}
+        password: ${{ secrets.GITHUB_TOKEN }}
+    - uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4
+    - name: Update latest tag
+      env:
+        IMAGE_TAG: ${{ github.event.release.tag_name }}
+        GADGET_TAG: ${{ github.event.release.tag_name }}
+      run:
+        make update-latest-tag
diff --git a/.github/workflows/scorecard-analysis.yml b/.github/workflows/scorecard-analysis.yml
index 59b4ae287..b714039bd 100644
--- a/.github/workflows/scorecard-analysis.yml
+++ b/.github/workflows/scorecard-analysis.yml
@@ -44,7 +44,7 @@ jobs:
       # uploads of run results in SARIF format to the repository Actions tab.
       # https://docs.github.com/en/actions/advanced-guides/storing-workflow-data-as-artifacts
       - name: "Upload artifact"
-        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
+        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
         with:
           name: SARIF file
           path: results.sarif
@@ -53,6 +53,6 @@ jobs:
       # Upload the results to GitHub's code scanning dashboard (optional).
       # Commenting out will disable upload of results to your repo's Code Scanning dashboard
       - name: "Upload to code-scanning"
-        uses: github/codeql-action/upload-sarif@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3.28.9
+        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
         with:
           sarif_file: results.sarif
diff --git a/.golangci.yml b/.golangci.yml
index cb0648490..36c8d30d8 100644
--- a/.golangci.yml
+++ b/.golangci.yml
@@ -1,53 +1,54 @@
-output:
-  sort-results: true
-
+version: "2"
 run:
-  go: "1.23.4"
-  timeout: 10m
+  go: 1.24.2
   build-tags:
-  - docs
-
+    - docs
+linters:
+  default: none
+  enable:
+    - errorlint
+    - staticcheck
+  settings:
+    errorlint:
+      errorf: true
+      asserts: true
+      comparison: true
+    staticcheck:
+      checks:
+        - all
+  exclusions:
+    generated: lax
+    rules:
+      # Ignore check: Packages must have a package comment
+      - linters:
+          - staticcheck
+        text: 'ST1000: at least one file in a package should have a package comment'
+      # Ignore rule about ID vs Id: https://github.com/golang/lint/issues/89
+      - linters:
+          - staticcheck
+        text: 'ST1003:'
+      - linters:
+          - staticcheck
+        text: Switch to image-based gadgets instead
+    paths:
+      - third_party$
+      - builtin$
+      - examples$
 issues:
-  exclude-use-default: false
-  max-same-issues: 0
   max-issues-per-linter: 0
-  exclude-rules:
-    # Ignore check: Packages must have a package comment
-    - text: "ST1000: at least one file in a package should have a package comment"
-      linters:
-        - stylecheck
-    # Ignore rule about ID vs Id: https://github.com/golang/lint/issues/89
-    - text: "ST1003:"
-      linters:
-        - stylecheck
-    - text: "Switch to image-based gadgets instead"
-      linters:
-        - staticcheck
+  max-same-issues: 0
 
-linters:
-  disable-all: true
+formatters:
   enable:
-  - gofumpt
-  - stylecheck
-  - staticcheck
-  - errorlint
-  - goimports
-
-linters-settings:
-  staticcheck:
-    checks: ["all"]
-  stylecheck:
-    checks: ["all"]
-  errorlint:
-    # https://github.com/polyfloyd/go-errorlint
-    # Check whether fmt.Errorf uses the %w verb for formatting errors.
-    errorf: true
-    # Check for plain type assertions and type switches (errors.As must be used).
-    asserts: true
-    # Check for plain error comparisons (errors.Is must be used)
-    comparison: true
-  goimports:
-    # A comma-separated list of prefixes, which, if set, checks import paths
-    # with the given prefixes are grouped after 3rd-party packages.
-    # Default: ""
-    local-prefixes: github.com/inspektor-gadget/inspektor-gadget
+    - gofumpt
+    - goimports
+  settings:
+    goimports:
+      local-prefixes:
+        - github.com/inspektor-gadget/inspektor-gadget
+  exclusions:
+    generated: lax
+    paths:
+      - third_party$
+      - builtin$
+      - examples$
diff --git a/ADOPTERS.md b/ADOPTERS.md
index ebcc99c72..704497473 100644
--- a/ADOPTERS.md
+++ b/ADOPTERS.md
@@ -11,6 +11,7 @@ If you would like your organization or project to be added to this list, please
 | Adopter  | Description |
 |----------|-------------|
 | [Causely](https://causely.ai/) | Causely is an autonomous service reliability platform. Causely uses causal reasoning to automate root cause analysis, prevent SLO violations and gain 360 degree shared context. Causely uses Inspektor Gadget for its DNS capabilities. |
+| [Headlamp](https://headlamp.dev/) | Headlamp is an open-source Kubernetes UI with an [Inspektor Gadget plugin](https://github.com/inspektor-gadget/headlamp-plugin) to [explore and visualize](https://inspektor-gadget.io/blog/2025/03/inspektor-gadget-plugin-for-headlamp) the different gadgets in the Kubernetes environment. |
 | [Kubescape](https://kubescape.io/) | Kubescape is an open-source Kubernetes security platform that provides comprehensive security coverage. Kubescape was created by [ARMO](https://www.armosec.io/) and is a [Cloud Native Computing Foundation (CNCF) sandbox project](https://www.cncf.io/sandbox-projects/). Kubescape node agent [uses the Inspektor Gadget library](https://kubescape.io/docs/operator/relevancy/#linux-kernel). |
 | [Microsoft Defender for Containers](https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-containers-introduction) | Microsoft Defender for Containers [leverages Inspektor Gadget applications](https://techcommunity.microsoft.com/t5/microsoft-defender-for-cloud/ebpf-powered-threat-protection-using-inspektor-gadget/ba-p/4115873) running in Kubernetes by detecting vulnerabilities at runtime. |
 | [Protect AI](https://protectai.com/) | Protect AI [uses Inspektor Gadget and eBPF](https://protectai.com/blog/how-protect-ai-is-shaping-the-future-of-llm-security-with-ebpf) for its capabilities to provide events for container lifecycle insights. |
diff --git a/Dockerfiles/ebpf-builder.Dockerfile b/Dockerfiles/ebpf-builder.Dockerfile
deleted file mode 100644
index 3786a7a4d..000000000
--- a/Dockerfiles/ebpf-builder.Dockerfile
+++ /dev/null
@@ -1,78 +0,0 @@
-ARG CLANG_LLVM_VERSION=18
-ARG BPFTOOL_VERSION=v7.3.0
-ARG LIBBPF_VERSION=v1.3.0
-ARG TINYGO_VERSION=0.35.0
-
-# Args need to be redefined on each stage
-# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
-
-FROM golang:1.23.6@sha256:927112936d6b496ed95f55f362cc09da6e3e624ef868814c56d55bd7323e0959 AS builder
-ARG BPFTOOL_VERSION
-ARG LIBBPF_VERSION
-
-# Let's install libbpf headers
-RUN git clone --branch ${LIBBPF_VERSION} --depth 1 https://github.com/libbpf/libbpf.git \
-	&& cd libbpf/src && make install_headers
-
-	# Install bpftool
-RUN \
-	ARCH=$(dpkg --print-architecture) && \
-	wget --quiet https://github.com/libbpf/bpftool/releases/download/${BPFTOOL_VERSION}/bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz && \
-	wget --quiet https://github.com/libbpf/bpftool/releases/download/${BPFTOOL_VERSION}/bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz.sha256sum && \
-	echo $(cat bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz.sha256sum) | sha256sum -c && \
-	tar -C /usr/local/bin -xzf bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz && \
-	chmod +x /usr/local/bin/bpftool
-
-FROM golang:1.23.6@sha256:927112936d6b496ed95f55f362cc09da6e3e624ef868814c56d55bd7323e0959
-ARG CLANG_LLVM_VERSION
-ARG TINYGO_VERSION
-# libc-dev is needed for various headers, among others
-# /usr/include/arch-linux-gnu/asm/types.h.
-# libc-dev-i386 is needed on amd64 to provide <gnu/stubs-32.h>.
-# We make clang aware of these files through CFLAGS in Makefile.
-# lsb-release wget software-properties-common gnupg are needed by llvm.sh script
-# xz-utils is needed by btfgen makefile
-RUN apt-get update \
-	&& apt-get install -y libc-dev lsb-release wget gnupg xz-utils \
-	&& if [ "$(dpkg --print-architecture)" = 'amd64' ]; then apt-get install -y libc6-dev-i386; fi
-
-# Hack to install software-properties-common separately because of dpkg errors
-RUN apt install -y -f software-properties-common || sudo dpkg --configure -a && apt install -y -f software-properties-common|| sudo dpkg --configure -a && apt install -y -f software-properties-common || sudo dpkg --configure -a && apt install -y -f software-properties-common || sudo dpkg --configure -a && apt install -y -f software-properties-common
-
-# Install clang 15
-RUN wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh $CLANG_LLVM_VERSION all \
-	&& update-alternatives --install /usr/local/bin/llvm-strip llvm-strip $(which llvm-strip-$CLANG_LLVM_VERSION) 100 \
-	&& update-alternatives --install /usr/local/bin/clang clang $(which clang-$CLANG_LLVM_VERSION) 100 \
-	&& update-alternatives --install /usr/local/bin/clang-format clang-format $(which clang-format-$CLANG_LLVM_VERSION) 100
-
-COPY --from=builder /usr/include/bpf /usr/include/bpf
-COPY --from=builder /usr/local/bin/bpftool /usr/local/bin/bpftool
-
-# Install tinygo
-RUN \
-	DEB=tinygo.deb && \
-	ARCH=$(dpkg --print-architecture) && \
-	wget --quiet https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_${ARCH}.deb -O $DEB && \
-	if [ "${ARCH}" = 'amd64' ] ; then \
-		SHA='ca33e87d1716ba58890d6cd6e8dd33c685427724c53e64fc4237bcf3101747a35d5059718e88dce9095608585898a4a85d36206daf7e290af5bcf9c2a9230ab3'; \
-	elif [ "${ARCH}" = 'arm64' ] ; then \
-		SHA='d6cebaf444bed7a1a8d39c04e58d2138418776b75b87110c02299baa1d59c2cb4c835f685c0829eead6fc4b89bffe1ede922db408755c30e57c460d31ed54491'; \
-	else \
-		echo "${ARCH} is not supported" 2>&1 ; \
-		exit 1; \
-	fi && \
-	echo $SHA $DEB | sha512sum -c && \
-	dpkg -i $DEB && \
-	rm -f $DEB
-
-# To avoid hitting this:
-# failed to initialize build cache at /.cache/go-build: mkdir /.cache: permission denied
-# when run as non root.
-ENV GOCACHE=/tmp/
-# Create a directory which can be read, written and executed by everyone, this
-# avoid trouble when running as non root.
-RUN mkdir -m 777 /work
-WORKDIR /work
-
-# Add files used to build containerized gadgets
-ADD include /usr/include
diff --git a/Dockerfiles/gadget-builder.Dockerfile b/Dockerfiles/gadget-builder.Dockerfile
new file mode 100644
index 000000000..b1be6bec0
--- /dev/null
+++ b/Dockerfiles/gadget-builder.Dockerfile
@@ -0,0 +1,83 @@
+ARG CLANG_LLVM_VERSION=18
+ARG BPFTOOL_VERSION=v7.3.0
+ARG LIBBPF_VERSION=v1.3.0
+ARG GOLANG_VERSION=1.24.2
+
+# Args need to be redefined on each stage
+# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
+
+FROM debian:bookworm-slim@sha256:90522eeb7e5923ee2b871c639059537b30521272f10ca86fdbbbb2b75a8c40cd AS builder
+ARG BPFTOOL_VERSION
+ARG LIBBPF_VERSION
+
+RUN apt-get update \
+	&& apt-get install -y git make tar wget
+
+# Let's install libbpf headers
+RUN git clone --branch ${LIBBPF_VERSION} --depth 1 https://github.com/libbpf/libbpf.git \
+	&& cd libbpf/src && make install_headers
+
+# Install bpftool
+RUN \
+	ARCH=$(dpkg --print-architecture) && \
+	wget --quiet https://github.com/libbpf/bpftool/releases/download/${BPFTOOL_VERSION}/bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz && \
+	wget --quiet https://github.com/libbpf/bpftool/releases/download/${BPFTOOL_VERSION}/bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz.sha256sum && \
+	echo $(cat bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz.sha256sum) | sha256sum -c && \
+	tar -C /usr/local/bin -xzf bpftool-${BPFTOOL_VERSION}-${ARCH}.tar.gz && \
+	chmod +x /usr/local/bin/bpftool
+
+FROM debian:bookworm-slim@sha256:90522eeb7e5923ee2b871c639059537b30521272f10ca86fdbbbb2b75a8c40cd
+ARG CLANG_LLVM_VERSION
+ARG GOLANG_VERSION
+# libc-dev is needed for various headers, among others
+# /usr/include/arch-linux-gnu/asm/types.h.
+# We make clang aware of these files through CFLAGS in Makefile.
+# wget is needed to download the LLVM key and Golang tarball
+# lsb-release software-properties-common is needed to add the LLVM repository
+# xz-utils is needed by btfgen makefile
+# make and git is needed for make ebpf-objects and make clang-format
+# clang-format is needed for make clang-format
+RUN apt-get update \
+	&& apt-get install -y --no-install-recommends libc-dev lsb-release wget xz-utils software-properties-common make git
+
+# Install clang
+# Add the keys and repository for the LLVM packages
+RUN wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc && codename=$(lsb_release -cs) \
+	# We need to call add-apt-repository twice in debian-bookworm because of a bug: https://github.com/llvm/llvm-project/issues/62475#issuecomment-1579252282
+    && add-apt-repository -y "deb http://apt.llvm.org/${codename}/ llvm-toolchain-${codename}-${CLANG_LLVM_VERSION} main" \
+	&& add-apt-repository -y "deb http://apt.llvm.org/${codename}/ llvm-toolchain-${codename}-${CLANG_LLVM_VERSION} main" \
+    && apt-get update \
+	&& apt-get install -y --no-install-recommends clang-$CLANG_LLVM_VERSION llvm-$CLANG_LLVM_VERSION clang-format-$CLANG_LLVM_VERSION \
+	&& update-alternatives --install /usr/local/bin/llvm-strip llvm-strip $(which llvm-strip-$CLANG_LLVM_VERSION) 100 \
+	&& update-alternatives --install /usr/local/bin/clang clang $(which clang-$CLANG_LLVM_VERSION) 100 \
+	&& update-alternatives --install /usr/local/bin/clang-format clang-format $(which clang-format-$CLANG_LLVM_VERSION) 100
+
+# Install golang
+RUN ARCH=$(dpkg --print-architecture) \
+	&& wget --quiet https://go.dev/dl/go${GOLANG_VERSION}.linux-${ARCH}.tar.gz && \
+	tar -C /usr/local -xzf go${GOLANG_VERSION}.linux-${ARCH}.tar.gz && \
+	rm go${GOLANG_VERSION}.linux-${ARCH}.tar.gz && \
+	ln -s /usr/local/go/bin/go /usr/local/bin/go && \
+	chmod +x /usr/local/go/bin/go
+
+COPY --from=builder /usr/include/bpf /usr/include/bpf
+COPY --from=builder /usr/local/bin/bpftool /usr/local/bin/bpftool
+
+# To avoid hitting
+# 1. failed to initialize build cache at /.cache/go-build: mkdir /.cache: permission denied
+# 2. could not create module cache: mkdir /go: permission denied
+# when run as non root.
+ENV GOCACHE=/tmp/gocache
+ENV GOMODCACHE=/tmp/gomodcache
+
+# don't auto-upgrade the gotoolchain
+# https://github.com/docker-library/golang/issues/472
+ENV GOTOOLCHAIN=local
+
+# Create a directory which can be read, written and executed by everyone, this
+# avoid trouble when running as non root.
+RUN mkdir -m 777 /work
+WORKDIR /work
+
+# Add files used to build containerized gadgets
+ADD include /usr/include
diff --git a/Dockerfiles/gadget.Dockerfile b/Dockerfiles/gadget.Dockerfile
index 5eb724c80..7b9780709 100644
--- a/Dockerfiles/gadget.Dockerfile
+++ b/Dockerfiles/gadget.Dockerfile
@@ -1,6 +1,6 @@
 # Dockerfile for Inspektor Gadget.
 
-ARG BUILDER_IMAGE=golang:1.23.4-bullseye@sha256:6d4cbf0b3900afa3e4460ca995b6c351370ce8d2d44b7a964dc521ab640e1a88
+ARG BUILDER_IMAGE=golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2
 ARG BASE_IMAGE=gcr.io/distroless/static-debian12@sha256:ce46866b3a5170db3b49364900fb3168dc0833dfb46c26da5c77f22abb01d8c3
 
 # Prepare and build gadget artifacts in a container
@@ -20,7 +20,10 @@ RUN cd /gadget && go mod download
 
 # This COPY is limited by .dockerignore
 COPY ./ /gadget
-RUN cd /gadget/gadget-container && \
+RUN \
+    --mount=type=cache,target=/root/.cache/go-build \
+    --mount=type=cache,target=/go/pkg \
+    cd /gadget/gadget-container && \
 	make -j$(nproc) TARGET_ARCH=${TARGETARCH} gadget-container-deps
 
 # Main gadget image
diff --git a/Dockerfiles/ig-tests.Dockerfile b/Dockerfiles/ig-tests.Dockerfile
index e039bf635..38929aece 100644
--- a/Dockerfiles/ig-tests.Dockerfile
+++ b/Dockerfiles/ig-tests.Dockerfile
@@ -1,4 +1,4 @@
-ARG BUILDER_IMAGE=golang:1.23.4-bullseye@sha256:6d4cbf0b3900afa3e4460ca995b6c351370ce8d2d44b7a964dc521ab640e1a88
+ARG BUILDER_IMAGE=golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2
 ARG BASE_IMAGE=gcr.io/distroless/static-debian11:latest@sha256:1dbe426d60caed5d19597532a2d74c8056cd7b1674042b88f7328690b5ead8ed
 
 FROM --platform=${BUILDPLATFORM} ${BUILDER_IMAGE} AS builder
@@ -14,7 +14,11 @@ RUN cd /cache && \
 	go mod download
 ADD . /go/src/github.com/inspektor-gadget/inspektor-gadget
 WORKDIR /go/src/github.com/inspektor-gadget/inspektor-gadget/integration/k8s
-RUN CGO_ENABLED=0 GOARCH=${TARGETARCH} go test -c -o ig-integration-${TARGETARCH}.test ./...
+RUN \
+    --mount=type=cache,target=/root/.cache/go-build \
+    --mount=type=cache,target=/go/pkg \
+    CGO_ENABLED=0 GOARCH=${TARGETARCH} go test \
+      -c -o ig-integration-${TARGETARCH}.test ./...
 
 FROM ${BASE_IMAGE}
 
diff --git a/Dockerfiles/ig-tests.Dockerfile.dockerignore b/Dockerfiles/ig-tests.Dockerfile.dockerignore
index 44481a114..1cd2a140a 100644
--- a/Dockerfiles/ig-tests.Dockerfile.dockerignore
+++ b/Dockerfiles/ig-tests.Dockerfile.dockerignore
@@ -2,6 +2,7 @@
 !go.mod
 !go.sum
 !pkg
+!internal
 !integration
 !Makefile*
 !*.mk
diff --git a/Dockerfiles/ig.Dockerfile b/Dockerfiles/ig.Dockerfile
index c01da6314..207554051 100644
--- a/Dockerfiles/ig.Dockerfile
+++ b/Dockerfiles/ig.Dockerfile
@@ -1,4 +1,4 @@
-ARG BUILDER_IMAGE=golang:1.23.4@sha256:7ea4c9dcb2b97ff8ee80a67db3d44f98c8ffa0d191399197007d8459c1453041
+ARG BUILDER_IMAGE=golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2
 ARG BASE_IMAGE=gcr.io/distroless/static-debian11:latest@sha256:1dbe426d60caed5d19597532a2d74c8056cd7b1674042b88f7328690b5ead8ed
 
 FROM --platform=${BUILDPLATFORM} ${BUILDER_IMAGE} AS builder
@@ -7,8 +7,8 @@ ARG TARGETOS
 ARG TARGETARCH
 ARG VERSION=v0.0.0
 ENV VERSION=${VERSION}
-ARG EBPF_BUILDER=ghcr.io/inspektor-gadget/ebpf-builder:latest
-ENV EBPF_BUILDER=${EBPF_BUILDER}
+ARG GADGET_BUILDER=ghcr.io/inspektor-gadget/gadget-builder:main
+ENV GADGET_BUILDER=${GADGET_BUILDER}
 ARG GOPROXY
 ENV GOPROXY=${GOPROXY}
 
@@ -18,13 +18,16 @@ ADD . /go/src/github.com/inspektor-gadget/inspektor-gadget
 
 WORKDIR /go/src/github.com/inspektor-gadget/inspektor-gadget
 
-RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \
-		-ldflags "-X github.com/inspektor-gadget/inspektor-gadget/internal/version.version=${VERSION} \
-                  -X github.com/inspektor-gadget/inspektor-gadget/cmd/common/image.builderImage=${EBPF_BUILDER} \
-                  -extldflags '-static'" \
-		-tags "netgo" \
-		-o ig-${TARGETOS}-${TARGETARCH} \
-		github.com/inspektor-gadget/inspektor-gadget/cmd/ig
+RUN \
+      --mount=type=cache,target=/root/.cache/go-build \
+      --mount=type=cache,target=/go/pkg \
+      CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \
+        -ldflags "-X github.com/inspektor-gadget/inspektor-gadget/internal/version.version=${VERSION} \
+        -X github.com/inspektor-gadget/inspektor-gadget/cmd/common/image.builderImage=${GADGET_BUILDER} \
+        -extldflags '-static'" \
+        -tags "netgo" \
+        -o ig-${TARGETOS}-${TARGETARCH} \
+        github.com/inspektor-gadget/inspektor-gadget/cmd/ig
 
 FROM ${BASE_IMAGE}
 
diff --git a/Dockerfiles/kubectl-gadget.Dockerfile b/Dockerfiles/kubectl-gadget.Dockerfile
index 33d035cab..b493be2db 100644
--- a/Dockerfiles/kubectl-gadget.Dockerfile
+++ b/Dockerfiles/kubectl-gadget.Dockerfile
@@ -6,8 +6,8 @@
 # image is valid, even scratch. Alpine is used by default as a tradeoff
 # between size and tools available in the image.
 
-ARG BUILDER_IMAGE=golang:1.23.4-bullseye@sha256:6d4cbf0b3900afa3e4460ca995b6c351370ce8d2d44b7a964dc521ab640e1a88
-ARG BASE_IMAGE=alpine:3.18@sha256:1875c923b73448b558132e7d4a44b815d078779ed7a73f76209c6372de95ea8d
+ARG BUILDER_IMAGE=golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2
+ARG BASE_IMAGE=gcr.io/distroless/static-debian11:latest@sha256:1dbe426d60caed5d19597532a2d74c8056cd7b1674042b88f7328690b5ead8ed
 
 FROM --platform=${BUILDPLATFORM} ${BUILDER_IMAGE} AS builder
 
@@ -30,7 +30,10 @@ ENV IMAGE_TAG=${IMAGE_TAG}
 
 # This COPY is limited by .dockerignore
 COPY ./ /gadget
-RUN cd /gadget && GOHOSTOS=$TARGETOS GOHOSTARCH=$TARGETARCH make kubectl-gadget
+RUN \
+    --mount=type=cache,target=/root/.cache/go-build \
+    --mount=type=cache,target=/go/pkg \
+    cd /gadget && GOHOSTOS=$TARGETOS GOHOSTARCH=$TARGETARCH make kubectl-gadget
 
 FROM ${BASE_IMAGE}
 
diff --git a/MAINTAINERS.md b/MAINTAINERS.md
index 91d0380b0..34d5f948f 100644
--- a/MAINTAINERS.md
+++ b/MAINTAINERS.md
@@ -8,4 +8,5 @@
 * [Burak Ok](https://github.com/burak-ok)
 * [Qasim Sarfraz](https://github.com/mqasimsarfraz)
 * [Claudia Marcu](https://github.com/claudiamarcubina)
-* [Chris Kühl](https://github.com/blixtra) (project manager)
\ No newline at end of file
+* [Chris Kühl](https://github.com/blixtra) (project manager)
+* [Maya Singh](https://github.com/mayasingh17) (project manager)
diff --git a/Makefile b/Makefile
index 1da3d073d..0e6558209 100644
--- a/Makefile
+++ b/Makefile
@@ -1,13 +1,24 @@
 TAG := `git describe --tags --always`
 VERSION :=
 
-CONTAINER_REPO ?= ghcr.io/inspektor-gadget/inspektor-gadget
+CONTAINER_REPO_NAMESPACE ?= ghcr.io/inspektor-gadget
+CONTAINER_REPO ?= $(CONTAINER_REPO_NAMESPACE)/inspektor-gadget
 IMAGE_TAG ?= $(shell ./tools/image-tag branch)
 
+CONTAINER_IMAGES = \
+	inspektor-gadget \
+	ig \
+	gadget-builder \
+	dnstester \
+	#
+
+GADGET_BUILDER ?= $(CONTAINER_REPO_NAMESPACE)/gadget-builder:main
+DNSTESTER_IMAGE ?= $(CONTAINER_REPO_NAMESPACE)/dnstester:main
+
 MINIKUBE ?= minikube
 KUBERNETES_DISTRIBUTION ?= ""
 GADGET_TAG ?= $(shell ./tools/image-tag branch)
-GADGET_REPOSITORY ?= ghcr.io/inspektor-gadget/gadget
+GADGET_REPOSITORY ?= $(CONTAINER_REPO_NAMESPACE)/gadget
 VERIFY_GADGETS ?= true
 TEST_COMPONENT ?= inspektor-gadget
 
@@ -27,15 +38,12 @@ BPFTOOL ?= bpftool
 ARCH ?= $(shell uname -m | sed 's/x86_64/x86/' | sed 's/aarch64/arm64/' | sed 's/ppc64le/powerpc/' | sed 's/mips.*/mips/')
 
 # This version number must be kept in sync with CI workflow lint one.
-LINTER_IMAGE ?= golangci/golangci-lint:v1.63.4@sha256:7f4c8ee8a63d56caa41c099cf658f68b192b615e0f30e94b8864e81a3ceafb53
-
-EBPF_BUILDER ?= ghcr.io/inspektor-gadget/ebpf-builder:latest
-
-DNSTESTER_IMAGE ?= "ghcr.io/inspektor-gadget/dnstester:latest"
+LINTER_IMAGE ?= golangci/golangci-lint:v2.1.6@sha256:568ee1c1c53493575fa9494e280e579ac9ca865787bafe4df3023ae59ecf299b
 
 PLATFORMS ?= "linux/amd64,linux/arm64"
 
 CLANG_FORMAT ?= clang-format
+CRANE ?= crane
 
 # Adds a '-dirty' suffix to version string if there are uncommitted changes
 changes := $(shell git status --porcelain)
@@ -78,7 +86,7 @@ phony_explicit:
 
 ebpf-objects:
 	docker run --rm --name ebpf-object-builder --user $(shell id -u):$(shell id -g) \
-		-v $(shell pwd):/work $(EBPF_BUILDER) \
+		-v $(shell pwd):/work $(GADGET_BUILDER) \
 		make ebpf-objects-outside-docker
 
 ebpf-objects-outside-docker:
@@ -109,7 +117,16 @@ list-ig-targets:
 .PHONY: ig-all
 ig-all: $(IG_TARGETS) ig
 
-ig: ig-$(GOHOSTOS)-$(GOHOSTARCH)
+.PHONY: ig
+ig:
+	CGO_ENABLED=0 go build \
+        -ldflags "-X github.com/inspektor-gadget/inspektor-gadget/internal/version.version=${VERSION} \
+        -X github.com/inspektor-gadget/inspektor-gadget/cmd/common/image.builderImage=${GADGET_BUILDER} \
+        -extldflags '-static'" \
+        -tags "netgo" \
+        ./cmd/ig
+
+ig-on-docker: ig-$(GOHOSTOS)-$(GOHOSTARCH)
 	cp ig-$(GOHOSTOS)-$(GOHOSTARCH) ig
 
 # Compile ig with debug options and debug it using delve:
@@ -119,7 +136,7 @@ ig: ig-$(GOHOSTOS)-$(GOHOSTARCH)
 debug-ig:
 	CGO_ENABLED=0 go build \
 		-ldflags "-X github.com/inspektor-gadget/inspektor-gadget/internal/version.version=${VERSION} \
-		-X github.com/inspektor-gadget/inspektor-gadget/cmd/common/image.builderImage=${EBPF_BUILDER} \
+		-X github.com/inspektor-gadget/inspektor-gadget/cmd/common/image.builderImage=${GADGET_BUILDER} \
 		-extldflags '-static'" \
 		-gcflags='all=-N -l' \
 		-o ig-debug \
@@ -138,7 +155,7 @@ ig-%: phony_explicit
 			ARCH=$(subst linux-,,$*) BTFHUB_ARCHIVE=$(HOME)/btfhub-archive/ -j$(nproc); \
 	fi
 	$(BUILD_COMMAND) --load --platform=$(subst -,/,$*) -t $@ -f Dockerfiles/ig.Dockerfile \
-		--build-arg VERSION=$(VERSION) --build-arg EBPF_BUILDER=$(EBPF_BUILDER) \
+		--build-arg VERSION=$(VERSION) --build-arg GADGET_BUILDER=$(GADGET_BUILDER) \
 		--build-arg GOPROXY=$(GOPROXY) .
 	docker create --name ig-$*-container $@
 	docker cp ig-$*-container:/usr/bin/ig $@
@@ -245,7 +262,7 @@ cross-kubectl-gadget-container:
 
 # tests
 .PHONY: generate-testdata
-generate-testdata: 
+generate-testdata:
 	$(MAKE) -C ./pkg/operators/ebpf/testdata
 	$(MAKE) -C ./pkg/operators/wasm/testdata
 
@@ -295,7 +312,7 @@ integration-tests: kubectl-gadget
 
 .PHONY: component-tests
 component-tests:
-	go test -exec sudo -v ./integration/components/... -integration -timeout 5m --builder-image $(EBPF_BUILDER)
+	go test -exec sudo -v ./integration/components/... -integration -timeout 5m --builder-image $(GADGET_BUILDER)
 
 .PHONY: generate-documentation
 generate-documentation:
@@ -325,7 +342,7 @@ lint:
 .PHONY: clang-format
 clang-format:
 	docker run --rm --name ebpf-object-builder --user $(shell id -u):$(shell id -g) \
-		-v $(shell pwd):/work -w /work $(EBPF_BUILDER) \
+		-v $(shell pwd):/work -w /work $(GADGET_BUILDER) \
 		make clang-format-outside-docker
 
 .PHONY: clang-format-outside-docker
@@ -408,12 +425,21 @@ testdata:
 go-mod-tidy:
 	find ./ -type f -name go.mod -execdir go mod tidy \;
 
+.PHONY:
+%-update-latest-tag:
+	$(CRANE) copy $(CONTAINER_REPO_NAMESPACE)/$*:$(IMAGE_TAG) $(CONTAINER_REPO_NAMESPACE)/$*:latest
+
+.PHOHY:
+update-latest-tag: $(addsuffix -update-latest-tag,$(CONTAINER_IMAGES))
+	$(MAKE) -C gadgets/ update-latest-tag
+
 .PHONY: help
 help:
 	@echo  'Building targets:'
 	@echo  '  all		  		- Build all targets marked with [*]'
 	@echo  '* ig		  		- Build the ig cli tool'
 	@echo  '  ig-all	  		- Build the ig cli tool for all architectures'
+	@echo  '  ig-on-docker                  - Build the ig cli tool using docker'
 	@echo  '* build		  		- Build all targets marked with [o]'
 	@echo  'o manifests			- Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects'
 	@echo  'o generate			- Generate client API code and DeepCopy related code'
diff --git a/README.md b/README.md
index 83004507e..4ffb71433 100644
--- a/README.md
+++ b/README.md
@@ -55,6 +55,10 @@ kubectl gadget run trace_open:latest
 
 Check [Installing on Kubernetes](https://www.inspektor-gadget.io/docs/latest/reference/install-kubernetes) to learn more about different options.
 
+`kubectl-gadget` is also packaged for the following distributions:
+
+[![`kubectl-gadget`](https://repology.org/badge/vertical-allrepos/kubectl-gadget.svg)](https://repology.org/project/kubectl-gadget/versions)
+
 ### Kubectl Node Debug
 
 We can use [kubectl node debug](https://kubernetes.io/docs/tasks/debug/debug-cluster/kubectl-node-debug/) to run `ig` on a Kubernetes node:
@@ -82,6 +86,10 @@ sudo ig run trace_open:latest
 
 Check [Installing on Linux](https://www.inspektor-gadget.io/docs/latest/reference/install-linux) to learn more.
 
+`ig` is also packaged for the following distributions:
+
+[![`ig`](https://repology.org/badge/vertical-allrepos/inspektor-gadget.svg)](https://repology.org/project/inspektor-gadget/versions)
+
 #### Run in a Container
 
 ```bash
@@ -156,7 +164,7 @@ Use the [project documentation](https://www.inspektor-gadget.io/docs/latest/) to
 
 Kernel requirements are largely determined by the specific eBPF functionality a Gadget makes use of.
 The eBPF functionality available to Gadgets depend on the version and configuration of the kernel running
-running in the node/machine where the Gadget is being loaded. Gadgets developed by the Inspektor
+in the node/machine where the Gadget is being loaded. Gadgets developed by the Inspektor
 Gadget project require at least Linux 5.10 with [BTF](https://www.kernel.org/doc/html/latest/bpf/btf.html) enabled.
 
 Refer to the [documentation for a specific Gadget](https://www.inspektor-gadget.io/docs/latest/gadgets) for any notes regarding requirements.
@@ -169,6 +177,13 @@ designed for developers that want to use the Golang packages exposed by
 Inspektor Gadget directly. End-users do not need this and can use
 `kubectl-gadget` or `ig` directly.
 
+## Security features
+
+Inspektor Gadget offers security features which are described in the following document:
+
+* [Verify assets](https://inspektor-gadget.io/docs/latest/reference/verify-assets): Covers everything with regard to signing and verifying of images and release assets. It also showcases the different SBOMs we generate like the [`ig`](https://github.com/inspektor-gadget/inspektor-gadget/releases/download/v0.38.0/ig-linux-amd64-v0.38.0.bom.json) one.
+* [Restricting Gadgets](https://inspektor-gadget.io/docs/latest/reference/restricting-gadgets): Details how users can restrict which gadgets can be run based on different filters.
+
 ## Contributing
 
 Contributions are welcome, see [CONTRIBUTING](docs/devel/contributing.md).
diff --git a/charts/gadget/templates/_helpers.tpl b/charts/gadget/templates/_helpers.tpl
index cceb734a0..d91c48335 100644
--- a/charts/gadget/templates/_helpers.tpl
+++ b/charts/gadget/templates/_helpers.tpl
@@ -34,6 +34,7 @@ app.kubernetes.io/component: controller
 app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
 {{- end }}
 app.kubernetes.io/managed-by: {{ .Release.Service }}
+app.kubernetes.io/part-of: inspektor-gadget
 {{- if .Values.additionalLabels.enabled }}
 {{- if .Values.additionalLabels }}
 {{ toYaml .Values.additionalLabels }}
diff --git a/charts/gadget/templates/daemonset.yaml b/charts/gadget/templates/daemonset.yaml
index fe39ddf54..98eb330ea 100644
--- a/charts/gadget/templates/daemonset.yaml
+++ b/charts/gadget/templates/daemonset.yaml
@@ -38,6 +38,9 @@ spec:
       serviceAccount: {{ include "gadget.fullname" . }}
       hostPID: false
       hostNetwork: false
+      {{- if .Values.runtimeClassName }}
+      runtimeClassName: {{ .Values.runtimeClassName | quote }}
+      {{- end }}
       containers:
         - name: gadget
           terminationMessagePolicy: FallbackToLogsOnError
diff --git a/charts/gadget/values.yaml b/charts/gadget/values.yaml
index f3fce8bf8..5233ac64d 100644
--- a/charts/gadget/values.yaml
+++ b/charts/gadget/values.yaml
@@ -83,3 +83,6 @@ skipLabels: true
 # -- Labels to be added to all other resources.
 additionalLabels:
   labels: {}
+
+# -- RuntimeClassName used by daemonset
+runtimeClassName: ""
diff --git a/cmd/common/image/build.go b/cmd/common/image/build.go
index 3c4830bc9..e058b51c4 100644
--- a/cmd/common/image/build.go
+++ b/cmd/common/image/build.go
@@ -23,6 +23,7 @@ import (
 	"os/exec"
 	"path/filepath"
 	"runtime"
+	"slices"
 	"strconv"
 	"strings"
 	"time"
@@ -46,7 +47,7 @@ import (
 var helpersFS embed.FS
 
 // It can be overridden at build time
-var builderImage = "ghcr.io/inspektor-gadget/ebpf-builder:latest"
+var builderImage = "ghcr.io/inspektor-gadget/gadget-builder:main"
 
 const (
 	DEFAULT_EBPF_SOURCE = "program.bpf.c"
@@ -69,6 +70,7 @@ type cmdOpts struct {
 	local            bool
 	outputDir        string
 	builderImage     string
+	builderImagePull string
 	updateMetadata   bool
 	validateMetadata bool
 	btfgen           bool
@@ -88,6 +90,12 @@ func NewBuildCmd() *cobra.Command {
 				return fmt.Errorf("--local and --builder-image cannot be used at the same time")
 			}
 
+			// Validate builderImagePull flag by checking it against a list of valid values
+			validValues := []string{"always", "missing", "never"}
+			if !slices.Contains(validValues, opts.builderImagePull) {
+				return fmt.Errorf("invalid value for --builder-image-pull: %s. Valid values are %s", opts.builderImagePull, strings.Join(validValues, ","))
+			}
+
 			fFlag := cmd.Flags().Lookup("file")
 			opts.fileChanged = fFlag.Changed
 
@@ -102,6 +110,7 @@ func NewBuildCmd() *cobra.Command {
 	cmd.Flags().StringVarP(&opts.outputDir, "output", "o", "", "Path to a folder to store generated files while building")
 	cmd.Flags().StringVarP(&opts.image, "tag", "t", "", "Name for the built image (format name:tag)")
 	cmd.Flags().StringVar(&opts.builderImage, "builder-image", builderImage, "Builder image to use")
+	cmd.Flags().StringVar(&opts.builderImagePull, "builder-image-pull", "always", "Specify when the builder image should be pulled [always, missing, never]")
 	cmd.Flags().BoolVar(&opts.updateMetadata, "update-metadata", false, "Update the metadata according to the eBPF code")
 	cmd.Flags().BoolVar(&opts.validateMetadata, "validate-metadata", true, "Validate the metadata file before building the gadget image")
 
@@ -201,6 +210,42 @@ func runBuild(cmd *cobra.Command, opts *cmdOpts) error {
 		conf.EBPFSource = ""
 	}
 
+	var hasEBPFSource, hasMetadata, hasWasm, hasGo bool
+	if conf.EBPFSource != "" {
+		if _, err := os.Stat(conf.EBPFSource); err == nil {
+			hasEBPFSource = true
+		}
+	}
+	if conf.Metadata != "" {
+		if _, err := os.Stat(conf.Metadata); err == nil {
+			hasMetadata = true
+		}
+	}
+	if conf.Wasm != "" {
+		if _, err := os.Stat(conf.Wasm); err == nil {
+			hasWasm = true
+		}
+	}
+
+	goFolder := "./go"
+
+	if _, err := os.Stat(goFolder); err == nil {
+		_ = filepath.Walk(goFolder, func(path string, info os.FileInfo, err error) error {
+			if err != nil {
+				return err
+			}
+			if !info.IsDir() && strings.HasSuffix(info.Name(), ".go") {
+				hasGo = true
+				return filepath.SkipDir
+			}
+			return nil
+		})
+	}
+
+	if !hasEBPFSource && !hasMetadata && !hasWasm && !hasGo {
+		return fmt.Errorf("ateast one of ebpf source (program.bpf.c), metadata (gadget.yaml), .go files (present in go folder) or wasm module is required")
+	}
+
 	// copy helper files
 	files, err := helpersFS.ReadDir("helpers")
 	if err != nil {
@@ -301,28 +346,9 @@ func runBuild(cmd *cobra.Command, opts *cmdOpts) error {
 	return nil
 }
 
-func ensureBuilderImage(ctx context.Context, cli *client.Client, builderImage string) error {
-	f := filters.NewArgs()
-	f.Add("reference", builderImage)
-
-	// For :latest we always want to have the newest image that is available upstream
-	if !strings.HasSuffix(builderImage, ":latest") {
-		images, err := cli.ImageList(ctx, image.ListOptions{Filters: f})
-		if err != nil {
-			return fmt.Errorf("listing images: %w", err)
-		}
-
-		for _, img := range images {
-			for _, tag := range img.RepoTags {
-				if tag == builderImage {
-					return nil
-				}
-			}
-		}
-	}
-
-	fmt.Printf("Pulling builder image %s\n", builderImage)
-	reader, err := cli.ImagePull(ctx, builderImage, image.PullOptions{})
+func pullImage(ctx context.Context, cli *client.Client, imageReference string) error {
+	fmt.Printf("Pulling builder image %s\n", imageReference)
+	reader, err := cli.ImagePull(ctx, imageReference, image.PullOptions{})
 	if err != nil {
 		return fmt.Errorf("pulling builder image: %w", err)
 	}
@@ -334,6 +360,56 @@ func ensureBuilderImage(ctx context.Context, cli *client.Client, builderImage st
 	return jsonmessage.DisplayJSONMessagesStream(reader, out, outFd, isTTY, nil)
 }
 
+func isImageLocallyAvailable(ctx context.Context, cli *client.Client, imageReference string) (bool, error) {
+	f := filters.NewArgs()
+	f.Add("reference", imageReference)
+
+	images, err := cli.ImageList(ctx, image.ListOptions{Filters: f})
+	if err != nil {
+		return false, fmt.Errorf("listing images: %w", err)
+	}
+
+	for _, img := range images {
+		for _, tag := range img.RepoTags {
+			if tag == imageReference {
+				return true, nil
+			}
+		}
+		for _, digest := range img.RepoDigests {
+			if digest == imageReference {
+				return true, nil
+			}
+		}
+	}
+	return false, nil
+}
+
+func ensureBuilderImage(ctx context.Context, cli *client.Client, builderImage string, builderImagePull string) error {
+	switch builderImagePull {
+	case "always":
+		return pullImage(ctx, cli, builderImage)
+	case "missing":
+		localAvailable, err := isImageLocallyAvailable(ctx, cli, builderImage)
+		if err != nil {
+			return err
+		}
+		if !localAvailable {
+			return pullImage(ctx, cli, builderImage)
+		}
+	case "never":
+		localAvailable, err := isImageLocallyAvailable(ctx, cli, builderImage)
+		if err != nil {
+			return err
+		}
+		if !localAvailable {
+			return fmt.Errorf("image %s is not available locally and pull is disabled", builderImage)
+		}
+	default:
+		return fmt.Errorf("invalid --builder-image-pull value: %s", builderImagePull)
+	}
+	return nil
+}
+
 func buildInContainer(opts *cmdOpts, conf *buildFile) error {
 	cwd, err := os.Getwd()
 	if err != nil {
@@ -347,7 +423,7 @@ func buildInContainer(opts *cmdOpts, conf *buildFile) error {
 	}
 	defer cli.Close()
 
-	if err := ensureBuilderImage(ctx, cli, opts.builderImage); err != nil {
+	if err := ensureBuilderImage(ctx, cli, opts.builderImage, opts.builderImagePull); err != nil {
 		return err
 	}
 
@@ -439,18 +515,21 @@ func buildInContainer(opts *cmdOpts, conf *buildFile) error {
 	case status = <-statusCh:
 	}
 
+	outputOpts := container.LogsOptions{ShowStderr: true}
+
 	if status.StatusCode != 0 || common.Verbose {
-		opts := container.LogsOptions{ShowStdout: true, ShowStderr: true}
-		out, err := cli.ContainerLogs(ctx, resp.ID, opts)
-		if err != nil {
-			return fmt.Errorf("getting builder container logs: %w", err)
-		}
+		outputOpts.ShowStdout = true
+	}
 
-		fmt.Println("Build logs start:")
-		stdcopy.StdCopy(os.Stdout, os.Stderr, out)
-		fmt.Println("Build logs end")
+	out, err := cli.ContainerLogs(ctx, resp.ID, outputOpts)
+	if err != nil {
+		return fmt.Errorf("getting builder container logs: %w", err)
 	}
 
+	fmt.Println("Build logs start:")
+	stdcopy.StdCopy(os.Stdout, os.Stderr, out)
+	fmt.Println("Build logs end")
+
 	if status.StatusCode != 0 {
 		return fmt.Errorf("builder container exited with status %d", status.StatusCode)
 	}
diff --git a/cmd/common/image/helpers/Makefile.build b/cmd/common/image/helpers/Makefile.build
index 0dc428604..0c95da873 100644
--- a/cmd/common/image/helpers/Makefile.build
+++ b/cmd/common/image/helpers/Makefile.build
@@ -1,9 +1,19 @@
 # This makefile is used by the build command, don't execute it manually
 
 CLANG ?= clang
-TINYGO ?= tinygo
 LLVM_STRIP ?= llvm-strip
-BASECFLAGS = -target bpf -Wall -g -O2
+# We need <asm/types.h> and depending on Linux distributions, it is installed
+# at different paths:
+#
+# * Ubuntu, package linux-libc-dev:
+#   /usr/include/x86_64-linux-gnu/asm/types.h
+#
+# * Fedora, package kernel-headers
+#   /usr/include/asm/types.h
+#
+# Since Ubuntu does not install it in a standard path, add a compiler flag for
+# it.
+BASECFLAGS = -target bpf -Wall -g -O2 -I/usr/include/$(shell uname -m)-linux-gnu
 CFLAGS ?=
 OUTPUTDIR ?= /tmp
 EBPFSOURCE ?= program.bpf.c
@@ -27,7 +37,7 @@ else ifeq (go,$(patsubst %.go,go,$(WASM)))
 wasm: $(WASM)
 	# -buildmode=c-shared to build the wasm as a reactor module. See https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi
 	cd $(dir $(WASM)) && \
-	$(TINYGO) build -o $(OUTPUTDIR)/program.wasm -target=wasip1 --no-debug -buildmode=c-shared $(notdir $(WASM))
+	CGO_ENABLED=0 GOOS=wasip1 GOARCH=wasm go build -o $(OUTPUTDIR)/program.wasm -buildmode=c-shared -ldflags "-w -s" $(notdir $(WASM))
 else ifeq (wasm,$(patsubst %.wasm,wasm,$(WASM)))
 wasm:
 	# Wasm file already compiled. Nothing to do.
diff --git a/cmd/common/image/image.go b/cmd/common/image/image.go
index 0328f6b43..9b1fd4622 100644
--- a/cmd/common/image/image.go
+++ b/cmd/common/image/image.go
@@ -16,14 +16,25 @@ package image
 
 import (
 	"github.com/spf13/cobra"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/runtime"
 )
 
-func NewImageCmd() *cobra.Command {
+func NewImageCmd(r runtime.Runtime, addCommands []*cobra.Command) *cobra.Command {
 	cmd := &cobra.Command{
 		Use:   "image",
 		Short: "Manage gadget images",
 	}
 
+	// add only specific subcommands (only grpc-supported commands in case of gadgetctl/kubectl-gadget)
+	if addCommands != nil {
+		for _, c := range addCommands {
+			cmd.AddCommand(c)
+		}
+		return cmd
+	}
+
+	// add all subcommands if not specified (in case of ig)
 	cmd.AddCommand(NewBuildCmd())
 	cmd.AddCommand(NewExportCmd())
 	cmd.AddCommand(NewImportCmd())
@@ -31,7 +42,7 @@ func NewImageCmd() *cobra.Command {
 	cmd.AddCommand(NewPullCmd())
 	cmd.AddCommand(NewTagCmd())
 	cmd.AddCommand(NewListCmd())
-	cmd.AddCommand(NewInspectCmd())
+	cmd.AddCommand(NewInspectCmd(r))
 	cmd.AddCommand(NewRemoveCmd())
 
 	return cmd
diff --git a/cmd/common/image/inspect.go b/cmd/common/image/inspect.go
index b16cafecb..fa2f47038 100644
--- a/cmd/common/image/inspect.go
+++ b/cmd/common/image/inspect.go
@@ -18,87 +18,247 @@ import (
 	"context"
 	"encoding/json"
 	"fmt"
-	"os"
 	"strings"
-	"time"
 
-	"github.com/docker/go-units"
+	"github.com/PaesslerAG/jsonpath"
 	"github.com/spf13/cobra"
+	"sigs.k8s.io/yaml"
 
+	"github.com/inspektor-gadget/inspektor-gadget/cmd/common"
 	"github.com/inspektor-gadget/inspektor-gadget/cmd/common/utils"
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/columns"
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/columns/formatter/textcolumns"
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/oci"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/config"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
 
-	"golang.org/x/term"
+	gadgetcontext "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-context"
+	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
+	ocihandler "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/oci-handler"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/runtime"
 )
 
-func NewInspectCmd() *cobra.Command {
+func NewInspectCmd(runtime runtime.Runtime) *cobra.Command {
 	var outputMode string
 
-	outputModes := []string{utils.OutputModeColumns, utils.OutputModeJSON, utils.OutputModeJSONPretty}
+	opGlobalParams := make(map[string]*params.Params)
+
+	outputModes := []string{utils.OutputModeYAML, utils.OutputModeJSON, utils.OutputModeJSONPretty}
 
 	cmd := &cobra.Command{
 		Use:          "inspect",
-		Short:        "Inspect the local gadget image",
+		Short:        "Inspect a gadget image",
 		SilenceUsage: true,
 		Args:         cobra.ExactArgs(1),
-		RunE: func(cmd *cobra.Command, args []string) error {
-			image, err := oci.GetGadgetImageDesc(context.TODO(), args[0])
+	}
+
+	cmd.PersistentFlags().String("extra-info", "", "Custom info type to display")
+	cmd.PersistentFlags().String("jsonpath", "", "JSONPath to extract from the extra info")
+	cmd.PersistentFlags().Bool("show-datasources", false, "Show datasources with their fields")
+
+	ociParams := apihelpers.ToParamDescs(ocihandler.OciHandler.InstanceParams()).ToParams()
+
+	for _, op := range operators.GetDataOperators() {
+		opGlobalParams[op.Name()] = apihelpers.ToParamDescs(op.GlobalParams()).ToParams()
+	}
+
+	runtimeGlobalParams := runtime.GlobalParamDescs().ToParams()
+	runtimeParams := runtime.ParamDescs().ToParams()
+
+	cmd.RunE = func(cmd *cobra.Command, args []string) error {
+		image := args[0]
+
+		runtime.Init(runtimeGlobalParams)
+		defer runtime.Close()
+
+		// set global operator flags from the config file
+		for o, p := range opGlobalParams {
+			err := common.SetFlagsForParams(cmd, p, config.OperatorKey+"."+o)
 			if err != nil {
-				return fmt.Errorf("inspecting image: %w", err)
+				return fmt.Errorf("setting operator %s flags: %w", o, err)
 			}
+		}
 
-			switch outputMode {
-			case utils.OutputModeJSON:
-				bytes, err := json.Marshal(image)
-				if err != nil {
-					return fmt.Errorf("marshalling image to JSON: %w", err)
+		ops := make([]operators.DataOperator, 0)
+		for _, op := range operators.GetDataOperators() {
+			// Initialize operator
+			err := op.Init(opGlobalParams[op.Name()])
+			if err != nil {
+				continue
+			}
+			ops = append(ops, op)
+		}
+
+		gadgetCtx := gadgetcontext.New(
+			context.Background(),
+			image,
+			gadgetcontext.WithDataOperators(ops...),
+			gadgetcontext.WithUseInstance(false),
+			gadgetcontext.IncludeExtraInfo(true),
+		)
+
+		paramValueMap := make(map[string]string)
+		ociParams.CopyToMap(paramValueMap, "operator.oci.")
+
+		info, err := runtime.GetGadgetInfo(gadgetCtx, runtimeParams, paramValueMap)
+		if err != nil {
+			return fmt.Errorf("getting gadget info: %w", err)
+		}
+
+		extraInfoMap := make(map[string]interface{})
+		for k, v := range info.ExtraInfo.Data {
+			extraInfoMap[k] = map[string]string{
+				"contentType": string(v.ContentType),
+				"content":     string(v.Content),
+			}
+		}
+
+		var customResult interface{}
+		extraInfo, _ := cmd.PersistentFlags().GetString("extra-info")
+		jsonPath, _ := cmd.PersistentFlags().GetString("jsonpath")
+		showDataSources, _ := cmd.PersistentFlags().GetBool("show-datasources")
+
+		if jsonPath != "" && extraInfo == "" && !showDataSources {
+			return fmt.Errorf("jsonpath %q can only be used with extra info or show-datasources", jsonPath)
+		}
+		if extraInfo != "" && showDataSources {
+			return fmt.Errorf("extra-info %q and show-datasources cannot be used together", extraInfo)
+		}
+		if extraInfo != "" {
+			dataEntry, ok := info.ExtraInfo.Data[extraInfo]
+			if !ok {
+				return fmt.Errorf("extra info %q not found", extraInfo)
+			}
+
+			switch dataEntry.ContentType {
+			case "application/json":
+				if err := json.Unmarshal(dataEntry.Content, &customResult); err != nil {
+					return fmt.Errorf("unmarshalling JSON content: %w", err)
 				}
-				fmt.Fprint(cmd.OutOrStdout(), string(bytes))
-			case utils.OutputModeJSONPretty:
-				bytes, err := json.MarshalIndent(image, "", "  ")
+			case "text/yaml":
+				var jsonCompatible map[string]interface{}
+
+				jsonBytes, err := yaml.YAMLToJSON(dataEntry.Content)
 				if err != nil {
-					return fmt.Errorf("marshalling image to JSON: %w", err)
+					return fmt.Errorf("converting YAML to JSON: %w", err)
 				}
-				fmt.Fprint(cmd.OutOrStdout(), string(bytes))
-			case utils.OutputModeColumns:
-				isTerm := term.IsTerminal(int(os.Stdout.Fd()))
-
-				cols := columns.MustCreateColumns[oci.GadgetImageDesc]()
-				if isTerm {
-					cols.MustSetExtractor("digest", func(i *oci.GadgetImageDesc) any {
-						if i.Digest == "" {
-							return ""
-						}
-						// Return the shortened digest and remove the sha256: prefix
-						return strings.TrimPrefix(i.Digest, "sha256:")[:12]
-					})
-					now := time.Now()
-					cols.MustSetExtractor("created", func(i *oci.GadgetImageDesc) any {
-						if t, err := time.Parse(time.RFC3339, i.Created); err == nil {
-							return fmt.Sprintf("%s ago", strings.ToLower(units.HumanDuration(now.Sub(t))))
-						}
-						return ""
-					})
+
+				if err := json.Unmarshal(jsonBytes, &jsonCompatible); err != nil {
+					return fmt.Errorf("unmarshalling JSON content: %w", err)
 				}
 
-				formatter := textcolumns.NewFormatter(cols.GetColumnMap(), textcolumns.WithShouldTruncate(isTerm))
-				formatter.WriteTable(cmd.OutOrStdout(), []*oci.GadgetImageDesc{image})
+				customResult = jsonCompatible
 			default:
-				return fmt.Errorf("invalid output mode %q, valid values are: %s", outputMode, strings.Join(outputModes, ", "))
+				customResult = string(dataEntry.Content)
 			}
-			return nil
-		},
+			if jsonPath != "" {
+				if dataEntry.ContentType != "application/json" && dataEntry.ContentType != "text/yaml" {
+					return fmt.Errorf("jsonpath %q can only be used with JSON or YAML content", jsonPath)
+				}
+
+				customResult, err = jsonpath.Get(fmt.Sprintf("$%s", jsonPath), customResult)
+				if err != nil {
+					return fmt.Errorf("resolving path %q: %w", jsonPath, err)
+				}
+				if customResult == nil {
+					return fmt.Errorf("path %q not found in extra info %q", jsonPath, extraInfo)
+				}
+			}
+		}
+		if showDataSources {
+			if jsonPath != "" {
+				dataSourcesJSON, err := json.Marshal(info.DataSources)
+				if err != nil {
+					return fmt.Errorf("marshalling DataSources to JSON: %w", err)
+				}
+				if err := json.Unmarshal(dataSourcesJSON, &customResult); err != nil {
+					return fmt.Errorf("unmarshalling JSON content: %w", err)
+				}
+				customResult, err = jsonpath.Get(fmt.Sprintf("$%s", jsonPath), customResult)
+				if err != nil {
+					return fmt.Errorf("resolving path %q: %w", jsonPath, err)
+				}
+			} else {
+				customResult = info.DataSources
+			}
+		}
+
+		switch outputMode {
+		case utils.OutputModeJSON:
+			if customResult != nil {
+				if _, ok := customResult.(string); !ok {
+					bytes, err := json.Marshal(customResult)
+					if err != nil {
+						return fmt.Errorf("marshalling image and extra info to JSON: %w", err)
+					}
+					fmt.Fprint(cmd.OutOrStdout(), string(bytes), "\n")
+				} else {
+					fmt.Fprint(cmd.OutOrStdout(), customResult, "\n")
+				}
+			} else {
+				bytes, err := json.Marshal(extraInfoMap)
+				if err != nil {
+					return fmt.Errorf("marshalling image and extra info to JSON: %w", err)
+				}
+				fmt.Fprint(cmd.OutOrStdout(), string(bytes), "\n")
+			}
+		case utils.OutputModeJSONPretty:
+			if customResult != nil {
+				if _, ok := customResult.(string); !ok {
+					bytes, err := json.MarshalIndent(customResult, "", "  ")
+					if err != nil {
+						return fmt.Errorf("marshalling image and extra info to JSON (pretty): %w", err)
+					}
+					fmt.Fprint(cmd.OutOrStdout(), string(bytes), "\n")
+				} else {
+					fmt.Fprint(cmd.OutOrStdout(), customResult, "\n")
+				}
+			} else {
+				bytes, err := json.MarshalIndent(extraInfoMap, "", "  ")
+				if err != nil {
+					return fmt.Errorf("marshalling image and extra info to JSON (pretty): %w", err)
+				}
+				fmt.Fprint(cmd.OutOrStdout(), string(bytes), "\n")
+			}
+		case utils.OutputModeYAML:
+			if customResult != nil {
+				if _, ok := customResult.(string); !ok {
+					bytes, err := yaml.Marshal(customResult)
+					if err != nil {
+						return fmt.Errorf("marshalling image and extra info to YAML: %w", err)
+					}
+					fmt.Fprint(cmd.OutOrStdout(), string(bytes))
+				} else {
+					fmt.Fprint(cmd.OutOrStdout(), customResult, "\n")
+				}
+			} else {
+				bytes, err := yaml.Marshal(extraInfoMap)
+				if err != nil {
+					return fmt.Errorf("marshalling image and extra info to YAML: %w", err)
+				}
+				fmt.Fprint(cmd.OutOrStdout(), string(bytes))
+			}
+		default:
+			return fmt.Errorf("invalid output mode %q, valid values are: %s", outputMode, strings.Join(outputModes, ", "))
+		}
+		return nil
 	}
 
 	cmd.Flags().StringVarP(
 		&outputMode,
 		"output",
 		"o",
-		utils.OutputModeColumns,
+		utils.OutputModeJSONPretty,
 		fmt.Sprintf("Output mode, possible values are, %s", strings.Join(outputModes, ", ")),
 	)
 
+	// We don't want to add the headless-related flags to the inspect command
+	skipParams := []string{"!attach"}
+
+	for _, operatorParams := range opGlobalParams {
+		common.AddOCIFlags(cmd, operatorParams, skipParams, runtime)
+	}
+	common.AddOCIFlags(cmd, ociParams, skipParams, runtime)
+	common.AddOCIFlags(cmd, runtimeGlobalParams, skipParams, runtime)
+	common.AddOCIFlags(cmd, runtimeParams, skipParams, runtime)
+
 	return cmd
 }
diff --git a/cmd/common/image/list.go b/cmd/common/image/list.go
index c8aec2951..a50c66d81 100644
--- a/cmd/common/image/list.go
+++ b/cmd/common/image/list.go
@@ -1,4 +1,4 @@
-// Copyright 2023 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -40,6 +40,7 @@ func NewListCmd() *cobra.Command {
 
 	cmd := &cobra.Command{
 		Use:          "list",
+		Aliases:      []string{"ls"},
 		Short:        "List gadget images on the host",
 		SilenceUsage: true,
 		Args:         cobra.NoArgs,
diff --git a/cmd/common/image/remove.go b/cmd/common/image/remove.go
index 9ecc1c845..8f8806cd9 100644
--- a/cmd/common/image/remove.go
+++ b/cmd/common/image/remove.go
@@ -1,4 +1,4 @@
-// Copyright 2023 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@ import (
 func NewRemoveCmd() *cobra.Command {
 	cmd := &cobra.Command{
 		Use:          "remove IMAGE",
+		Aliases:      []string{"rm"},
 		Short:        "Remove local gadget image",
 		SilenceUsage: true,
 		Args:         cobra.ExactArgs(1),
diff --git a/cmd/common/oci.go b/cmd/common/oci.go
index ee459836d..b48dfb4de 100644
--- a/cmd/common/oci.go
+++ b/cmd/common/oci.go
@@ -37,6 +37,7 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	clioperator "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/cli"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/combiner"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/generate_networkpolicy"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/limiter"
 	ocihandler "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/oci-handler"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/otel-logs"
@@ -50,8 +51,8 @@ import (
 type CommandMode string
 
 const (
-	CommandModeRun    CommandMode = "run"
-	CommandModeAttach CommandMode = "attach"
+	CommandModeRun    CommandMode = "run GADGET"
+	CommandModeAttach CommandMode = "attach GADGET_INSTANCE"
 )
 
 var commandModesDescriptions = map[CommandMode]string{
@@ -173,7 +174,7 @@ func NewRunCommand(rootCmd *cobra.Command, runtime runtime.Runtime, hiddenColumn
 			}
 			ops = append(ops, op)
 		}
-		ops = append(ops, clioperator.CLIOperator, combiner.CombinerOperator)
+		ops = append(ops, clioperator.CLIOperator, combiner.CombinerOperator, generate_networkpolicy.GNPOperator)
 		initializedOperators = true
 
 		imageName := actualArgs[0]
@@ -292,7 +293,7 @@ func NewRunCommand(rootCmd *cobra.Command, runtime runtime.Runtime, hiddenColumn
 			}
 			ops = append(ops, op)
 		}
-		ops = append(ops, clioperator.CLIOperator, combiner.CombinerOperator)
+		ops = append(ops, clioperator.CLIOperator, combiner.CombinerOperator, generate_networkpolicy.GNPOperator)
 
 		timeoutDuration := time.Duration(timeoutSeconds) * time.Second
 
diff --git a/cmd/common/registry.go b/cmd/common/registry.go
index 2dc1ff23c..cce8a2ef8 100644
--- a/cmd/common/registry.go
+++ b/cmd/common/registry.go
@@ -519,15 +519,11 @@ func buildCommandFromGadget(
 			requestedAllRelativeColumns := true
 			for _, col := range strings.Split(strings.ToLower(outputModeParams), ",") {
 				if strings.HasPrefix(col, "+") {
-					for _, c := range expandedColumns(strings.TrimPrefix(col, "+")) {
-						addCols = append(addCols, c)
-					}
+					addCols = append(addCols, expandedColumns(strings.TrimPrefix(col, "+"))...)
 					continue
 				}
 				if strings.HasPrefix(col, "-") {
-					for _, c := range expandedColumns(strings.TrimPrefix(col, "-")) {
-						removeCols = append(removeCols, c)
-					}
+					removeCols = append(removeCols, expandedColumns(strings.TrimPrefix(col, "-"))...)
 					continue
 				}
 				requestedAllRelativeColumns = false
diff --git a/cmd/common/utils/flags.go b/cmd/common/utils/flags.go
index c57ebb8bb..d1e6bb5f8 100644
--- a/cmd/common/utils/flags.go
+++ b/cmd/common/utils/flags.go
@@ -163,7 +163,11 @@ func removeSplitSortArgs(args []string) []string {
 	for i := 0; i < len(args); i++ {
 		if args[i] == "--sort" {
 			// Remove also the next element as it is the arg of --sort
-			return append(args[:i], args[i+2:]...)
+			if i == len(args)-1 {
+				return args[:len(args)-1]
+			} else {
+				return append(args[:i], args[i+2:]...)
+			}
 		}
 	}
 	return args
diff --git a/cmd/common/utils/parser_test.go b/cmd/common/utils/parser_test.go
index e171e9b97..00f607c70 100644
--- a/cmd/common/utils/parser_test.go
+++ b/cmd/common/utils/parser_test.go
@@ -191,7 +191,7 @@ func TestBaseParser(t *testing.T) {
 					case "pid":
 						sb.WriteString(fmt.Sprintf("%d", e.Pid))
 					case "comm":
-						sb.WriteString(fmt.Sprintf("%s", e.Comm))
+						sb.WriteString(e.Comm)
 					default:
 						continue
 					}
diff --git a/cmd/common/version.go b/cmd/common/version.go
index 4c06dedcb..e6e9730f0 100644
--- a/cmd/common/version.go
+++ b/cmd/common/version.go
@@ -17,6 +17,7 @@ package common
 import (
 	"fmt"
 
+	log "github.com/sirupsen/logrus"
 	"github.com/spf13/cobra"
 
 	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
@@ -28,6 +29,7 @@ func NewVersionCmd() *cobra.Command {
 		Short: "Show version",
 		Run: func(cmd *cobra.Command, args []string) {
 			fmt.Printf("v%s\n", version.Version().String())
+			log.Debugf("Inspektor Gadget User Agent: %s\n", version.UserAgent())
 		},
 	}
 }
diff --git a/cmd/gadgetctl/main.go b/cmd/gadgetctl/main.go
index 41f648e74..d171bfd13 100644
--- a/cmd/gadgetctl/main.go
+++ b/cmd/gadgetctl/main.go
@@ -24,6 +24,7 @@ import (
 	"github.com/spf13/cobra"
 
 	"github.com/inspektor-gadget/inspektor-gadget/cmd/common"
+	"github.com/inspektor-gadget/inspektor-gadget/cmd/common/image"
 	commonutils "github.com/inspektor-gadget/inspektor-gadget/cmd/common/utils"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/all-gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/config"
@@ -84,7 +85,7 @@ func main() {
 		if err != nil {
 			log.Warnf("Failed to load deploy info: %s", err)
 		} else if err := commonutils.CheckServerVersionSkew(info.ServerVersion); err != nil {
-			log.Warnf(err.Error())
+			log.Warn(err.Error())
 		}
 	}
 
@@ -96,6 +97,11 @@ func main() {
 		log.Fatalf("setting runtime flags from config: %v", err)
 	}
 
+	// add image subcommands to be added, for now only inspect is supported
+	imgCommands := []*cobra.Command{
+		image.NewInspectCmd(runtime),
+	}
+
 	hiddenColumnTags := []string{"kubernetes"}
 	common.AddCommandsFromRegistry(rootCmd, runtime, hiddenColumnTags)
 
@@ -104,6 +110,7 @@ func main() {
 	rootCmd.AddCommand(common.NewRunCommand(rootCmd, runtime, hiddenColumnTags, common.CommandModeRun))
 	rootCmd.AddCommand(common.NewRunCommand(rootCmd, runtime, hiddenColumnTags, common.CommandModeAttach))
 	rootCmd.AddCommand(common.NewConfigCmd(runtime, rootFlags))
+	rootCmd.AddCommand(image.NewImageCmd(runtime, imgCommands))
 
 	if err := rootCmd.Execute(); err != nil {
 		os.Exit(1)
diff --git a/cmd/ig/containers/containers.go b/cmd/ig/containers/containers.go
index 144335b86..517bc71a4 100644
--- a/cmd/ig/containers/containers.go
+++ b/cmd/ig/containers/containers.go
@@ -93,7 +93,7 @@ func NewListContainersCmd() *cobra.Command {
 			if err != nil {
 				return commonutils.WrapInErrParserCreate(err)
 			}
-			containers := igmanager.ContainerCollection.Subscribe(
+			containers := igmanager.Subscribe(
 				igSubKey,
 				selector,
 				func(event containercollection.PubSubEvent) {
@@ -102,7 +102,7 @@ func NewListContainersCmd() *cobra.Command {
 					}
 				},
 			)
-			defer igmanager.ContainerCollection.Unsubscribe(igSubKey)
+			defer igmanager.Unsubscribe(igSubKey)
 
 			if commonFlags.OutputMode != commonutils.OutputModeJSON {
 				fmt.Println(parser.BuildColumnsHeader())
diff --git a/cmd/ig/main.go b/cmd/ig/main.go
index 8ec12d569..e2148d5f3 100644
--- a/cmd/ig/main.go
+++ b/cmd/ig/main.go
@@ -1,4 +1,4 @@
-// Copyright 2019-2024 The Inspektor Gadget authors
+// Copyright 2019-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -45,9 +45,11 @@ import (
 	// Another blank import for the used operator
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/btfgen"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf"
+	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/env"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/filter"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/formatters"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/localmanager"
+	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/process"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/prometheus"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/socketenricher"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/sort"
@@ -105,8 +107,8 @@ func main() {
 	operators.RegisterDataOperator(ocihandler.OciHandler)
 
 	rootCmd.AddCommand(newDaemonCommand(runtime))
-	rootCmd.AddCommand(image.NewImageCmd())
 	rootCmd.AddCommand(common.NewLoginCmd())
+	rootCmd.AddCommand(image.NewImageCmd(runtime, nil))
 	rootCmd.AddCommand(common.NewLogoutCmd())
 	rootCmd.AddCommand(common.NewRunCommand(rootCmd, runtime, hiddenColumnTags, common.CommandModeRun))
 	rootCmd.AddCommand(common.NewConfigCmd(runtime, rootFlags))
diff --git a/cmd/ig/utils/flags.go b/cmd/ig/utils/flags.go
index 51f316bf0..e02bcd749 100644
--- a/cmd/ig/utils/flags.go
+++ b/cmd/ig/utils/flags.go
@@ -88,14 +88,14 @@ func AddCommonFlags(command *cobra.Command, commonFlags *CommonFlags) {
 
 			switch runtimeName {
 			case types.RuntimeNameDocker:
-				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.RuntimesSocketPathConfig.Docker)
+				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.Docker)
 			case types.RuntimeNameContainerd:
-				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.RuntimesSocketPathConfig.Containerd)
+				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.Containerd)
 				namespace = commonFlags.ContainerdNamespace
 			case types.RuntimeNameCrio:
-				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.RuntimesSocketPathConfig.Crio)
+				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.Crio)
 			case types.RuntimeNamePodman:
-				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.RuntimesSocketPathConfig.Podman)
+				socketPath, err = securejoin.SecureJoin(host.HostRoot, commonFlags.Podman)
 			default:
 				return commonutils.WrapInErrInvalidArg("--runtime / -r",
 					fmt.Errorf("runtime %q is not supported", p))
diff --git a/cmd/kubectl-gadget/advise/network-policy.go b/cmd/kubectl-gadget/advise/network-policy.go
index efc2adfef..eec77328b 100644
--- a/cmd/kubectl-gadget/advise/network-policy.go
+++ b/cmd/kubectl-gadget/advise/network-policy.go
@@ -101,7 +101,7 @@ func runNetworkPolicyMonitor(cmd *cobra.Command, args []string) error {
 
 	count := 0
 	transform := func(line string) string {
-		line = strings.Replace(line, "\r", "\n", -1)
+		line = strings.ReplaceAll(line, "\r", "\n")
 		mu.Lock()
 		w.Write([]byte(line))
 		w.Flush()
diff --git a/cmd/kubectl-gadget/deploy.go b/cmd/kubectl-gadget/deploy.go
index 1617b10ce..940d58499 100644
--- a/cmd/kubectl-gadget/deploy.go
+++ b/cmd/kubectl-gadget/deploy.go
@@ -20,6 +20,7 @@ import (
 	"encoding/base64"
 	"encoding/json"
 	"fmt"
+	"net"
 	"os"
 	"reflect"
 	"regexp"
@@ -511,7 +512,6 @@ func runDeploy(cmd *cobra.Command, args []string) error {
 	if err != nil {
 		return err
 	}
-
 	objects = append(objects, traceObjects...)
 
 	if seccompProfile != "" {
@@ -611,6 +611,19 @@ func runDeploy(cmd *cobra.Command, args []string) error {
 
 		daemonSet, handlingDaemonSet := object.(*appsv1.DaemonSet)
 		if handlingDaemonSet {
+			// modify the otel-metrics-listen-address if specified
+			if otelMetricsListen {
+				// modify the prometheus.io/port annotation
+				_, otelListenPort, err := net.SplitHostPort(otelMetricsListenAddr)
+				if err != nil {
+					return fmt.Errorf("parsing port: %w", err)
+				}
+				if daemonSet.Spec.Template.Annotations == nil {
+					daemonSet.Spec.Template.Annotations = make(map[string]string)
+				}
+				daemonSet.Spec.Template.Annotations["prometheus.io/port"] = otelListenPort
+			}
+
 			daemonSet.Spec.Template.Annotations["inspektor-gadget.kinvolk.io/option-hook-mode"] = hookMode
 
 			daemonSet.Namespace = gadgetNamespace
@@ -791,6 +804,7 @@ func runDeploy(cmd *cobra.Command, args []string) error {
 			cfg[gadgettracermanagerconfig.CrioSocketPath] = runtimesConfig.Crio
 			cfg[gadgettracermanagerconfig.DockerSocketPath] = runtimesConfig.Docker
 			cfg[gadgettracermanagerconfig.PodmanSocketPath] = runtimesConfig.Podman
+			cfg[gadgettracermanagerconfig.GadgetNamespace] = gadgetNamespace
 
 			opCfg, ok := cfg[gadgettracermanagerconfig.Operator].(map[string]interface{})
 			if !ok {
diff --git a/cmd/kubectl-gadget/main.go b/cmd/kubectl-gadget/main.go
index a2e9f0b46..03758529c 100644
--- a/cmd/kubectl-gadget/main.go
+++ b/cmd/kubectl-gadget/main.go
@@ -26,6 +26,7 @@ import (
 	paramsPkg "github.com/inspektor-gadget/inspektor-gadget/pkg/params"
 
 	"github.com/inspektor-gadget/inspektor-gadget/cmd/common"
+	img "github.com/inspektor-gadget/inspektor-gadget/cmd/common/image"
 	commonutils "github.com/inspektor-gadget/inspektor-gadget/cmd/common/utils"
 	"github.com/inspektor-gadget/inspektor-gadget/cmd/kubectl-gadget/advise"
 	"github.com/inspektor-gadget/inspektor-gadget/cmd/kubectl-gadget/utils"
@@ -64,11 +65,7 @@ func main() {
 	// Some commands don't need the gadget namespace. Run then before to avoid
 	// printing warnings about gadget namespace not found.
 	needGadgetNamespace := true
-	isHelp := false
-
-	if len(os.Args) == 1 {
-		isHelp = true
-	}
+	isHelp := len(os.Args) == 1
 
 	// Need to loop through all arguments to skip flags...
 	for _, arg := range os.Args[1:] {
@@ -150,7 +147,12 @@ func main() {
 	if err != nil {
 		log.Warnf("Failed to load deploy info: %s", err)
 	} else if err := commonutils.CheckServerVersionSkew(info.ServerVersion); err != nil {
-		log.Warnf(err.Error())
+		log.Warn(err.Error())
+	}
+
+	// add image subcommands to be added, for now only inspect is supported
+	imgCommands := []*cobra.Command{
+		img.NewInspectCmd(grpcRuntime),
 	}
 
 	gadgetNamespace := runtimeGlobalParams.Get(grpcruntime.ParamGadgetNamespace).AsString()
@@ -167,6 +169,7 @@ func main() {
 	rootCmd.AddCommand(common.NewRunCommand(rootCmd, grpcRuntime, hiddenColumnTags, common.CommandModeRun))
 	rootCmd.AddCommand(common.NewRunCommand(rootCmd, grpcRuntime, hiddenColumnTags, common.CommandModeAttach))
 	rootCmd.AddCommand(common.NewConfigCmd(grpcRuntime, rootFlags))
+	rootCmd.AddCommand(img.NewImageCmd(grpcRuntime, imgCommands))
 
 	if err := rootCmd.Execute(); err != nil {
 		os.Exit(1)
diff --git a/cmd/kubectl-gadget/utils/trace.go b/cmd/kubectl-gadget/utils/trace.go
index 103683cc6..cb1a1a101 100644
--- a/cmd/kubectl-gadget/utils/trace.go
+++ b/cmd/kubectl-gadget/utils/trace.go
@@ -196,7 +196,7 @@ func printVersionSkewWarning(pods *corev1.PodList) {
 
 		// Use 1: to remove the v prefix
 		if err := commonutils.CheckServerVersionSkew(versionStr[1:]); err != nil {
-			log.Warnf(err.Error())
+			log.Warn(err.Error())
 			break
 		}
 	}
@@ -262,7 +262,7 @@ func createTraces(gadgetNamespace string, trace *gadgetv1alpha1.Trace) error {
 			context.TODO(), trace, metav1.CreateOptions{},
 		)
 		if err != nil {
-			traceID, present := trace.ObjectMeta.Labels[GlobalTraceID]
+			traceID, present := trace.Labels[GlobalTraceID]
 			if present {
 				// Clean before exiting!
 				deleteTraces(gadgetNamespace, traceClient, traceID)
@@ -308,7 +308,7 @@ func updateTraceOperation(gadgetNamespace string, trace *gadgetv1alpha1.Trace, o
 	}
 
 	_, err = traceClient.GadgetV1alpha1().Traces(gadgetNamespace).Patch(
-		context.TODO(), trace.ObjectMeta.Name, types.MergePatchType, patchBytes, metav1.PatchOptions{},
+		context.TODO(), trace.Name, types.MergePatchType, patchBytes, metav1.PatchOptions{},
 	)
 
 	return err
@@ -354,7 +354,7 @@ func CreateTrace(config *TraceConfig) (string, error) {
 				"nodeName":   config.CommonFlags.Node,
 				// Kubernetes labels cannot contain ',' but can contain '_'
 				// Kubernetes names cannot contain either, so no need for more complicated escaping
-				"namespace":     strings.Replace(config.CommonFlags.Namespace, ",", "_", -1),
+				"namespace":     strings.ReplaceAll(config.CommonFlags.Namespace, ",", "_"),
 				"podName":       config.CommonFlags.Podname,
 				"containerName": config.CommonFlags.Containername,
 				"outputMode":    string(config.TraceOutputMode),
@@ -374,12 +374,12 @@ func CreateTrace(config *TraceConfig) (string, error) {
 	}
 
 	for key, value := range config.AdditionalLabels {
-		v, ok := trace.ObjectMeta.Labels[key]
+		v, ok := trace.Labels[key]
 		if ok {
 			return "", fmt.Errorf("label %q is already present with value %q", key, v)
 		}
 
-		trace.ObjectMeta.Labels[key] = value
+		trace.Labels[key] = value
 	}
 
 	err := createTraces(config.GadgetNamespace, trace)
@@ -517,7 +517,7 @@ func waitForCondition(gadgetNamespace string, traceID string, conditionFunction
 		}
 
 		if trace.Status.OperationError != "" {
-			erroredTraces[trace.ObjectMeta.Name] = &traceList.Items[i]
+			erroredTraces[trace.Name] = &traceList.Items[i]
 
 			continue
 		}
@@ -526,7 +526,7 @@ func waitForCondition(gadgetNamespace string, traceID string, conditionFunction
 			continue
 		}
 
-		satisfiedTraces[trace.ObjectMeta.Name] = &traceList.Items[i]
+		satisfiedTraces[trace.Name] = &traceList.Items[i]
 	}
 
 	tracesNumber := len(traceList.Items)
@@ -570,7 +570,7 @@ func waitForCondition(gadgetNamespace string, traceID string, conditionFunction
 				tracesNumber--
 
 				trace, _ := event.Object.(*gadgetv1alpha1.Trace)
-				traceName := trace.ObjectMeta.Name
+				traceName := trace.Name
 
 				// We also remove it from the maps to avoid returning a deleted trace
 				// and timing out.
@@ -609,11 +609,11 @@ func waitForCondition(gadgetNamespace string, traceID string, conditionFunction
 			}
 
 			if trace.Status.OperationError != "" {
-				erroredTraces[trace.ObjectMeta.Name] = trace
+				erroredTraces[trace.Name] = trace
 
 				// If the trace satisfied the function, we do not care now because it
 				// has an error.
-				delete(satisfiedTraces, trace.ObjectMeta.Name)
+				delete(satisfiedTraces, trace.Name)
 
 				return len(satisfiedTraces)+len(erroredTraces) == tracesNumber, nil
 			}
@@ -624,7 +624,7 @@ func waitForCondition(gadgetNamespace string, traceID string, conditionFunction
 				return false, nil
 			}
 
-			satisfiedTraces[trace.ObjectMeta.Name] = trace
+			satisfiedTraces[trace.Name] = trace
 
 			return len(satisfiedTraces)+len(erroredTraces) == tracesNumber, nil
 		})
@@ -654,8 +654,8 @@ func waitForCondition(gadgetNamespace string, traceID string, conditionFunction
 
 		// Print a message for traces that timed out
 		for _, trace := range traceList.Items {
-			_, satisfied := satisfiedTraces[trace.ObjectMeta.Name]
-			_, errored := erroredTraces[trace.ObjectMeta.Name]
+			_, satisfied := satisfiedTraces[trace.Name]
+			_, errored := erroredTraces[trace.Name]
 			if !satisfied && !errored {
 				fmt.Fprintf(os.Stderr,
 					"Error: timeout waiting for condition on node %q\n",
@@ -683,11 +683,11 @@ func waitForTraceState(gadgetNamespace string, traceID string, expectedState str
 // not have an operation.
 func waitForNoOperation(gadgetNamespace string, traceID string) (*gadgetv1alpha1.TraceList, error) {
 	return waitForCondition(gadgetNamespace, traceID, func(trace *gadgetv1alpha1.Trace) bool {
-		if trace.ObjectMeta.Annotations == nil {
+		if trace.Annotations == nil {
 			return true
 		}
 
-		_, present := trace.ObjectMeta.Annotations[GadgetOperation]
+		_, present := trace.Annotations[GadgetOperation]
 		return !present
 	})
 }
@@ -813,7 +813,7 @@ func getTraceListFromParameters(config *TraceConfig) ([]gadgetv1alpha1.Trace, er
 	filter := map[string]string{
 		"gadgetName":    config.GadgetName,
 		"nodeName":      config.CommonFlags.Node,
-		"namespace":     strings.Replace(config.CommonFlags.Namespace, ",", "_", -1),
+		"namespace":     strings.ReplaceAll(config.CommonFlags.Namespace, ",", "_"),
 		"podName":       config.CommonFlags.Podname,
 		"containerName": config.CommonFlags.Containername,
 		"outputMode":    string(config.TraceOutputMode),
@@ -852,7 +852,7 @@ func PrintAllTraces(config *TraceConfig) error {
 	printingMap := map[string]*printingInformation{}
 
 	for _, trace := range traces {
-		id, present := trace.ObjectMeta.Labels[GlobalTraceID]
+		id, present := trace.Labels[GlobalTraceID]
 		if !present {
 			continue
 		}
@@ -988,11 +988,8 @@ func genericStreams(
 		return commonutils.WrapInErrSetupK8sClient(err)
 	}
 
-	verbose := false
+	verbose := params.Verbose && params.OutputMode != commonutils.OutputModeJSON
 	// verbose only when not json is used
-	if params.Verbose && params.OutputMode != commonutils.OutputModeJSON {
-		verbose = true
-	}
 
 	config := &PostProcessConfig{
 		Flows:     len(results.Items),
@@ -1022,7 +1019,7 @@ func genericStreams(
 			} else {
 				completion <- fmt.Sprintf("Error: failed to receive stream on node %q: %v", nodeName, err)
 			}
-		}(i.Spec.Node, i.ObjectMeta.Namespace, i.ObjectMeta.Name, index)
+		}(i.Spec.Node, i.Namespace, i.Name, index)
 	}
 
 	exit := make(chan bool)
diff --git a/docs/api/_golang/datasource/main.go b/docs/api/_golang/datasource/main.go
index fe0b64a48..f0c40b563 100644
--- a/docs/api/_golang/datasource/main.go
+++ b/docs/api/_golang/datasource/main.go
@@ -53,7 +53,7 @@ func do() error {
 
 	gadgetCtx := gadgetcontext.New(
 		context.Background(),
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
 	)
 
diff --git a/docs/api/_golang/from_file/main.go b/docs/api/_golang/from_file/main.go
index 8ed6d95fe..e143988e8 100644
--- a/docs/api/_golang/from_file/main.go
+++ b/docs/api/_golang/from_file/main.go
@@ -58,7 +58,7 @@ func do() error {
 	gadgetCtx := gadgetcontext.New(
 		context.Background(),
 		// The name of the gadget to run is needed as a tarball can contain multiple images.
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
 		gadgetcontext.WithOrasReadonlyTarget(ociStore),
 	)
diff --git a/docs/api/_golang/from_memory/main.go b/docs/api/_golang/from_memory/main.go
index 7be6b305d..689e869be 100644
--- a/docs/api/_golang/from_memory/main.go
+++ b/docs/api/_golang/from_memory/main.go
@@ -70,7 +70,7 @@ func do() error {
 	gadgetCtx := gadgetcontext.New(
 		context.Background(),
 		// The name of the gadget to run is needed as a tarball can contain multiple images.
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
 		gadgetcontext.WithOrasReadonlyTarget(target),
 	)
diff --git a/docs/api/_golang/grpc/main.go b/docs/api/_golang/grpc/main.go
index 5ad30b657..dcb14355e 100644
--- a/docs/api/_golang/grpc/main.go
+++ b/docs/api/_golang/grpc/main.go
@@ -50,7 +50,7 @@ func do() error {
 
 	gadgetCtx := gadgetcontext.New(
 		ctx,
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		gadgetcontext.WithDataOperators(myOperator),
 	)
 
diff --git a/docs/api/_golang/operators/main.go b/docs/api/_golang/operators/main.go
index fae36017e..3d1897f53 100644
--- a/docs/api/_golang/operators/main.go
+++ b/docs/api/_golang/operators/main.go
@@ -58,7 +58,7 @@ func do() error {
 
 	gadgetCtx := gadgetcontext.New(
 		ctx,
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		gadgetcontext.WithDataOperators(
 			ocihandler.OciHandler,
 			localManagerOp,
diff --git a/docs/api/_golang/trace_open/main.go b/docs/api/_golang/trace_open/main.go
index 0546f3bbb..e278df2f8 100644
--- a/docs/api/_golang/trace_open/main.go
+++ b/docs/api/_golang/trace_open/main.go
@@ -72,7 +72,7 @@ func do() error {
 	gadgetCtx := gadgetcontext.New(
 		context.Background(),
 		// This is the image that contains the gadget we want to run.
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		// List of operators that will be run with the gadget
 		gadgetcontext.WithDataOperators(
 			ocihandler.OciHandler, // pass singleton instance of the oci-handler
diff --git a/docs/api/golang.mdx b/docs/api/golang.mdx
index 6cadb65c2..4f93f2136 100644
--- a/docs/api/golang.mdx
+++ b/docs/api/golang.mdx
@@ -125,10 +125,10 @@ image.
 
 ```bash
 # pull the image if not already present on the system
-$ sudo ig image pull trace_open:latest
+$ sudo ig image pull trace_open:main
 
 # export the image to a tarball
-$ sudo ig image export trace_open:latest trace_open.tar
+$ sudo ig image export trace_open:main trace_open.tar
 ```
 
 import FromFile from '!!raw-loader!./_golang/from_file/main.go';
diff --git a/docs/devel/contributing.md b/docs/devel/contributing.md
index 66e520ee1..131284d1a 100644
--- a/docs/devel/contributing.md
+++ b/docs/devel/contributing.md
@@ -369,6 +369,43 @@ to the commit message.
 Signed-off-by: Joe Smith <joe.smith@email.com>
 ```
 
+### Commit History Guidelines
+
+When authoring a PR, ensure that the commit history is clean and
+well-structured. Each commit should contain the following:
+
+- Title: Describe the change in a concise and clear manner. The title should be
+  prefixed with the area that it touches (e.g. gadgets/trace_open,
+  operators/ebpf, docs/, etc.). Commit titles should be in the imperative mood,
+  e.g. "gadgets: Add gadget to trace open calls", instead of "gadgets: Added
+  gadget to trace open calls". Ideally the title should be 72 characters or
+  less.
+- Description: The commit description is used to explain the purpose and context
+  of the changes. It's not mandatory, for instance simple commits fixing typos
+  don't need it.
+- Use a `Fixes:` tag if the commit fixes a bug. This tag should include the
+  first 12 characters of the commit hash introducing the bug. This can be
+  generated by including an alias in the .gitconfig file:
+
+  ```
+  [alias]
+    fixline = log -1 --abbrev=12 --format='Fixes: %h (\"%s\")'
+  ```
+
+  Run it like this to obtain the line to add to the commit message:
+
+  ```bash
+  $ git fixline b6c9380cde28
+  Fixes: b6c9380cde28 ("tcptracer: Add bpf program")
+  ```
+- Be signed off with the `Signed-off-by:` line.
+- Commits handling review comments should be squashed in the original commit.
+  Check how to do it in
+  <!-- markdown-link-check-disable-next-line -->
+  [this StackOverflow answer](https://stackoverflow.com/a/3828861). This helps
+  maintainers and contributors understand the purpose of each commit and ensures
+traceability for bug fixes.
+
 ### Good first issues
 
 If you're looking where to start, you can check the issues with the
diff --git a/docs/gadget-devel/building.md b/docs/gadget-devel/building.md
index 45e734592..0e7778140 100644
--- a/docs/gadget-devel/building.md
+++ b/docs/gadget-devel/building.md
@@ -16,7 +16,7 @@ Usage:
 Flags:
       --btfgen                  Enable btfgen
       --btfhub-archive string   Path to the location of the btfhub-archive files
-      --builder-image string    Builder image to use (default "ghcr.io/inspektor-gadget/ebpf-builder:latest")
+      --builder-image string    Builder image to use (default "ghcr.io/inspektor-gadget/gadget-builder:%IG_TAG%")
   -f, --file string             Path to build.yaml (default "build.yaml")
   -h, --help                    help for build
   -l, --local                   Build using local tools
@@ -54,7 +54,7 @@ The building process is controlled by the `build.yaml` file. The following param
 - `metadata`: File containing metadata about the gadget. It defaults to `gadget.yaml`.
 - `wasm`: Wasm module. It is unset by default. This field supports two kind of files:
     - `*.wasm`: prebuilt Wasm module
-    - `*.go`: automatically built with tinygo
+    - `*.go`: automatically built
 - `cflags`: The C flags used to compile the eBPF program. It is unset by default.
 
 By default, the build command looks for `build.yaml` in PATH. It can be changed with the `--file` flag:
@@ -122,9 +122,9 @@ $ export IG_SOURCE_PATH=/home/ig/inspektor-gadget
 
 # Build an in-tree gadget that uses Wasm
 $ sudo -E ig image build $IG_SOURCE_PATH/gadgets/trace_open -t trace_open
-Pulling builder image ghcr.io/inspektor-gadget/ebpf-builder:latest
-latest: Pulling from inspektor-gadget/ebpf-builder
+Pulling builder image ghcr.io/inspektor-gadget/gadget-builder:%IG_TAG%
+latest: Pulling from inspektor-gadget/gadget-builder
 Digest: sha256:5deec444ea81b866f135430f62b2a580374b7bbcfa5961298cb292546395e3b4
-Status: Image is up to date for ghcr.io/inspektor-gadget/ebpf-builder:latest
+Status: Image is up to date for ghcr.io/inspektor-gadget/gadget-builder:%IG_TAG%
 Successfully built ghcr.io/inspektor-gadget/gadget/trace_open:latest@sha256:d3c0fa005cfc16ae1f9184919b517aa784730ed5bbfb54edc50a3befacbe3383
 ```
diff --git a/docs/gadget-devel/gadget-ebpf-api.md b/docs/gadget-devel/gadget-ebpf-api.md
index b62cbaa5c..a1a837075 100644
--- a/docs/gadget-devel/gadget-ebpf-api.md
+++ b/docs/gadget-devel/gadget-ebpf-api.md
@@ -341,11 +341,7 @@ Symbolize the kernel stack from `gadget_get_kernel_stack(ctx)` (see [kernel-stac
 
 ### `gadget_user_stack`
 
-Symbolize the user stack from `gadget_get_user_stack(ctx, &event->ustack_raw)` (see [user-stack-traces](#user-stack-traces)).
-
-#### Annotations
-
-- `ebpf.formatter.ustack`: Name of the new field. If the annotation is not set and the source field name has a `_raw` suffix, the target name will be set to the source name without that suffix.
+Symbolize the user stack from `gadget_get_user_stack(ctx, &event->ustack, collect_ustack)` (see [user-stack-traces](#user-stack-traces)).
 
 ### `gadget_uid` and `gadget_gid`
 
@@ -611,19 +607,19 @@ struct {
 Then, add a field in the event structure with the type of `gadget_user_stack`,
 designated for storing the stack id along with identifiers for the executable
 so that the stack can be symbolised in userspace.
-`gadget_get_user_stack(ctx, &event->ustack_raw)` could be used  to populate
-this field, this helper function will store the kernel stack into
-`ig_ustack` and fill the field passed as parameter. When ustack_raw is left
-initialized to zero, ig will ignore the stack trace.
+`gadget_get_user_stack(ctx, &event->ustack, collect_ustack)` could be used
+to populate this field, this helper function will store the kernel stack into
+`ig_ustack` and fill the field passed as parameter. When `collect_ustack` is
+false, `ustack` is initialized to zero and ig will ignore the stack trace.
 
 ```C
 struct event {
-	struct gadget_user_stack ustack_raw;
+	struct gadget_user_stack ustack;
 	/* other fields */
 };
 
-const volatile bool print_ustack = false;
-GADGET_PARAM(print_ustack);
+const volatile bool collect_ustack = false;
+GADGET_PARAM(collect_ustack);
 
 ...
 	struct event *event;
@@ -631,10 +627,13 @@ GADGET_PARAM(print_ustack);
 	if (!event)
 		return 0;
 
-	if (print_ustack)
-		gadget_get_user_stack(ctx, &event->ustack_raw);
+	gadget_get_user_stack(ctx, &event->ustack, collect_ustack);
 ```
 
+## Metrics
+
+Check [metrics](metrics.md#using-well-known-types-in-the-ebpf-code).
+
 ## Common information
 
 Most gadgets provide common information like comm, pid, etc. Inspektor Gadget
diff --git a/docs/gadget-devel/gadget-wasm-api-raw.md b/docs/gadget-devel/gadget-wasm-api-raw.md
index 31ea7f1ed..4b6ef4ae1 100644
--- a/docs/gadget-devel/gadget-wasm-api-raw.md
+++ b/docs/gadget-devel/gadget-wasm-api-raw.md
@@ -20,7 +20,7 @@ contains the length and the lower 32 the memory address.
 
 ## Wasm Module Exported Functions
 
-The Wasm module implemented by the gadget also needs to export some functions to
+The Wasm program implemented by the gadget also needs to export some functions to
 be invoked by the host.
 
 ### `gadgetAPIVersion`
@@ -59,6 +59,8 @@ See description in dataSourceSubscribe below.
 
 ## API
 
+The Wasm API provided to the gadget resides in the `ig` module.
+
 ### Log
 
 #### `gadgetLog(u32 level, string msg)`
@@ -272,7 +274,7 @@ Return value:
 
 ### Fields
 
-#### `fieldGetScalar(u32 field, u32 data, u32 kind) u64`
+#### `fieldGetScalar(u32 field, u32 data, u32 kind, errPtr uint32) u64`
 
 Get the value of a scalar field.
 
@@ -280,10 +282,11 @@ Parameters:
 - `field` (u32): Field handle (as returned by `dataSourceGetField` or `dataSourceAddField`)
 - `data` (u32): Data handle
 - `kind` (u32): Kind of access: How to read the field.
+- `errPtr` (u32): A pointer to an uint32 variable where the error will be
+  stored. If it's 0, then the error is not reported.
 
 Return value:
-- Value of the field: The value of the field or 0 in case of errors
-  - TODO: 0 is ambiguous, find a way to report errors!
+- Value of the field
 
 #### `fieldGetBuffer(u32 field, u32 data, u32 kind, u64 dst) i32`
 
@@ -566,3 +569,17 @@ Parameters:
 
 Return value:
 - (u32) 1 if the symbol exists, 0 otherwise.
+
+
+### Filtering
+
+#### `shouldDiscardMntnsID(mntnsID uint64) uint32`
+
+Check if a mount namespace ID should be discarded. It must only be used in
+`gadgetStart` or after.
+
+Parameters:
+- `mntnsID` (u64): Mount namespace ID
+
+Return value:
+- (u32) 1 if the mount namespace ID should be discarded, 0 otherwise.
diff --git a/docs/gadget-devel/hello-world-gadget.md b/docs/gadget-devel/hello-world-gadget.md
index 89a4b181e..d635b8208 100644
--- a/docs/gadget-devel/hello-world-gadget.md
+++ b/docs/gadget-devel/hello-world-gadget.md
@@ -386,7 +386,7 @@ struct event {
 and set this field
 
 ```c
-event->mntns_id = mntns_id;
+event->mntns_id = gadget_get_current_mntns_id();
 ```
 
 After adding the `gadget_mntns_id` field to the event structure, compiling and running again,
@@ -499,9 +499,8 @@ DEBU[0000] Adding field "gid"
 ...
 ```
 
-The uid, gid and mntns_id (added in the [previous
-step](#filtering-and-container-enrichement) fields were added to the metadata
-file:
+The uid, gid and mntns_id (added in a [previous step](#container-enrichment))
+fields were added to the metadata file:
 
 ```yaml
       gid:
diff --git a/docs/gadget-devel/metadata.md b/docs/gadget-devel/metadata.md
index 9c7048782..cf140e67e 100644
--- a/docs/gadget-devel/metadata.md
+++ b/docs/gadget-devel/metadata.md
@@ -66,6 +66,7 @@ The field annotations can be defined for each field of the datasource. The
 following annotations are a non-exhaustive list of the available annotations:
 
 - `description`: Column description
+- `value.one-of`: Defines a list of possible values for this field.
 - `columns.width`: Width to reserve for this column
 - `columns.maxwidth`: Maximum width this column will be scaled to when using auto-scaling
 - `columns.minwidth`: MinWidth will be the minimum width this column will be scaled to when using auto-scaling
diff --git a/docs/gadget-devel/metrics.md b/docs/gadget-devel/metrics.md
index 567cd5bb2..73a867743 100644
--- a/docs/gadget-devel/metrics.md
+++ b/docs/gadget-devel/metrics.md
@@ -5,7 +5,7 @@ sidebar_position: 500
 
 > These instructions explain how to implement metrics collection if you're developing your own or extending an existing
 > gadget. For the user perspective of things (actually exporting the metrics to a third party), please read
-> this (TODO).
+> [this](../reference/export-logs.mdx) .
 
 Inspektor Gadget allows you to easily add metrics to your gadgets that then can be exported to OpenTelemetry compatible
 software (like Prometheus), the CLI, or other third parties by implementing a dedicated operator for that.
@@ -17,10 +17,10 @@ Metrics can either be collected in user-space or directly inside your eBPF progr
 choose depends on how you collect the data and the quantity of it.
 
 If you're sending events to user-space, you can create metrics from those by just adding a couple of annotations to your
-`gadget.yaml` file, or by using some well-known types (TODO links to macros) inside your struct definition inside eBPF code.
+`gadget.yaml` file, or by using some well-known types inside your struct definition inside eBPF code.
 
 If you don't want to emit events, because it would just be too much throughput, you can choose to write the metrics into
-eBPF maps instead and let IG create a data source (TODO link to data source) from it. Those can then be
+eBPF maps instead and let IG create a [data source](gadget-intro.md#data-sources) from it. Those can then be
 exported to for example Prometheus.
 
 | Source     | Application                                                                             | Performance |
@@ -93,8 +93,17 @@ you can easily set annotations when running a gadget using the `--annotate` flag
 
 ### Using well-known types in the eBPF code
 
-You can also edit your eBPF source code and use well-known types (TODO links to well known types) instead of annotating
-the individual fields. An event struct using this could look like:
+You can also edit your eBPF source code and use well-known types instead of annotating
+the individual fields. Inspektor Gadget provides the following types:
+
+- `gadget_counter__u32`: a counter of type `__u32`
+- `gadget_counter__u64`: a counter of type `__u64`
+- `gadget_gauge__u32`: a gauge of type `__u32`
+- `gadget_gauge__u64`: a gauge of type `__u64`
+- `gadget_histogram_slot__u32`: a histogram slot of type `__u32`
+- `gadget_histogram_slot__u64`: a histogram slot of type `__u64`
+
+An event struct using this could look like:
 
 ```c
 struct event {
@@ -145,8 +154,7 @@ data source later on) for the map `metrics` defined above. That map is of type `
 `struct metrics_key` as its key and `struct metrics_value` as its value types respectively.
 
 If you look at the `struct metrics_value` definition, you see one field of type `gadget_counter__u32`. This will tell
-IG that this value is meant to be registered as a `counter` of type `__u32`. All members of `struct metrics_value` will
-be registered as `keys` (labels).
+IG that this value is meant to be registered as a `counter` of type `__u32`. The key fields need to be annotated with `metrics.type: key` on the metadata file.
 
 You can fill the map like you usually would (e.g. using `bpf_map_update_elem`, `bpf_map_lookup_elem` and so on), but
 you still need to annotate the data source with key `metrics.collect` and value `true` like so:
diff --git a/docs/gadget-devel/output.md b/docs/gadget-devel/output.md
index 92da43cee..39cb34992 100644
--- a/docs/gadget-devel/output.md
+++ b/docs/gadget-devel/output.md
@@ -31,3 +31,84 @@ The fields to be displayed in the output when using the `columns`, `json`,
   field called `text` which will carry the rendered histogram as a plain text.
 - Snapshotters: The fields are all the elements of the snapshot entry `struct`
   specified when defining the data source.
+
+## Custom Text Output
+
+There are cases when you want to print custom output. This can be implemented by
+using a [WASM](./gadget-wasm-api-go.md) module and some annotations on the
+[metadata](./metadata.md) file.
+
+First of all, annotate the datasource with the name of the output mode:
+
+```yaml
+datasources:
+  mydatasource:
+    annotations:
+      cli.supported-output-modes: myoutputmode,myoutputmode1,myoutputmode2
+      cli.default-output-mode: myoutputmode
+```
+
+Then, in the WASM module create the data source and a string field called `text`
+that will be used to emit the data:
+
+:::warning
+
+The field needs to be called `text` to be recognized by the CLI operator.
+
+:::
+
+```go
+var (
+	textds    api.DataSource
+	textField api.Field
+)
+
+//go:wasmexport gadgetInit
+func gadgetInit() int32 {
+	var err error
+	textds, err = api.NewDataSource("mydatasource", api.DataSourceTypeSingle)
+	if err != nil {
+		api.Errorf("creating datasource: %s", err)
+		return 1
+	}
+
+	textField, err = textds.AddField("text", api.Kind_String)
+	if err != nil {
+		api.Errorf("adding field: %s", err)
+		return 1
+	}
+
+	return 0
+}
+```
+
+Then, format your output as a string and emit it:
+
+```go
+//go:wasmexport gadgetStart
+func gadgetStart() int32 {
+	nd, err := textds.NewPacketSingle()
+	if err != nil {
+		api.Errorf("creating packet: %s", err)
+		return 1
+	}
+
+	if err := textField.SetString(api.Data(nd), "hi there!!"); err != nil {
+		api.Errorf("setting field: %s", err)
+		return 1
+	}
+
+	if err := textds.EmitAndRelease(api.Packet(nd)); err != nil {
+		api.Errorf("emitting packet: %s", err)
+		return 1
+	}
+
+	return 0
+}
+```
+
+```bash
+$ sudo ig image build . -t hello-world
+$ sudo ig run hello-world --verify-image=false
+hi there!!
+```
diff --git a/docs/gadget-devel/program-types.md b/docs/gadget-devel/program-types.md
index 4b3e55c20..ceb181d58 100644
--- a/docs/gadget-devel/program-types.md
+++ b/docs/gadget-devel/program-types.md
@@ -47,8 +47,28 @@ You can find the list of iterator types supported by Linux with:
 
 #### Fentry / Fexit
 
-The section name must use the `fentry/<function_name` or `fexit/<function_name>`. As in kprobes,
-`<function_name>` is the kernel function that the kprobe will be attached to.
+The section name must use the `fentry/<function_name>` or `fexit/<function_name>`. As in kprobes,
+`<function_name>` is the kernel function that the program will be attached to.
+
+### PerfEvents
+
+The section name must be `perf_event/<name>`, where `<name>` is used to apply parameters to the
+program using the `gadget.yaml` file.
+
+Currently, we only support the following settings (`<name>` is `myPerfEvent` in this case):
+
+```yaml
+programs:
+  myPerfEvent:
+    perf:
+      type: software
+      config: count_sw_cpu_clock
+      sampleType: sample_raw
+    sampler:
+      frequency: 49
+```
+
+All parameters are mandatory for now.
 
 ### Raw Tracepoints
 
diff --git a/docs/gadgets/advise_networkpolicy.mdx b/docs/gadgets/advise_networkpolicy.mdx
new file mode 120000
index 000000000..a53621123
--- /dev/null
+++ b/docs/gadgets/advise_networkpolicy.mdx
@@ -0,0 +1 @@
+../../gadgets/advise_networkpolicy/README.mdx
\ No newline at end of file
diff --git a/docs/gadgets/advise_seccomp.mdx b/docs/gadgets/advise_seccomp.mdx
new file mode 120000
index 000000000..4d4ae5404
--- /dev/null
+++ b/docs/gadgets/advise_seccomp.mdx
@@ -0,0 +1 @@
+../../gadgets/advise_seccomp/README.mdx
\ No newline at end of file
diff --git a/docs/gadgets/bpfstats.mdx b/docs/gadgets/bpfstats.mdx
new file mode 120000
index 000000000..73d09b800
--- /dev/null
+++ b/docs/gadgets/bpfstats.mdx
@@ -0,0 +1 @@
+../../gadgets/bpfstats/README.mdx
\ No newline at end of file
diff --git a/docs/gadgets/files/seccomp-confined.yaml b/docs/gadgets/files/seccomp-confined.yaml
new file mode 100644
index 000000000..8c1eea232
--- /dev/null
+++ b/docs/gadgets/files/seccomp-confined.yaml
@@ -0,0 +1,15 @@
+# confined.yaml
+apiVersion: v1
+kind: Pod
+metadata:
+  name: default-pod
+  labels:
+    app: default-pod
+spec:
+  securityContext:
+    seccompProfile:
+      type: Localhost
+      localhostProfile: profile.json
+  containers:
+  - name: test-container
+    image: docker.io/library/nginx:latest
diff --git a/docs/gadgets/files/seccomp-unconfined.yaml b/docs/gadgets/files/seccomp-unconfined.yaml
new file mode 100644
index 000000000..1f27377a8
--- /dev/null
+++ b/docs/gadgets/files/seccomp-unconfined.yaml
@@ -0,0 +1,14 @@
+# unconfined.yaml
+apiVersion: v1
+kind: Pod
+metadata:
+  name: default-pod
+  labels:
+    app: default-pod
+spec:
+  securityContext:
+    seccompProfile:
+      type: RuntimeDefault
+  containers:
+  - name: test-container
+    image: docker.io/library/nginx:latest
diff --git a/docs/gadgets/profile_cpu.mdx b/docs/gadgets/profile_cpu.mdx
new file mode 100644
index 000000000..dd0c7daa0
--- /dev/null
+++ b/docs/gadgets/profile_cpu.mdx
@@ -0,0 +1,125 @@
+---
+title: profile_cpu
+sidebar_position: 0
+---
+
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+# profile_cpu
+
+The profile cpu gadget takes samples of stack traces.
+
+## Getting started
+
+Running the gadget:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --map-fetch-interval 0 [flags]
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --map-fetch-interval 0 [flags]
+        ```
+    </TabItem>
+</Tabs>
+
+## Guide
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        Here we deploy a small demo pod "random":
+
+        ```bash
+        $ kubectl run --restart=Never --image=busybox random -- sh -c 'cat /dev/urandom > /dev/null'
+        pod/random created
+        ```
+
+        Using the profile cpu gadget, we can see the list of stack traces.
+        The following command filters only for pods named "random", execute the command
+        and interrupt it after ~30 seconds. The `--kernel-stacks-only` option is passed to show only the
+        kernel stack traces.
+
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --podname random --kernel-stacks-only --map-fetch-interval 0
+        ```
+
+        After a while press with Ctrl-C to stop trace collection
+
+        ```
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --timeout 5 --podname random --kernel-stacks-only
+        K8S.NODE                 K8S.NAMESPACE            K8S.PODNAME             K8S.CONTAINERNAME              PID COMM             SAMPLES              KERN_STACK
+        minikube-docker          default                  random                  random                       38130 containerd-shim  5                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_block_generic;…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_permute; [1]ge…
+        ```
+
+        From the traces above, you can see that the pod is spending CPU time in the
+        Linux function `urandom_read`.
+
+        Instead of waiting, you can use the `--timeout` argument:
+
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --timeout 5 --podname random --kernel-stacks-only --map-fetch-interval 0
+        K8S.NODE                 K8S.NAMESPACE            K8S.PODNAME             K8S.CONTAINERNAME              PID COMM             SAMPLES              KERN_STACK
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]_copy_to_iter; [1]get…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  5                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]get_random_bytes_user…
+        ```
+
+        Finally, we need to clean up our pod:
+
+        ```bash
+        $ kubectl delete pod random
+        ```
+    </TabItem>
+    <TabItem value="ig" label="ig">
+        * Generate some kernel load:
+
+        ```bash
+        $ docker run -d --rm --name random busybox cat /dev/urandom > /dev/null
+        ```
+
+        * Start `ig`:
+
+        ```bash
+        $ sudo ./ig profile cpu --kernel-stacks-only --containername random --runtimes docker --map-fetch-interval 0
+        ```
+
+        * Observe the results:
+
+        ```bash
+        RUNTIME.CONTAINERNAME     KERNEL_IP            COMM                    PID        TID SAMPLES              KERN_STACK
+        random                    18446603336363922440 cat                   83451      83451 2                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336357767960 cat                   83451      83451 1                    [0]rcu_all_qs; [1]__cond_resched; [2]get_random_bytes_user; [3]ura…
+        random                    18446603336363922292 cat                   83451      83451 2                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922360 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922208 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922380 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363862956 cat                   83451      83451 1                    [0]push_pipe; [1]_copy_to_iter; [2]get_random_bytes_user; [3]urand…
+        random                    18446603336363922252 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922260 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336357585584 cat                   83451      83451 1                    [0]mutex_spin_on_owner; [1]__mutex_lock.constprop.0; [2]__mutex_lo…
+        random                    18446603336363922196 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922444 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        ```
+
+        * Remove the docker container:
+
+        ```bash
+        $ docker stop random
+        ```
+
+    </TabItem>
+</Tabs>
\ No newline at end of file
diff --git a/docs/gadgets/top_process.mdx b/docs/gadgets/top_process.mdx
new file mode 120000
index 000000000..7bf3abec0
--- /dev/null
+++ b/docs/gadgets/top_process.mdx
@@ -0,0 +1 @@
+../../gadgets/top_process/README.mdx
\ No newline at end of file
diff --git a/docs/gadgets/traceloop.mdx b/docs/gadgets/traceloop.mdx
new file mode 120000
index 000000000..2114197e8
--- /dev/null
+++ b/docs/gadgets/traceloop.mdx
@@ -0,0 +1 @@
+../../gadgets/traceloop/README.mdx
\ No newline at end of file
diff --git a/docs/quick-start.md b/docs/quick-start.md
index 1ad7ff9f2..b4f9eac21 100644
--- a/docs/quick-start.md
+++ b/docs/quick-start.md
@@ -7,23 +7,19 @@ description: Quick start for running Inspektor Gadget.
 Inspektor Gadget can be used either on a Linux machine or on Kubernetes. It
 supports both ephemeral commands and permanent installation.
 
-```mermaid
-flowchart TD
-W{{Where to run Inspektor Gadget?}}
-W -->|Kubernetes| K[How long?]
-W -->|Linux system| L[How long?]
-L --> |Just one command| ig1>ig run]
-L --> |Long running| ig2>ig daemon + gadgetctl]
-K --> |Just one command| ku1>kubectl debug node]
-K --> |Long running| ku2>kubectl gadget]
-```
+|  | Permanent installation | Ephemeral run |
+|---|---|---|
+| [On Kubernetes](#kubernetes) | [Long-running deployment on **all** worker nodes](#long-running-deployment-on-all-worker-nodes)<br><pre>$ kubectl gadget deploy ...</pre><br>[Other installation methods](reference/install-kubernetes.md) | [One-shot command on **one** worker node](#one-shot-command-on-one-worker-node)<br><pre>$ kubectl debug node ...</pre><br> |
+| [On Linux systems](#linux) | [Download the official ig binary](#download-the-official-ig-binary)<br><pre>$ ig run ...</pre><br>[Other installation methods](reference/install-linux.md) | [Run ig in a container](#run-ig-in-a-container)<br><pre>$ docker run ...</pre><br> |
 
 <!-- markdown-link-check-disable-next-line -->
-The following examples use the [trace_open](./gadgets/trace_open) Gadget which triggers when a file is open on the system.
+The following examples use the [trace_open](./gadgets/trace_open) Gadget which shows the files being opened.
 
 ### Kubernetes
 
-#### Deployed to the Cluster
+To use Inspektor Gadget on Kubernetes, choose one of the following methods.
+
+#### Long-running deployment on all worker nodes
 
 [krew](https://sigs.k8s.io/krew) is the recommended way to install
 `kubectl gadget`. You can follow the
@@ -34,24 +30,29 @@ commands.
 ```bash
 kubectl krew install gadget
 kubectl gadget deploy
-kubectl gadget run trace_open:%IG_TAG%
+kubectl gadget run trace_open:%IG_TAG% -n default -c myapp
 ```
 
-Check [Installing on Kubernetes](./reference/install-kubernetes.md) to learn more about different options.
+For more details, check [Installing on Kubernetes](./reference/install-kubernetes.md) and the [run](./reference/run.mdx) command for filtering and exporting.
 
-#### Kubectl Node Debug
+#### One-shot command on one worker node
 
-We can use [kubectl node debug](https://kubernetes.io/docs/tasks/debug/debug-cluster/kubectl-node-debug/) to run `ig` on a Kubernetes node:
+We can use [kubectl debug node](https://kubernetes.io/docs/tasks/debug/debug-cluster/kubectl-node-debug/) to run `ig` on a Kubernetes node:
 
 ```bash
-kubectl debug --profile=sysadmin node/minikube-docker -ti --image=ghcr.io/inspektor-gadget/ig:%IG_TAG% -- ig run trace_open:%IG_TAG%
+kubectl debug --profile=sysadmin node/minikube-docker -ti \
+        --image=ghcr.io/inspektor-gadget/ig:%IG_TAG% -- \
+        ig run trace_open:%IG_TAG% \
+        --filter k8s.namespace==default,k8s.containerName==myapp
 ```
 
 For more information on how to use `ig` without installation on Kubernetes, please refer to the [ig documentation](./reference/ig.md#using-ig-with-kubectl-debug-node).
 
 ### Linux
 
-#### Install Locally
+To use Inspektor Gadget on a Linux machine, choose one of the following methods.
+
+#### Download the official ig binary
 
 Install the `ig` binary locally on Linux and run a Gadget:
 
@@ -61,15 +62,15 @@ IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gad
 
 curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/ig-linux-${IG_ARCH}-${IG_VERSION}.tar.gz | sudo tar -C /usr/local/bin -xzf - ig
 
-sudo ig run trace_open:%IG_TAG%
+sudo ig run trace_open:%IG_TAG% -c mycontainer
 ```
 
-Check [Installing on Linux](./reference/install-linux.md) to learn more.
+For more details, check [Installing on Linux](./reference/install-linux.md) and the [run](./reference/run.mdx) command for filtering and exporting.
 
-#### Run in a Container
+#### Run ig in a container
 
 ```bash
-docker run -ti --rm --privileged -v /:/host --pid=host ghcr.io/inspektor-gadget/ig:%IG_TAG% run trace_open:%IG_TAG%
+docker run -ti --rm --privileged -v /:/host --pid=host ghcr.io/inspektor-gadget/ig:%IG_TAG% run trace_open:%IG_TAG% -c mycontainer
 ```
 
 For more information on how to use `ig` without installation on Linux, please check [Using ig in a container](./reference/ig.md#using-ig-in-a-container).
@@ -90,7 +91,5 @@ Download the `gadgetctl` tools for MacOS
 
 
 ```bash
-gadgetctl run trace_open:%IG_TAG% --remote-address=tcp://$IP:1234
+gadgetctl run trace_open:%IG_TAG% --remote-address=tcp://$IP:1234 -c mycontainer
 ```
-
-***The above demonstrates the simplest command. To learn how to filter, export, etc. please consult the documentation for the [run](./reference/run.mdx) command***.
diff --git a/docs/reference/export-metrics.mdx b/docs/reference/export-metrics.mdx
index 04a5720c7..1d3c2e923 100644
--- a/docs/reference/export-metrics.mdx
+++ b/docs/reference/export-metrics.mdx
@@ -21,7 +21,7 @@ In order to enable the metrics listener, you need to set the
 <Tabs groupId="env">
     <TabItem value="kubectl-gadget" label="kubectl gadget">
         ```bash
-        WIP: Headless mode for kubectl gadget is under development
+        kubectl gadget deploy --otel-metrics-listen=true
         ```
     </TabItem>
 
@@ -69,13 +69,18 @@ Following is an example of how to enable metrics export for the
 <Tabs groupId="env">
     <TabItem value="kubectl-gadget" label="kubectl gadget">
         ```bash
-        WIP: Headless mode for kubectl gadget is under development
+        kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_blockio:%IG_TAG% \
+                    --name profileblockio \
+                    --annotate=blockio:metrics.collect=true \
+                    --otel-metrics-name=blockio:blockio-metrics \
+                    --detach
         ```
     </TabItem>
 
     <TabItem value="ig" label="ig">
         ```bash
         gadgetctl run ghcr.io/inspektor-gadget/gadget/profile_blockio:%IG_TAG% \
+                    --name profileblockio \
                     --annotate=blockio:metrics.collect=true \
                     --otel-metrics-name=blockio:blockio-metrics \
                     --detach
@@ -97,7 +102,40 @@ the metrics export for the gadget. For example, under `blockio-metrics` for the
 <Tabs groupId="env">
     <TabItem value="kubectl-gadget" label="kubectl gadget">
         ```bash
-        WIP: Headless mode for kubectl gadget is under development
+        $ POD_NAME=$(kubectl get pods -n gadget -o jsonpath="{.items[0].metadata.name}")
+        $ kubectl -n gadget port-forward $POD_NAME 2224:2224 &
+        $ curl http://localhost:2224/metrics -s | grep blockio-metrics
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="1"} 0
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="2"} 0
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="4"} 0
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="8"} 4347
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="16"} 11534
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="32"} 17621
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="64"} 23856
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="128"} 34452
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="256"} 37677
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="512"} 37812
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="1024"} 37876
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="2048"} 37882
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="4096"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="8192"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="16384"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="32768"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="65536"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="131072"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="262144"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="524288"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="1.048576e+06"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="2.097152e+06"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="4.194304e+06"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="8.388608e+06"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="1.6777216e+07"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="3.3554432e+07"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="6.7108864e+07"} 37891
+        latency_bucket{otel_scope_name="blockio-metrics",otel_scope_version="",le="+Inf"} 37891
+        latency_sum{otel_scope_name="blockio-metrics",otel_scope_version=""} 3.109288e+06
+        latency_count{otel_scope_name="blockio-metrics",otel_scope_version=""} 37891
+        otel_scope_info{otel_scope_name="blockio-metrics",otel_scope_version=""} 1
         ```
     </TabItem>
 
@@ -146,20 +184,13 @@ You can stop the metrics collection at any time by deleting the gadget instance:
 <Tabs groupId="env">
     <TabItem value="kubectl-gadget" label="kubectl gadget">
         ```bash
-        WIP: Headless mode for kubectl gadget is under development
+        $ kubectl gadget delete profileblockio
         ```
     </TabItem>
 
     <TabItem value="ig" label="ig">
         ```bash
-        $ gadgetctl list
-        ID           NAME                                                      TAGS                                                      GADGET
-        3e68634c4c28 amazing_payne                                                                                                       ghcr.io/inspektor-gadget/gadget/profile_blockio:latest
-        ```
-
-        ```bash
-        $ gadgetctl delete 3e68634c4c28
-        3e68634c4c28a981a60fe96a29d24a99
+        $ gadgetctl delete profileblockio
         ```
     </TabItem>
 </Tabs>
@@ -184,6 +215,8 @@ operator:
         insecure: true
         temporality: delta
         interval: 30s
+        collectGoMetrics: false
+        collectIGMetrics: false
 ```
 
 This will add a new exporter named "myexporter" that can be selected by using the flag
@@ -202,3 +235,12 @@ Can be `cumulative` (default) or `delta`. See the
 #### Interval
 
 Interval in which to report metrics to the server.
+
+#### collectGoMetrics
+
+Enable collecting/exporting internal Go metrics. These are exposed by the Go programming language (that IG is written in)
+and contain a set of performance and usage metrics.
+
+#### collectIGMetrics
+
+Enable collecting/exporting internal Inspektor Gadget metrics.
diff --git a/docs/reference/images.md b/docs/reference/images.md
index c606d639e..95465e559 100644
--- a/docs/reference/images.md
+++ b/docs/reference/images.md
@@ -90,7 +90,7 @@ Available Commands:
   build       Build a gadget image
   export      Export the SRC_IMAGE images to DST_FILE
   import      Import images from SRC_FILE
-  inspect     Inspect the local gadget image
+  inspect     Inspect a gadget image
   list        List gadget images on the host
   pull        Pull the specified image from a remote registry
   push        Push the specified image to a remote registry
@@ -277,31 +277,180 @@ trace_open                     latest                        19ea8377298f 30 min
 
 #### `inspect`
 
-Inspect the given local gadget image.
+Inspect the given gadget image.
 
 ```bash
 $ sudo ig image inspect -h
-Inspect the local gadget image
+Inspect a gadget image
 
 Usage:
-  ig image inspect [flags]
+  ig image inspect IMAGE [flags]
 
 Flags:
-  -h, --help            help for inspect
-  -o, --output string   Output mode, possible values are, columns, json, jsonpretty (default "columns")
-```
+  -h, --help                  help for inspect
+  -o, --output       string   Output mode: json, jsonpretty, yaml (default "jsonpretty")
+  --extra-info       string   specify particular info required
+  --jsonpath         string   JSONPath to extract from the extra info
+  --show-datasources bool     show datasources along with their fields
+  ```
 
 ```bash
-$ sudo ig image pull ghcr.io/inspektor-gadget/gadget/trace_exec
-Successfully pulled ghcr.io/inspektor-gadget/gadget/trace_exec:latest@sha256:a9e26ab904c32b47aec2588cabe11a1839332ee53faef861eac3c5323412395d
-$ sudo image inspect ghcr.io/inspektor-gadget/gadget/trace_exec
-REPOSITORY                                TAG                                       DIGEST       CREATED
-ghcr.io/inspektor-gadget/gadget/trace_ex… latest                                    a9e26ab904c3 about an hour ago
-$ sudo image inspect -o jsonpretty ghcr.io/inspektor-gadget/gadget/trace_exec
+# Pull an image to inspect
+$ sudo ig image pull ghcr.io/inspektor-gadget/gadget/trace_tcp
+Successfully pulled ghcr.io/inspektor-gadget/gadget/trace_tcp:latest@sha256:a9e26ab904c32b47aec2588cabe11a1839332ee53faef861eac3c5323412395d
+
+# Inspect the image with default output (jsonpretty)
+$ sudo ig image inspect ghcr.io/inspektor-gadget/gadget/trace_tcp
+{
+  "ebpf.maps": {
+    "content": "[{\"Name\":\"gadget_heap\",\"Type\":\"PerCPUArray\"},{\"Name\":\"gadget_mntns_filter_map\",\"Type\":\"Hash\"},{\"Name\":\"tuplepid\",\"Type\":\"Hash\"},{\"Name\":\"sockets\",\"Type\":\"Hash\"},{\"Name\":\"events\",\"Type\":\"RingBuf\"}]",
+    "contentType": "application/json"
+  },
+  "ebpf.sections": {
+    "content": "[\"\",\".strtab\",\".text\",\"kprobe/tcp_v4_connect\",\".relkprobe/tcp_v4_connect\",\"kretprobe/tcp_v4_connect\",\".relkretprobe/tcp_v4_connect\",\"kprobe/tcp_v6_connect\",\".relkprobe/tcp_v6_connect\",\"kretprobe/tcp_v6_connect\",\".relkretprobe/tcp_v6_connect\",\"kprobe/tcp_close\",\".relkprobe/tcp_close\",\"kprobe/tcp_set_state\",\".relkprobe/tcp_set_state\",\"kretprobe/inet_csk_accept\",\".relkretprobe/inet_csk_accept\",\".rodata\",\".bss\",\"license\",\".maps\",\".BTF\",\".rel.BTF\",\".BTF.ext\",\".rel.BTF.ext\",\".llvm_addrsig\",\".symtab\"]",
+    "contentType": "application/json"
+  },
+  ...
+}
+
+# List possible extra-info
+$ sudo ig image inspect fsnotify:main |jq keys
+[
+  "ebpf.flowchart",
+  "ebpf.maps",
+  "ebpf.programs",
+  "ebpf.sections",
+  "ebpf.sequence",
+  "ebpf.variables",
+  "oci.created",
+  "oci.digest",
+  "oci.manifest",
+  "oci.metadata",
+  "oci.repository",
+  "oci.tag",
+  "wasm.gadgetAPIVersion",
+  "wasm.upcalls"
+]
+
+# Retrieve specific info using --extra-info
+$ sudo ig image inspect --extra-info=ebpf.sections ghcr.io/inspektor-gadget/gadget/trace_tcp -o json
+["",".strtab",".text","kprobe/tcp_v4_connect",".relkprobe/tcp_v4_connect","kretprobe/tcp_v4_connect",".relkretprobe/tcp_v4_connect","kprobe/tcp_v6_connect",".relkprobe/tcp_v6_connect","kretprobe/tcp_v6_connect",".relkretprobe/tcp_v6_connect","kprobe/tcp_close",".relkprobe/tcp_close","kprobe/tcp_set_state",".relkprobe/tcp_set_state","kretprobe/inet_csk_accept",".relkretprobe/inet_csk_accept",".rodata",".bss","license",".maps",".BTF",".rel.BTF",".BTF.ext",".rel.BTF.ext",".llvm_addrsig",".symtab"]
+
+# Listing programs
+$ sudo ig image inspect fsnotify --extra-info ebpf.programs --jsonpath='[*].Section'
+[
+  "kprobe/fsnotify_insert_event",
+  "kretprobe/inotify_handle_inode_event",
+  "kretprobe/fanotify_handle_event",
+  "kretprobe/fsnotify_remove_first_event",
+  "kretprobe/inotify_handle_event",
+  "kprobe/fanotify_handle_event",
+  "kprobe/fsnotify_destroy_event",
+  "kprobe/fsnotify_remove_first_event",
+  "kprobe/inotify_handle_inode_event",
+  "kprobe/inotify_handle_event"
+]
+
+# Printing the source of a program
+$ sudo ig image inspect fsnotify:latest --extra-info ebpf.programs|jq -r '.[] | select(.Section=="kprobe/fsnotify_remove_first_event") | .Source'
+ig_fa_pick_e:
+	  ; int BPF_KPROBE(ig_fa_pick_e, struct fsnotify_group *group)
+	 0: LdXMemDW dst: r6 src: r1 off: 112 imm: 0
+	 1: StXMemDW dst: rfp src: r6 off: -8 imm: 0
+	  ; pid_tgid = bpf_get_current_pid_tgid();
+	 2: Call FnGetCurrentPidTgid
+...
+	25: MovImm dst: r0 imm: 0
+	26: Exit
+
+# Printing the gadget annotations
+$ sudo ig image inspect audit_seccomp:main --extra-info=oci.manifest --jsonpath='.annotations'
 {
-  "Repository": "ghcr.io/inspektor-gadget/gadget/trace_exec",
-  "Tag": "latest",
-  "Digest": "sha256:a9e26ab904c32b47aec2588cabe11a1839332ee53faef861eac3c5323412395d",
-  "Created": "2024-09-02T10:49:44Z"
+  "io.inspektor-gadget.builder.version": "fb7bfcd",
+  "org.opencontainers.image.created": "2025-04-10T08:49:17Z",
+  "org.opencontainers.image.description": "Audit syscalls according to the seccomp profile",
+  "org.opencontainers.image.documentation": "https://www.inspektor-gadget.io/docs/latest/gadgets/audit_seccomp",
+  "org.opencontainers.image.source": "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/audit_seccomp",
+  "org.opencontainers.image.title": "audit seccomp",
+  "org.opencontainers.image.url": "https://inspektor-gadget.io/"
 }
+
+# Indexing ebpf programs using the jsonpath flag
+$ sudo ig image inspect advise_seccomp:latest --extra-info=ebpf.programs --jsonpath="[0].Section"
+"raw_tracepoint/sys_enter"
+
+# Indexing oci manifest fields using jsonpath flag
+$ sudo ig image inspect advise_seccomp:latest --extra-info=oci.manifest --jsonpath=".layers[0].digest"
+"sha256:36f802754b93c6592a9d44e6a6b5ee4910773750966f230f3f10324065017639"
+
+# Printing the gadget metadata
+$ sudo ig image inspect audit_seccomp:main --extra-info=oci.metadata
+name: audit seccomp
+description: Audit syscalls according to the seccomp profile
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/audit_seccomp
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/audit_seccomp
+datasources:
+  seccomp:
+    fields:
+      syscall_raw:
+        annotations:
+          columns.hidden: true
+      syscall:
+        annotations:
+          columns.width: 20
+      code:
+        annotations:
+          description: Seccomp return code
+          columns.width: 20
+          columns.ellipsis: start
+      ustack:
+        annotations:
+          columns.hidden: true
+      ustack.addresses:
+        annotations:
+          description: User stack's addresses
+          columns.hidden: true
+          columns.width: 20
+      ustack.symbols:
+        annotations:
+          description: User stack's symbols
+          columns.hidden: true
+          columns.width: 20
+params:
+  ebpf:
+    collect_ustack:
+      key: collect-ustack
+      defaultValue: "false"
+      description: Collect user stack traces
+
+# Listing the layers from the oci manifest
+$ sudo ig image inspect advise_seccomp:latest --extra-info=oci.manifest --jsonpath=".layers[*].mediaType" -o yaml
+- application/vnd.gadget.ebpf.program.v1+binary
+- application/vnd.gadget.wasm.program.v1+binary
+
+# List the fields of a datasource
+$ sudo ig image inspect advise_seccomp:latest --show-datasources --jsonpath='[0].fields[*].fullName'
+[
+  "mntns_id_raw",
+  "syscalls",
+  "k8s",
+  "k8s.node",
+  "k8s.namespace",
+  "k8s.podName",
+  "k8s.containerName",
+  "k8s.hostnetwork",
+  "k8s.podLabels",
+  "k8s.owner",
+  "k8s.owner.kind",
+  "k8s.owner.name",
+  "runtime",
+  "runtime.containerName",
+  "runtime.runtimeName",
+  "runtime.containerId",
+  "runtime.containerPid",
+  "runtime.containerImageName",
+  "runtime.containerImageDigest",
+  "runtime.containerStartedAt"
+]
 ```
\ No newline at end of file
diff --git a/docs/reference/install-kubernetes.md b/docs/reference/install-kubernetes.md
index 0547eb166..585a7dacf 100644
--- a/docs/reference/install-kubernetes.md
+++ b/docs/reference/install-kubernetes.md
@@ -7,9 +7,13 @@ description: Getting Started on Kubernetes
 Inspektor Gadget is composed of a `kubectl` plugin executed in the user's
 system and a DaemonSet deployed in the cluster.
 
-## Installing kubectl gadget
+## Installing the `kubectl gadget` client
 
-Choose one way to install the Inspektor Gadget `kubectl` plugin.
+Choose one way to install the Inspektor Gadget `kubectl` plugin:
+* [Using krew](#using-krew)
+* [Install a specific release](#install-a-specific-release)
+* [Install from distribution package](#install-from-distribution-package)
+* [Compilation from source](#compilation-from-source)
 
 ### Using krew
 
@@ -37,10 +41,16 @@ $ curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/downloa
 $ kubectl gadget version
 ```
 
-### Compile from source
+### Install from distribution package
+
+`kubectl-gadget` is packaged for the following distributions:
+
+[![`kubectl-gadget`](https://repology.org/badge/vertical-allrepos/kubectl-gadget.svg)](https://repology.org/project/kubectl-gadget/versions)
+
+### Compilation from source
 
 To build Inspektor Gadget from source, you'll need to have a Golang version
-1.23 or higher installed.
+1.24 or higher installed.
 
 ```bash
 $ git clone https://github.com/inspektor-gadget/inspektor-gadget.git
@@ -50,11 +60,16 @@ $ sudo cp kubectl-gadget-linux-amd64 /usr/local/bin/kubectl-gadget
 $ kubectl gadget version
 ```
 
-## Installing in the cluster
+## Installing the DaemonSet in the cluster
 
 Before you begin, ensure that your Kubernetes cluster is up and running and that you can access it with `kubectl`.
 
-### Quick installation
+To install Inspektor Gadget on Kubernetes, choose one of the following methods:
+* [Quick installation with the deploy command](#quick-installation-with-the-deploy-command)
+* [Installation with the Helm chart](#installation-with-the-helm-chart)
+* [Installation on Minikube with the Inspektor Gadget Addon](#installation-on-minikube-with-the-inspektor-gadget-addon)
+
+### Quick installation with the deploy command
 
 ```bash
 $ kubectl gadget deploy
@@ -64,7 +79,7 @@ This will deploy the gadget DaemonSet along with its RBAC rules.
 
 ![Screencast of the deploy command](../install.gif)
 
-### Choosing the gadget image
+#### Choosing the gadget image
 
 If you wish to install an alternative gadget image, you could use the following commands:
 
@@ -72,7 +87,7 @@ If you wish to install an alternative gadget image, you could use the following
 $ kubectl gadget deploy --image=ghcr.io/myfork/inspektor-gadget:tag
 ```
 
-### Deploy to specific nodes
+#### Deploy to specific nodes
 
 The `--node-selector` flag accepts a [label
 selector](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)
@@ -89,14 +104,14 @@ $ kubectl gadget deploy --node-selector kubernetes.io/hostname!=minikube
 $ kubectl gadget deploy --node-selector 'kubernetes.io/hostname in (minikube, minikube-m03)'
 ```
 
-### Deploying into a custom namespace
+#### Deploying into a custom namespace
 
 By default Inspektor Gadget is deployed to the namespace `gadget`.
 This can be changed with the `--gadget-namespace` flag.
 When using gadgets (e.g. `kubectl gadget trace exec`) the deployed namespace is discovered automatically and no additional flags are needed during the usage.
 For `undeploy` the `--gadget-namespace` flag is mandatory.
 
-### Hook Mode
+#### Hook Mode
 
 Inspektor Gadget needs to detect when containers are started and stopped.
 The different supported modes can be set by using the `hook-mode` option:
@@ -121,7 +136,7 @@ The different supported modes can be set by using the `hook-mode` option:
   eBPF module. It works with both runc and crun. It works regardless of the
   pid namespace configuration.
 
-### Deploying with an AppArmor profile
+#### Deploying with an AppArmor profile
 
 By default, Inspektor Gadget runs as unconfined because it needs to write to different files under `/sys`.
 It is nonetheless possible to deploy Inspektor Gadget using a custom AppArmor profile with the `--apparmor-profile` flag:
@@ -132,7 +147,7 @@ $ kubectl gadget deploy --apparmor-profile 'localhost/inspektor-gadget-profile'
 
 Note that, the AppArmor profile should already exists in the cluster to be used.
 
-### Deploying with a seccomp profile
+#### Deploying with a seccomp profile
 
 By default, Inspektor Gadget syscalls are not restricted.
 If the seccomp profile operator is [installed](https://github.com/kubernetes-sigs/security-profiles-operator/blob/main/installation-usage.md#install-operator), you can use the `--seccomp-profile` flag to deploy Inspektor Gadget with a custom seccomp profile.
@@ -158,20 +173,7 @@ spec:
 $ kubectl gadget deploy --seccomp-profile 'gadget-profile.yaml'
 ```
 
-### Helm Chart Installation
-
-Inspektor Gadget can also be installed using our [official Helm chart](https://github.com/inspektor-gadget/inspektor-gadget/tree/main/charts). To install using Helm, run the following commands:
-
-```bash
-$ helm repo add gadget https://inspektor-gadget.github.io/charts
-$ helm install gadget gadget/gadget --namespace=gadget --create-namespace
-```
-
-For more information on the Helm chart, please refer to the [Helm Chart documentation](https://artifacthub.io/packages/helm/gadget/gadget).
-
-Also, all the above configurations options can be passed as [values](https://artifacthub.io/packages/helm/gadget/gadget#values) to the Helm chart.
-
-### Verifying the Inspektor Gadget Image
+#### Verifying the Inspektor Gadget Image
 
 When deploying Inspektor Gadget using `kubectl gadget deploy`, the image will be automatically verified if the `policy-controller` is deployed on your Kubernetes cluster.
 To do so, you first need to [install](https://docs.sigstore.dev/policy-controller/installation/) this component.
@@ -215,7 +217,7 @@ WARN[0000] No policy controller found, the container image will not be verified
 Inspektor Gadget successfully deployed
 ```
 
-#### Skipping verification
+##### Skipping verification
 
 You can also decide to not verify the image, using `--verify-image=false`.
 However, we definitely recommend enabling this security feature.
@@ -227,7 +229,7 @@ WARN[0000] You used --verify-image=false, the container image will not be verifi
 Inspektor Gadget successfully deployed
 ```
 
-#### Using custom public key for verification
+##### Using custom public key for verification
 
 To verify the image with a specific key, you can use the `--public-key` flag:
 
@@ -260,30 +262,46 @@ $ kubectl gadget run trace_exec
 INFO[0000] Experimental features enabled
 ...
 ```
-### Specific Information for Different Platforms
 
-This section explains the additional steps that are required to run Inspektor
-Gadget in some platforms.
+### Installation with the Helm chart
+
+Inspektor Gadget can also be installed using our [official Helm chart](https://github.com/inspektor-gadget/inspektor-gadget/tree/main/charts). To install using Helm, you can use the following approaches:
+
+#### From OCI registry
+
+```bash
+CHART_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name | sed 's/^v//')
+helm install gadget --namespace=gadget --create-namespace oci://ghcr.io/inspektor-gadget/inspektor-gadget/charts/gadget --version=$CHART_VERSION
+```
+
+#### From HTTP(s) repository
+
+```bash
+helm repo add gadget https://inspektor-gadget.github.io/charts
+helm install gadget gadget/gadget --namespace=gadget --create-namespace
+```
+
+For more information on the Helm chart, please refer to the [Helm Chart documentation](https://artifacthub.io/packages/helm/gadget/gadget).
+
+Also, all the above configurations options can be passed as [values](https://artifacthub.io/packages/helm/gadget/gadget#values) to the Helm chart.
 
-#### Minikube
+### Installation on Minikube with the Inspektor Gadget Addon
 
-You can deploy Inspektor Gadget in `minikube` in different ways:
-- Manually, using the `kubectl gadget deploy` command as described above.
-- Using the [Inspektor Gadget Addon](https://minikube.sigs.k8s.io/docs/handbook/addons/inspektor-gadget/) available
+In addition to the deploy command and the Helm chart, Inspektor Gadget offers another alternative to install on Minikube using the [Inspektor Gadget Addon](https://minikube.sigs.k8s.io/docs/handbook/addons/inspektor-gadget/) available
   since [minikube v1.31.0](https://github.com/kubernetes/minikube/releases).
 
 We recommend to use the `docker` driver:
 
 ```bash
 $ minikube start --driver=docker
-# Deploy Inspektor Gadget in the cluster as described above
+$ minikube addons enable inspektor-gadget
 ```
 
 But can also use the `kvm2` one:
 
 ```bash
 $ minikube start --driver=kvm2
-# Deploy Inspektor Gadget in the cluster as described above
+$ minikube addons enable inspektor-gadget
 ```
 
 ### Private registries
@@ -358,13 +376,21 @@ For more information about the configuration file, check the [configuration guid
 
 ## Uninstalling from the cluster
 
-The following command will remove all the resources created by Inspektor
-Gadget from the cluster:
+Depending on your installation method, use one of the following command to
+remove all the resources created by Inspektor Gadget on the cluster:
 
 ```bash
 $ kubectl gadget undeploy
 ```
 
+```bash
+$ helm uninstall inspektor-gadget
+```
+
+```bash
+$ minikube addons disable inspektor-gadget
+```
+
 ## Version skew policy
 
 Inspektor Gadget requires the kubectl-gadget plugin and the DaemonSet
diff --git a/docs/reference/install-linux.md b/docs/reference/install-linux.md
index 42327bd09..46ab60fef 100644
--- a/docs/reference/install-linux.md
+++ b/docs/reference/install-linux.md
@@ -4,6 +4,11 @@ sidebar_position: 200
 description: How to install Inspektor Gadget on Linux
 ---
 
+To use Inspektor Gadget on a Linux machine, choose one of the following methods:
+* [Install a specific release](#install-a-specific-release)
+* [Install from distribution package](#install-from-distribution-package)
+* [Compilation from source](#compilation-from-source)
+
 ### Install a specific release
 
 It is possible to download the asset for a given release and platform from the
@@ -20,7 +25,13 @@ $ ig version
 
 We strongly advise you to verify `ig` by following our [detailed instructions](./verify-assets.mdx#verify-an-asset).
 
-### Compile from source
+### Install from distribution package
+
+`ig` is packaged for the following distributions:
+
+[![`ig`](https://repology.org/badge/vertical-allrepos/inspektor-gadget.svg)](https://repology.org/project/inspektor-gadget/versions)
+
+### Compilation from source
 
 `ig` is built using a Docker container relying on [Docker Buildx](https://docs.docker.com/buildx/working-with-buildx), so you don't have to worry
 about installing dependencies:
diff --git a/docs/reference/manifests.mdx b/docs/reference/manifests.mdx
index b883f6e1a..e6d02d898 100644
--- a/docs/reference/manifests.mdx
+++ b/docs/reference/manifests.mdx
@@ -83,6 +83,7 @@ image: trace_exec
 name: my-gadget-1
 paramValues:
   operator.LocalManager.host: true
+  operator.filter.filter: 'proc.comm~^ba.*$'
 tags:
   - mytag1
   - mytag2
diff --git a/docs/reference/run.mdx b/docs/reference/run.mdx
index 4647e5fd6..4bc490fac 100644
--- a/docs/reference/run.mdx
+++ b/docs/reference/run.mdx
@@ -142,12 +142,22 @@ The filter syntax supports the following operations:
 - `field~value`: Matches if the content of `field` matches the regular expression `value`. See [RE2 Syntax](https://github.com/google/re2/wiki/Syntax) for more details.
 ```
 
+:::info
+
+It's recommended to wrap the **entire** filter expression with single quotes when using filters containing special characters to avoid unexpected behavior:
+
+```bash
+--filter 'proc.comm~^ba.*$'
+```
+
+:::
+
 #### Examples
 
 **Equal filter**: To filter events where the `comm` field equals `cat`, use:
 
 ```bash
---filter comm==cat
+--filter 'proc.comm==cat'
 ```
 
 This filters for events related to the `cat` command.
@@ -155,13 +165,13 @@ This filters for events related to the `cat` command.
 **Not equal filter**: To filter out events where the `uid` is not 0 (root user), use:
 
 ```bash
---filter uid!=0
+--filter 'proc.creds.uid!=0'
 ```
 
 **Regular expression filter**: To match a regular expression in a specific column, use:
 
 ```bash
---filter comm~'^c.*'
+--filter 'proc.comm~^c.*'
 ```
 
 This filters for commands starting with the letter "c".
@@ -169,7 +179,7 @@ This filters for commands starting with the letter "c".
 **Multiple filters**: You can combine multiple filters to narrow down results further. For example, to find processes executed by the root user (`uid==0`) where the command is `cat`, use:
 
 ```bash
---filter comm==cat,uid==0
+--filter 'proc.comm==cat,proc.creds.uid==0'
 ```
 
 Also, you can use backslash (`\`) to escape comma in the filter values.
diff --git a/docs/reference/verify-assets.mdx b/docs/reference/verify-assets.mdx
index 24fe87001..f1b4e2035 100644
--- a/docs/reference/verify-assets.mdx
+++ b/docs/reference/verify-assets.mdx
@@ -280,13 +280,13 @@ RUNTIME.CONTAINERN… TIMESTAMP  PID        UID        GID        MNTNS_ID   ERR
 </TabItem>
 </Tabs>
 
-## Verify the ebpf-builder image
+## Verify the gadget-builder image
 
-We also sign the `ebpf-builder` image which is used to build gadgets.
+We also sign the `gadget-builder` image which is used to build gadgets.
 You can verify it using the following command:
 
 ```bash
-$ cosign verify --key inspektor-gadget.pub ghcr.io/inspektor-gadget/ebpf-builder:latest
+$ cosign verify --key inspektor-gadget.pub ghcr.io/inspektor-gadget/gadget-builder:%IG_TAG%
 ```
 
 We highly recommend you to verify by digest and specify the digest when building.
@@ -294,22 +294,22 @@ This helps to protect against [TOCTOU](https://en.wikipedia.org/wiki/Time-of-che
 
 ```bash
 $ DIGEST='sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522'
-$ cosign verify --key inspektor-gadget.pub ghcr.io/inspektor-gadget/ebpf-builder@$DIGEST
+$ cosign verify --key inspektor-gadget.pub ghcr.io/inspektor-gadget/gadget-builder@$DIGEST
 
-Verification for ghcr.io/inspektor-gadget/ebpf-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522 --
+Verification for ghcr.io/inspektor-gadget/gadget-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522 --
 The following checks were performed on each of these signatures:
   - The cosign claims were validated
   - Existence of the claims in the transparency log was verified offline
   - The signatures were verified against the specified public key
 
-[{"critical":{"identity":{"docker-reference":"ghcr.io/inspektor-gadget/ebpf-builder"}, ...
+[{"critical":{"identity":{"docker-reference":"ghcr.io/inspektor-gadget/gadget-builder"}, ...
 ]
-$ sudo ig image build -t trace_exec:build-verified -f gadgets/trace_exec/gadget.yaml --builder-image ghcr.io/inspektor-gadget/ebpf-builder@$DIGEST gadgets/trace_exec
-Pulling builder image ghcr.io/inspektor-gadget/ebpf-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522
-ghcr.io/inspektor-gadget/ebpf-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522: Pulling from inspektor-gadget/ebpf-builder
+$ sudo ig image build -t trace_exec:build-verified -f gadgets/trace_exec/gadget.yaml --builder-image ghcr.io/inspektor-gadget/gadget-builder@$DIGEST gadgets/trace_exec
+Pulling builder image ghcr.io/inspektor-gadget/gadget-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522
+ghcr.io/inspektor-gadget/gadget-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522: Pulling from inspektor-gadget/gadget-builder
 ...
 Digest: sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522
-Status: Downloaded newer image for ghcr.io/inspektor-gadget/ebpf-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522
+Status: Downloaded newer image for ghcr.io/inspektor-gadget/gadget-builder@sha256:4967ad1a11a9ed32867dc0d63e137dc2196c560db4b3644c7c0c97fccea7c522
 Successfully built ghcr.io/inspektor-gadget/gadget/trace_exec:build-verified@sha256:c85eac1e4615a08c74883402f73c5f8667b64597bd51f9e46275dfdbb0a04703
 ```
 
diff --git a/docs/spec/operators/env.md b/docs/spec/operators/env.md
new file mode 100644
index 000000000..1f79d6ea1
--- /dev/null
+++ b/docs/spec/operators/env.md
@@ -0,0 +1,46 @@
+---
+title: Environment Variables
+---
+
+The Environment Variable operator lets you add fields containing environment variables to datasources. This helps with
+adding host related information to events.
+
+In order to do so, you first need to add the names of allowed environment variables to the `--env-vars` parameter and
+then add an annotation to the datasource you want to contain the new field like so:
+
+```yaml
+datasources:
+  mydatasource:
+    annotations:
+      env.fields.myfieldname: MYENVVAR
+```
+
+This example will add a field named `myfieldname` to the datasource `mydatasource` with the static value of the
+environment variable called `MYENVVAR`.
+
+It is important to note that environment variables will always be read from the host that runs the gadget and _not_
+on the client side.
+
+## Priority
+
+1
+
+## Parameters
+
+### Global Parameters
+
+#### `env-vars`
+
+Comma-separated list of environment variables that are allowed to be included in datasources.
+
+Default: empty
+
+## Annotations
+
+### Data Source Annotations
+
+#### `env.fields.FIELDNAME`
+
+You can use multiple annotations like this (having distinctive `FIELDNAME` values) to add new fields to a
+datasource. The value of the annotation should be the name of the environment variable that you want the field to
+contain.
diff --git a/docs/spec/operators/filter.md b/docs/spec/operators/filter.md
index b1184c514..5d5da553c 100644
--- a/docs/spec/operators/filter.md
+++ b/docs/spec/operators/filter.md
@@ -30,6 +30,24 @@ The filter syntax supports the following operations:
 - `field<value`: Matches if the content of `field` is less than `value`.
 - `field~value`: Matches if the content of `field` matches the regular expression `value`. See [RE2 Syntax](https://github.com/google/re2/wiki/Syntax) for more details.
 
+:::info
+
+It's recommended to wrap the **entire** filter expression with single quotes when using filters containing special characters to avoid unexpected behavior.
+
+[CLI](../../reference/run.mdx) example:
+
+```bash
+--filter 'proc.comm~^ba.*$'
+```
+
+[Gadget instance manifest](../../reference/manifests.mdx) example:
+
+```yaml
+operator.filter.filter: 'proc.comm~^ba.*$'
+```
+
+:::
+
 Fully qualified name: `operator.filter.filter`
 
 ### multiple filters
diff --git a/docs/spec/operators/kubenameresolver.md b/docs/spec/operators/kubenameresolver.md
new file mode 100644
index 000000000..a0996bbcf
--- /dev/null
+++ b/docs/spec/operators/kubenameresolver.md
@@ -0,0 +1,74 @@
+---
+title: KubeNameResolver
+---
+
+The KubeNameResolver operator uses the `K8s.PodName` and `K8s.Namespace` fields to enrich the event with `K8s.PodIp` and `K8s.HostIp` fields. 
+This operator is disabled by default (See [annotation](#annotation) for how to enable it).
+
+The example below shows a request from `test-pod` pod in json format:
+
+Without `KubeNameResolver`:
+```json
+{
+  ...
+  "k8s": {
+    "containerName": "test-pod",
+    "hostnetwork": false,
+    "namespace": "default",
+    "node": "minikube-docker",
+    "owner": {
+      "kind": "",
+      "name": ""
+    },
+    "podLabels": "run=test-pod",
+    "podName": "test-pod"
+  },
+  "proc": {
+    "comm": "wget",
+    ...
+  },
+  ...
+}
+```
+
+With `KubeNameResolver`:
+```json
+{
+  ...
+  "k8s": {
+    "containerName": "test-pod",
+    "hostIP": "192.168.58.2",
+    "hostnetwork": false,
+    "namespace": "default",
+    "node": "minikube-docker",
+    "owner": {
+      "kind": "",
+      "name": ""
+    },
+    "podIP": "10.244.0.29",
+    "podLabels": "run=test-pod",
+    "podName": "test-pod"
+  },
+  "proc": {
+    "comm": "wget",
+    ...
+  },
+  ...
+}
+```
+
+## Priority
+
+11
+
+## Parameters
+
+None
+
+## Annotation
+
+This operator is disabled by default and is only activated for a datasource if it has the following annotations:
+datasource_name:
+  annotations:
+    kubenameresolver.enable: true    
+```
diff --git a/docs/spec/operators/otel-metrics.md b/docs/spec/operators/otel-metrics.md
index fb1c6e306..2e0caf922 100644
--- a/docs/spec/operators/otel-metrics.md
+++ b/docs/spec/operators/otel-metrics.md
@@ -15,6 +15,10 @@ The otel-metrics operator handles collecting and exporting metrics using the
 
 ### Global Parameters
 
+> Most of these settings only apply to a locally created metric endpoint (Prometheus compatible). If
+> you want to export metrics using other protocols, please check the documentation about
+> [Other Exporters](../../reference/export-metrics.mdx#other-exporters).
+
 #### `otel-metrics-listen`
 
 Enables the Prometheus exporter on the address given by `otel-metrics-listen-address` if set to `true`.
@@ -27,6 +31,13 @@ The listen address that should be serving Prometheus requests.
 
 Default: `0.0.0.0:2224`
 
+#### `otel-metrics-export-internals`
+
+Enables exporting internal Inspektor Gadget metrics to the global exporter that is
+configured using `otel-metrics-listen`.
+
+Default: `false`
+
 ### Instance Parameters
 
 #### `otel-metrics-name`
diff --git a/docs/spec/operators/process.md b/docs/spec/operators/process.md
new file mode 100644
index 000000000..b3668ddc7
--- /dev/null
+++ b/docs/spec/operators/process.md
@@ -0,0 +1,214 @@
+---
+title: process
+---
+
+The process operator emits events about running processes with CPU and RAM usage information. It periodically collects information about running processes and emits them as events through a data source.
+
+## Priority
+
+-1000
+
+## Configuration
+
+The process operator is configured through the gadget.yaml file using the following configuration:
+
+```yaml
+operator:
+  process:
+    emitstats: true
+    interval: 60s
+    fields:
+    - comm
+    - pid
+    - ppid
+    - cpuUsage
+    - cpuUsageRelative
+    - memoryRSS
+    - memoryVirtual
+    - memoryRelative
+    - threadCount
+    - state
+    - uid
+    - startTime
+```
+
+### Configuration Parameters
+
+#### `operator.process.emitstats`
+
+Enables or disables the process monitoring. When set to `true`, the operator will start collecting and emitting process information.
+
+Default: `false`
+
+#### `operator.process.interval`
+
+The interval at which process information is collected and emitted. This should be a valid duration string (e.g., "60s", "1m", "5m").
+
+Default: `60s`
+
+#### `operator.process.fields`
+
+A list of fields to include in the process information. If not specified, all fields will be included. The PID field is always included regardless of this setting.
+
+Available fields:
+- `pid` - Process ID (always included)
+- `ppid` - Parent Process ID
+- `comm` - Command name
+- `cpuUsage` - CPU usage percentage
+- `cpuUsageRelative` - CPU usage percentage relative to number of CPUs available
+- `memoryRSS` - Resident Set Size
+- `memoryVirtual` - Virtual memory size
+- `memoryRelative` - Total memory used relative to available memory
+- `threadCount` - Number of threads
+- `state` - Process state (for possible values see below)
+- `uid` - Process owner UID
+- `startTime` - Process start time (clock ticks since system boot)
+- `startTimeStr` - Process start time as a formatted date-time string (automatically included when startTime is enabled)
+- `mountnsid` - Mount namespace ID (always included)
+
+Default: All fields are included
+
+## Data Source
+
+The process operator creates a data source named `processes` that emits events with the following fields:
+
+### Fields
+
+#### `pid`
+
+The process ID. This field is always included.
+
+Type: `int32`
+
+#### `ppid`
+
+The parent process ID.
+
+Type: `int32`
+
+#### `comm`
+
+The command name of the process.
+
+Type: `string`
+
+#### `cpuUsage`
+
+The CPU usage of the process as a percentage.
+
+Type: `float64`
+
+#### `cpuUsageRelative`
+
+The CPU usage percentage relative to the number of CPUs available.
+
+Type: `float64`
+
+#### `memoryRSS`
+
+The Resident Set Size (RSS) of the process in bytes. This represents the portion of memory occupied by a process that is held in main memory (RAM).
+
+Type: `uint64`
+
+#### `memoryVirtual`
+
+The Virtual Memory Size of the process in bytes. This represents the total amount of virtual memory used by the process.
+
+Type: `uint64`
+
+#### `memoryRelative`
+
+Percentage of RSS memory used relative to available memory.
+
+Type: `float64`
+
+#### `threadCount`
+
+The number of threads in the process.
+
+Type: `int32`
+
+#### `state`
+
+The state of the process
+
+|-------|------------------------------------------|
+| Value | Description                              |
+|-------|------------------------------------------|
+| R     | Running                                  |
+| S     | Sleeping in an interruptible wait        |
+| D     | Waiting in uninterruptible disk sleep    |
+| Z     | Zombie                                   |
+| T     | Stopped (on a signal) or (before Linux   |
+|       | 2.6.33) trace stopped                    |
+| t     | Tracing stop (Linux 2.6.33 onward)       |
+| W     | Paging (only before Linux 2.6.0)         |
+| X     | Dead (from Linux 2.6.0 onward)           |
+| x     | Dead (Linux 2.6.33 to 3.13 only)         |
+| K     | Wakekill (Linux 2.6.33 to 3.13 only)     |
+| W     | Waking (Linux 2.6.33 to 3.13 only)       |
+| P     | Parked (Linux 3.9 to 3.13 only)          |
+| I     | Idle (Linux 4.14 onward)                 |
+|-------|------------------------------------------|
+
+Type: `string`
+
+#### `uid`
+
+The UID of the process owner.
+
+Type: `uint32`
+
+#### `startTime`
+
+The time when the process started, represented as clock ticks since system boot.
+
+Type: `uint64`
+
+#### `startTimeStr`
+
+The time when the process started, represented as a formatted date-time string in RFC3339 format (e.g., "2023-06-15T14:30:45Z").
+This field is automatically included when the `startTime` field is enabled.
+
+Type: `string`
+
+#### `mountnsid`
+
+The mount namespace ID of the process. This can be used to identify which container a process belongs to.
+This field is always included.
+
+Type: `uint64`
+
+## Example Usage
+
+To enable process monitoring, add the following to your gadget.yaml configuration:
+
+```yaml
+operator:
+  process:
+    emitstats: true
+    interval: 30s  # Collect process information every 30 seconds
+```
+
+Note that the `mountnsid` and `pid` fields are always included, regardless of the fields configuration.
+
+This will enable the process operator, which will emit process events every 30 seconds with all available fields.
+
+### Example with Selected Fields
+
+To enable process monitoring with only specific fields, add the following to your gadget.yaml configuration:
+
+```yaml
+operator:
+  process:
+    emitstats: true
+    interval: 30s
+    fields:
+    - comm
+    - ppid
+    - cpuUsage
+    - memoryRSS
+```
+
+This will enable the process operator, which will emit process events every 30 seconds with only the specified fields.
+This can be useful to reduce resource usage and network traffic when you only need specific information.
diff --git a/examples/builtin-gadgets/withfilter/trace/network/Dockerfile b/examples/builtin-gadgets/withfilter/trace/network/Dockerfile
index 2c5a3d787..b275309d6 100644
--- a/examples/builtin-gadgets/withfilter/trace/network/Dockerfile
+++ b/examples/builtin-gadgets/withfilter/trace/network/Dockerfile
@@ -1,4 +1,4 @@
-FROM --platform=$BUILDPLATFORM golang:1.23.4-bullseye@sha256:6d4cbf0b3900afa3e4460ca995b6c351370ce8d2d44b7a964dc521ab640e1a88 AS builder
+FROM --platform=$BUILDPLATFORM golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2 AS builder
 ENV GO111MODULE=on
 ENV CGO_ENABLED=0
 WORKDIR /src
diff --git a/examples/container-hook/Dockerfile b/examples/container-hook/Dockerfile
index 5627f6a5e..7bad8eaf9 100644
--- a/examples/container-hook/Dockerfile
+++ b/examples/container-hook/Dockerfile
@@ -1,4 +1,4 @@
-FROM golang:1.23.4@sha256:7ea4c9dcb2b97ff8ee80a67db3d44f98c8ffa0d191399197007d8459c1453041 AS builder
+FROM golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2 AS builder
 
 # Cache go modules so they won't be downloaded at each build
 COPY go.mod go.sum /gadget/
diff --git a/examples/container-hook/Dockerfile.dockerignore b/examples/container-hook/Dockerfile.dockerignore
index c3a759842..12298e002 100644
--- a/examples/container-hook/Dockerfile.dockerignore
+++ b/examples/container-hook/Dockerfile.dockerignore
@@ -3,3 +3,4 @@
 !go.sum
 !examples
 !pkg
+!internal
diff --git a/examples/container-hook/main.go b/examples/container-hook/main.go
index 7533032ff..9cdd86d1e 100644
--- a/examples/container-hook/main.go
+++ b/examples/container-hook/main.go
@@ -32,7 +32,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/client-go/kubernetes"
 
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/container-hook"
+	containerhook "github.com/inspektor-gadget/inspektor-gadget/pkg/container-hook"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/k8sutil"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
 )
@@ -123,43 +123,37 @@ func callback(notif containerhook.ContainerEvent) {
 	// command in the same way that OCI hooks would do. For this we need to
 	// synthesise the OCI State.
 	ociState := &ocispec.State{
-		Version: ocispec.Version,
-		ID:      notif.ContainerID,
-		Pid:     int(notif.ContainerPID),
-		Bundle:  notif.Bundle,
+		Version:     ocispec.Version,
+		ID:          notif.ContainerID,
+		Pid:         int(notif.ContainerPID),
+		Bundle:      notif.Bundle,
+		Annotations: make(map[string]string),
 	}
-	if notif.ContainerConfig != nil && notif.ContainerConfig.Annotations != nil {
-		ociState.Annotations = notif.ContainerConfig.Annotations
-	} else {
-		ociState.Annotations = make(map[string]string)
+	if notif.ContainerConfig != "" {
+		ociSpec := &ocispec.Spec{}
+		_ = json.Unmarshal([]byte(notif.ContainerConfig), ociSpec)
+		if ociSpec.Annotations != nil {
+			ociState.Annotations = ociSpec.Annotations
+		}
 	}
 
 	var cmd string
 	switch notif.Type {
 	case containerhook.EventTypeAddContainer:
 		ociState.Status = ocispec.StateCreated
-		var config string
-		if notif.ContainerConfig != nil {
-			b, err := json.Marshal(notif.ContainerConfig)
-			if err != nil {
-				fmt.Fprintf(os.Stderr, "Failed to marshal ContainerConfig: %s\n", err)
-			} else {
-				config = string(b)
-			}
-		}
 		if outputAdd {
 			fmt.Printf("Container added: %v pid %d\n", notif.ContainerID, notif.ContainerPID)
 		}
 		if outputConfig {
-			if config != "" {
-				fmt.Printf("%s\n", config)
+			if notif.ContainerConfig != "" {
+				fmt.Printf("%s\n", notif.ContainerConfig)
 			} else {
 				fmt.Fprintf(os.Stderr, "Error: container config not found for container %s\n", notif.ContainerID)
 			}
 		}
 		if *publishKubernetesEvent {
-			if config != "" {
-				publishEvent("NewContainerConfig", config)
+			if notif.ContainerConfig != "" {
+				publishEvent("NewContainerConfig", notif.ContainerConfig)
 			} else {
 				publishEvent("ContainerConfigNotFound", "")
 			}
@@ -222,7 +216,7 @@ func main() {
 		if *kubeconfig == "" && os.Getenv("KUBECONFIG") != "" {
 			*kubeconfig = os.Getenv("KUBECONFIG")
 		}
-		client, err = k8sutil.NewClientset(*kubeconfig)
+		client, err = k8sutil.NewClientset(*kubeconfig, "container-hook-publish-event")
 		if err != nil {
 			fmt.Fprintf(os.Stderr, "Failed to get Kubernetes client set: %s\n", err)
 			os.Exit(1)
diff --git a/examples/gadgets/other/mutate/main.go b/examples/gadgets/other/mutate/main.go
index c283f68f6..d9f76634b 100644
--- a/examples/gadgets/other/mutate/main.go
+++ b/examples/gadgets/other/mutate/main.go
@@ -65,7 +65,7 @@ func do() error {
 
 	gadgetCtx := gadgetcontext.New(
 		context.Background(),
-		"ghcr.io/inspektor-gadget/gadget/trace_open:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_open:main",
 		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator, clioperator.CLIOperator),
 	)
 
diff --git a/examples/gadgets/trace_dns/main.go b/examples/gadgets/trace_dns/main.go
index 6c4cc1e5c..5b8993fb6 100644
--- a/examples/gadgets/trace_dns/main.go
+++ b/examples/gadgets/trace_dns/main.go
@@ -75,7 +75,7 @@ func do() error {
 
 	gadgetCtx := gadgetcontext.New(
 		context.Background(),
-		"ghcr.io/inspektor-gadget/gadget/trace_dns:latest",
+		"ghcr.io/inspektor-gadget/gadget/trace_dns:main",
 		gadgetcontext.WithDataOperators(
 			ocihandler.OciHandler,
 			localManagerOp,
diff --git a/examples/go.mod b/examples/go.mod
index 8db279460..9921ae0ca 100644
--- a/examples/go.mod
+++ b/examples/go.mod
@@ -1,29 +1,29 @@
 module examples
 
-go 1.23.0
+go 1.24.0
 
 require (
-	github.com/cilium/ebpf v0.17.3
+	github.com/cilium/ebpf v0.18.0
 	github.com/inspektor-gadget/inspektor-gadget v0.28.1
-	github.com/opencontainers/runtime-spec v1.2.0
-	k8s.io/api v0.32.2
-	k8s.io/apimachinery v0.32.2
-	k8s.io/client-go v0.32.2
+	github.com/opencontainers/runtime-spec v1.2.1
+	k8s.io/api v0.33.1
+	k8s.io/apimachinery v0.33.1
+	k8s.io/client-go v0.33.1
 )
 
 require (
 	github.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 // indirect
 	github.com/AdamKorcz/go-118-fuzz-build v0.0.0-20230306123547-8075edf89bb0 // indirect
-	github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 // indirect
+	github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c // indirect
 	github.com/Microsoft/go-winio v0.6.2 // indirect
 	github.com/Microsoft/hcsshim v0.12.9 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/blang/semver v3.5.1+incompatible // indirect
 	github.com/blang/semver/v4 v4.0.0 // indirect
-	github.com/cenkalti/backoff/v4 v4.3.0 // indirect
+	github.com/cenkalti/backoff/v5 v5.0.2 // indirect
 	github.com/cespare/xxhash/v2 v2.3.0 // indirect
-	github.com/containerd/cgroups/v3 v3.0.3 // indirect
-	github.com/containerd/containerd v1.7.25 // indirect
+	github.com/containerd/cgroups/v3 v3.0.5 // indirect
+	github.com/containerd/containerd v1.7.27 // indirect
 	github.com/containerd/containerd/api v1.8.0 // indirect
 	github.com/containerd/continuity v0.4.4 // indirect
 	github.com/containerd/errdefs v1.0.0 // indirect
@@ -31,146 +31,141 @@ require (
 	github.com/containerd/fifo v1.1.0 // indirect
 	github.com/containerd/log v0.1.0 // indirect
 	github.com/containerd/platforms v0.2.1 // indirect
-	github.com/containerd/ttrpc v1.2.6-0.20240827082320-b5cd6e4b3287 // indirect
+	github.com/containerd/ttrpc v1.2.7 // indirect
 	github.com/containerd/typeurl/v2 v2.2.3 // indirect
 	github.com/coreos/go-systemd/v22 v22.5.0 // indirect
 	github.com/cyphar/filepath-securejoin v0.4.1 // indirect
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
 	github.com/distribution/reference v0.6.0 // indirect
-	github.com/docker/cli v27.5.1+incompatible // indirect
-	github.com/docker/docker v27.5.1+incompatible // indirect
-	github.com/docker/docker-credential-helpers v0.8.2 // indirect
+	github.com/docker/cli v28.1.1+incompatible // indirect
+	github.com/docker/docker v28.1.1+incompatible // indirect
+	github.com/docker/docker-credential-helpers v0.9.3 // indirect
 	github.com/docker/go-connections v0.5.0 // indirect
 	github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c // indirect
 	github.com/docker/go-units v0.5.0 // indirect
 	github.com/emicklei/go-restful/v3 v3.12.1 // indirect
 	github.com/felixge/httpsnoop v1.0.4 // indirect
-	github.com/florianl/go-tc v0.4.4 // indirect
-	github.com/fsnotify/fsnotify v1.8.0 // indirect
-	github.com/fxamacker/cbor/v2 v2.7.0 // indirect
+	github.com/florianl/go-tc v0.4.5 // indirect
+	github.com/fsnotify/fsnotify v1.9.0 // indirect
+	github.com/fxamacker/cbor/v2 v2.8.0 // indirect
 	github.com/go-errors/errors v1.4.2 // indirect
 	github.com/go-jose/go-jose/v4 v4.0.5 // indirect
 	github.com/go-logr/logr v1.4.2 // indirect
 	github.com/go-logr/stdr v1.2.2 // indirect
 	github.com/go-openapi/jsonpointer v0.21.0 // indirect
 	github.com/go-openapi/jsonreference v0.21.0 // indirect
-	github.com/go-openapi/swag v0.23.0 // indirect
+	github.com/go-openapi/swag v0.23.1 // indirect
+	github.com/go-viper/mapstructure/v2 v2.2.1 // indirect
 	github.com/godbus/dbus/v5 v5.1.0 // indirect
 	github.com/gofrs/flock v0.12.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
-	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
-	github.com/golang/protobuf v1.5.4 // indirect
+	github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 // indirect
 	github.com/google/btree v1.1.3 // indirect
-	github.com/google/gnostic-models v0.6.9-0.20230804172637-c7be7c783f49 // indirect
+	github.com/google/gnostic-models v0.6.9 // indirect
 	github.com/google/go-cmp v0.7.0 // indirect
-	github.com/google/go-containerregistry v0.20.2 // indirect
-	github.com/google/gofuzz v1.2.0 // indirect
+	github.com/google/go-containerregistry v0.20.3 // indirect
 	github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect
 	github.com/google/uuid v1.6.0 // indirect
 	github.com/gopacket/gopacket v1.3.1 // indirect
 	github.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 // indirect
-	github.com/grpc-ecosystem/grpc-gateway/v2 v2.25.1 // indirect
-	github.com/hashicorp/hcl v1.0.1-vault-5 // indirect
+	github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.3 // indirect
 	github.com/inconshreveable/mousetrap v1.1.0 // indirect
 	github.com/josharian/intern v1.0.0 // indirect
 	github.com/josharian/native v1.1.0 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
-	github.com/klauspost/compress v1.17.11 // indirect
+	github.com/klauspost/compress v1.18.0 // indirect
 	github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec // indirect
 	github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de // indirect
-	github.com/magiconair/properties v1.8.7 // indirect
-	github.com/mailru/easyjson v0.7.7 // indirect
+	github.com/mailru/easyjson v0.9.0 // indirect
 	github.com/mdlayher/netlink v1.7.2 // indirect
 	github.com/mdlayher/socket v0.5.1 // indirect
-	github.com/mitchellh/mapstructure v1.5.0 // indirect
 	github.com/moby/docker-image-spec v1.3.1 // indirect
 	github.com/moby/locker v1.0.1 // indirect
-	github.com/moby/moby v27.5.1+incompatible // indirect
+	github.com/moby/moby v28.1.1+incompatible // indirect
 	github.com/moby/sys/mountinfo v0.7.2 // indirect
-	github.com/moby/sys/sequential v0.5.0 // indirect
+	github.com/moby/sys/sequential v0.6.0 // indirect
 	github.com/moby/sys/signal v0.7.0 // indirect
-	github.com/moby/sys/user v0.3.0 // indirect
+	github.com/moby/sys/user v0.4.0 // indirect
 	github.com/moby/sys/userns v0.1.0 // indirect
-	github.com/moby/term v0.5.0 // indirect
+	github.com/moby/term v0.5.2 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00 // indirect
 	github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect
 	github.com/opencontainers/go-digest v1.0.0 // indirect
-	github.com/opencontainers/image-spec v1.1.0 // indirect
-	github.com/opencontainers/selinux v1.11.1 // indirect
-	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
+	github.com/opencontainers/image-spec v1.1.1 // indirect
+	github.com/opencontainers/selinux v1.12.0 // indirect
+	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
 	github.com/peterbourgon/diskv v2.0.1+incompatible // indirect
 	github.com/pkg/errors v0.9.1 // indirect
-	github.com/prometheus/client_golang v1.21.0 // indirect
-	github.com/prometheus/client_model v0.6.1 // indirect
-	github.com/prometheus/common v0.62.0 // indirect
-	github.com/prometheus/procfs v0.15.1 // indirect
+	github.com/prometheus/client_golang v1.22.0 // indirect
+	github.com/prometheus/client_model v0.6.2 // indirect
+	github.com/prometheus/common v0.64.0 // indirect
+	github.com/prometheus/procfs v0.16.1 // indirect
 	github.com/s3rj1k/go-fanotify/fanotify v0.0.0-20210917134616-9c00a300bb7a // indirect
-	github.com/sagikazarmark/locafero v0.4.0 // indirect
-	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
+	github.com/sagikazarmark/locafero v0.7.0 // indirect
 	github.com/secure-systems-lab/go-securesystemslib v0.9.0 // indirect
 	github.com/sergi/go-diff v1.3.1 // indirect
-	github.com/sigstore/protobuf-specs v0.4.0 // indirect
-	github.com/sigstore/sigstore v1.8.15 // indirect
+	github.com/sigstore/protobuf-specs v0.4.1 // indirect
+	github.com/sigstore/sigstore v1.9.4 // indirect
 	github.com/sirupsen/logrus v1.9.3 // indirect
 	github.com/sourcegraph/conc v0.3.0 // indirect
-	github.com/spf13/afero v1.11.0 // indirect
-	github.com/spf13/cast v1.7.0 // indirect
+	github.com/spf13/afero v1.12.0 // indirect
+	github.com/spf13/cast v1.7.1 // indirect
 	github.com/spf13/cobra v1.9.1 // indirect
 	github.com/spf13/pflag v1.0.6 // indirect
-	github.com/spf13/viper v1.19.0 // indirect
+	github.com/spf13/viper v1.20.1 // indirect
 	github.com/subosito/gotenv v1.6.0 // indirect
 	github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399 // indirect
-	github.com/vishvananda/netlink v1.3.0 // indirect
+	github.com/vishvananda/netlink v1.3.1 // indirect
 	github.com/vishvananda/netns v0.0.5 // indirect
 	github.com/x448/float16 v0.8.4 // indirect
 	github.com/xlab/treeprint v1.2.0 // indirect
 	go.opencensus.io v0.24.0 // indirect
 	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
-	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
-	go.opentelemetry.io/otel v1.34.0 // indirect
-	go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.34.0 // indirect
-	go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.27.0 // indirect
-	go.opentelemetry.io/otel/exporters/prometheus v0.56.0 // indirect
-	go.opentelemetry.io/otel/metric v1.34.0 // indirect
-	go.opentelemetry.io/otel/sdk v1.34.0 // indirect
-	go.opentelemetry.io/otel/sdk/metric v1.34.0 // indirect
-	go.opentelemetry.io/otel/trace v1.34.0 // indirect
-	go.opentelemetry.io/proto/otlp v1.5.0 // indirect
+	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.59.0 // indirect
+	go.opentelemetry.io/contrib/instrumentation/runtime v0.61.0 // indirect
+	go.opentelemetry.io/otel v1.36.0 // indirect
+	go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.36.0 // indirect
+	go.opentelemetry.io/otel/exporters/prometheus v0.58.0 // indirect
+	go.opentelemetry.io/otel/metric v1.36.0 // indirect
+	go.opentelemetry.io/otel/sdk v1.36.0 // indirect
+	go.opentelemetry.io/otel/sdk/metric v1.36.0 // indirect
+	go.opentelemetry.io/otel/trace v1.36.0 // indirect
+	go.opentelemetry.io/proto/otlp v1.6.0 // indirect
 	go.uber.org/multierr v1.11.0 // indirect
-	golang.org/x/crypto v0.35.0 // indirect
+	golang.org/x/crypto v0.38.0 // indirect
 	golang.org/x/exp v0.0.0-20250103183323-7d7fa50e5329 // indirect
-	golang.org/x/net v0.35.0 // indirect
-	golang.org/x/oauth2 v0.26.0 // indirect
-	golang.org/x/sync v0.11.0 // indirect
-	golang.org/x/sys v0.30.0 // indirect
-	golang.org/x/term v0.29.0 // indirect
-	golang.org/x/text v0.22.0 // indirect
-	golang.org/x/time v0.8.0 // indirect
-	google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20250115164207-1a7da9e5054f // indirect
-	google.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f // indirect
-	google.golang.org/grpc v1.70.0 // indirect
-	google.golang.org/protobuf v1.36.5 // indirect
+	golang.org/x/net v0.40.0 // indirect
+	golang.org/x/oauth2 v0.30.0 // indirect
+	golang.org/x/sync v0.14.0 // indirect
+	golang.org/x/sys v0.33.0 // indirect
+	golang.org/x/term v0.32.0 // indirect
+	golang.org/x/text v0.25.0 // indirect
+	golang.org/x/time v0.11.0 // indirect
+	google.golang.org/genproto v0.0.0-20241118233622-e639e219e697 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20250519155744-55703ea1f237 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20250519155744-55703ea1f237 // indirect
+	google.golang.org/grpc v1.72.2 // indirect
+	google.golang.org/protobuf v1.36.6 // indirect
 	gopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect
 	gopkg.in/inf.v0 v0.9.1 // indirect
-	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	gotest.tools/v3 v3.5.1 // indirect
-	k8s.io/cli-runtime v0.32.2 // indirect
-	k8s.io/component-base v0.32.2 // indirect
-	k8s.io/cri-api v0.32.2 // indirect
+	k8s.io/cli-runtime v0.33.1 // indirect
+	k8s.io/component-base v0.33.1 // indirect
+	k8s.io/cri-api v0.33.1 // indirect
 	k8s.io/klog/v2 v2.130.1 // indirect
-	k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f // indirect
-	k8s.io/kubelet v0.32.2 // indirect
-	k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 // indirect
-	oras.land/oras-go/v2 v2.5.0 // indirect
-	sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 // indirect
-	sigs.k8s.io/kustomize/api v0.18.0 // indirect
-	sigs.k8s.io/kustomize/kyaml v0.18.1 // indirect
-	sigs.k8s.io/structured-merge-diff/v4 v4.4.2 // indirect
+	k8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff // indirect
+	k8s.io/kubelet v0.33.1 // indirect
+	k8s.io/utils v0.0.0-20250321185631-1f6e0b77f77e // indirect
+	oras.land/oras-go/v2 v2.6.0 // indirect
+	sigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8 // indirect
+	sigs.k8s.io/kustomize/api v0.19.0 // indirect
+	sigs.k8s.io/kustomize/kyaml v0.19.0 // indirect
+	sigs.k8s.io/randfill v1.0.0 // indirect
+	sigs.k8s.io/structured-merge-diff/v4 v4.7.0 // indirect
 	sigs.k8s.io/yaml v1.4.0 // indirect
 )
 
diff --git a/examples/go.sum b/examples/go.sum
index ea956e726..a79e71f6b 100644
--- a/examples/go.sum
+++ b/examples/go.sum
@@ -3,8 +3,8 @@ github.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9
 github.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=
 github.com/AdamKorcz/go-118-fuzz-build v0.0.0-20230306123547-8075edf89bb0 h1:59MxjQVfjXsBpLy+dbd2/ELV5ofnUkUZBvWSC85sheA=
 github.com/AdamKorcz/go-118-fuzz-build v0.0.0-20230306123547-8075edf89bb0/go.mod h1:OahwfttHWG6eJ0clwcfBAHoDI6X/LV/15hx/wlMZSrU=
-github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 h1:L/gRVlceqvL25UVaW/CKtUDjefjrs0SPonmDGUVOYP0=
-github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
+github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c h1:udKWzYgxTojEKWjV8V+WSxDXJ4NFATAsZjh8iIbsQIg=
+github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=
 github.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=
@@ -18,20 +18,22 @@ github.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM
 github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
 github.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=
 github.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=
+github.com/cenkalti/backoff/v5 v5.0.2 h1:rIfFVxEf1QsI7E1ZHfp/B4DF/6QBAUhmgkxc0H7Zss8=
+github.com/cenkalti/backoff/v5 v5.0.2/go.mod h1:rkhZdG3JZukswDf7f0cwqPNk4K0sa+F97BxZthm/crw=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
 github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=
 github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cilium/ebpf v0.5.0/go.mod h1:4tRaxcgiL706VnOzHOdBlY8IEAIdxINsQBcU4xJJXRs=
 github.com/cilium/ebpf v0.7.0/go.mod h1:/oI2+1shJiTGAMgl6/RgJr36Eo1jzrRcAWbcXO2usCA=
 github.com/cilium/ebpf v0.8.1/go.mod h1:f5zLIM0FSNuAkSyLAN7X+Hy6yznlF1mNiWUMfxMtrgk=
-github.com/cilium/ebpf v0.17.3 h1:FnP4r16PWYSE4ux6zN+//jMcW4nMVRvuTLVTvCjyyjg=
-github.com/cilium/ebpf v0.17.3/go.mod h1:G5EDHij8yiLzaqn0WjyfJHvRa+3aDlReIaLVRMvOyJk=
+github.com/cilium/ebpf v0.18.0 h1:OsSwqS4y+gQHxaKgg2U/+Fev834kdnsQbtzRnbVC6Gs=
+github.com/cilium/ebpf v0.18.0/go.mod h1:vmsAT73y4lW2b4peE+qcOqw6MxvWQdC+LiU5gd/xyo4=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
-github.com/containerd/cgroups/v3 v3.0.3 h1:S5ByHZ/h9PMe5IOQoN7E+nMc2UcLEM/V48DGDJ9kip0=
-github.com/containerd/cgroups/v3 v3.0.3/go.mod h1:8HBe7V3aWGLFPd/k03swSIsGjZhHI2WzJmticMgVuz0=
-github.com/containerd/containerd v1.7.25 h1:khEQOAXOEJalRO228yzVsuASLH42vT7DIo9Ss+9SMFQ=
-github.com/containerd/containerd v1.7.25/go.mod h1:tWfHzVI0azhw4CT2vaIjsb2CoV4LJ9PrMPaULAr21Ok=
+github.com/containerd/cgroups/v3 v3.0.5 h1:44na7Ud+VwyE7LIoJ8JTNQOa549a8543BmzaJHo6Bzo=
+github.com/containerd/cgroups/v3 v3.0.5/go.mod h1:SA5DLYnXO8pTGYiAHXz94qvLQTKfVM5GEVisn4jpins=
+github.com/containerd/containerd v1.7.27 h1:yFyEyojddO3MIGVER2xJLWoCIn+Up4GaHFquP7hsFII=
+github.com/containerd/containerd v1.7.27/go.mod h1:xZmPnl75Vc+BLGt4MIfu6bp+fy03gdHAn9bz+FreFR0=
 github.com/containerd/containerd/api v1.8.0 h1:hVTNJKR8fMc/2Tiw60ZRijntNMd1U+JVMyTRdsD2bS0=
 github.com/containerd/containerd/api v1.8.0/go.mod h1:dFv4lt6S20wTu/hMcP4350RL87qPWLVa/OHOwmmdnYc=
 github.com/containerd/continuity v0.4.4 h1:/fNVfTJ7wIl/YPMHjf+5H32uFhl63JucB34PlCpMKII=
@@ -46,8 +48,8 @@ github.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=
 github.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=
 github.com/containerd/platforms v0.2.1 h1:zvwtM3rz2YHPQsF2CHYM8+KtB5dvhISiXh5ZpSBQv6A=
 github.com/containerd/platforms v0.2.1/go.mod h1:XHCb+2/hzowdiut9rkudds9bE5yJ7npe7dG/wG+uFPw=
-github.com/containerd/ttrpc v1.2.6-0.20240827082320-b5cd6e4b3287 h1:zwv64tCdT888KxuXQuv5i36cEdljoXq3sVqLmOEbCQI=
-github.com/containerd/ttrpc v1.2.6-0.20240827082320-b5cd6e4b3287/go.mod h1:YCXHsb32f+Sq5/72xHubdiJRQY9inL4a4ZQrAbN1q9o=
+github.com/containerd/ttrpc v1.2.7 h1:qIrroQvuOL9HQ1X6KHe2ohc7p+HP/0VE6XPU7elJRqQ=
+github.com/containerd/ttrpc v1.2.7/go.mod h1:YCXHsb32f+Sq5/72xHubdiJRQY9inL4a4ZQrAbN1q9o=
 github.com/containerd/typeurl/v2 v2.2.3 h1:yNA/94zxWdvYACdYO8zofhrTVuQY73fFU1y++dYSw40=
 github.com/containerd/typeurl/v2 v2.2.3/go.mod h1:95ljDnPfD3bAbDJRugOiShd/DlAAsxGtUBhJxIn7SCk=
 github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=
@@ -64,12 +66,12 @@ github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=
 github.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=
-github.com/docker/cli v27.5.1+incompatible h1:JB9cieUT9YNiMITtIsguaN55PLOHhBSz3LKVc6cqWaY=
-github.com/docker/cli v27.5.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=
-github.com/docker/docker v27.5.1+incompatible h1:4PYU5dnBYqRQi0294d1FBECqT9ECWeQAIfE8q4YnPY8=
-github.com/docker/docker v27.5.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
-github.com/docker/docker-credential-helpers v0.8.2 h1:bX3YxiGzFP5sOXWc3bTPEXdEaZSeVMrFgOr3T+zrFAo=
-github.com/docker/docker-credential-helpers v0.8.2/go.mod h1:P3ci7E3lwkZg6XiHdRKft1KckHiO9a2rNtyFbZ/ry9M=
+github.com/docker/cli v28.1.1+incompatible h1:eyUemzeI45DY7eDPuwUcmDyDj1pM98oD5MdSpiItp8k=
+github.com/docker/cli v28.1.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=
+github.com/docker/docker v28.1.1+incompatible h1:49M11BFLsVO1gxY9UX9p/zwkE/rswggs8AdFmXQw51I=
+github.com/docker/docker v28.1.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
+github.com/docker/docker-credential-helpers v0.9.3 h1:gAm/VtF9wgqJMoxzT3Gj5p4AqIjCBS4wrsOh9yRqcz8=
+github.com/docker/docker-credential-helpers v0.9.3/go.mod h1:x+4Gbw9aGmChi3qTLZj8Dfn0TD20M/fuWy0E5+WDeCo=
 github.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=
 github.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=
 github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c h1:+pKlWGMw7gf6bQ+oDZB4KHQFypsfjYlq/C4rfL7D3g8=
@@ -84,16 +86,16 @@ github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1m
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/florianl/go-tc v0.4.4 h1:q6lhEWEfyhGffRzdl3eIcNqX/yVIw0IJwXqa9Rdcctw=
-github.com/florianl/go-tc v0.4.4/go.mod h1:uvp6pIlOw7Z8hhfnT5M4+V1hHVgZWRZwwMS8Z0JsRxc=
+github.com/florianl/go-tc v0.4.5 h1:8lvecARs3c/vGee46j0ro8kco98ga9XjwWvXGwlzrXA=
+github.com/florianl/go-tc v0.4.5/go.mod h1:uvp6pIlOw7Z8hhfnT5M4+V1hHVgZWRZwwMS8Z0JsRxc=
 github.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=
 github.com/frankban/quicktest v1.14.0/go.mod h1:NeW+ay9A/U67EYXNFA1nPE8e/tnQv/09mUdL/ijj8og=
 github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
 github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=
-github.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=
-github.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=
-github.com/fxamacker/cbor/v2 v2.7.0 h1:iM5WgngdRBanHcxugY4JySA0nk1wZorNOpTgCMedv5E=
-github.com/fxamacker/cbor/v2 v2.7.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=
+github.com/fsnotify/fsnotify v1.9.0 h1:2Ml+OJNzbYCTzsxtv8vKSFD9PbJjmhYF14k/jKC7S9k=
+github.com/fsnotify/fsnotify v1.9.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=
+github.com/fxamacker/cbor/v2 v2.8.0 h1:fFtUGXUzXPHTIUdne5+zzMPTfffl3RD5qYnkY40vtxU=
+github.com/fxamacker/cbor/v2 v2.8.0/go.mod h1:vM4b+DJCtHn+zz7h3FFp/hDAI9WNWCsZj23V5ytsSxQ=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=
 github.com/go-jose/go-jose/v4 v4.0.5 h1:M6T8+mKZl/+fNNuFHvGIzDz7BTLQPIounk/b9dw3AaE=
@@ -107,14 +109,16 @@ github.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1
 github.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=
 github.com/go-openapi/jsonreference v0.21.0 h1:Rs+Y7hSXT83Jacb7kFyjn4ijOuVGSvOdF2+tg1TRrwQ=
 github.com/go-openapi/jsonreference v0.21.0/go.mod h1:LmZmgsrTkVg9LG4EaHeY8cBDslNPMo06cago5JNLkm4=
-github.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=
-github.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=
-github.com/go-quicktest/qt v1.101.0 h1:O1K29Txy5P2OK0dGo59b7b0LR6wKfIhttaAhHUyn7eI=
-github.com/go-quicktest/qt v1.101.0/go.mod h1:14Bz/f7NwaXPtdYEgzsx46kqSxVwTbzVZsDC26tQJow=
+github.com/go-openapi/swag v0.23.1 h1:lpsStH0n2ittzTnbaSloVZLuB5+fvSY/+hnagBjSNZU=
+github.com/go-openapi/swag v0.23.1/go.mod h1:STZs8TbRvEQQKUA+JZNAm3EWlgaOBGpyFDqQnDHMef0=
+github.com/go-quicktest/qt v1.101.1-0.20240301121107-c6c8733fa1e6 h1:teYtXy9B7y5lHTp8V9KPxpYRAVA7dozigQcMiBust1s=
+github.com/go-quicktest/qt v1.101.1-0.20240301121107-c6c8733fa1e6/go.mod h1:p4lGIVX+8Wa6ZPNDvqcxq36XpUDLh42FLetFU7odllI=
 github.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=
 github.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=
 github.com/go-test/deep v1.1.1 h1:0r/53hagsehfO4bzD2Pgr/+RgHqhmf+k1Bpse2cTu1U=
 github.com/go-test/deep v1.1.1/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=
+github.com/go-viper/mapstructure/v2 v2.2.1 h1:ZAaOCxANMuZx5RCeg0mBdEZk7DZasvvZIxtHqx8aGss=
+github.com/go-viper/mapstructure/v2 v2.2.1/go.mod h1:oJDH3BJKyqBA2TXFhDsKDGDTlndYOZ6rGS0BRZIxGhM=
 github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
 github.com/godbus/dbus/v5 v5.1.0 h1:4KLkAxT3aOY8Li4FRJe/KvhoNFFxo0m6fNuFUO8QJUk=
 github.com/godbus/dbus/v5 v5.1.0/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
@@ -124,8 +128,8 @@ github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 h1:f+oWsMOmNPc8JmEHVZIycC7hBoQxHH9pNKQORJNozsQ=
+github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8/go.mod h1:wcDNUvekVysuuOpQKo3191zZyTpiI6se1N1ULghS0sw=
 github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
@@ -140,8 +144,8 @@ github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek
 github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/google/btree v1.1.3 h1:CVpQJjYgC4VbzxeGVHfvZrv1ctoYCAI8vbl07Fcxlyg=
 github.com/google/btree v1.1.3/go.mod h1:qOPhT0dTNdNzV6Z/lhRX0YXUafgPLFUh+gZMl761Gm4=
-github.com/google/gnostic-models v0.6.9-0.20230804172637-c7be7c783f49 h1:0VpGH+cDhbDtdcweoyCVsF3fhN8kejK6rFe/2FFX2nU=
-github.com/google/gnostic-models v0.6.9-0.20230804172637-c7be7c783f49/go.mod h1:BkkQ4L1KS1xMt2aWSPStnn55ChGC0DPOn2FQYj+f25M=
+github.com/google/gnostic-models v0.6.9 h1:MU/8wDLif2qCXZmzncUQ/BOfxWfthHi63KqpoNbWqVw=
+github.com/google/gnostic-models v0.6.9/go.mod h1:CiWsm0s6BSQd1hRn8/QmxqB6BesYcbSZxsz9b0KuDBw=
 github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
 github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
@@ -157,11 +161,9 @@ github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeN
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
 github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
-github.com/google/go-containerregistry v0.20.2 h1:B1wPJ1SN/S7pB+ZAimcciVD+r+yV/l/DSArMxlbwseo=
-github.com/google/go-containerregistry v0.20.2/go.mod h1:z38EKdKh4h7IP2gSfUUqEvalZBqs6AoLeWfUy34nQC8=
+github.com/google/go-containerregistry v0.20.3 h1:oNx7IdTI936V8CQRveCjaxOiegWwvM7kqkbXTpyiovI=
+github.com/google/go-containerregistry v0.20.3/go.mod h1:w00pIgBRDVUDFM6bq+Qx8lwNWK+cxgCuX1vd3PIBDNI=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
-github.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=
-github.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/pprof v0.0.0-20241029153458-d1b30febd7db h1:097atOisP2aRj7vFgYQBbFN4U4JNXUNYpxael3UzMyo=
 github.com/google/pprof v0.0.0-20241029153458-d1b30febd7db/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=
 github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=
@@ -173,10 +175,8 @@ github.com/gopacket/gopacket v1.3.1 h1:ZppWyLrOJNZPe5XkdjLbtuTkfQoxQ0xyMJzQCqtqa
 github.com/gopacket/gopacket v1.3.1/go.mod h1:3I13qcqSpB2R9fFQg866OOgzylYkZxLTmkvcXhvf6qg=
 github.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 h1:+ngKgrYPPJrOjhax5N+uePQ0Fh1Z7PheYoUI/0nzkPA=
 github.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
-github.com/grpc-ecosystem/grpc-gateway/v2 v2.25.1 h1:VNqngBF40hVlDloBruUehVYC3ArSgIyScOAyMRqBxRg=
-github.com/grpc-ecosystem/grpc-gateway/v2 v2.25.1/go.mod h1:RBRO7fro65R6tjKzYgLAFo0t1QEXY1Dp+i/bvpRiqiQ=
-github.com/hashicorp/hcl v1.0.1-vault-5 h1:kI3hhbbyzr4dldA8UdTb7ZlVVlI2DACdCfz31RPDgJM=
-github.com/hashicorp/hcl v1.0.1-vault-5/go.mod h1:XYhtn6ijBSAj6n4YqAaf7RBPS4I06AItNorpy+MoQNM=
+github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.3 h1:5ZPtiqj0JL5oKWmcsq4VMaAW5ukBEgSGXEN89zeH1Jo=
+github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.3/go.mod h1:ndYquD05frm2vACXE1nsccT4oJzjhw2arTS2cpUD1PI=
 github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
 github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
 github.com/jmhodges/clock v1.2.0 h1:eq4kys+NI0PLngzaHEe7AmPT90XMGIEySD1JfV1PDIs=
@@ -203,8 +203,8 @@ github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnr
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
-github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=
-github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=
+github.com/klauspost/compress v1.18.0 h1:c/Cqfb0r+Yi+JtIEq73FWXVkRonBlf0CRNYc8Zttxdo=
+github.com/klauspost/compress v1.18.0/go.mod h1:2Pp+KzxcywXVXMr50+X0Q/Lsb43OQHYWRCY2AiWywWQ=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
 github.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=
@@ -220,10 +220,8 @@ github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec h1:2tTW6cDth2T
 github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec/go.mod h1:TmwEoGCwIti7BCeJ9hescZgRtatxRE+A72pCoPfmcfk=
 github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de h1:9TO3cAIGXtEhnIaL+V+BEER86oLrvS+kWobKpbJuye0=
 github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de/go.mod h1:zAbeS9B/r2mtpb6U+EI2rYA5OAXxsYw6wTamcNW+zcE=
-github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=
-github.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
-github.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=
-github.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
+github.com/mailru/easyjson v0.9.0 h1:PrnmzHw7262yW8sTBwxi1PdJA3Iw/EKBa8psRf7d9a4=
+github.com/mailru/easyjson v0.9.0/go.mod h1:1+xMtQp2MRNVL/V1bOzuP3aP8VNwRW55fQUto+XFtTU=
 github.com/mdlayher/ethtool v0.0.0-20210210192532-2b88debcdd43/go.mod h1:+t7E0lkKfbBsebllff1xdTmyJt8lH37niI6kwFk9OTo=
 github.com/mdlayher/genetlink v1.0.0/go.mod h1:0rJ0h4itni50A86M2kHcgS85ttZazNt7a8H2a2cw0Gc=
 github.com/mdlayher/netlink v0.0.0-20190409211403-11939a169225/go.mod h1:eQB3mZE4aiYnlUsyGGCOpPETfdQq4Jhsgf1fk3cwQaA=
@@ -243,26 +241,26 @@ github.com/mdlayher/socket v0.0.0-20210307095302-262dc9984e00/go.mod h1:GAFlyu4/
 github.com/mdlayher/socket v0.1.1/go.mod h1:mYV5YIZAfHh4dzDVzI8x8tWLWCliuX8Mon5Awbj+qDs=
 github.com/mdlayher/socket v0.5.1 h1:VZaqt6RkGkt2OE9l3GcC6nZkqD3xKeQLyfleW/uBcos=
 github.com/mdlayher/socket v0.5.1/go.mod h1:TjPLHI1UgwEv5J1B5q0zTZq12A/6H7nKmtTanQE37IQ=
-github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
-github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
 github.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=
 github.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=
 github.com/moby/locker v1.0.1 h1:fOXqR41zeveg4fFODix+1Ch4mj/gT0NE1XJbp/epuBg=
 github.com/moby/locker v1.0.1/go.mod h1:S7SDdo5zpBK84bzzVlKr2V0hz+7x9hWbYC/kq7oQppc=
-github.com/moby/moby v27.5.1+incompatible h1:/pN59F/t3U7Q4FPzV88nzqf7Fp0qqCSL2KzhZaiKcKw=
-github.com/moby/moby v27.5.1+incompatible/go.mod h1:fDXVQ6+S340veQPv35CzDahGBmHsiclFwfEygB/TWMc=
+github.com/moby/moby v28.1.1+incompatible h1:lyEaGTiUhIdXRUv/vPamckAbPt5LcPQkeHmwAHN98eQ=
+github.com/moby/moby v28.1.1+incompatible/go.mod h1:fDXVQ6+S340veQPv35CzDahGBmHsiclFwfEygB/TWMc=
+github.com/moby/sys/atomicwriter v0.1.0 h1:kw5D/EqkBwsBFi0ss9v1VG3wIkVhzGvLklJ+w3A14Sw=
+github.com/moby/sys/atomicwriter v0.1.0/go.mod h1:Ul8oqv2ZMNHOceF643P6FKPXeCmYtlQMvpizfsSoaWs=
 github.com/moby/sys/mountinfo v0.7.2 h1:1shs6aH5s4o5H2zQLn796ADW1wMrIwHsyJ2v9KouLrg=
 github.com/moby/sys/mountinfo v0.7.2/go.mod h1:1YOa8w8Ih7uW0wALDUgT1dTTSBrZ+HiBLGws92L2RU4=
-github.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=
-github.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=
+github.com/moby/sys/sequential v0.6.0 h1:qrx7XFUd/5DxtqcoH1h438hF5TmOvzC/lspjy7zgvCU=
+github.com/moby/sys/sequential v0.6.0/go.mod h1:uyv8EUTrca5PnDsdMGXhZe6CCe8U/UiTWd+lL+7b/Ko=
 github.com/moby/sys/signal v0.7.0 h1:25RW3d5TnQEoKvRbEKUGay6DCQ46IxAVTT9CUMgmsSI=
 github.com/moby/sys/signal v0.7.0/go.mod h1:GQ6ObYZfqacOwTtlXvcmh9A26dVRul/hbOZn88Kg8Tg=
-github.com/moby/sys/user v0.3.0 h1:9ni5DlcW5an3SvRSx4MouotOygvzaXbaSrc/wGDFWPo=
-github.com/moby/sys/user v0.3.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=
+github.com/moby/sys/user v0.4.0 h1:jhcMKit7SA80hivmFJcbB1vqmw//wU61Zdui2eQXuMs=
+github.com/moby/sys/user v0.4.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=
 github.com/moby/sys/userns v0.1.0 h1:tVLXkFOxVu9A64/yh59slHVv9ahO9UIev4JZusOLG/g=
 github.com/moby/sys/userns v0.1.0/go.mod h1:IHUYgu/kao6N8YZlp9Cf444ySSvCmDlmzUcYfDHOl28=
-github.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=
-github.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=
+github.com/moby/term v0.5.2 h1:6qk3FJAFDs6i/q3W/pQ97SX192qKfZgGjCQqfCJkgzQ=
+github.com/moby/term v0.5.2/go.mod h1:d3djjFCrjnB+fl8NJux+EJzu0msscUP+f8it8hPkFLc=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
@@ -277,18 +275,18 @@ github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8m
 github.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=
 github.com/onsi/ginkgo/v2 v2.21.0 h1:7rg/4f3rB88pb5obDgNZrNHrQ4e6WpjonchcpuBRnZM=
 github.com/onsi/ginkgo/v2 v2.21.0/go.mod h1:7Du3c42kxCUegi0IImZ1wUQzMBVecgIHjR1C+NkhLQo=
-github.com/onsi/gomega v1.36.2 h1:koNYke6TVk6ZmnyHrCXba/T/MoLBXFjeC1PtvYgw0A8=
-github.com/onsi/gomega v1.36.2/go.mod h1:DdwyADRjrc825LhMEkD76cHR5+pUnjhUN8GlHlRPHzY=
+github.com/onsi/gomega v1.37.0 h1:CdEG8g0S133B4OswTDC/5XPSzE1OeP29QOioj2PID2Y=
+github.com/onsi/gomega v1.37.0/go.mod h1:8D9+Txp43QWKhM24yyOBEdpkzN8FvJyAwecBgsU4KU0=
 github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
 github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
-github.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=
-github.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=
-github.com/opencontainers/runtime-spec v1.2.0 h1:z97+pHb3uELt/yiAWD691HNHQIF07bE7dzrbT927iTk=
-github.com/opencontainers/runtime-spec v1.2.0/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
-github.com/opencontainers/selinux v1.11.1 h1:nHFvthhM0qY8/m+vfhJylliSshm8G1jJ2jDMcgULaH8=
-github.com/opencontainers/selinux v1.11.1/go.mod h1:E5dMC3VPuVvVHDYmi78qvhJp8+M586T4DlDRYpFkyec=
-github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
-github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
+github.com/opencontainers/image-spec v1.1.1 h1:y0fUlFfIZhPF1W537XOLg0/fcx6zcHCJwooC2xJA040=
+github.com/opencontainers/image-spec v1.1.1/go.mod h1:qpqAh3Dmcf36wStyyWU+kCeDgrGnAve2nCC8+7h8Q0M=
+github.com/opencontainers/runtime-spec v1.2.1 h1:S4k4ryNgEpxW1dzyqffOmhI1BHYcjzU8lpJfSlR0xww=
+github.com/opencontainers/runtime-spec v1.2.1/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
+github.com/opencontainers/selinux v1.12.0 h1:6n5JV4Cf+4y0KNXW48TLj5DwfXpvWlxXplUkdTrmPb8=
+github.com/opencontainers/selinux v1.12.0/go.mod h1:BTPX+bjVbWGXw7ZZWUbdENt8w0htPSrlgOOysQaU62U=
+github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
+github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
 github.com/peterbourgon/diskv v2.0.1+incompatible h1:UBdAOUP5p4RWqPBg048CAvpKN+vxiaj6gdUUzhl4XmI=
 github.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
@@ -296,47 +294,45 @@ github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINE
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/prometheus/client_golang v1.21.0 h1:DIsaGmiaBkSangBgMtWdNfxbMNdku5IK6iNhrEqWvdA=
-github.com/prometheus/client_golang v1.21.0/go.mod h1:U9NM32ykUErtVBxdvD3zfi+EuFkkaBvMb09mIfe0Zgg=
+github.com/prometheus/client_golang v1.22.0 h1:rb93p9lokFEsctTys46VnV1kLCDpVZ0a/Y92Vm0Zc6Q=
+github.com/prometheus/client_golang v1.22.0/go.mod h1:R7ljNsLXhuQXYZYtw6GAE9AZg8Y7vEW5scdCXrWRXC0=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
-github.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=
-github.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=
-github.com/prometheus/common v0.62.0 h1:xasJaQlnWAeyHdUBeGjXmutelfJHWMRr+Fg4QszZ2Io=
-github.com/prometheus/common v0.62.0/go.mod h1:vyBcEuLSvWos9B1+CyL7JZ2up+uFzXhkqml0W5zIY1I=
-github.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=
-github.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=
+github.com/prometheus/client_model v0.6.2 h1:oBsgwpGs7iVziMvrGhE53c/GrLUsZdHnqNwqPLxwZyk=
+github.com/prometheus/client_model v0.6.2/go.mod h1:y3m2F6Gdpfy6Ut/GBsUqTWZqCUvMVzSfMLjcu6wAwpE=
+github.com/prometheus/common v0.64.0 h1:pdZeA+g617P7oGv1CzdTzyeShxAGrTBsolKNOLQPGO4=
+github.com/prometheus/common v0.64.0/go.mod h1:0gZns+BLRQ3V6NdaerOhMbwwRbNh9hkGINtQAsP5GS8=
+github.com/prometheus/procfs v0.16.1 h1:hZ15bTNuirocR6u0JZ6BAHHmwS1p8B4P6MRqxtzMyRg=
+github.com/prometheus/procfs v0.16.1/go.mod h1:teAbpZRB1iIAJYREa1LsoWUXykVXA1KlTmWl8x/U+Is=
 github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
-github.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=
-github.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=
+github.com/rogpeppe/go-internal v1.13.2-0.20241226121412-a5dc8ff20d0a h1:w3tdWGKbLGBPtR/8/oO74W6hmz0qE5q0z9aqSAewaaM=
+github.com/rogpeppe/go-internal v1.13.2-0.20241226121412-a5dc8ff20d0a/go.mod h1:S8kfXMp+yh77OxPD4fdM6YUknrZpQxLhvxzS4gDHENY=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/s3rj1k/go-fanotify/fanotify v0.0.0-20210917134616-9c00a300bb7a h1:np2nR32/A/VcOG9Hn+IOPA8kMk1gbBzK5LpSsgq5pJI=
 github.com/s3rj1k/go-fanotify/fanotify v0.0.0-20210917134616-9c00a300bb7a/go.mod h1:wiP6GQ2T378F+YIyuNw7yXtBxJZR+fqrrn1Z6UHZi0Q=
-github.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=
-github.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=
-github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
-github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
+github.com/sagikazarmark/locafero v0.7.0 h1:5MqpDsTGNDhY8sGp0Aowyf0qKsPrhewaLSsFaodPcyo=
+github.com/sagikazarmark/locafero v0.7.0/go.mod h1:2za3Cg5rMaTMoG/2Ulr9AwtFaIppKXTRYnozin4aB5k=
 github.com/secure-systems-lab/go-securesystemslib v0.9.0 h1:rf1HIbL64nUpEIZnjLZ3mcNEL9NBPB0iuVjyxvq3LZc=
 github.com/secure-systems-lab/go-securesystemslib v0.9.0/go.mod h1:DVHKMcZ+V4/woA/peqr+L0joiRXbPpQ042GgJckkFgw=
 github.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=
 github.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=
-github.com/sigstore/protobuf-specs v0.4.0 h1:yoZbdh0kZYKOSiVbYyA8J3f2wLh5aUk2SQB7LgAfIdU=
-github.com/sigstore/protobuf-specs v0.4.0/go.mod h1:FKW5NYhnnFQ/Vb9RKtQk91iYd0MKJ9AxyqInEwU6+OI=
-github.com/sigstore/sigstore v1.8.15 h1:9HHnZmxjPQSTPXTCZc25HDxxSTWwsGMh/ZhWZZ39maU=
-github.com/sigstore/sigstore v1.8.15/go.mod h1:+Wa5mrG6A+Gss516YC9owy10q3IazqIRe0y1EoQRHHM=
+github.com/sigstore/protobuf-specs v0.4.1 h1:5SsMqZbdkcO/DNHudaxuCUEjj6x29tS2Xby1BxGU7Zc=
+github.com/sigstore/protobuf-specs v0.4.1/go.mod h1:+gXR+38nIa2oEupqDdzg4qSBT0Os+sP7oYv6alWewWc=
+github.com/sigstore/sigstore v1.9.4 h1:64+OGed80+A4mRlNzRd055vFcgBeDghjZw24rPLZgDU=
+github.com/sigstore/sigstore v1.9.4/go.mod h1:Q7tGTC3gbtK7c3jcxEmGc2MmK4rRpIRzi3bxRFWKvEY=
 github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
 github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=
 github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=
-github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
-github.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=
-github.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=
-github.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
+github.com/spf13/afero v1.12.0 h1:UcOPyRBYczmFn6yvphxkn9ZEOY65cpwGKb5mL36mrqs=
+github.com/spf13/afero v1.12.0/go.mod h1:ZTlWwG4/ahT8W7T0WQ5uYmjI9duaLQGy3Q2OAl4sk/4=
+github.com/spf13/cast v1.7.1 h1:cuNEagBQEHWN1FnbGEjCXL2szYEXqfJPbP2HNUaca9Y=
+github.com/spf13/cast v1.7.1/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
 github.com/spf13/cobra v1.9.1 h1:CXSaggrXdbHK9CF+8ywj8Amf7PBRmPCOJugH954Nnlo=
 github.com/spf13/cobra v1.9.1/go.mod h1:nDyEzZ8ogv936Cinf6g1RU9MRY64Ir93oCnqb9wxYW0=
 github.com/spf13/pflag v1.0.6 h1:jFzHGLGAlb3ruxLB8MhbI6A8+AQX/2eW4qeyNZXNp2o=
 github.com/spf13/pflag v1.0.6/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
-github.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=
-github.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=
+github.com/spf13/viper v1.20.1 h1:ZMi+z/lvLyPSCoNtFCpqjy0S4kPbirhpTMwl8BkW9X4=
+github.com/spf13/viper v1.20.1/go.mod h1:P9Mdzt1zoHIG8m2eZQinpiBjo6kCmZSKBClNNqjJvu4=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
@@ -348,17 +344,14 @@ github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
-github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
-github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
 github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=
 github.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=
 github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399 h1:e/5i7d4oYZ+C1wj2THlRK+oAhjeS/TRQwMfkIuet3w0=
 github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399/go.mod h1:LdwHTNJT99C5fTAzDz0ud328OgXz+gierycbcIx2fRs=
-github.com/vishvananda/netlink v1.3.0 h1:X7l42GfcV4S6E4vHTsw48qbrV+9PVojNfIhZcwQdrZk=
-github.com/vishvananda/netlink v1.3.0/go.mod h1:i6NetklAujEcC6fK0JPjT8qSwWyO0HLn4UKG+hGqeJs=
-github.com/vishvananda/netns v0.0.4/go.mod h1:SpkAiCQRtJ6TvvxPnOSyH3BMl6unz3xZlaprSwhNNJM=
+github.com/vishvananda/netlink v1.3.1 h1:3AEMt62VKqz90r0tmNhog0r/PpWKmrEShJU0wJW6bV0=
+github.com/vishvananda/netlink v1.3.1/go.mod h1:ARtKouGSTGchR8aMwmkzC0qiNPrrWO5JS/XMVl45+b4=
 github.com/vishvananda/netns v0.0.5 h1:DfiHV+j8bA32MFM7bfEunvT8IAqQ/NzSJHtcmW5zdEY=
 github.com/vishvananda/netns v0.0.5/go.mod h1:SpkAiCQRtJ6TvvxPnOSyH3BMl6unz3xZlaprSwhNNJM=
 github.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=
@@ -371,28 +364,30 @@ go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
 go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
 go.opentelemetry.io/auto/sdk v1.1.0 h1:cH53jehLUN6UFLY71z+NDOiNJqDdPRaXzTel0sJySYA=
 go.opentelemetry.io/auto/sdk v1.1.0/go.mod h1:3wSPjt5PWp2RhlCcmmOial7AvC4DQqZb7a7wCow3W8A=
-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
-go.opentelemetry.io/otel v1.34.0 h1:zRLXxLCgL1WyKsPVrgbSdMN4c0FMkDAskSTQP+0hdUY=
-go.opentelemetry.io/otel v1.34.0/go.mod h1:OWFPOQ+h4G8xpyjgqo4SxJYdDQ/qmRH+wivy7zzx9oI=
-go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.34.0 h1:ajl4QczuJVA2TU9W9AGw++86Xga/RKt//16z/yxPgdk=
-go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.34.0/go.mod h1:Vn3/rlOJ3ntf/Q3zAI0V5lDnTbHGaUsNUeF6nZmm7pA=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0 h1:3Q/xZUyC1BBkualc9ROb4G8qkH90LXEIICcs5zv1OYY=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0/go.mod h1:s75jGIWA9OfCMzF0xr+ZgfrB5FEbbV7UuYo32ahUiFI=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.27.0 h1:QY7/0NeRPKlzusf40ZE4t1VlMKbqSNT7cJRYzWuja0s=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.27.0/go.mod h1:HVkSiDhTM9BoUJU8qE6j2eSWLLXvi1USXjyd2BXT8PY=
-go.opentelemetry.io/otel/exporters/prometheus v0.56.0 h1:GnCIi0QyG0yy2MrJLzVrIM7laaJstj//flf1zEJCG+E=
-go.opentelemetry.io/otel/exporters/prometheus v0.56.0/go.mod h1:JQcVZtbIIPM+7SWBB+T6FK+xunlyidwLp++fN0sUaOk=
-go.opentelemetry.io/otel/metric v1.34.0 h1:+eTR3U0MyfWjRDhmFMxe2SsW64QrZ84AOhvqS7Y+PoQ=
-go.opentelemetry.io/otel/metric v1.34.0/go.mod h1:CEDrp0fy2D0MvkXE+dPV7cMi8tWZwX3dmaIhwPOaqHE=
-go.opentelemetry.io/otel/sdk v1.34.0 h1:95zS4k/2GOy069d321O8jWgYsW3MzVV+KuSPKp7Wr1A=
-go.opentelemetry.io/otel/sdk v1.34.0/go.mod h1:0e/pNiaMAqaykJGKbi+tSjWfNNHMTxoC9qANsCzbyxU=
-go.opentelemetry.io/otel/sdk/metric v1.34.0 h1:5CeK9ujjbFVL5c1PhLuStg1wxA7vQv7ce1EK0Gyvahk=
-go.opentelemetry.io/otel/sdk/metric v1.34.0/go.mod h1:jQ/r8Ze28zRKoNRdkjCZxfs6YvBTG1+YIqyFVFYec5w=
-go.opentelemetry.io/otel/trace v1.34.0 h1:+ouXS2V8Rd4hp4580a8q23bg0azF2nI8cqLYnC8mh/k=
-go.opentelemetry.io/otel/trace v1.34.0/go.mod h1:Svm7lSjQD7kG7KJ/MUHPVXSDGz2OX4h0M2jHBhmSfRE=
-go.opentelemetry.io/proto/otlp v1.5.0 h1:xJvq7gMzB31/d406fB8U5CBdyQGw4P399D1aQWU/3i4=
-go.opentelemetry.io/proto/otlp v1.5.0/go.mod h1:keN8WnHxOy8PG0rQZjJJ5A2ebUoafqWp0eVQ4yIXvJ4=
+go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.59.0 h1:CV7UdSGJt/Ao6Gp4CXckLxVRRsRgDHoI8XjbL3PDl8s=
+go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.59.0/go.mod h1:FRmFuRJfag1IZ2dPkHnEoSFVgTVPUd2qf5Vi69hLb8I=
+go.opentelemetry.io/contrib/instrumentation/runtime v0.61.0 h1:oIZsTHd0YcrvvUCN2AaQqyOcd685NQ+rFmrajveCIhA=
+go.opentelemetry.io/contrib/instrumentation/runtime v0.61.0/go.mod h1:X4KSPIvxnY/G5c9UOGXtFoL91t1gmlHpDQzeK5Zc/Bw=
+go.opentelemetry.io/otel v1.36.0 h1:UumtzIklRBY6cI/lllNZlALOF5nNIzJVb16APdvgTXg=
+go.opentelemetry.io/otel v1.36.0/go.mod h1:/TcFMXYjyRNh8khOAO9ybYkqaDBb/70aVwkNML4pP8E=
+go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.36.0 h1:zwdo1gS2eH26Rg+CoqVQpEK1h8gvt5qyU5Kk5Bixvow=
+go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.36.0/go.mod h1:rUKCPscaRWWcqGT6HnEmYrK+YNe5+Sw64xgQTOJ5b30=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.33.0 h1:Vh5HayB/0HHfOQA7Ctx69E/Y/DcQSMPpKANYVMQ7fBA=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.33.0/go.mod h1:cpgtDBaqD/6ok/UG0jT15/uKjAY8mRA53diogHBg3UI=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.33.0 h1:wpMfgF8E1rkrT1Z6meFh1NDtownE9Ii3n3X2GJYjsaU=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.33.0/go.mod h1:wAy0T/dUbs468uOlkT31xjvqQgEVXv58BRFWEgn5v/0=
+go.opentelemetry.io/otel/exporters/prometheus v0.58.0 h1:CJAxWKFIqdBennqxJyOgnt5LqkeFRT+Mz3Yjz3hL+h8=
+go.opentelemetry.io/otel/exporters/prometheus v0.58.0/go.mod h1:7qo/4CLI+zYSNbv0GMNquzuss2FVZo3OYrGh96n4HNc=
+go.opentelemetry.io/otel/metric v1.36.0 h1:MoWPKVhQvJ+eeXWHFBOPoBOi20jh6Iq2CcCREuTYufE=
+go.opentelemetry.io/otel/metric v1.36.0/go.mod h1:zC7Ks+yeyJt4xig9DEw9kuUFe5C3zLbVjV2PzT6qzbs=
+go.opentelemetry.io/otel/sdk v1.36.0 h1:b6SYIuLRs88ztox4EyrvRti80uXIFy+Sqzoh9kFULbs=
+go.opentelemetry.io/otel/sdk v1.36.0/go.mod h1:+lC+mTgD+MUWfjJubi2vvXWcVxyr9rmlshZni72pXeY=
+go.opentelemetry.io/otel/sdk/metric v1.36.0 h1:r0ntwwGosWGaa0CrSt8cuNuTcccMXERFwHX4dThiPis=
+go.opentelemetry.io/otel/sdk/metric v1.36.0/go.mod h1:qTNOhFDfKRwX0yXOqJYegL5WRaW376QbB7P4Pb0qva4=
+go.opentelemetry.io/otel/trace v1.36.0 h1:ahxWNuqZjpdiFAyrIoQ4GIiAIhxAunQR6MUoKrsNd4w=
+go.opentelemetry.io/otel/trace v1.36.0/go.mod h1:gQ+OnDZzrybY4k4seLzPAWNwVBBVlF2szhehOBB/tGA=
+go.opentelemetry.io/proto/otlp v1.6.0 h1:jQjP+AQyTf+Fe7OKj/MfkDrmK4MNVtw2NpXsf9fefDI=
+go.opentelemetry.io/proto/otlp v1.6.0/go.mod h1:cicgGehlFuNdgZkcALOCh3VE6K/u2tAjzlRhDwmVpZc=
 go.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=
 go.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=
 go.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=
@@ -400,8 +395,8 @@ go.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN8
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.35.0 h1:b15kiHdrGCHrP6LvwaQ3c03kgNhhiMgvlhxHQhmg2Xs=
-golang.org/x/crypto v0.35.0/go.mod h1:dy7dXNW32cAb/6/PRuTNsix8T+vJAqvuIy5Bli/x0YQ=
+golang.org/x/crypto v0.38.0 h1:jt+WWG8IZlBnVbomuhg2Mdq0+BBQaHbtqHEFEigjUV8=
+golang.org/x/crypto v0.38.0/go.mod h1:MvrbAqul58NNYPKnOra203SB9vpuZW0e+RRZV+Ggqjw=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20250103183323-7d7fa50e5329 h1:9kj3STMvgqy3YA4VQXBrN7925ICMxD5wzMRcgA30588=
 golang.org/x/exp v0.0.0-20250103183323-7d7fa50e5329/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=
@@ -430,19 +425,19 @@ golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v
 golang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20210928044308-7d9f5e0b762b/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
-golang.org/x/net v0.35.0 h1:T5GQRQb2y08kTAByq9L4/bz8cipCdA8FbRTXewonqY8=
-golang.org/x/net v0.35.0/go.mod h1:EglIi67kWsHKlRzzVMUD93VMSWGFOMSZgxFjparz1Qk=
+golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
+golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
-golang.org/x/oauth2 v0.26.0 h1:afQXWNNaeC4nvZ0Ed9XvCCzXM6UHJG7iCg0W4fPqSBE=
-golang.org/x/oauth2 v0.26.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+golang.org/x/oauth2 v0.30.0 h1:dnDm7JmhM45NNpd8FDDeLhK6FwqbOf4MLCM9zb1BOHI=
+golang.org/x/oauth2 v0.30.0/go.mod h1:B++QgG3ZKulg6sRPGD/mqlHQs5rB3Ml9erfeDY7xKlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.11.0 h1:GGz8+XQP4FvTTrjZPzNKTMFtSXH80RAzG+5ghFPgK9w=
-golang.org/x/sync v0.11.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sync v0.14.0 h1:woo0S4Yywslg6hp4eUFjTVOyKt0RookbpAHG4c1HmhQ=
+golang.org/x/sync v0.14.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -474,20 +469,20 @@ golang.org/x/sys v0.0.0-20220128215802-99c3d69c2c27/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.10.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.30.0 h1:QjkSwP/36a20jFYWkSue1YwXzLmsV5Gfq7Eiy72C1uc=
-golang.org/x/sys v0.30.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
+golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.29.0 h1:L6pJp37ocefwRRtYPKSWOWzOtWSxVajvz2ldH/xi3iU=
-golang.org/x/term v0.29.0/go.mod h1:6bl4lRlvVuDgSf3179VpIxBF0o10JUpXWOnI7nErv7s=
+golang.org/x/term v0.32.0 h1:DR4lr0TjUs3epypdhTOkMmuF5CDFJ/8pOnbzMZPQ7bg=
+golang.org/x/term v0.32.0/go.mod h1:uZG1FhGx848Sqfsq4/DlJr3xGGsYMu/L5GW4abiaEPQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.22.0 h1:bofq7m3/HAFvbF51jz3Q9wLg3jkvSPuiZu/pD1XwgtM=
-golang.org/x/text v0.22.0/go.mod h1:YRoo4H8PVmsu+E3Ou7cqLVH8oXWIHVoX0jqUWALQhfY=
-golang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=
-golang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
+golang.org/x/text v0.25.0 h1:qVyWApTSYLk/drJRO5mDlNYskwQznZmkpV2c8q9zls4=
+golang.org/x/text v0.25.0/go.mod h1:WEdwpYrmk1qmdHvhkSTNPm3app7v4rsT8F2UD6+VHIA=
+golang.org/x/time v0.11.0 h1:/bpjEDfN9tkoN/ryeYHnv5hcMlc8ncjMcM4XBk5NWV0=
+golang.org/x/time v0.11.0/go.mod h1:CDIdPxbZBQxdj6cxyCIdrNogrJKMJ7pr37NYpMcMDSg=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
@@ -496,8 +491,8 @@ golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBn
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
-golang.org/x/tools v0.28.0 h1:WuB6qZ4RPCQo5aP3WdKZS7i595EdWqWR8vqJTlwTVK8=
-golang.org/x/tools v0.28.0/go.mod h1:dcIOrVd3mfQKTgrDVQHqCPMWy6lnhfhtX3hLXYVLfRw=
+golang.org/x/tools v0.33.0 h1:4qz2S3zmRxbGIhDIAgjxvFutSvH5EfnsYrRBj0UI0bc=
+golang.org/x/tools v0.33.0/go.mod h1:CIJMaWEY88juyUfo7UbgPqbC8rU2OqfAV1h2Qp0oMYI=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -507,19 +502,19 @@ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de h1:F6qOa9AZTYJXOUEr4jDysRDLrm4PHePlge4v4TGAlxY=
-google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de/go.mod h1:VUhTRKeHn9wwcdrk73nvdC9gF178Tzhmt/qyaFcPLSo=
-google.golang.org/genproto/googleapis/api v0.0.0-20250115164207-1a7da9e5054f h1:gap6+3Gk41EItBuyi4XX/bp4oqJ3UwuIMl25yGinuAA=
-google.golang.org/genproto/googleapis/api v0.0.0-20250115164207-1a7da9e5054f/go.mod h1:Ic02D47M+zbarjYYUlK57y316f2MoN0gjAwI3f2S95o=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f h1:OxYkA3wjPsZyBylwymxSHa7ViiW1Sml4ToBrncvFehI=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f/go.mod h1:+2Yz8+CLJbIfL9z73EW45avw8Lmge3xVElCP9zEKi50=
+google.golang.org/genproto v0.0.0-20241118233622-e639e219e697 h1:ToEetK57OidYuqD4Q5w+vfEnPvPpuTwedCNVohYJfNk=
+google.golang.org/genproto v0.0.0-20241118233622-e639e219e697/go.mod h1:JJrvXBWRZaFMxBufik1a4RpFw4HhgVtBBWQeQgUj2cc=
+google.golang.org/genproto/googleapis/api v0.0.0-20250519155744-55703ea1f237 h1:Kog3KlB4xevJlAcbbbzPfRG0+X9fdoGM+UBRKVz6Wr0=
+google.golang.org/genproto/googleapis/api v0.0.0-20250519155744-55703ea1f237/go.mod h1:ezi0AVyMKDWy5xAncvjLWH7UcLBB5n7y2fQ8MzjJcto=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20250519155744-55703ea1f237 h1:cJfm9zPbe1e873mHJzmQ1nwVEeRDU/T1wXDK2kUSU34=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20250519155744-55703ea1f237/go.mod h1:qQ0YXyHHx3XkvlzUtpXDkS29lDSafHMZBAZDc03LQ3A=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
 google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
 google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
-google.golang.org/grpc v1.70.0 h1:pWFv03aZoHzlRKHWicjsZytKAiYCtNS0dHbXnIdq7jQ=
-google.golang.org/grpc v1.70.0/go.mod h1:ofIJqVKDXx/JiXrwr2IG4/zwdH9txy3IlF40RmcJSQw=
+google.golang.org/grpc v1.72.2 h1:TdbGzwb82ty4OusHWepvFWGLgIbNo1/SUynEN0ssqv8=
+google.golang.org/grpc v1.72.2/go.mod h1:wH5Aktxcg25y1I3w7H69nHfXdOG3UiadoBtjh3izSDM=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -529,8 +524,8 @@ google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
-google.golang.org/protobuf v1.36.5 h1:tPhr+woSbjfYvY6/GPufUoYizxw1cF/yFoxJ2fmpwlM=
-google.golang.org/protobuf v1.36.5/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
+google.golang.org/protobuf v1.36.6 h1:z1NpPI8ku2WgiWnf+t9wTPsn6eP1L7ksHUlkfLvd9xY=
+google.golang.org/protobuf v1.36.6/go.mod h1:jduwjTPXsFjZGTmRluh+L6NjiWu7pchiJ2/5YcXBHnY=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
@@ -541,8 +536,6 @@ gopkg.in/evanphx/json-patch.v4 v4.12.0 h1:n6jtcsulIzXPJaxegRbvFNNrZDjbij7ny3gmSP
 gopkg.in/evanphx/json-patch.v4 v4.12.0/go.mod h1:p8EYWUEYMpynmqDbY58zCKCFZw8pRWMG4EsWvDvM72M=
 gopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=
 gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
-gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
-gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
 gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
@@ -553,35 +546,38 @@ gotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=
 gotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
-k8s.io/api v0.32.2 h1:bZrMLEkgizC24G9eViHGOPbW+aRo9duEISRIJKfdJuw=
-k8s.io/api v0.32.2/go.mod h1:hKlhk4x1sJyYnHENsrdCWw31FEmCijNGPJO5WzHiJ6Y=
-k8s.io/apimachinery v0.32.2 h1:yoQBR9ZGkA6Rgmhbp/yuT9/g+4lxtsGYwW6dR6BDPLQ=
-k8s.io/apimachinery v0.32.2/go.mod h1:GpHVgxoKlTxClKcteaeuF1Ul/lDVb74KpZcxcmLDElE=
-k8s.io/cli-runtime v0.32.2 h1:aKQR4foh9qeyckKRkNXUccP9moxzffyndZAvr+IXMks=
-k8s.io/cli-runtime v0.32.2/go.mod h1:a/JpeMztz3xDa7GCyyShcwe55p8pbcCVQxvqZnIwXN8=
-k8s.io/client-go v0.32.2 h1:4dYCD4Nz+9RApM2b/3BtVvBHw54QjMFUl1OLcJG5yOA=
-k8s.io/client-go v0.32.2/go.mod h1:fpZ4oJXclZ3r2nDOv+Ux3XcJutfrwjKTCHz2H3sww94=
-k8s.io/component-base v0.32.2 h1:1aUL5Vdmu7qNo4ZsE+569PV5zFatM9hl+lb3dEea2zU=
-k8s.io/component-base v0.32.2/go.mod h1:PXJ61Vx9Lg+P5mS8TLd7bCIr+eMJRQTyXe8KvkrvJq0=
-k8s.io/cri-api v0.32.2 h1:7DuaOHpOcXweZeBUbRdK0iCroxctGp73VwgrA0u7kho=
-k8s.io/cri-api v0.32.2/go.mod h1:DCzMuTh2padoinefWME0G678Mc3QFbLMF2vEweGzBAI=
+k8s.io/api v0.33.1 h1:tA6Cf3bHnLIrUK4IqEgb2v++/GYUtqiu9sRVk3iBXyw=
+k8s.io/api v0.33.1/go.mod h1:87esjTn9DRSRTD4fWMXamiXxJhpOIREjWOSjsW1kEHw=
+k8s.io/apimachinery v0.33.1 h1:mzqXWV8tW9Rw4VeW9rEkqvnxj59k1ezDUl20tFK/oM4=
+k8s.io/apimachinery v0.33.1/go.mod h1:BHW0YOu7n22fFv/JkYOEfkUYNRN0fj0BlvMFWA7b+SM=
+k8s.io/cli-runtime v0.33.1 h1:TvpjEtF71ViFmPeYMj1baZMJR4iWUEplklsUQ7D3quA=
+k8s.io/cli-runtime v0.33.1/go.mod h1:9dz5Q4Uh8io4OWCLiEf/217DXwqNgiTS/IOuza99VZE=
+k8s.io/client-go v0.33.1 h1:ZZV/Ks2g92cyxWkRRnfUDsnhNn28eFpt26aGc8KbXF4=
+k8s.io/client-go v0.33.1/go.mod h1:JAsUrl1ArO7uRVFWfcj6kOomSlCv+JpvIsp6usAGefA=
+k8s.io/component-base v0.33.1 h1:EoJ0xA+wr77T+G8p6T3l4efT2oNwbqBVKR71E0tBIaI=
+k8s.io/component-base v0.33.1/go.mod h1:guT/w/6piyPfTgq7gfvgetyXMIh10zuXA6cRRm3rDuY=
+k8s.io/cri-api v0.33.1 h1:CEvLiHZm/uTTp/5qsesU8/OG1a56RPnwMk4Ae73bUvs=
+k8s.io/cri-api v0.33.1/go.mod h1:OLQvT45OpIA+tv91ZrpuFIGY+Y2Ho23poS7n115Aocs=
 k8s.io/klog/v2 v2.130.1 h1:n9Xl7H1Xvksem4KFG4PYbdQCQxqc/tTUyrgXaOhHSzk=
 k8s.io/klog/v2 v2.130.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=
-k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f h1:GA7//TjRY9yWGy1poLzYYJJ4JRdzg3+O6e8I+e+8T5Y=
-k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f/go.mod h1:R/HEjbvWI0qdfb8viZUeVZm0X6IZnxAydC7YU42CMw4=
-k8s.io/kubelet v0.32.2 h1:WFTSYdt3BB1aTApDuKNI16x/4MYqqX8WBBBBh3KupDg=
-k8s.io/kubelet v0.32.2/go.mod h1:cC1ms5RS+lu0ckVr6AviCQXHLSPKEBC3D5oaCBdTGkI=
-k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 h1:M3sRQVHv7vB20Xc2ybTt7ODCeFj6JSWYFzOFnYeS6Ro=
-k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=
-oras.land/oras-go/v2 v2.5.0 h1:o8Me9kLY74Vp5uw07QXPiitjsw7qNXi8Twd+19Zf02c=
-oras.land/oras-go/v2 v2.5.0/go.mod h1:z4eisnLP530vwIOUOJeBIj0aGI0L1C3d53atvCBqZHg=
-sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 h1:/Rv+M11QRah1itp8VhT6HoVx1Ray9eB4DBr+K+/sCJ8=
-sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3/go.mod h1:18nIHnGi6636UCz6m8i4DhaJ65T6EruyzmoQqI2BVDo=
-sigs.k8s.io/kustomize/api v0.18.0 h1:hTzp67k+3NEVInwz5BHyzc9rGxIauoXferXyjv5lWPo=
-sigs.k8s.io/kustomize/api v0.18.0/go.mod h1:f8isXnX+8b+SGLHQ6yO4JG1rdkZlvhaCf/uZbLVMb0U=
-sigs.k8s.io/kustomize/kyaml v0.18.1 h1:WvBo56Wzw3fjS+7vBjN6TeivvpbW9GmRaWZ9CIVmt4E=
-sigs.k8s.io/kustomize/kyaml v0.18.1/go.mod h1:C3L2BFVU1jgcddNBE1TxuVLgS46TjObMwW5FT9FcjYo=
-sigs.k8s.io/structured-merge-diff/v4 v4.4.2 h1:MdmvkGuXi/8io6ixD5wud3vOLwc1rj0aNqRlpuvjmwA=
-sigs.k8s.io/structured-merge-diff/v4 v4.4.2/go.mod h1:N8f93tFZh9U6vpxwRArLiikrE5/2tiu1w1AGfACIGE4=
+k8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff h1:/usPimJzUKKu+m+TE36gUyGcf03XZEP0ZIKgKj35LS4=
+k8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff/go.mod h1:5jIi+8yX4RIb8wk3XwBo5Pq2ccx4FP10ohkbSKCZoK8=
+k8s.io/kubelet v0.33.1 h1:x4LCw1/iZVWOKA4RoITnuB8gMHnw31HPB3S0EF0EexE=
+k8s.io/kubelet v0.33.1/go.mod h1:8WpdC9M95VmsqIdGSQrajXooTfT5otEj8pGWOm+KKfQ=
+k8s.io/utils v0.0.0-20250321185631-1f6e0b77f77e h1:KqK5c/ghOm8xkHYhlodbp6i6+r+ChV2vuAuVRdFbLro=
+k8s.io/utils v0.0.0-20250321185631-1f6e0b77f77e/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=
+oras.land/oras-go/v2 v2.6.0 h1:X4ELRsiGkrbeox69+9tzTu492FMUu7zJQW6eJU+I2oc=
+oras.land/oras-go/v2 v2.6.0/go.mod h1:magiQDfG6H1O9APp+rOsvCPcW1GD2MM7vgnKY0Y+u1o=
+sigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8 h1:gBQPwqORJ8d8/YNZWEjoZs7npUVDpVXUUOFfW6CgAqE=
+sigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8/go.mod h1:mdzfpAEoE6DHQEN0uh9ZbOCuHbLK5wOm7dK4ctXE9Tg=
+sigs.k8s.io/kustomize/api v0.19.0 h1:F+2HB2mU1MSiR9Hp1NEgoU2q9ItNOaBJl0I4Dlus5SQ=
+sigs.k8s.io/kustomize/api v0.19.0/go.mod h1:/BbwnivGVcBh1r+8m3tH1VNxJmHSk1PzP5fkP6lbL1o=
+sigs.k8s.io/kustomize/kyaml v0.19.0 h1:RFge5qsO1uHhwJsu3ipV7RNolC7Uozc0jUBC/61XSlA=
+sigs.k8s.io/kustomize/kyaml v0.19.0/go.mod h1:FeKD5jEOH+FbZPpqUghBP8mrLjJ3+zD3/rf9NNu1cwY=
+sigs.k8s.io/randfill v0.0.0-20250304075658-069ef1bbf016/go.mod h1:XeLlZ/jmk4i1HRopwe7/aU3H5n1zNUcX6TM94b3QxOY=
+sigs.k8s.io/randfill v1.0.0 h1:JfjMILfT8A6RbawdsK2JXGBR5AQVfd+9TbzrlneTyrU=
+sigs.k8s.io/randfill v1.0.0/go.mod h1:XeLlZ/jmk4i1HRopwe7/aU3H5n1zNUcX6TM94b3QxOY=
+sigs.k8s.io/structured-merge-diff/v4 v4.7.0 h1:qPeWmscJcXP0snki5IYF79Z8xrl8ETFxgMd7wez1XkI=
+sigs.k8s.io/structured-merge-diff/v4 v4.7.0/go.mod h1:dDy58f92j70zLsuZVuUX5Wp9vtxXpaZnkPGWeqDfCps=
 sigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=
 sigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=
diff --git a/examples/kube-container-collection/Dockerfile b/examples/kube-container-collection/Dockerfile
index 475d09a5c..66d4a2f2c 100644
--- a/examples/kube-container-collection/Dockerfile
+++ b/examples/kube-container-collection/Dockerfile
@@ -1,4 +1,4 @@
-FROM golang:1.23.4@sha256:7ea4c9dcb2b97ff8ee80a67db3d44f98c8ffa0d191399197007d8459c1453041 AS builder
+FROM golang:1.24.2-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2 AS builder
 
 # Cache go modules so they won't be downloaded at each build
 COPY go.mod go.sum /gadget/
diff --git a/examples/kube-container-collection/Dockerfile.dockerignore b/examples/kube-container-collection/Dockerfile.dockerignore
index 2b868feab..12298e002 100644
--- a/examples/kube-container-collection/Dockerfile.dockerignore
+++ b/examples/kube-container-collection/Dockerfile.dockerignore
@@ -3,4 +3,4 @@
 !go.sum
 !examples
 !pkg
-!internal/thirdparty
+!internal
diff --git a/examples/kube-container-collection/main.go b/examples/kube-container-collection/main.go
index cb1974c39..3aaa146be 100644
--- a/examples/kube-container-collection/main.go
+++ b/examples/kube-container-collection/main.go
@@ -16,7 +16,6 @@ package main
 
 import (
 	"context"
-	"encoding/json"
 	"flag"
 	"fmt"
 	"os"
@@ -81,13 +80,8 @@ func callback(notif containercollection.PubSubEvent) {
 	switch notif.Type {
 	case containercollection.EventTypeAddContainer:
 		fmt.Printf("Container added: %v pid %d\n", notif.Container.Runtime.ContainerID, notif.Container.ContainerPid())
-		if notif.Container.OciConfig != nil {
-			config, err := json.Marshal(notif.Container.OciConfig)
-			if err != nil {
-				publishEvent(notif.Container, "CannotMarshalContainerConfig", err.Error())
-			} else {
-				publishEvent(notif.Container, "NewContainerConfig", string(config))
-			}
+		if notif.Container.OciConfig != "" {
+			publishEvent(notif.Container, "NewContainerConfig", notif.Container.OciConfig)
 		} else {
 			publishEvent(notif.Container, "ContainerConfigNotFound", "")
 		}
@@ -109,13 +103,8 @@ func main() {
 		*node = os.Getenv("NODE_NAME")
 	}
 
-	config, err := k8sutil.NewKubeConfig(*kubeconfig)
-	if err != nil {
-		fmt.Fprintf(os.Stderr, "Failed to get kubeconfig: %s\n", err)
-		os.Exit(1)
-	}
-
-	client, err = kubernetes.NewForConfig(config)
+	var err error
+	client, err = k8sutil.NewClientset(*kubeconfig, "publish-event")
 	if err != nil {
 		fmt.Fprintf(os.Stderr, "Failed to get Kubernetes client set: %s\n", err)
 		os.Exit(1)
@@ -125,7 +114,9 @@ func main() {
 	opts := []containercollection.ContainerCollectionOption{
 		containercollection.WithPubSub(containerEventFuncs...),
 		containercollection.WithCgroupEnrichment(),
-		containercollection.WithKubernetesEnrichment(*node, config),
+		containercollection.WithKubeconfigPath(*kubeconfig),
+		containercollection.WithNodeName(*node),
+		containercollection.WithKubernetesEnrichment(*node),
 		containercollection.WithContainerFanotifyEbpf(),
 	}
 
diff --git a/gadget-container/gadgettracermanager/main.go b/gadget-container/gadgettracermanager/main.go
index c1bec0daa..41e9f75ee 100644
--- a/gadget-container/gadgettracermanager/main.go
+++ b/gadget-container/gadgettracermanager/main.go
@@ -1,4 +1,4 @@
-// Copyright 2019-2024 The Inspektor Gadget authors
+// Copyright 2019-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -57,6 +57,7 @@ import (
 	// Blank import for some operators
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/btfgen"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf"
+	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/env"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/filter"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/formatters"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/kubeipresolver"
@@ -64,6 +65,7 @@ import (
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/limiter"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/otel-logs"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/otel-metrics"
+	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/process"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/socketenricher"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/sort"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/uidgidresolver"
@@ -286,6 +288,7 @@ func main() {
 
 	if serve {
 		log.Infof("Inspektor Gadget version: %s", version.Version().String())
+		log.Infof("Inspektor Gadget User Agent: %s", version.UserAgent())
 
 		if experimental.Enabled() {
 			log.Info("Experimental features enabled")
@@ -393,7 +396,12 @@ func main() {
 			log.Fatalf("initializing manager: %v", err)
 		}
 
-		store, err := k8sconfigmapstore.New(mgr)
+		gadgetNs := config.Config.GetString(gadgettracermanagerconfig.GadgetNamespace)
+		if gadgetNs == "" {
+			log.Fatalf("gadget namespace must not be empty")
+		}
+
+		store, err := k8sconfigmapstore.New(mgr, gadgetNs)
 		if err != nil {
 			log.Fatalf("initializing store: %v", err)
 		}
diff --git a/gadgets/Makefile b/gadgets/Makefile
index 28f5dcf81..b07708177 100644
--- a/gadgets/Makefile
+++ b/gadgets/Makefile
@@ -4,7 +4,7 @@ ROOT_DIR:=$(dir $(realpath $(firstword $(MAKEFILE_LIST))))
 
 GADGET_TAG ?= $(shell ../tools/image-tag branch)
 GADGET_REPOSITORY ?= ghcr.io/inspektor-gadget/gadget
-BUILDER_IMAGE ?= ghcr.io/inspektor-gadget/ebpf-builder:latest
+BUILDER_IMAGE ?= ghcr.io/inspektor-gadget/gadget-builder:main
 KERNEL_REPOSITORY ?= ghcr.io/inspektor-gadget/ci-kernels
 IG ?= ig
 KUBECTL_GADGET ?= kubectl-gadget
@@ -12,18 +12,24 @@ IG_RUNTIME ?= docker
 IG_FLAGS ?=
 IG_DEBUG_LOGS ?= true
 COSIGN ?= cosign
+CRANE ?= crane
 VIMTO ?= vimto
 VIMTO_VM_MEMORY ?= 4096M
+DOCKER ?= docker
 
 UNIT_TEST_DIR = test/unit
 INTEGRATION_TEST_DIR = test/integration
 
 GADGETS = \
+	advise_networkpolicy \
+	advise_seccomp \
 	audit_seccomp \
+	bpfstats \
 	deadlock \
 	fdpass \
 	fsnotify \
 	profile_blockio \
+	profile_cpu \
 	profile_qdisc_latency \
 	profile_tcprtt \
 	trace_bind \
@@ -32,6 +38,7 @@ GADGETS = \
 	trace_exec \
 	trace_fsslower \
 	trace_lsm \
+	traceloop \
 	trace_malloc \
 	trace_mount \
 	trace_oomkill \
@@ -44,6 +51,7 @@ GADGETS = \
 	trace_tcpretrans \
 	top_blockio \
 	top_file \
+	top_process \
 	top_tcp \
 	snapshot_process \
 	snapshot_socket \
@@ -55,22 +63,31 @@ GADGETS = \
 DATE=$(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
 
 GADGETS_README = $(filter-out ci/%, $(addsuffix /README.mdx, $(GADGETS)))
+GADGETS_README_DEV = $(filter-out ci/%, $(addsuffix /dev.md, $(GADGETS)))
 
 .PHONY: all
 all: build
 
+.PHONY: build
 build: $(GADGETS)
 
+# Pull the gadget builder in an independent step to avoid doing the same for
+# each gadget, which introduces some overhead and increases the build time.
+.PHONY: pull-builder-image
+pull-builder-image:
+	$(DOCKER) pull $(BUILDER_IMAGE)
+
 # GADGET_BUILD_PARAMS can be used to pass additional parameters e.g
 # GADGET_BUILD_PARAMS="--update-metadata" make build
 .PHONY: $(GADGETS)
-$(GADGETS):
+$(GADGETS): pull-builder-image
 	@echo "Building $@"
 	@sudo -E \
 		IG_SOURCE_PATH=$(realpath $(ROOT_DIR)/..) \
 		$(IG) image build \
 		--builder-image $(BUILDER_IMAGE) \
 		-t $(GADGET_REPOSITORY)/$@:$(GADGET_TAG) \
+		--builder-image-pull=never \
 		$$GADGET_BUILD_PARAMS \
 		$@
 
@@ -88,6 +105,25 @@ $(GADGETS_README):
 		ln -sf ../../gadgets/$@ $(ROOT_DIR)../docs/gadgets/$(shell dirname $@).mdx ; \
 	fi
 
+# GADGET_README_DEV_PARAMS can be used to pass additional parameters e.g
+# GADGET_README_DEV_PARAMS="--verify-image=false" make mygadget/dev.md
+.PHONY: $(GADGETS_README_DEV)
+$(GADGETS_README_DEV):
+	@# Create dev.md if not exists
+	@if [ ! -f "$@" ]; then \
+		echo "Creating $@"; \
+		touch $@; \
+	fi
+	@# Update dev.md with mermaid diagrams.
+	echo -e "# Developer Notes\n\nThis file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget." > "$@"; \
+	echo -e "\n## Program-Map interactions\n\nThe following diagrams are generated using the \`ig image inspect\` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime." >> "$@"
+	echo -e "\n### Flowchart\n\n\`\`\`mermaid" >> "$@"
+	sudo ig image inspect $(@:/dev.md=):$(GADGET_TAG) -o custom --extra-info=ebpf.flowchart $$GADGET_README_DEV_PARAMS >> "$@"
+	echo "\`\`\`" >> "$@"
+	echo -e "\n### Sequence Diagram\n\n\`\`\`mermaid" >> "$@"
+	sudo ig image inspect $(@:/dev.md=):$(GADGET_TAG) -o custom --extra-info=ebpf.sequence $$GADGET_README_DEV_PARAMS >> "$@"
+	echo -e "\`\`\`" >> "$@"
+
 %-push: %-build
 	@echo "Pushing $*"
 	@sudo -E $(IG) image push $(GADGET_REPOSITORY)/$*:$(GADGET_TAG)
@@ -189,3 +225,10 @@ test-local: test-integration
 .PHONY:
 test-k8s: IG_PATH=$(KUBECTL_GADGET)
 test-k8s: test-integration
+
+.PHONY:
+%-update-latest-tag:
+	$(CRANE) copy $(GADGET_REPOSITORY)/$*:$(GADGET_TAG) $(GADGET_REPOSITORY)/$*:latest
+
+.PHONY:
+update-latest-tag: $(addsuffix -update-latest-tag,$(GADGETS))
diff --git a/gadgets/advise_networkpolicy/README.md b/gadgets/advise_networkpolicy/README.md
new file mode 100644
index 000000000..38be819c6
--- /dev/null
+++ b/gadgets/advise_networkpolicy/README.md
@@ -0,0 +1,5 @@
+# advise networkpolicy
+
+The advise networkpolicy gadget monitors the network activity in the specified namespaces and records a summary of TCP and UDP traffic. This is then used to generate Kubernetes network policies.
+
+Check the full documentation on https://inspektor-gadget.io/docs/latest/gadgets/advise_networkpolicy
diff --git a/gadgets/advise_networkpolicy/README.mdx b/gadgets/advise_networkpolicy/README.mdx
new file mode 100644
index 000000000..08f27f787
--- /dev/null
+++ b/gadgets/advise_networkpolicy/README.mdx
@@ -0,0 +1,144 @@
+---
+title: advise networkpolicy
+sidebar_position: 0
+---
+
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+The advise networkpolicy gadget monitors the network activity in the specified namespaces
+and records a summary of TCP and UDP traffic. This is then used to generate Kubernetes
+network policies.
+
+## Getting started
+
+
+```bash
+$ kubectl gadget run ghcr.io/inspektor-gadget/gadget/advise_networkpolicy:%IG_TAG%
+```
+
+## Flags
+
+No flags.
+
+## Guide
+
+First, we need to create an nginx deployment which can respond to our test requests. 
+
+```bash
+$ kubectl create service nodeport nginx --tcp=80:80
+service/nginx created
+$ kubectl create deployment nginx --image=nginx
+deployment.apps/nginx created
+```
+
+Then, start the advise_networkpolicy gadget in another terminal.
+
+```bash
+$ kubectl gadget run advise_networkpolicy:%IG_TAG% --map-fetch-count=0 --map-fetch-interval=0
+```
+
+Now we can deploy our client pod, send a request to our nginx deployment and `1.1.1.1` and then quit.
+
+```bash
+$ kubectl run --rm -ti --image busybox test-pod          
+If you don't see a command prompt, try pressing enter.
+/ # wget nginx
+Connecting to nginx (10.105.129.249:80)
+saving to 'index.html'
+index.html           100% |********************************|   615  0:00:00 ETA
+'index.html' saved
+/ # wget 1.1.1.1
+Connecting to 1.1.1.1 (1.1.1.1:80)
+Connecting to 1.1.1.1 (1.1.1.1:443)
+wget: note: TLS certificate validation not implemented
+Connecting to one.one.one.one (1.1.1.1:443)
+wget: can't open 'index.html': File exists
+/ # exit
+Session ended, resume using 'kubectl attach test-pod -c test-pod -i -t' command when the pod is running
+pod "test-pod" deleted
+```
+
+Let's switch back to the gadget terminal, stop our gadget. The policy will then be printed:
+
+```bash
+$ kubectl gadget run advise_networkpolicy:%IG_TAG% --map-fetch-count=0 --map-fetch-interval=0
+...
+^C
+apiVersion: networking.k8s.io/v1
+kind: NetworkPolicy
+metadata:
+  creationTimestamp: null
+  name: nginx-network
+  namespace: default
+spec:
+  ingress:
+  - from:
+    - podSelector:
+        matchLabels:
+          run: test-pod
+    ports:
+    - port: 80
+      protocol: TCP
+  podSelector:
+    matchLabels:
+      app: nginx
+  policyTypes:
+  - Ingress
+  - Egress
+---
+apiVersion: networking.k8s.io/v1
+kind: NetworkPolicy
+metadata:
+  creationTimestamp: null
+  name: test-pod-network
+  namespace: default
+spec:
+  egress:
+  - ports:
+    - port: 80
+      protocol: TCP
+    to:
+    - ipBlock:
+        cidr: 1.1.1.1/32
+  - ports:
+    - port: 80
+      protocol: TCP
+    to:
+    - podSelector:
+        matchLabels:
+          app: nginx
+  - ports:
+    - port: 443
+      protocol: TCP
+    to:
+    - ipBlock:
+        cidr: 1.1.1.1/32
+  - ports:
+    - port: 53
+      protocol: UDP
+    to:
+    - namespaceSelector:
+        matchLabels:
+          kubernetes.io/metadata.name: kube-system
+      podSelector:
+        matchLabels:
+          k8s-app: kube-dns
+          kubernetes.io/cluster-service: "true"
+          kubernetes.io/name: CoreDNS
+  podSelector:
+    matchLabels:
+      run: test-pod
+  policyTypes:
+  - Ingress
+  - Egress
+```
+
+Finally, clean the system:
+
+```bash
+$ kubectl delete deployment nginx
+deployment.apps "nginx" deleted
+$ kubectl delete service nginx
+service "nginx" deleted
+```
diff --git a/gadgets/advise_networkpolicy/artifacthub-pkg.yml b/gadgets/advise_networkpolicy/artifacthub-pkg.yml
new file mode 100644
index 000000000..6e8ce8adb
--- /dev/null
+++ b/gadgets/advise_networkpolicy/artifacthub-pkg.yml
@@ -0,0 +1,29 @@
+# Artifact Hub package metadata file
+version: 0.40.0
+name: "advise_networkpolicy"
+category: monitoring-logging
+displayName: "advise networkpolicy"
+createdAt: "2025-05-03T11:23:41Z"
+digest: "2025-05-03T11:23:41Z"
+description: "Generate network policies according to the K8s traffic"
+logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
+license: ""
+homeURL: "https://inspektor-gadget.io/docs/latest/gadgets/advise_networkpolicy"
+containersImages:
+    - name: gadget
+      image: "ghcr.io/inspektor-gadget/gadget/advise_networkpolicy:latest"
+      platforms:
+        - linux/amd64
+        - linux/arm64
+keywords:
+    - gadget
+links:
+    - name: source
+      url: "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/advise_networkpolicy"
+install: |
+    # Run
+    ```bash
+    kubectl gadget run ghcr.io/inspektor-gadget/gadget/advise_networkpolicy:latest
+    ```
+provider:
+    name: Inspektor Gadget
diff --git a/gadgets/advise_networkpolicy/gadget.yaml b/gadgets/advise_networkpolicy/gadget.yaml
new file mode 100644
index 000000000..103749e4e
--- /dev/null
+++ b/gadgets/advise_networkpolicy/gadget.yaml
@@ -0,0 +1,12 @@
+name: advise networkpolicy
+description: Generate network policies according to the K8s traffic
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/advise_networkpolicy
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/advise_networkpolicy
+datasources:
+  network_connections:
+    annotations:
+      cli.supported-output-modes: none
+      ebpf.map.flush-on-stop: true
+      generate_networkpolicy.enable: true
+      kubenameresolver.enable: true
diff --git a/gadgets/advise_networkpolicy/program.bpf.c b/gadgets/advise_networkpolicy/program.bpf.c
new file mode 100644
index 000000000..d4e1b2dfd
--- /dev/null
+++ b/gadgets/advise_networkpolicy/program.bpf.c
@@ -0,0 +1,127 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2025 The Inspektor Gadget authors */
+#include <linux/bpf.h>
+#include <linux/if_ether.h>
+#include <linux/ip.h>
+#include <linux/ipv6.h>
+#include <linux/in.h>
+#include <linux/tcp.h>
+#include <linux/types.h>
+#include <linux/udp.h>
+#include <stdbool.h>
+
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_endian.h>
+
+#include <gadget/buffer.h>
+#include <gadget/macros.h>
+#include <gadget/types.h>
+#include <gadget/maps.bpf.h>
+
+#define GADGET_TYPE_NETWORKING
+#include <gadget/sockets-map.h>
+
+#define PACKET_HOST 0
+#define PACKET_OUTGOING 4
+
+struct event_t {
+	gadget_netns_id netns_id;
+	struct gadget_l4endpoint_t endpoint;
+	__u8 egress;
+};
+
+struct empty_t {
+	__u8 unused;
+};
+
+const struct empty_t zero = {};
+
+// When using GADGET_MAPITER, both the key and value has to be structs
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__uint(max_entries, 10240);
+	__type(key, struct event_t);
+	__type(value, struct empty_t);
+} packets SEC(".maps");
+
+GADGET_MAPITER(network_connections, packets);
+
+SEC("socket1")
+int ig_trace_net(struct __sk_buff *skb)
+{
+	// Skip multicast, broadcast, forwarding...
+	if (skb->pkt_type != PACKET_HOST && skb->pkt_type != PACKET_OUTGOING)
+		return 0;
+
+	// Skip frames with non-IP Ethernet protocol.
+	struct ethhdr ethh;
+	if (bpf_skb_load_bytes(skb, 0, &ethh, sizeof ethh))
+		return 0;
+	if (bpf_ntohs(ethh.h_proto) != ETH_P_IP)
+		return 0;
+
+	int ip_off = ETH_HLEN;
+	// Read the IP header.
+	struct iphdr iph;
+	if (bpf_skb_load_bytes(skb, ip_off, &iph, sizeof iph))
+		return 0;
+
+	// An IPv4 header doesn't have a fixed size. The IHL field of a packet
+	// represents the size of the IP header in 32-bit words, so we need to
+	// multiply this value by 4 to get the header size in bytes.
+	__u8 ip_header_len = iph.ihl * 4;
+	int l4_off = ip_off + ip_header_len;
+	__u16 port;
+
+	if (iph.protocol == IPPROTO_TCP) {
+		// Read the TCP header.
+		struct tcphdr tcph;
+		if (bpf_skb_load_bytes(skb, l4_off, &tcph, sizeof tcph))
+			return 0;
+
+		if (!tcph.syn || tcph.ack)
+			return 0;
+
+		port = bpf_htons(tcph.dest);
+	} else if (iph.protocol == IPPROTO_UDP) {
+		// Read the UDP header.
+		struct udphdr udph;
+		if (bpf_skb_load_bytes(skb, l4_off, &udph, sizeof udph))
+			return 0;
+
+		// UDP packets don't have a TCP-SYN to identify the direction.
+		// Check usage of dynamic ports instead.
+		// https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
+		// System Ports: 0-1023
+		// User Ports: 1024-49151
+		// Dynamic and/or Private Ports: 49152-65535
+		// However, Linux uses ephemeral ports: 32768-60999 (/proc/sys/net/ipv4/ip_local_port_range)
+		// And /proc/sys/net/ipv4/ip_unprivileged_port_start: 1024
+		if (bpf_htons(udph.dest) < 1024)
+			port = bpf_htons(udph.dest);
+		else
+			return 0;
+	} else {
+		// Skip packets with IP protocol other than TCP/UDP.
+		return 0;
+	}
+
+	struct event_t event = {};
+	event.netns_id = skb->cb[0]; // cb[0] initialized by dispatcher.bpf.c
+
+	if (skb->pkt_type == PACKET_HOST) {
+		event.endpoint.addr_raw.v4 = iph.saddr;
+	} else {
+		event.endpoint.addr_raw.v4 = iph.daddr;
+	}
+	event.endpoint.proto_raw = iph.protocol;
+	event.endpoint.port = port;
+	event.endpoint.version = 4;
+	event.egress = skb->pkt_type == PACKET_OUTGOING;
+
+	bpf_map_update_elem(&packets, &event, &zero, BPF_ANY);
+
+	return 0;
+}
+
+char _license[] SEC("license") = "GPL";
diff --git a/gadgets/advise_networkpolicy/test/integration/advise_networkpolicy_test.go b/gadgets/advise_networkpolicy/test/integration/advise_networkpolicy_test.go
new file mode 100644
index 000000000..87dd336db
--- /dev/null
+++ b/gadgets/advise_networkpolicy/test/integration/advise_networkpolicy_test.go
@@ -0,0 +1,154 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"fmt"
+	"strings"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	igtesting "github.com/inspektor-gadget/inspektor-gadget/pkg/testing"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/containers"
+	igrunner "github.com/inspektor-gadget/inspektor-gadget/pkg/testing/ig"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
+)
+
+var expectedYaml = `apiVersion: networking.k8s.io/v1
+kind: NetworkPolicy
+metadata:
+  creationTimestamp: null
+  name: test-advise-networkpolicy-client-network
+  namespace: <CLIENT_NAMESPACE>
+spec:
+  egress:
+  - ports:
+    - port: 80
+      protocol: TCP
+    to:
+    - namespaceSelector:
+        matchLabels:
+          kubernetes.io/metadata.name: <SERVER_NAMESPACE>
+      podSelector:
+        matchLabels:
+          run: test-advise-networkpolicy-server
+  podSelector:
+    matchLabels:
+      run: test-advise-networkpolicy-client
+  policyTypes:
+  - Ingress
+  - Egress
+---
+apiVersion: networking.k8s.io/v1
+kind: NetworkPolicy
+metadata:
+  creationTimestamp: null
+  name: test-advise-networkpolicy-server-network
+  namespace: <SERVER_NAMESPACE>
+spec:
+  ingress:
+  - from:
+    - namespaceSelector:
+        matchLabels:
+          kubernetes.io/metadata.name: <CLIENT_NAMESPACE>
+      podSelector:
+        matchLabels:
+          run: test-advise-networkpolicy-client
+    ports:
+    - port: 80
+      protocol: TCP
+  podSelector:
+    matchLabels:
+      run: test-advise-networkpolicy-server
+  policyTypes:
+  - Ingress
+  - Egress`
+
+func TestAdviseNetworkpolicyGadget(t *testing.T) {
+	gadgettesting.RequireEnvironmentVariables(t)
+	utils.InitTest(t)
+
+	if utils.CurrentTestComponent != utils.KubectlGadgetTestComponent {
+		t.Skip("This gadget is only for kubectl-gadget")
+	}
+
+	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
+	require.NoError(t, err, "new container factory")
+
+	serverNs := utils.GenerateTestNamespaceName(t, "test-advise-networkpolicy")
+	serverContainerName := "test-advise-networkpolicy-server"
+	serverContainerImage := gadgettesting.NginxImage
+	serverContainerOpts := []containers.ContainerOption{
+		containers.WithContainerImage(serverContainerImage),
+		containers.WithContainerNamespace(serverNs),
+	}
+	testServerContainer := containerFactory.NewContainer(
+		serverContainerName,
+		"nginx && sleep 10000",
+		serverContainerOpts...,
+	)
+
+	testServerContainer.Start(t)
+	t.Cleanup(func() {
+		testServerContainer.Stop(t)
+	})
+
+	clientNs := utils.GenerateTestNamespaceName(t, "test-advise-networkpolicy")
+	clientContainerName := "test-advise-networkpolicy-client"
+	clientContainerImage := gadgettesting.BusyBoxImage
+	clientContainerOpts := []containers.ContainerOption{
+		containers.WithContainerImage(clientContainerImage),
+		containers.WithContainerNamespace(clientNs),
+	}
+	testClientContainer := containerFactory.NewContainer(
+		clientContainerName,
+		fmt.Sprintf("while true; do sleep 0.5 && wget %s; done", testServerContainer.IP()),
+		clientContainerOpts...,
+	)
+
+	testClientContainer.Start(t)
+	t.Cleanup(func() {
+		testClientContainer.Stop(t)
+	})
+
+	var runnerOpts []igrunner.Option
+	var testingOpts []igtesting.Option
+
+	runnerOpts = append(runnerOpts,
+		igrunner.WithFlags(fmt.Sprintf("-n=%s,%s", serverNs, clientNs), "--timeout=5", "--map-fetch-count=0", "--map-fetch-interval=0"),
+		igrunner.WithOutputMode("advise"))
+	testingOpts = append(testingOpts, igtesting.WithCbBeforeCleanup(utils.PrintLogsFn(serverNs, clientNs)))
+
+	runnerOpts = append(runnerOpts, igrunner.WithValidateOutput(
+		func(t *testing.T, output string) {
+			expectedYaml = strings.ReplaceAll(expectedYaml, "<SERVER_NAMESPACE>", serverNs)
+			expectedYaml = strings.ReplaceAll(expectedYaml, "<CLIENT_NAMESPACE>", clientNs)
+			yamlExpectedArr := strings.Split(expectedYaml, "---")
+			yamlActualArr := strings.Split(output, "---")
+
+			require.Equal(t, len(yamlExpectedArr), len(yamlActualArr), "number of policies")
+
+			assert.YAMLEq(t, yamlExpectedArr[0], yamlActualArr[0], "first policy")
+			assert.YAMLEq(t, yamlExpectedArr[1], yamlActualArr[1], "second policy")
+		},
+	))
+
+	adviseNetworkPolicyCmd := igrunner.New("advise_networkpolicy", runnerOpts...)
+
+	igtesting.RunTestSteps([]igtesting.TestStep{adviseNetworkPolicyCmd}, t, testingOpts...)
+}
diff --git a/gadgets/advise_seccomp/README.md b/gadgets/advise_seccomp/README.md
new file mode 100644
index 000000000..d84fbb2d5
--- /dev/null
+++ b/gadgets/advise_seccomp/README.md
@@ -0,0 +1,8 @@
+# advise_seccomp
+
+The seccomp profile advisor gadget records syscalls that are issued in a
+specified container, and then uses this information to generate the
+corresponding seccomp profile.
+
+Check the full documentation on
+https://inspektor-gadget.io/docs/latest/gadgets/advise_seccomp
diff --git a/gadgets/advise_seccomp/README.mdx b/gadgets/advise_seccomp/README.mdx
new file mode 100644
index 000000000..04080742f
--- /dev/null
+++ b/gadgets/advise_seccomp/README.mdx
@@ -0,0 +1,507 @@
+---
+title: advise_seccomp
+sidebar_position: 0
+---
+
+import CodeBlock from '@theme/CodeBlock';
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+The seccomp profile advisor gadget records syscalls that are issued in a
+specified container, and then uses this information to generate the corresponding
+seccomp profile.
+
+## Getting started
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/advise_seccomp:%IG_TAG% [flags]
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run ghcr.io/inspektor-gadget/gadget/advise_seccomp:%IG_TAG% [flags]
+        ```
+    </TabItem>
+</Tabs>
+
+## Flags
+
+No Flags.
+
+## Guide
+
+We need to start the advise_seccomp gadget before running our workload, so it's
+able to capture all the syscalls the container uses.
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+```bash
+$ kubectl gadget run advise_seccomp:%IG_TAG% --map-fetch-count=0 --map-fetch-interval=0 --podname default-pod
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+```bash
+$ sudo ig run advise_seccomp:%IG_TAG% --map-fetch-count=0 --map-fetch-interval=0 --containername mycontainer
+```
+
+</TabItem>
+</Tabs>
+
+The --map-fetch-count=0 --map-fetch-interval=0 parameters indicate the policy
+will be generated once and only when the gadget is stopped.
+
+Then, start our application and interact with it to be sure it generates all the
+syscalls it needs to work.
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+import unconfined from '!!raw-loader!./files/seccomp-unconfined.yaml';
+
+<CodeBlock language="yaml">{unconfined}</CodeBlock>
+
+```bash
+$ kubectl apply -f https://raw.githubusercontent.com/inspektor-gadget/inspektor-gadget/refs/heads/%IG_BRANCH%/docs/gadgets/files/seccomp-unconfined.yaml
+```
+
+Use port-forward to access the server from the client machine
+
+```bash
+$ kubectl -n default port-forward default-pod 3000:80 &
+
+$ curl localhost:3000
+<!DOCTYPE html>
+<html>
+<head>
+<title>Welcome to nginx!</title>
+<style>
+html { color-scheme: light dark; }
+body { width: 35em; margin: 0 auto;
+font-family: Tahoma, Verdana, Arial, sans-serif; }
+</style>
+</head>
+<body>
+<h1>Welcome to nginx!</h1>
+<p>If you see this page, the nginx web server is successfully installed and
+working. Further configuration is required.</p>
+
+<p>For online documentation and support please refer to
+<a href="http://nginx.org/">nginx.org</a>.<br/>
+Commercial support is available at
+<a href="http://nginx.com/">nginx.com</a>.</p>
+
+<p><em>Thank you for using nginx.</em></p>
+</body>
+</html>
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+```bash
+$ docker run --name mycontainer --rm -d docker.io/library/nginx
+e6bc6e02989054f4984c04b7213d304767faffa295b277e8f36a5b2422409e18
+
+$ curl $(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mycontainer)
+<!DOCTYPE html>
+<html>
+<head>
+<title>Welcome to nginx!</title>
+<style>
+html { color-scheme: light dark; }
+body { width: 35em; margin: 0 auto;
+font-family: Tahoma, Verdana, Arial, sans-serif; }
+</style>
+</head>
+<body>
+<h1>Welcome to nginx!</h1>
+<p>If you see this page, the nginx web server is successfully installed and
+working. Further configuration is required.</p>
+
+<p>For online documentation and support please refer to
+<a href="http://nginx.org/">nginx.org</a>.<br/>
+Commercial support is available at
+<a href="http://nginx.com/">nginx.com</a>.</p>
+
+<p><em>Thank you for using nginx.</em></p>
+</body>
+</html>
+```
+
+</TabItem>
+</Tabs>
+
+Now, go back and stop the gadget. It'll print to the terminal the seccomp policy
+for all container running on the system:
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+```bash
+$ kubectl gadget run advise_seccomp:%IG_TAG% --map-fetch-count=0 --map-fetch-interval=0 --podname default-pod
+^C
+// test-container
+{
+  "defaultAction": "SCMP_ACT_ERRNO",
+  "architectures": [
+    "SCMP_ARCH_X86_64",
+    "SCMP_ARCH_X86",
+    "SCMP_ARCH_X32"
+  ],
+  "syscalls": [
+    {
+      "names": [
+        "accept4",
+        "access",
+        "arch_prctl",
+        "bind",
+        "brk",
+        "capget",
+        "capset",
+        "chdir",
+        "chown",
+        "clone",
+        "close",
+        "connect",
+        "dup2",
+        "epoll_create",
+        "epoll_ctl",
+        "epoll_pwait",
+        "epoll_wait",
+        "eventfd2",
+        "execve",
+        "exit_group",
+        "faccessat2",
+        "fadvise64",
+        "fchdir",
+        "fchown",
+        "fcntl",
+        "fgetxattr",
+        "fsetxattr",
+        "fstat",
+        "fstatfs",
+        "futex",
+        "getcwd",
+        "getdents64",
+        "getegid",
+        "geteuid",
+        "getgid",
+        "getpid",
+        "getppid",
+        "getrandom",
+        "gettid",
+        "getuid",
+        "io_setup",
+        "ioctl",
+        "listen",
+        "lseek",
+        "mkdir",
+        "mmap",
+        "mprotect",
+        "munmap",
+        "nanosleep",
+        "newfstatat",
+        "openat",
+        "pipe2",
+        "prctl",
+        "pread64",
+        "prlimit64",
+        "pwrite64",
+        "read",
+        "recvfrom",
+        "recvmsg",
+        "rename",
+        "rseq",
+        "rt_sigaction",
+        "rt_sigprocmask",
+        "rt_sigreturn",
+        "rt_sigsuspend",
+        "sched_getaffinity",
+        "sendfile",
+        "sendmsg",
+        "set_robust_list",
+        "set_tid_address",
+        "setgid",
+        "setgroups",
+        "setsockopt",
+        "setuid",
+        "sigaltstack",
+        "socket",
+        "socketpair",
+        "statfs",
+        "syscall_1f4",
+        "sysinfo",
+        "tgkill",
+        "umask",
+        "uname",
+        "utimensat",
+        "vfork",
+        "wait4",
+        "write",
+        "writev"
+      ],
+      "action": "SCMP_ACT_ALLOW"
+    }
+  ]
+}
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+```bash
+$ sudo ig run advise_seccomp:%IG_TAG% --map-fetch-count=0 --map-fetch-interval=0 --containername mycontainer
+// mycontainer
+{
+  "defaultAction": "SCMP_ACT_ERRNO",
+  "architectures": [
+    "SCMP_ARCH_X86_64",
+    "SCMP_ARCH_X86",
+    "SCMP_ARCH_X32"
+  ],
+  "syscalls": [
+    {
+      "names": [
+        "accept4",
+        "access",
+        "arch_prctl",
+        "bind",
+        "brk",
+        "capget",
+        "capset",
+        "chdir",
+        "chown",
+        "clone",
+        "close",
+        "connect",
+        "dup2",
+        "epoll_create",
+        "epoll_ctl",
+        "epoll_pwait",
+        "epoll_wait",
+        "eventfd2",
+        "execve",
+        "exit_group",
+        "faccessat2",
+        "fadvise64",
+        "fchdir",
+        "fchown",
+        "fcntl",
+        "fgetxattr",
+        "fsetxattr",
+        "fstat",
+        "fstatfs",
+        "futex",
+        "getcwd",
+        "getdents64",
+        "getegid",
+        "geteuid",
+        "getgid",
+        "getpid",
+        "getppid",
+        "getrandom",
+        "gettid",
+        "getuid",
+        "io_setup",
+        "ioctl",
+        "listen",
+        "lseek",
+        "mkdir",
+        "mmap",
+        "mprotect",
+        "munmap",
+        "nanosleep",
+        "newfstatat",
+        "openat",
+        "pipe2",
+        "prctl",
+        "pread64",
+        "prlimit64",
+        "pwrite64",
+        "read",
+        "recvfrom",
+        "recvmsg",
+        "rename",
+        "rseq",
+        "rt_sigaction",
+        "rt_sigprocmask",
+        "rt_sigreturn",
+        "rt_sigsuspend",
+        "sched_getaffinity",
+        "sendfile",
+        "sendmsg",
+        "set_robust_list",
+        "set_tid_address",
+        "setgid",
+        "setgroups",
+        "setsockopt",
+        "setuid",
+        "sigaltstack",
+        "socket",
+        "socketpair",
+        "statfs",
+        "syscall_1f4",
+        "sysinfo",
+        "umask",
+        "uname",
+        "utimensat",
+        "vfork",
+        "wait4",
+        "write",
+        "writev"
+      ],
+      "action": "SCMP_ACT_ALLOW"
+    }
+  ]
+}
+```
+
+</TabItem>
+</Tabs>
+
+Now, let's configure our container to use that policy.
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+For Kubernetes, we can follow [Restrict a Container's Syscalls with
+seccomp](https://kubernetes.io/docs/tutorials/security/seccomp/).
+
+Copy the profile to the node:
+
+```bash
+$ minikube cp profile.json /var/lib/kubelet/seccomp/profile.json
+```
+
+And then deploy a pod using that profile:
+
+import confined from '!!raw-loader!./files/seccomp-confined.yaml';
+
+<CodeBlock language="yaml">{confined}</CodeBlock>
+
+```bash
+$ kubectl delete -f https://raw.githubusercontent.com/inspektor-gadget/inspektor-gadget/refs/heads/%IG_BRANCH%/docs/gadgets/files/seccomp-unconfined.yaml
+$ kubectl apply -f https://raw.githubusercontent.com/inspektor-gadget/inspektor-gadget/refs/heads/%IG_BRANCH%/docs/gadgets/files/seccomp-confined.yaml
+
+$ kubectl -n default port-forward default-pod 3000:80 &
+
+$ curl localhost:3000
+<!DOCTYPE html>
+<html>
+....
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+For Docker, we can follow this intructions in [Seccomp security profiles for
+Docker](https://docs.docker.com/engine/security/seccomp/).
+
+Save the profile in a file (removing the first line with the container name), and run the container as:
+
+```bash
+$ docker stop mycontainer
+mycontainer
+$ docker run --name mycontainer --rm -d --security-opt seccomp=<PATH-TO-profile.json> docker.io/library/nginx
+921e6b33c6660c27d2fc2ca27ef817a66b893c345226d517bad2ebeb90083a07
+$ curl $(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mycontainer)
+<!DOCTYPE html>
+<html>
+<head>
+<title>Welcome to nginx!</title>
+<style>
+html { color-scheme: light dark; }
+body { width: 35em; margin: 0 auto;
+font-family: Tahoma, Verdana, Arial, sans-serif; }
+</style>
+</head>
+<body>
+<h1>Welcome to nginx!</h1>
+<p>If you see this page, the nginx web server is successfully installed and
+working. Further configuration is required.</p>
+
+<p>For online documentation and support please refer to
+<a href="http://nginx.org/">nginx.org</a>.<br/>
+Commercial support is available at
+<a href="http://nginx.com/">nginx.com</a>.</p>
+
+<p><em>Thank you for using nginx.</em></p>
+</body>
+</html>
+```
+
+</TabItem>
+</Tabs>
+
+If you try to open a bash to the pod, you'll get an error as it tries to execute
+syscall not allowed by the profile.
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+```bash
+$ kubectl exec -it default-pod -- bash
+bash: initialize_job_control: getpgrp failed: No such file or directory
+command terminated with exit code 1
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+```bash
+$ docker exec -it mycontainer bash
+bash: initialize_job_control: getpgrp failed: No such file or directory
+```
+
+</TabItem>
+</Tabs>
+
+
+To finish, let's clean up the environment:
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+```bash
+$ kubectl delete -f confined.yaml
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+```bash
+$ docker stop mycontainer
+```
+
+</TabItem>
+</Tabs>
+
+## Limitations:
+
+- The gadget generates a profile for each container, if you're running multiple
+instances of a container (by using a ReplicaSet or DaemonSet), you'll need to
+combine the profiles manually.
+- The current implementation relies on the implementation of `runc` to detect
+when to start recording syscalls, hence it might not work well with other
+container runtimes like `crun`.
+- This approach requires the workload to execute all the syscalls it might use
+when running the gadget. Please be sure you run the application long enough so
+all possible code paths needed to work are captured.
+
+## Related project:
+
+- SPO's Profile Recording:
+https://github.com/kubernetes-sigs/security-profiles-operator/blob/main/installation-usage.md#record-seccomp-profile
+- https://github.com/containers/oci-seccomp-bpf-hook (podman only)
diff --git a/gadgets/advise_seccomp/artifacthub-pkg.yml b/gadgets/advise_seccomp/artifacthub-pkg.yml
new file mode 100644
index 000000000..2f07848ee
--- /dev/null
+++ b/gadgets/advise_seccomp/artifacthub-pkg.yml
@@ -0,0 +1,29 @@
+# Artifact Hub package metadata file
+version: 0.40.0
+name: "advise seccomp"
+category: monitoring-logging
+displayName: "advise seccomp"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
+description: "Suggest a seccomp profile"
+logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
+license: ""
+homeURL: "https://inspektor-gadget.io/docs/latest/gadgets/advise_seccomp"
+containersImages:
+    - name: gadget
+      image: "ghcr.io/inspektor-gadget/gadget/advise_seccomp:latest"
+      platforms:
+        - linux/amd64
+        - linux/arm64
+keywords:
+    - gadget
+links:
+    - name: source
+      url: "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/advise_seccomp"
+install: |
+    # Run
+    ```bash
+    sudo ig run ghcr.io/inspektor-gadget/gadget/advise_seccomp:latest
+    ```
+provider:
+    name: Inspektor Gadget
diff --git a/gadgets/advise_seccomp/build.yaml b/gadgets/advise_seccomp/build.yaml
new file mode 100644
index 000000000..d5ce069e0
--- /dev/null
+++ b/gadgets/advise_seccomp/build.yaml
@@ -0,0 +1 @@
+wasm: go/program.go
diff --git a/gadgets/advise_seccomp/dev.md b/gadgets/advise_seccomp/dev.md
new file mode 100644
index 000000000..e3cc5b327
--- /dev/null
+++ b/gadgets/advise_seccomp/dev.md
@@ -0,0 +1,31 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+syscalls_per_mntns[("syscalls_per_mntns")]
+ig_seccomp_e -- "Lookup+Update" --> syscalls_per_mntns
+ig_seccomp_e["ig_seccomp_e"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_seccomp_e
+end
+box eBPF Maps
+participant syscalls_per_mntns
+end
+ig_seccomp_e->>syscalls_per_mntns: Lookup
+ig_seccomp_e->>syscalls_per_mntns: Update
+```
diff --git a/gadgets/advise_seccomp/gadget.yaml b/gadgets/advise_seccomp/gadget.yaml
new file mode 100644
index 000000000..16330bbbd
--- /dev/null
+++ b/gadgets/advise_seccomp/gadget.yaml
@@ -0,0 +1,14 @@
+name: advise seccomp
+description: Suggest a seccomp profile
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/advise_seccomp
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/advise_seccomp
+datasources:
+  syscalls:
+    annotations:
+      cli.supported-output-modes: none
+      ebpf.map.flush-on-stop: true
+  advise:
+    annotations:
+      cli.supported-output-modes: advise
+      cli.default-output-mode: advise
diff --git a/gadgets/advise_seccomp/go/go.mod b/gadgets/advise_seccomp/go/go.mod
new file mode 100644
index 000000000..890581e06
--- /dev/null
+++ b/gadgets/advise_seccomp/go/go.mod
@@ -0,0 +1,9 @@
+module main
+
+go 1.24.0
+
+// Version doesn't matter because of the replace directive below.
+require github.com/inspektor-gadget/inspektor-gadget v0.0.0
+
+// Only needed by in-tree gadgets
+replace github.com/inspektor-gadget/inspektor-gadget => ../../../
diff --git a/gadgets/advise_seccomp/go/program.go b/gadgets/advise_seccomp/go/program.go
new file mode 100644
index 000000000..ba3de2e25
--- /dev/null
+++ b/gadgets/advise_seccomp/go/program.go
@@ -0,0 +1,186 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"encoding/json"
+	"fmt"
+	"slices"
+	"strings"
+
+	api "github.com/inspektor-gadget/inspektor-gadget/wasmapi/go"
+)
+
+var (
+	textds    api.DataSource
+	textField api.Field
+)
+
+type SeccompProfile struct {
+	DefaultAction string     `json:"defaultAction"`
+	Architectures []string   `json:"architectures"`
+	Syscalls      []Syscalls `json:"syscalls"`
+}
+
+type Syscalls struct {
+	Names  []string `json:"names"`
+	Action string   `json:"action"`
+}
+
+//go:wasmexport gadgetInit
+func gadgetInit() int32 {
+	var err error
+	textds, err = api.NewDataSource("advise", api.DataSourceTypeSingle)
+	if err != nil {
+		api.Errorf("creating datasource: %s", err)
+		return 1
+	}
+
+	textField, err = textds.AddField("text", api.Kind_String)
+	if err != nil {
+		api.Errorf("adding field: %s", err)
+		return 1
+	}
+
+	return 0
+}
+
+//go:wasmexport gadgetPreStart
+func gadgetPreStart() int32 {
+	syscallds, err := api.GetDataSource("syscalls")
+	if err != nil {
+		api.Errorf("getting datasource: %s", err)
+		return 1
+	}
+
+	syscallsF, err := syscallds.GetField("syscalls")
+	if err != nil {
+		api.Errorf("getting syscalls field: %s", err)
+		return 1
+	}
+
+	K8sContainerF, err := syscallds.GetField("k8s.containerName")
+	if err != nil {
+		api.Errorf("getting k8s.containerName field: %s", err)
+		return 1
+	}
+
+	runtimeContainerF, err := syscallds.GetField("runtime.containerName")
+	if err != nil {
+		api.Errorf("getting runtime.containerName field: %s", err)
+		return 1
+	}
+
+	mntnsidF, err := syscallds.GetField("mntns_id_raw")
+	if err != nil {
+		api.Errorf("getting mntns_id_raw field: %s", err)
+		return 1
+	}
+
+	// keep in sync with SYSCALLS_MAP_VALUE_SIZE in program.bpf.c
+	syscallsBuffer := make([]byte, 500+1)
+
+	err = syscallds.SubscribeArray(func(source api.DataSource, dataArr api.DataArray) error {
+		// Get all fields sent by ebpf
+		for j := 0; j < dataArr.Len(); j++ {
+			data := dataArr.Get(j)
+
+			if _, err := syscallsF.Bytes(data, syscallsBuffer); err != nil {
+				api.Warnf("reading syscalls: %s", err)
+				continue
+			}
+
+			// The name of the container is only used as an informative comment
+			// on the output
+			K8sContainer, err := K8sContainerF.String(data, 512)
+			if err != nil {
+				api.Warnf("reading container name: %s", err)
+				continue
+			}
+
+			runtimeContainer, err := runtimeContainerF.String(data, 512)
+			if err != nil {
+				api.Warnf("reading container name: %s", err)
+				continue
+			}
+
+			containerName := K8sContainer
+			if containerName == "" {
+				containerName = runtimeContainer
+			}
+
+			mntnsid, err := mntnsidF.Uint64(data)
+			if err != nil {
+				api.Warnf("reading mntnsid: %s", err)
+				continue
+			}
+
+			if api.ShouldDiscardMntNsID(mntnsid) {
+				continue
+			}
+
+			syscallStrings := make([]string, 0)
+			for i := range syscallsBuffer {
+				if syscallsBuffer[i] > 0 {
+					syscallName, err := api.GetSyscallName(uint16(i))
+					if err != nil {
+						syscallName = fmt.Sprintf("unknown_syscall_%d", i)
+					}
+					syscallStrings = append(syscallStrings, syscallName)
+				}
+			}
+
+			slices.Sort(syscallStrings)
+
+			var out strings.Builder
+			out.WriteString(fmt.Sprintf("// %s\n", containerName))
+
+			profile := SeccompProfile{
+				DefaultAction: "SCMP_ACT_ERRNO",
+				Architectures: []string{
+					"SCMP_ARCH_X86_64",
+					"SCMP_ARCH_X86",
+					"SCMP_ARCH_X32",
+				},
+				Syscalls: []Syscalls{
+					{
+						Names:  syscallStrings,
+						Action: "SCMP_ACT_ALLOW",
+					},
+				},
+			}
+
+			jsonText, _ := json.MarshalIndent(profile, "", "  ")
+			out.Write(jsonText)
+			out.WriteRune('\n')
+
+			nd, err := textds.NewPacketSingle()
+			if err != nil {
+				api.Warnf("creating new packet: %s", err)
+				continue
+			}
+			textField.SetString(api.Data(nd), out.String())
+			textds.EmitAndRelease(api.Packet(nd))
+		}
+		return nil
+	}, 9999)
+	if err != nil {
+		api.Warnf("subscribing to syscalls: %s", err)
+		return 1
+	}
+	return 0
+}
+
+func main() {}
diff --git a/gadgets/advise_seccomp/program.bpf.c b/gadgets/advise_seccomp/program.bpf.c
new file mode 100644
index 000000000..1719bacd1
--- /dev/null
+++ b/gadgets/advise_seccomp/program.bpf.c
@@ -0,0 +1,162 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2025 The Inspektor Gadget authors */
+
+/* This BPF program uses the GPL-restricted function bpf_probe_read*().
+ */
+
+#include <vmlinux.h>
+
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_core_read.h>
+#include <bpf/bpf_tracing.h>
+
+#include <gadget/types.h>
+#include <gadget/macros.h>
+#include <gadget/mntns.h>
+// Include this to force the filtering map to be created. It's not directly used
+// by the ebpf code but it's needed by the wasm module.
+#include <gadget/mntns_filter.h>
+#include <gadget/maps.bpf.h>
+
+#define SYSCALLS_COUNT 500
+#define SYSCALLS_MAP_VALUE_FOOTER_SIZE 1
+#define SYSCALLS_MAP_VALUE_SIZE \
+	(SYSCALLS_COUNT + SYSCALLS_MAP_VALUE_FOOTER_SIZE)
+
+#define TASK_COMM_LEN 16
+#define TS_COMPAT 0x0002
+
+// prctl syscall number from
+// https://github.com/seccomp/libseccomp/blob/abad8a8f41fc13efbb95fc1ccaa3e181342bade7/src/syscalls.csv#L265
+#ifndef __NR_prctl
+#if defined(bpf_target_x86)
+#define __NR_prctl 157
+#elif defined(bpf_target_arm64)
+#define __NR_prctl 167
+#else
+#error "Unsupported architecture"
+#endif
+#endif
+
+// prclt syscall parameters from
+// https://github.com/torvalds/linux/blob/5147da902e0dd162c6254a61e4c57f21b60a9b1c/include/uapi/linux/prctl.h#L10
+// https://github.com/torvalds/linux/blob/5147da902e0dd162c6254a61e4c57f21b60a9b1c/include/uapi/linux/prctl.h#L175
+#ifndef PR_GET_PDEATHSIG
+#define PR_GET_PDEATHSIG 2
+#endif
+#ifndef PR_SET_NO_NEW_PRIVS
+#define PR_SET_NO_NEW_PRIVS 38
+#endif
+
+// Seccomp syscall number from
+// https://github.com/torvalds/linux/blob/v5.12/tools/testing/selftests/seccomp/seccomp_bpf.c#L115
+// Only x86_64 is supported for now.
+#ifndef __NR_seccomp
+#if defined(bpf_target_x86)
+#define __NR_seccomp 317
+#elif defined(bpf_target_arm64)
+#define __NR_seccomp 277
+#else
+#error "Unsupported architecture"
+#endif
+#endif
+
+struct key_t {
+	gadget_mntns_id mntns_id_raw;
+};
+
+struct val_t {
+	unsigned char syscalls[SYSCALLS_MAP_VALUE_SIZE];
+};
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__type(key, struct key_t);
+	__type(value, struct val_t);
+	__uint(max_entries, 1024);
+} syscalls_per_mntns SEC(".maps");
+
+GADGET_MAPITER(syscalls, syscalls_per_mntns);
+
+const struct val_t blank_bitmap = {};
+
+#ifdef __TARGET_ARCH_x86
+static __always_inline int is_x86_compat(struct task_struct *task)
+{
+	return !!(BPF_CORE_READ(task, thread_info.status) & TS_COMPAT);
+}
+#endif
+
+SEC("raw_tracepoint/sys_enter")
+int ig_seccomp_e(struct bpf_raw_tracepoint_args *ctx)
+{
+	// We cannot filter by container at this point because the container
+	// filtering mechanism is configured after runc has done some syscalls to
+	// setup the container. Hence, if we filter by container, the generated
+	// seccomp profile will be missing some syscalls and the container creation
+	// will fail.
+
+	struct pt_regs regs = {};
+	unsigned int id;
+
+#ifdef __TARGET_ARCH_x86
+	struct task_struct *task = (struct task_struct *)bpf_get_current_task();
+	if (is_x86_compat(task))
+		return 0;
+#endif
+
+	bpf_probe_read(&regs, sizeof(struct pt_regs), (void *)ctx->args[0]);
+	id = ctx->args[1];
+	if (id < 0 || id >= SYSCALLS_COUNT)
+		return 0;
+
+	char comm[TASK_COMM_LEN];
+	bpf_get_current_comm(comm, sizeof(comm));
+	int is_runc = comm[0] == 'r' && comm[1] == 'u' && comm[2] == 'n' &&
+		      comm[3] == 'c';
+
+	u64 mntns = gadget_get_current_mntns_id();
+	struct key_t key = {
+		.mntns_id_raw = mntns,
+	};
+
+	struct val_t *syscall_bitmap = bpf_map_lookup_or_try_init(
+		&syscalls_per_mntns, &key, &blank_bitmap);
+	if (!syscall_bitmap)
+		return 0;
+
+	// If it is runc, we want to record only the syscalls executed after the
+	// seccomp profile is actually installed. However, if we are running the
+	// seccomp-advisor gadget, it is very probably that the pod does not have
+	// a seccomp profile yet, so seccomp() will not be called. Therefore, we
+	// decide to start recording from the prctl(PR_GET_PDEATHSIG) call on. It
+	// is a safe place right before all the seccomp() calls that will be always
+	// executed during the runc initialisation:
+	// https://github.com/opencontainers/runc/blob/8b4a8f093d0dbdf45100597f710d16777845ee83/libcontainer/standard_init_linux.go#L148
+	if (is_runc) {
+		if (syscall_bitmap->syscalls[SYSCALLS_COUNT] == 0) {
+			if (id == __NR_prctl &&
+			    PT_REGS_PARM1(&regs) == PR_GET_PDEATHSIG) {
+				// Start recording the runc syscalls from now on.
+				syscall_bitmap->syscalls[SYSCALLS_COUNT] = 1;
+			}
+			return 0;
+		}
+
+		// Record all the runc syscalls after prctl(PR_GET_PDEATHSIG) except
+		// for seccomp() and prctl(PR_SET_NO_NEW_PRIVS) because we know they
+		// are executed before the seccomp profile is installed.
+		if ((id == __NR_prctl &&
+		     PT_REGS_PARM1(&regs) == PR_SET_NO_NEW_PRIVS) ||
+		    (id == __NR_seccomp)) {
+			return 0;
+		}
+	}
+
+	// Record the syscall
+	syscall_bitmap->syscalls[id] = 0x01;
+
+	return 0;
+}
+
+char _license[] SEC("license") = "GPL";
diff --git a/gadgets/advise_seccomp/test/unit/advise_seccomp_test.go b/gadgets/advise_seccomp/test/unit/advise_seccomp_test.go
new file mode 100644
index 000000000..42719abe5
--- /dev/null
+++ b/gadgets/advise_seccomp/test/unit/advise_seccomp_test.go
@@ -0,0 +1,226 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"encoding/json"
+	"strings"
+	"syscall"
+	"testing"
+	"time"
+
+	"github.com/cilium/ebpf"
+	"github.com/stretchr/testify/require"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	utilstest "github.com/inspektor-gadget/inspektor-gadget/internal/test"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/simple"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/gadgetrunner"
+)
+
+const (
+	adviseDsName  = "advise"
+	containerName = "mycontainer"
+)
+
+type SeccompProfile struct {
+	DefaultAction string     `json:"defaultAction"`
+	Architectures []string   `json:"architectures"`
+	Syscalls      []Syscalls `json:"syscalls"`
+}
+
+type Syscalls struct {
+	Names  []string `json:"names"`
+	Action string   `json:"action"`
+}
+
+type testDef struct {
+	runnerConfig   *utilstest.RunnerConfig
+	mntnsFilterMap func(info *utilstest.RunnerInfo) *ebpf.Map
+	validate       func(t *testing.T, info *utilstest.RunnerInfo, policies map[string]SeccompProfile)
+}
+
+func TestAdviseSeccompGadget(t *testing.T) {
+	gadgettesting.InitUnitTest(t)
+
+	// see https://github.com/inspektor-gadget/inspektor-gadget/issues/3751
+	gadgettesting.MinimumKernelVersion(t, "5.6")
+
+	testCases := map[string]testDef{
+		"all_containers": {
+			runnerConfig: &utilstest.RunnerConfig{},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, policies map[string]SeccompProfile) {
+				require.GreaterOrEqual(t, len(policies), 1)
+			},
+		},
+		"specific_container": {
+			runnerConfig: &utilstest.RunnerConfig{},
+			mntnsFilterMap: func(info *utilstest.RunnerInfo) *ebpf.Map {
+				return utilstest.CreateMntNsFilterMap(t, info.MountNsID)
+			},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, policies map[string]SeccompProfile) {
+				policy, ok := policies[containerName]
+				require.True(t, ok)
+
+				require.Len(t, policy.Syscalls, 1)
+				syscalls := policy.Syscalls[0]
+
+				require.Contains(t, syscalls.Names, "getpid")
+				require.Contains(t, syscalls.Names, "getppid")
+				require.Contains(t, syscalls.Names, "getuid")
+				require.Contains(t, syscalls.Names, "geteuid")
+				require.Contains(t, syscalls.Names, "openat")
+				require.Contains(t, syscalls.Names, "close")
+				require.Contains(t, syscalls.Names, "sysinfo")
+				require.Contains(t, syscalls.Names, "chdir")
+				require.Contains(t, syscalls.Names, "mmap")
+				require.Contains(t, syscalls.Names, "munmap")
+
+				// check syscalls that should not be present
+				require.NotContains(t, syscalls.Names, "unshare")
+				require.NotContains(t, syscalls.Names, "mkdir")
+				require.NotContains(t, syscalls.Names, "reboot")
+			},
+		},
+	}
+	for name, testCase := range testCases {
+		t.Run(name, func(t *testing.T) {
+			t.Parallel()
+			runner := utilstest.NewRunnerWithTest(t, testCase.runnerConfig)
+			var mntnsFilterMap *ebpf.Map
+			if testCase.mntnsFilterMap != nil {
+				mntnsFilterMap = testCase.mntnsFilterMap(runner.Info)
+			}
+			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
+				utilstest.RunWithRunner(t, runner, executeSyscalls)
+				return nil
+			}
+			opts := gadgetrunner.GadgetRunnerOpts[any]{
+				Image:          "advise_seccomp",
+				Timeout:        5 * time.Second,
+				MntnsFilterMap: mntnsFilterMap,
+				OnGadgetRun:    onGadgetRun,
+				ParamValues: map[string]string{
+					"operator.oci.ebpf.map-fetch-count":    "0",
+					"operator.oci.ebpf.map-fetch-interval": "0",
+				},
+			}
+
+			policies := make(map[string]SeccompProfile)
+
+			gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+
+			// this gadget requires the runtime.containerName to be present, add
+			// a simple operator to set it only for the runner that generates
+			// the events
+			myOp := simple.New("myop",
+				simple.OnInit(func(gadgetCtx operators.GadgetContext) error {
+					syscallsDs := gadgetCtx.GetDataSources()["syscalls"]
+					require.NotNil(t, syscallsDs)
+
+					runtimeContainerNameF, err := syscallsDs.AddField("runtime.containerName", api.Kind_String)
+					require.NoError(t, err)
+
+					k8sContainerNameF, err := syscallsDs.AddField("k8s.containerName", api.Kind_String)
+					require.NoError(t, err)
+
+					syscallsDs.Subscribe(func(ds datasource.DataSource, data datasource.Data) error {
+						mntnsidF := ds.GetField("mntns_id_raw")
+						require.NotNil(t, mntnsidF)
+
+						mntnsid, err := mntnsidF.Uint64(data)
+						require.NoError(t, err)
+
+						if mntnsid != runner.Info.MountNsID {
+							return nil
+						}
+
+						err = runtimeContainerNameF.PutString(data, containerName)
+						require.NoError(t, err)
+						k8sContainerNameF.PutString(data, containerName)
+						require.NoError(t, err)
+
+						return nil
+					}, 100)
+
+					return nil
+				}),
+			)
+
+			gadgetRunner.DataOperator = append(gadgetRunner.DataOperator, myOp)
+			gadgetRunner.DataFunc = func(ds datasource.DataSource, data datasource.Data) error {
+				if ds.Name() != adviseDsName {
+					return nil
+				}
+
+				textField := ds.GetField("text")
+				require.NotNil(t, textField)
+
+				text, err := textField.String(data)
+				require.NoError(t, err)
+
+				subparts := strings.SplitN(text, "\n", 2)
+				require.Len(t, subparts, 2)
+
+				name := strings.TrimPrefix(subparts[0], `// `)
+				content := subparts[1]
+
+				var policy SeccompProfile
+				err = json.Unmarshal([]byte(content), &policy)
+				require.NoError(t, err)
+
+				policies[name] = policy
+
+				return nil
+			}
+
+			gadgetRunner.RunGadget()
+
+			testCase.validate(t, runner.Info, policies)
+		})
+	}
+}
+
+// executeSyscalls executes the following syscalls: Getpid, Getppid, Getuid,
+// Geteuid, Open, Close, Sysinfo, Chdir, Getcwd, Mmap and Munmap.
+func executeSyscalls() error {
+	syscall.Getpid()
+	syscall.Getppid()
+	syscall.Getuid()
+	syscall.Geteuid()
+
+	fd, err := syscall.Open("/dev/null", syscall.O_WRONLY, 0o644)
+	if err == nil {
+		syscall.Close(fd)
+	}
+
+	var info syscall.Sysinfo_t
+	syscall.Sysinfo(&info)
+
+	if err := syscall.Chdir("/"); err == nil {
+		cwd := make([]byte, 256)
+		syscall.Getcwd(cwd)
+	}
+
+	mem, err := syscall.Mmap(-1, 0, 4096, syscall.PROT_READ|syscall.PROT_WRITE, syscall.MAP_ANON|syscall.MAP_PRIVATE)
+	if err == nil {
+		syscall.Munmap(mem)
+	}
+
+	return nil
+}
diff --git a/gadgets/audit_seccomp/README.mdx b/gadgets/audit_seccomp/README.mdx
index 81c0862d4..73a4eabed 100644
--- a/gadgets/audit_seccomp/README.mdx
+++ b/gadgets/audit_seccomp/README.mdx
@@ -164,6 +164,43 @@ test-audit-seccomp    unshare            485888      485888         …_KILL_THR
 </TabItem>
 </Tabs>
 
+In the previous examples, it is straightforward why the application is
+performing the syscall. The unshare program executes the unshare syscall and
+the mkdir program executes the mkdir syscall. For bigger applications, it can
+be useful to show the user stack trace.
+
+<Tabs groupId="env">
+<TabItem value="kubectl-gadget" label="kubectl gadget">
+
+```bash
+$ kubectl gadget run audit_seccomp:%IG_TAG% --collect-ustack -o jsonpretty
+...
+  "ustack": {
+    "addresses": "[0]0x000000000040332e; [1]0x00000000004771e6; [2]0x000000000047752e; [3]0x000000000048250b; [4]0x00000000004829ae; [5]0x0000000000482a7e; [6]0x0000000000482afe; [7]0x0000000000482b7e; [8]0x0000000000435a9d; [9]0x00000000004625a1; ",
+    ...
+    "symbols": "[0]runtime/internal/syscall.Syscall6; [1]syscall.Syscall; [2]syscall.Syscall.abi0; [3]golang.org/x/sys/unix.Chroot; [4]main.level3; [5]main.level2; [6]main.level1; [7]main.main; [8]runtime.main; [9]runtime.goexit.abi0; "
+  }
+^C
+```
+
+</TabItem>
+
+<TabItem value="ig" label="ig">
+
+```bash
+$ sudo -E ig run audit_seccomp:%IG_TAG% --collect-ustack -o jsonpretty
+...
+  "ustack": {
+    "addresses": "[0]0x000000000040332e; [1]0x00000000004771e6; [2]0x000000000047752e; [3]0x000000000048250b; [4]0x00000000004829ae; [5]0x0000000000482a7e; [6]0x0000000000482afe; [7]0x0000000000482b7e; [8]0x0000000000435a9d; [9]0x00000000004625a1; ",
+    ...
+    "symbols": "[0]runtime/internal/syscall.Syscall6; [1]syscall.Syscall; [2]syscall.Syscall.abi0; [3]golang.org/x/sys/unix.Chroot; [4]main.level3; [5]main.level2; [6]main.level1; [7]main.main; [8]runtime.main; [9]runtime.goexit.abi0; "
+  }
+^C
+```
+
+</TabItem>
+</Tabs>
+
 Finally, clean the system:
 
 <Tabs groupId="env">
diff --git a/gadgets/audit_seccomp/artifacthub-pkg.yml b/gadgets/audit_seccomp/artifacthub-pkg.yml
index 6a1884962..972f49434 100644
--- a/gadgets/audit_seccomp/artifacthub-pkg.yml
+++ b/gadgets/audit_seccomp/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "audit seccomp"
 category: monitoring-logging
 displayName: "audit seccomp"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Audit syscalls according to the seccomp profile"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/audit_seccomp/dev.md b/gadgets/audit_seccomp/dev.md
new file mode 100644
index 000000000..d159b1ef6
--- /dev/null
+++ b/gadgets/audit_seccomp/dev.md
@@ -0,0 +1,38 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_ustack[("ig_ustack")]
+ig_audit_secc -- "Lookup" --> gadget_mntns_filter_map
+ig_audit_secc -- "Lookup" --> gadget_heap
+ig_audit_secc -- "EventOutput" --> events
+ig_audit_secc["ig_audit_secc"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_audit_secc
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant gadget_heap
+participant events
+end
+ig_audit_secc->>gadget_mntns_filter_map: Lookup
+ig_audit_secc->>gadget_heap: Lookup
+ig_audit_secc->>events: EventOutput
+```
diff --git a/gadgets/audit_seccomp/program.bpf.c b/gadgets/audit_seccomp/program.bpf.c
index e265711c1..4443502eb 100644
--- a/gadgets/audit_seccomp/program.bpf.c
+++ b/gadgets/audit_seccomp/program.bpf.c
@@ -12,6 +12,7 @@
 #include <gadget/filter.h>
 #include <gadget/macros.h>
 #include <gadget/types.h>
+#include <gadget/user_stack_map.h>
 
 enum code {
 	SECCOMP_RET_KILL_PROCESS = 0x80000000,
@@ -32,6 +33,7 @@ struct event {
 
 	gadget_syscall syscall_raw;
 	enum code code_raw;
+	struct gadget_user_stack ustack;
 };
 
 GADGET_TRACER_MAP(events, 1024 * 256);
@@ -56,6 +58,7 @@ int ig_audit_secc(struct pt_regs *ctx)
 	event->timestamp_raw = bpf_ktime_get_boot_ns();
 	event->syscall_raw = syscall;
 	event->code_raw = code;
+	gadget_get_user_stack(ctx, &event->ustack);
 
 	gadget_submit_buf(ctx, &events, event, sizeof(*event));
 
diff --git a/gadgets/audit_seccomp/test/integration/audit_seccomp_test.go b/gadgets/audit_seccomp/test/integration/audit_seccomp_test.go
index 3ed235f33..d99f0f48d 100644
--- a/gadgets/audit_seccomp/test/integration/audit_seccomp_test.go
+++ b/gadgets/audit_seccomp/test/integration/audit_seccomp_test.go
@@ -69,7 +69,7 @@ func TestAuditSeccomp(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-audit-seccomp"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{
diff --git a/gadgets/bpfstats/README.md b/gadgets/bpfstats/README.md
new file mode 100644
index 000000000..6ddfcaef7
--- /dev/null
+++ b/gadgets/bpfstats/README.md
@@ -0,0 +1,6 @@
+# bpfstats
+
+The bpfstats gadget provides statistics about memory and CPU usage for bpf
+programd and gadgets running on the system.
+
+Check the full documentation on https://inspektor-gadget.io/docs/latest/gadgets/bpfstats
diff --git a/gadgets/bpfstats/README.mdx b/gadgets/bpfstats/README.mdx
new file mode 100644
index 000000000..2fafd01c3
--- /dev/null
+++ b/gadgets/bpfstats/README.mdx
@@ -0,0 +1,310 @@
+---
+title: bpfstats
+sidebar_position: 0
+---
+
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+# bpfstats
+
+The bpfstats Gadget provides CPU and memory usage for Gadgets and eBPF programs.
+
+## Getting started
+
+Running the gadget:
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+```bash
+$ kubectl gadget run ghcr.io/inspektor-gadget/gadget/bpfstats:%IG_TAG% [flags]
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo gadgetctl run ghcr.io/inspektor-gadget/gadget/bpfstats:%IG_TAG% [flags]
+```
+  </TabItem>
+</Tabs>
+
+## Flags
+
+### `--all`
+
+Collect statistics for all eBPF programs
+
+Default value: "false"
+
+## Guide
+
+Start the server part of IG:
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+```bash
+$ kubectl gadget deploy
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo ig daemon
+```
+  </TabItem>
+</Tabs>
+
+Then, let's run the gadget:
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+
+```bash
+$ kubectl gadget run bpfstats:%IG_TAG%
+NODENAME           GADGETID  GADGETNAME         GADGETIMAGE        PROGID PROGNAME               RUNTIME     RUNCOUNT    MAPMEMORY MAPC…
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo gadgetctl run bpfstats:%IG_TAG%
+GADGETID    GADGETNAME           GADGETIMAGE          PROGID PROGNAME                     RUNTIME        RUNCOUNT       MAPMEMORY MAPCO…
+```
+  </TabItem>
+</Tabs>
+
+You can run the gadget with `--help` to get the meaning of the different
+columns:
+
+- comms
+  List of processes using the eBPF program
+- gadgetID
+  Unique ID assigned to each Gadget instance
+- gadgetImage
+  Name of the Gadget image (like trace_open, trace_exec, etc.)
+- gadgetName
+  Name of the Gadget instance
+- mapCount
+  Number of maps used by the eBPF program or Gadget
+- mapMemory
+  Memory used by maps in bytes
+- pids
+  List of PIDs using the eBPF program
+- progID
+  eBPF program ID assigned by the Linux kernel
+- progName
+  Name of the eBPF program
+- progType
+  Type of the eBPF program
+- runcount
+  Number of times the eBPF program or Gadget has run
+- runtime
+  Time that the eBPF program or Gadget has run in nanoseconds
+
+It won't print anything as there are not gadgets running on the system. Let's
+create a couple of gadgets:
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+```bash
+$ kubectl gadget run --name mytraceopen trace_open:%IG_TAG% --detach
+$ kubectl gadget run --name mytraceexec trace_exec:%IG_TAG% --detach
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo gadgetctl run --name mytraceopen trace_open:%IG_TAG% --detach
+$ sudo gadgetctl run --name mytraceexec trace_exec:%IG_TAG% --detach
+```
+  </TabItem>
+</Tabs>
+
+The bpfstats will print the statistics for these two gadgets:
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+```bash
+$ kubectl gadget run bpfstats:%IG_TAG%
+NODENAME           GADGETID  GADGETNAME         GADGETIMAGE        PROGID PROGNAME               RUNTIME     RUNCOUNT    MAPMEMORY MAPC…
+minikube           6bcfcca7a mytraceopen        trace_open:%IG_TAG%     0                        2537846        10798      1710240     6
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%     0                           8265           12      8742176     7
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo gadgetctl run bpfstats:%IG_TAG%
+GADGETID    GADGETNAME           GADGETIMAGE          PROGID PROGNAME                     RUNTIME        RUNCOUNT       MAPMEMORY MAPCO…
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%       0                                    0               0         8742176      7
+bb95fa2c8ab mytraceopen          trace_open:%IG_TAG%       0                                95233             242         1710240      6
+```
+  </TabItem>
+</Tabs>
+
+By default the gadget prints consolidated information for the Gadgets. In this
+case PROGID is 0 and PROGNAME is empty, as a Gadget can have multiple programs.
+It's possible to get per-program statistics by using the `--all` flag. In
+this mode, the statistics for eBPF programs not handled by Inspektor Gadget are
+shown as well.
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+```bash
+$ kubectl gadget run bpfstats:%IG_TAG% --all
+NODENAME           GADGETID  GADGETNAME         GADGETIMAGE        PROGID PROGNAME               RUNTIME     RUNCOUNT    MAPMEMORY MAPC…
+minikube                                                                2 hid_tail_call                0            0         8512     1
+minikube                                                               38 sched_process_e       89770034        15277      4391808     4
+minikube                                                               39 task_newtask         172413186        91790      4391808     4
+minikube                                                               40 sched_process_e      144593647        91635      4391808     4
+minikube                                                               41 __x64_sys_renam        7185786         2173      1083840     4
+minikube                                                               42 __x64_sys_renam       23368056         2184      6467272     7
+minikube                                                               43 __x64_sys_renam        4649957         2069      1083840     4
+minikube                                                               44 __x64_sys_renam       18957942         2072      6467272     7
+minikube                                                               45 __x64_sys_renam              0            0      1083840     4
+minikube                                                               46 __x64_sys_renam              0            0      6467272     7
+minikube                                                               47 __x64_sys_unlin       37799602        14147      1083840     4
+minikube                                                               48 __x64_sys_unlin      120719371        14370      6467272     7
+minikube                                                               49 __x64_sys_unlin       17037065         9561      1083840     4
+minikube                                                               50 __x64_sys_unlin       56861068         9561      6467272     7
+minikube                                                             1244 ig_execve_e           15430709         3239       849792     2
+minikube                                                             1245 ig_execve_x            1792662         3655       837504     1
+minikube                                                             1246 ig_fa_pick_e           2899018         4581        21632     2
+minikube                                                             1247 ig_fa_pick_x           4478788         4581      1194336     4
+minikube                                                             1248 ig_sched_exec          2759885         2728       837504     1
+minikube           6bcfcca7a mytraceopen        trace_open:%IG_TAG%  1259 ig_open_x                    0            0      1615904     4
+minikube           6bcfcca7a mytraceopen        trace_open:%IG_TAG%  1260 ig_openat_x           14944051        83160      1615904     4
+minikube           6bcfcca7a mytraceopen        trace_open:%IG_TAG%  1261 ig_open_e                    0            0      1098240     3
+minikube           6bcfcca7a mytraceopen        trace_open:%IG_TAG%  1262 ig_openat_e           33097520        83005      1098240     3
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%  1263 ig_execve_x             200186          570      8647840     5
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%  1264 ig_execveat_x                0            0      8647840     5
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%  1265 security_bprm_c         225868          362      8372040     4
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%  1266 ig_execve_e             340822          518      8372040     4
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%  1267 ig_execveat_e            37108           52      8372040     4
+minikube           040e3fc1d mytraceexec        trace_exec:%IG_TAG%  1268 ig_sched_exec           226692          362      8647840     1
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo gadgetctl run bpfstats --all
+GADGETID    GADGETNAME           GADGETIMAGE          PROGID PROGNAME                     RUNTIME        RUNCOUNT       MAPMEMORY MAPCO…
+                                                           2 hid_tail_call                      0               0            8512      1
+                                                          38 sched_process_e              1212539             180         4391808      4
+                                                         198                                    0               0           48672      1
+                                                         736 ig_execve_e                  1103998             317          849792      2
+                                                         737 ig_execve_x                   160239             317          837504      1
+                                                         738 ig_fa_pick_e                  373093             509           21632      2
+                                                         739 ig_fa_pick_x                  378858             509         1194336      4
+                                                         740 ig_sched_exec                 112317              67          837504      1
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%     743 security_bprm_c                49435              67         8372040      4
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%     744 ig_execve_e                   140296             317         8372040      4
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%     745 ig_execveat_e                      0               0         8372040      4
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%     746 ig_execve_x                    89667             317         8647840      5
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%     747 ig_sched_exec                  76171              67         8647840      5
+a624bdbf27f mytraceexec          trace_exec:%IG_TAG%     748 ig_execveat_x                      0               0         8647840      5
+bb95fa2c8ab mytraceopen          trace_open:%IG_TAG%     749 ig_open_e                          0               0         1098240      3
+bb95fa2c8ab mytraceopen          trace_open:%IG_TAG%     750 ig_openat_e                 21538317           48300         1098240      3
+bb95fa2c8ab mytraceopen          trace_open:%IG_TAG%     751 ig_open_x                          0               0         1615904      4
+bb95fa2c8ab mytraceopen          trace_open:%IG_TAG%     752 ig_openat_x                  9076187           48503         1615904      4
+```
+  </TabItem>
+</Tabs>
+
+Finally, clean the system:
+
+<Tabs groupId="env">
+  <TabItem value="kubectl-gadget" label="kubectl gadget">
+```bash
+$ kubectl gadget remove mytraceexec mytraceopen
+```
+  </TabItem>
+
+  <TabItem value="ig-daemon" label="ig-daemon">
+```bash
+$ sudo gadgetctl remove mytraceexec mytraceopen
+```
+  </TabItem>
+</Tabs>
+
+### Exporting metrics
+
+The `bpfstats` Gadget provides the following metrics for `mapCount`,
+`mapMemory`, `runcount` and `runtime`. To enable the metrics listener, check the
+[Exporting Metrics](../reference/export-metrics.mdx) documentation. To enable
+the collector for this gadget, run the following command:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        WIP: Headless mode for kubectl gadget is under development
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo gadgetctl run bpfstats --name mystats --otel-metrics-name=bpfstats:bpfstats --annotate=bpfstats:metrics.collect=true --detach
+        INFO[0000] installed as "8423cd8e53339c8d4501ec7cdff436bc"
+        ```
+    </TabItem>
+</Tabs>
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        WIP: Headless mode for kubectl gadget is under development
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        Unless you configured the metrics listener to do differently, the
+        metrics will be available at `http://localhost:2224/metrics` on the
+        server side. For the `bpfstats` gadget we ran above, you
+        can find the metrics under the `bpfstats` scope:
+
+        ```bash
+        $ curl http://localhost:2224/metrics -s  | grep bpfstats
+        mapCount{gadgetImage="trace_exec:latest",gadgetName="mytraceexec",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 7
+        mapCount{gadgetImage="trace_open:latest",gadgetName="mytraceopen",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 6
+        mapMemory{gadgetImage="trace_exec:latest",gadgetName="mytraceexec",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 1.83170336e+08
+        mapMemory{gadgetImage="trace_open:latest",gadgetName="mytraceopen",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 1.71024e+06
+        otel_scope_info{otel_scope_name="bpfstats",otel_scope_version=""} 1
+        runcount_total{gadgetImage="trace_exec:latest",gadgetName="mytraceexec",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 636
+        runcount_total{gadgetImage="trace_open:latest",gadgetName="mytraceopen",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 219513
+        runtime_total{gadgetImage="trace_exec:latest",gadgetName="mytraceexec",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 445114
+        runtime_total{gadgetImage="trace_open:latest",gadgetName="mytraceopen",otel_scope_name="bpfstats",otel_scope_version="",progName=""} 7.3383934e+07
+        ```
+    </TabItem>
+</Tabs>
+
+Finally, stop metrics collection:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        WIP: Headless mode for kubectl gadget is under development
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo gadgetctl delete mystats
+        8423cd8e53339c8d4501ec7cdff436bc
+        ```
+    </TabItem>
+</Tabs>
+
+### Limitations
+
+#### Memory usage of maps
+
+The shown value for MapMemory is read from `/proc/<pid>/fdinfo/<map_id>`. This
+is the maximum size the map can have, but it doesn't necessarily reflect its
+current memory allocation. Additionally, maps can be used by more than one
+program and would account towards the MapMemory of all those programs.
+
+Also note:
+* `BPF_MAP_TYPE_PERF_EVENT_ARRAY`: value_size is not counting the ring buffers,
+  but only their file descriptors (i.e. sizeof(int) = 4 bytes)
+* `BPF_MAP_TYPE_{HASH,ARRAY}_OF_MAPS`: value_size is not counting the inner maps,
+  but only their file descriptors (i.e. sizeof(int) = 4 bytes)
diff --git a/gadgets/bpfstats/artifacthub-pkg.yml b/gadgets/bpfstats/artifacthub-pkg.yml
new file mode 100644
index 000000000..61d9e2e50
--- /dev/null
+++ b/gadgets/bpfstats/artifacthub-pkg.yml
@@ -0,0 +1,29 @@
+# Artifact Hub package metadata file
+version: 0.40.0
+name: "bpfstats"
+category: monitoring-logging
+displayName: "bpfstats"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
+description: "Get memory and CPU usage of eBPF programs and Gadgets"
+logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
+license: ""
+homeURL: "https://inspektor-gadget.io/docs/latest/gadgets/bpfstats"
+containersImages:
+    - name: gadget
+      image: "ghcr.io/inspektor-gadget/gadget/bpfstats:latest"
+      platforms:
+        - linux/amd64
+        - linux/arm64
+keywords:
+    - gadget
+links:
+    - name: source
+      url: "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/bpfstats"
+install: |
+    # Run
+    ```bash
+    sudo ig run ghcr.io/inspektor-gadget/gadget/bpfstats:latest
+    ```
+provider:
+    name: Inspektor Gadget
diff --git a/gadgets/bpfstats/gadget.yaml b/gadgets/bpfstats/gadget.yaml
new file mode 100644
index 000000000..6f207051a
--- /dev/null
+++ b/gadgets/bpfstats/gadget.yaml
@@ -0,0 +1,8 @@
+name: bpfstats
+description: Get memory and CPU usage of eBPF programs and Gadgets
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/bpfstats
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/bpfstats
+operator:
+  ebpf:
+    emitstats: true
diff --git a/gadgets/bpfstats/test/unit/bpfstats_test.go b/gadgets/bpfstats/test/unit/bpfstats_test.go
new file mode 100644
index 000000000..17a470bf2
--- /dev/null
+++ b/gadgets/bpfstats/test/unit/bpfstats_test.go
@@ -0,0 +1,168 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"fmt"
+	"os"
+	"path/filepath"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/require"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	utilstest "github.com/inspektor-gadget/inspektor-gadget/internal/test"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/gadgetrunner"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
+)
+
+type ExpectedBpfstatsEvent struct {
+	GadgetID    string `json:"gadgetID"`
+	GadgetImage string `json:"gadgetImage"`
+	GadgetName  string `json:"gadgetName"`
+	MapCount    int    `json:"mapCount"`
+	MapMemory   int    `json:"mapMemory"`
+	ProgID      int    `json:"progID"`
+	ProgName    string `json:"progName"`
+	ProgType    string `json:"progType"`
+	Runcount    int    `json:"runcount"`
+	Runtime     int    `json:"runtime"`
+	Comms       string `json:"comms"`
+	Pids        string `json:"pids"`
+}
+
+type testDef struct {
+	runnerConfig   *utilstest.RunnerConfig
+	allPrograms    bool
+	generateEvent  func(t *testing.T)
+	expectedEvents []ExpectedBpfstatsEvent
+}
+
+const (
+	testGadgetImage = "trace_open"
+)
+
+func TestBpfstatsGadget(t *testing.T) {
+	gadgettesting.InitUnitTest(t)
+	runnerConfig := &utilstest.RunnerConfig{}
+
+	comm, err := os.Executable()
+	require.NoError(t, err)
+	comm = filepath.Base(comm)
+
+	pids := fmt.Sprintf("%d", os.Getpid())
+
+	testCases := map[string]testDef{
+		"by_gadget": {
+			runnerConfig:  runnerConfig,
+			generateEvent: generateEvent,
+			expectedEvents: []ExpectedBpfstatsEvent{
+				{
+					GadgetImage: gadgetrunner.GetGadgetImageName(testGadgetImage),
+					ProgID:      0,
+				},
+			},
+		},
+		"by_programs": {
+			runnerConfig:  runnerConfig,
+			generateEvent: generateEvent,
+			allPrograms:   true,
+			expectedEvents: []ExpectedBpfstatsEvent{
+				// programs from trace_open gadget. This introduces a dependency
+				// on the trace_open gadget, but it's almost guranteed that this
+				// gadget will have these two programs
+				{
+					GadgetImage: gadgetrunner.GetGadgetImageName(testGadgetImage),
+					ProgName:    "ig_openat_e",
+					ProgID:      utils.NormalizedInt,
+					ProgType:    "TracePoint",
+					Comms:       comm,
+					Pids:        pids,
+				},
+				{
+					GadgetImage: gadgetrunner.GetGadgetImageName(testGadgetImage),
+					ProgName:    "ig_openat_x",
+					ProgID:      utils.NormalizedInt,
+					ProgType:    "TracePoint",
+					Comms:       comm,
+					Pids:        pids,
+				},
+				// TODO: test external program
+			},
+		},
+	}
+	for name, testCase := range testCases {
+		t.Run(name, func(t *testing.T) {
+			t.Parallel()
+
+			runner := utilstest.NewRunnerWithTest(t, testCase.runnerConfig)
+
+			normalizeEvent := func(event *ExpectedBpfstatsEvent) {
+				utils.NormalizeInt(&event.MapCount)
+				utils.NormalizeInt(&event.MapMemory)
+				utils.NormalizeInt(&event.ProgID)
+
+				// Manually set the values to the normalized values because the
+				// function doesn't modify the value when is 0
+				event.Runcount = utils.NormalizedInt
+				event.Runtime = utils.NormalizedInt
+			}
+			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
+				utilstest.RunWithRunner(t, runner, func() error {
+					testCase.generateEvent(t)
+					return nil
+				})
+				return nil
+			}
+
+			var paramValues map[string]string
+			if testCase.allPrograms {
+				paramValues = map[string]string{"operator.ebpf.all": "true"}
+			}
+
+			opts := gadgetrunner.GadgetRunnerOpts[ExpectedBpfstatsEvent]{
+				Image:          "bpfstats",
+				Timeout:        5 * time.Second,
+				ParamValues:    paramValues,
+				OnGadgetRun:    onGadgetRun,
+				NormalizeEvent: normalizeEvent,
+			}
+
+			gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+			gadgetRunner.RunGadget()
+
+			for _, expectedEvent := range testCase.expectedEvents {
+				expectedEvent.MapCount = utils.NormalizedInt
+				expectedEvent.MapMemory = utils.NormalizedInt
+				expectedEvent.Runcount = utils.NormalizedInt
+				expectedEvent.Runtime = utils.NormalizedInt
+
+				require.Contains(t, gadgetRunner.CapturedEvents, expectedEvent)
+			}
+		})
+	}
+}
+
+func generateEvent(t *testing.T) {
+	// Run a gadget so it's captured by the bpstats gadget
+	opts := gadgetrunner.GadgetRunnerOpts[ExpectedBpfstatsEvent]{
+		Image:   testGadgetImage,
+		Timeout: 1 * time.Second,
+	}
+	gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+	gadgetRunner.RunGadget()
+}
diff --git a/gadgets/ci/datasource-containers/go/go.mod b/gadgets/ci/datasource-containers/go/go.mod
index c17b635d2..3ce95829a 100644
--- a/gadgets/ci/datasource-containers/go/go.mod
+++ b/gadgets/ci/datasource-containers/go/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/ci/datasource-containers/test/integration/datasource_test.go b/gadgets/ci/datasource-containers/test/integration/datasource_test.go
index 8f10a85d9..b1d9352ee 100644
--- a/gadgets/ci/datasource-containers/test/integration/datasource_test.go
+++ b/gadgets/ci/datasource-containers/test/integration/datasource_test.go
@@ -30,10 +30,12 @@ import (
 )
 
 type DatasourceContainersEvent struct {
-	CgroupID  uint64 `json:"cgroup_id"`
-	EventType string `json:"event_type"`
-	MntnsID   uint64 `json:"mntns_id"`
-	Name      string `json:"name"`
+	ContainerID     string `json:"container_id"`
+	ContainerConfig string `json:"container_config"`
+	CgroupID        uint64 `json:"cgroup_id"`
+	EventType       string `json:"event_type"`
+	MntnsID         uint64 `json:"mntns_id"`
+	Name            string `json:"name"`
 }
 
 func TestDatasourceContainers(t *testing.T) {
@@ -43,17 +45,13 @@ func TestDatasourceContainers(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-datasource-containers"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{
 		containers.WithContainerImage(containerImage),
 	}
 
-	if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
-		t.Skip("Skipping test as datasource containers was not ported to kubemanager")
-	}
-
 	if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
 		ns = utils.GenerateTestNamespaceName(t, "test-datasource-containers")
 		containerOpts = append(containerOpts, containers.WithContainerNamespace(ns))
@@ -84,15 +82,21 @@ func TestDatasourceContainers(t *testing.T) {
 	runnerOpts = append(runnerOpts, igrunner.WithValidateOutput(
 		func(t *testing.T, output string) {
 			expectedEntry := &DatasourceContainersEvent{
-				EventType: "CREATED",
-				Name:      containerName,
-				MntnsID:   utils.NormalizedInt,
-				CgroupID:  utils.NormalizedInt,
+				EventType:       "CREATED",
+				Name:            containerName,
+				MntnsID:         utils.NormalizedInt,
+				CgroupID:        utils.NormalizedInt,
+				ContainerID:     utils.NormalizedStr,
+				ContainerConfig: "", // See issue 3884
 			}
 
 			normalize := func(e *DatasourceContainersEvent) {
 				utils.NormalizeInt(&e.CgroupID)
 				utils.NormalizeInt(&e.MntnsID)
+				utils.NormalizeString(&e.ContainerID)
+				// ContainerConfig is sometimes empty:
+				// https://github.com/inspektor-gadget/inspektor-gadget/issues/3884
+				e.ContainerConfig = ""
 			}
 
 			match.MatchEntries(t, match.JSONMultiObjectMode, output, normalize, expectedEntry)
diff --git a/gadgets/deadlock/artifacthub-pkg.yml b/gadgets/deadlock/artifacthub-pkg.yml
index 2188bc2b3..dc3df2241 100644
--- a/gadgets/deadlock/artifacthub-pkg.yml
+++ b/gadgets/deadlock/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "deadlock"
 category: monitoring-logging
 displayName: "deadlock"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "use uprobe to trace pthread_mutex_lock and pthread_mutex_unlock in libc.so and detect potential deadlocks"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/deadlock/dev.md b/gadgets/deadlock/dev.md
new file mode 100644
index 000000000..7fc344a0c
--- /dev/null
+++ b/gadgets/deadlock/dev.md
@@ -0,0 +1,60 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+dead_pids[("dead_pids")]
+edges[("edges")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+stackmap[("stackmap")]
+thread_to_held_mutexes[("thread_to_held_mutexes")]
+trace_sched_process_exit -- "Lookup" --> gadget_mntns_filter_map
+trace_sched_process_exit -- "Delete" --> thread_to_held_mutexes
+trace_sched_process_exit -- "Lookup" --> gadget_heap
+trace_sched_process_exit -- "EventOutput" --> dead_pids
+trace_sched_process_exit["trace_sched_process_exit"]
+trace_uprobe_mutex_lock -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_mutex_lock -- "Lookup+Update" --> thread_to_held_mutexes
+trace_uprobe_mutex_lock -- "Update" --> edges
+trace_uprobe_mutex_lock["trace_uprobe_mutex_lock"]
+trace_uprobe_mutex_unlock -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_mutex_unlock -- "Lookup+Delete" --> thread_to_held_mutexes
+trace_uprobe_mutex_unlock["trace_uprobe_mutex_unlock"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant trace_sched_process_exit
+participant trace_uprobe_mutex_lock
+participant trace_uprobe_mutex_unlock
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant thread_to_held_mutexes
+participant gadget_heap
+participant dead_pids
+participant edges
+end
+trace_sched_process_exit->>gadget_mntns_filter_map: Lookup
+trace_sched_process_exit->>thread_to_held_mutexes: Delete
+trace_sched_process_exit->>gadget_heap: Lookup
+trace_sched_process_exit->>dead_pids: EventOutput
+trace_uprobe_mutex_lock->>gadget_mntns_filter_map: Lookup
+trace_uprobe_mutex_lock->>thread_to_held_mutexes: Lookup
+trace_uprobe_mutex_lock->>thread_to_held_mutexes: Update
+trace_uprobe_mutex_lock->>edges: Update
+trace_uprobe_mutex_unlock->>gadget_mntns_filter_map: Lookup
+trace_uprobe_mutex_unlock->>thread_to_held_mutexes: Lookup
+trace_uprobe_mutex_unlock->>thread_to_held_mutexes: Delete
+```
diff --git a/gadgets/deadlock/gadget.yaml b/gadgets/deadlock/gadget.yaml
index 8f52007c9..6fee2ccc2 100644
--- a/gadgets/deadlock/gadget.yaml
+++ b/gadgets/deadlock/gadget.yaml
@@ -35,9 +35,3 @@ datasources:
         annotations:
           description: Process name
           template: comm
-params:
-  ebpf:
-    targ_pid:
-      key: pid
-      defaultValue: ""
-      description: Show only events generated by processes with this pid
diff --git a/gadgets/deadlock/go/go.mod b/gadgets/deadlock/go/go.mod
index 026f26fd9..e4bf3d67d 100644
--- a/gadgets/deadlock/go/go.mod
+++ b/gadgets/deadlock/go/go.mod
@@ -1,6 +1,6 @@
 module deadlock
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/deadlock/program.bpf.c b/gadgets/deadlock/program.bpf.c
index 467d16a9e..f7f324a5c 100644
--- a/gadgets/deadlock/program.bpf.c
+++ b/gadgets/deadlock/program.bpf.c
@@ -92,10 +92,6 @@ static __always_inline int trace_mutex_acquire(struct pt_regs *ctx, u64 mutex)
 	u32 tid = (u32)pid_tgid;
 	u32 pid = pid_tgid >> 32;
 
-	/* filters */
-	if (targ_pid && targ_pid != pid)
-		return 0;
-
 	struct held_mutex *held_mutexes = bpf_map_lookup_or_try_init(
 		&thread_to_held_mutexes, &tid, &EMPTY_HELD_MUTEXES);
 	if (!held_mutexes) {
@@ -174,11 +170,6 @@ static __always_inline int trace_mutex_release(struct pt_regs *ctx, u64 mutex)
 
 	u64 pid_tgid = bpf_get_current_pid_tgid();
 	u32 tid = (u32)pid_tgid;
-	u32 pid = pid_tgid >> 32;
-
-	/* filters */
-	if (targ_pid && targ_pid != pid)
-		return 0;
 
 	// Fetch the held mutexes for the current thread
 	struct held_mutex *held_mutexes =
@@ -227,10 +218,6 @@ static __always_inline int trace_process_exit(void *ctx)
 	u32 tid = (u32)pid_tgid;
 	u32 pid = pid_tgid >> 32;
 
-	/* filters */
-	if (targ_pid && targ_pid != pid)
-		return 0;
-
 	bpf_map_delete_elem(&thread_to_held_mutexes, &tid);
 
 	if (tid == pid) {
diff --git a/gadgets/fdpass/artifacthub-pkg.yml b/gadgets/fdpass/artifacthub-pkg.yml
index 954a2f671..73bdf341d 100644
--- a/gadgets/fdpass/artifacthub-pkg.yml
+++ b/gadgets/fdpass/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "fdpass"
 category: monitoring-logging
 displayName: "fdpass"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Trace file descriptor passing via a unix socket (SCM_RIGHTS)"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/fdpass/dev.md b/gadgets/fdpass/dev.md
new file mode 100644
index 000000000..72fa0ef58
--- /dev/null
+++ b/gadgets/fdpass/dev.md
@@ -0,0 +1,90 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+bufs[("bufs")]
+events[("events")]
+fget_raw_ctx[("fget_raw_ctx")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+scm_send_ctx[("scm_send_ctx")]
+sendmsg_ctx[("sendmsg_ctx")]
+fget_raw_e -- "Lookup" --> gadget_mntns_filter_map
+fget_raw_e -- "Lookup" --> scm_send_ctx
+fget_raw_e -- "Update" --> fget_raw_ctx
+fget_raw_e["fget_raw_e"]
+fget_raw_x -- "Lookup" --> scm_send_ctx
+fget_raw_x -- "Lookup+Delete" --> fget_raw_ctx
+fget_raw_x -- "Lookup" --> sendmsg_ctx
+fget_raw_x -- "Lookup" --> gadget_heap
+fget_raw_x -- "Lookup" --> bufs
+fget_raw_x -- "EventOutput" --> events
+fget_raw_x["fget_raw_x"]
+scm_snd_e -- "Lookup" --> gadget_mntns_filter_map
+scm_snd_e -- "Update" --> scm_send_ctx
+scm_snd_e["scm_snd_e"]
+scm_snd_x -- "Delete" --> scm_send_ctx
+scm_snd_x["scm_snd_x"]
+sendmmsg_e -- "Lookup" --> gadget_mntns_filter_map
+sendmmsg_e -- "Update" --> sendmsg_ctx
+sendmmsg_e["sendmmsg_e"]
+sendmmsg_x -- "Delete" --> sendmsg_ctx
+sendmmsg_x["sendmmsg_x"]
+sendmsg_e -- "Lookup" --> gadget_mntns_filter_map
+sendmsg_e -- "Update" --> sendmsg_ctx
+sendmsg_e["sendmsg_e"]
+sendmsg_x -- "Delete" --> sendmsg_ctx
+sendmsg_x["sendmsg_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant fget_raw_e
+participant fget_raw_x
+participant scm_snd_e
+participant scm_snd_x
+participant sendmmsg_e
+participant sendmmsg_x
+participant sendmsg_e
+participant sendmsg_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant scm_send_ctx
+participant fget_raw_ctx
+participant sendmsg_ctx
+participant gadget_heap
+participant bufs
+participant events
+end
+fget_raw_e->>gadget_mntns_filter_map: Lookup
+fget_raw_e->>scm_send_ctx: Lookup
+fget_raw_e->>fget_raw_ctx: Update
+fget_raw_x->>scm_send_ctx: Lookup
+fget_raw_x->>fget_raw_ctx: Lookup
+fget_raw_x->>sendmsg_ctx: Lookup
+fget_raw_x->>gadget_heap: Lookup
+fget_raw_x->>bufs: Lookup
+fget_raw_x->>events: EventOutput
+fget_raw_x->>fget_raw_ctx: Delete
+scm_snd_e->>gadget_mntns_filter_map: Lookup
+scm_snd_e->>scm_send_ctx: Update
+scm_snd_x->>scm_send_ctx: Delete
+sendmmsg_e->>gadget_mntns_filter_map: Lookup
+sendmmsg_e->>sendmsg_ctx: Update
+sendmmsg_x->>sendmsg_ctx: Delete
+sendmsg_e->>gadget_mntns_filter_map: Lookup
+sendmsg_e->>sendmsg_ctx: Update
+sendmsg_x->>sendmsg_ctx: Delete
+```
diff --git a/gadgets/fsnotify/README.mdx b/gadgets/fsnotify/README.mdx
index 08a37e8f7..a2c142add 100644
--- a/gadgets/fsnotify/README.mdx
+++ b/gadgets/fsnotify/README.mdx
@@ -10,6 +10,8 @@ import TabItem from '@theme/TabItem';
 
 The fsnotify gadget detects applications using inotify or fanotify and enriches the events with the process-related metadata.
 
+This gadget requires Linux >= 5.4. Additionally, the field `i_ino` is only available in Linux >= 5.11.
+
 ## Getting started
 
 Running the gadget:
diff --git a/gadgets/fsnotify/artifacthub-pkg.yml b/gadgets/fsnotify/artifacthub-pkg.yml
index 28ae0333b..4f18adf11 100644
--- a/gadgets/fsnotify/artifacthub-pkg.yml
+++ b/gadgets/fsnotify/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "fsnotify"
 category: monitoring-logging
 displayName: "fsnotify"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "enrich inotify or fanotify events"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/fsnotify/dev.md b/gadgets/fsnotify/dev.md
new file mode 100644
index 000000000..1e12ab2a9
--- /dev/null
+++ b/gadgets/fsnotify/dev.md
@@ -0,0 +1,97 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+bufs[("bufs")]
+enriched_fsnotify_events[("enriched_fsnotify_events")]
+events[("events")]
+fsnotify_insert_event_ctx[("fsnotify_insert_event_ctx")]
+fsnotify_remove_first_event_ctx[("fsnotify_remove_first_event_ctx")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+fanotify_handle_event_e -- "Update" --> fsnotify_insert_event_ctx
+fanotify_handle_event_e["fanotify_handle_event_e"]
+fanotify_handle_event_x -- "Delete" --> fsnotify_insert_event_ctx
+fanotify_handle_event_x["fanotify_handle_event_x"]
+fsnotify_destroy_event -- "Lookup" --> fsnotify_insert_event_ctx
+fsnotify_destroy_event -- "Lookup" --> gadget_heap
+fsnotify_destroy_event -- "Lookup+Delete" --> enriched_fsnotify_events
+fsnotify_destroy_event -- "Lookup" --> bufs
+fsnotify_destroy_event -- "EventOutput" --> events
+fsnotify_destroy_event["fsnotify_destroy_event"]
+fsnotify_insert_event_e -- "Lookup" --> fsnotify_insert_event_ctx
+fsnotify_insert_event_e -- "Lookup+Update" --> enriched_fsnotify_events
+fsnotify_insert_event_e -- "Lookup" --> bufs
+fsnotify_insert_event_e["fsnotify_insert_event_e"]
+ig_fa_pick_e -- "Update" --> fsnotify_remove_first_event_ctx
+ig_fa_pick_e["ig_fa_pick_e"]
+ig_fa_pick_x -- "Lookup+Delete" --> fsnotify_remove_first_event_ctx
+ig_fa_pick_x -- "Lookup" --> gadget_heap
+ig_fa_pick_x -- "Lookup" --> enriched_fsnotify_events
+ig_fa_pick_x -- "EventOutput" --> events
+ig_fa_pick_x["ig_fa_pick_x"]
+inotify_handle_event_e -- "Update" --> fsnotify_insert_event_ctx
+inotify_handle_event_e["inotify_handle_event_e"]
+inotify_handle_event_x -- "Delete" --> fsnotify_insert_event_ctx
+inotify_handle_event_x["inotify_handle_event_x"]
+inotify_handle_inode_event_e -- "Update" --> fsnotify_insert_event_ctx
+inotify_handle_inode_event_e["inotify_handle_inode_event_e"]
+inotify_handle_inode_event_x -- "Delete" --> fsnotify_insert_event_ctx
+inotify_handle_inode_event_x["inotify_handle_inode_event_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant fanotify_handle_event_e
+participant fanotify_handle_event_x
+participant fsnotify_destroy_event
+participant fsnotify_insert_event_e
+participant ig_fa_pick_e
+participant ig_fa_pick_x
+participant inotify_handle_event_e
+participant inotify_handle_event_x
+participant inotify_handle_inode_event_e
+participant inotify_handle_inode_event_x
+end
+box eBPF Maps
+participant fsnotify_insert_event_ctx
+participant gadget_heap
+participant enriched_fsnotify_events
+participant bufs
+participant events
+participant fsnotify_remove_first_event_ctx
+end
+fanotify_handle_event_e->>fsnotify_insert_event_ctx: Update
+fanotify_handle_event_x->>fsnotify_insert_event_ctx: Delete
+fsnotify_destroy_event->>fsnotify_insert_event_ctx: Lookup
+fsnotify_destroy_event->>gadget_heap: Lookup
+fsnotify_destroy_event->>enriched_fsnotify_events: Lookup
+fsnotify_destroy_event->>bufs: Lookup
+fsnotify_destroy_event->>events: EventOutput
+fsnotify_destroy_event->>enriched_fsnotify_events: Delete
+fsnotify_insert_event_e->>fsnotify_insert_event_ctx: Lookup
+fsnotify_insert_event_e->>enriched_fsnotify_events: Update
+fsnotify_insert_event_e->>enriched_fsnotify_events: Lookup
+fsnotify_insert_event_e->>bufs: Lookup
+ig_fa_pick_e->>fsnotify_remove_first_event_ctx: Update
+ig_fa_pick_x->>fsnotify_remove_first_event_ctx: Lookup
+ig_fa_pick_x->>gadget_heap: Lookup
+ig_fa_pick_x->>enriched_fsnotify_events: Lookup
+ig_fa_pick_x->>events: EventOutput
+ig_fa_pick_x->>fsnotify_remove_first_event_ctx: Delete
+inotify_handle_event_e->>fsnotify_insert_event_ctx: Update
+inotify_handle_event_x->>fsnotify_insert_event_ctx: Delete
+inotify_handle_inode_event_e->>fsnotify_insert_event_ctx: Update
+inotify_handle_inode_event_x->>fsnotify_insert_event_ctx: Delete
+```
diff --git a/gadgets/fsnotify/gadget.yaml b/gadgets/fsnotify/gadget.yaml
index 561a465d0..3fb180f06 100644
--- a/gadgets/fsnotify/gadget.yaml
+++ b/gadgets/fsnotify/gadget.yaml
@@ -28,16 +28,17 @@ datasources:
           template: pid
       fa_response:
         annotations:
-          description: 'response to a fanotify permission request: allow or deny'
+          description: 'response to a fanotify permission request'
+          value.one-of: "na, allow, deny, interrupted"
       fa_response_raw:
         annotations:
           columns.hidden: "true"
       fa_type:
         annotations:
           columns.hidden: "true"
-          description: 'Type of fanotify event: FANOTIFY_EVENT_TYPE_FID, FANOTIFY_EVENT_TYPE_FID_NAME,
-            FANOTIFY_EVENT_TYPE_PATH, FANOTIFY_EVENT_TYPE_PATH_PERM, FANOTIFY_EVENT_TYPE_OVERFLOW,
-            or FANOTIFY_EVENT_TYPE_FS_ERROR'
+          description: 'Type of fanotify event'
+          value.one-of: 'FANOTIFY_EVENT_TYPE_FID, FANOTIFY_EVENT_TYPE_FID_NAME, FANOTIFY_EVENT_TYPE_PATH,
+            FANOTIFY_EVENT_TYPE_PATH_PERM, FANOTIFY_EVENT_TYPE_OVERFLOW, FANOTIFY_EVENT_TYPE_FS_ERROR'
       fa_type_raw:
         annotations:
           columns.hidden: "true"
@@ -49,7 +50,7 @@ datasources:
       i_ino:
         annotations:
           columns.hidden: "true"
-          description: inode of the file accessed by inotify
+          description: inode of the file accessed by inotify (requires Linux >= 5.11)
       i_ino_dir:
         annotations:
           columns.hidden: "true"
@@ -74,6 +75,7 @@ datasources:
           description: 'fsnotify group priorities. Events are send in order from highest
             priority to lowest priority. 0: default, normal notifiers, no permissions.
             1: fanotify content based access control. 2: fanotify pre-content access.'
+          value.one-of: "0, 1, 2"
       tracee:
         annotations:
           columns.hidden: "true"
@@ -162,7 +164,8 @@ datasources:
           description: Tracer user name
       type:
         annotations:
-          description: 'Type of event: inotify or fanotify'
+          description: 'Type of event'
+          value.one-of: "inotify, fanotify"
       type_raw:
         annotations:
           columns.hidden: "true"
diff --git a/gadgets/fsnotify/go/go.mod b/gadgets/fsnotify/go/go.mod
index 92f7c4556..890581e06 100644
--- a/gadgets/fsnotify/go/go.mod
+++ b/gadgets/fsnotify/go/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/fsnotify/go/program.go b/gadgets/fsnotify/go/program.go
index 46354f1c5..c069fcfcd 100644
--- a/gadgets/fsnotify/go/program.go
+++ b/gadgets/fsnotify/go/program.go
@@ -23,15 +23,32 @@ func gadgetPreStart() int32 {
 	// Linux 5.16 renamed fsnotify_add_event to fsnotify_insert_event
 	// https://github.com/torvalds/linux/commit/1ad03c3a326a86e259389592117252c851873395
 	if api.KallsymsSymbolExists("fsnotify_insert_event") {
+		// Fast path for Linux >= 5.16
+		// No need to check for other symbols
+
+		// inotify_handle_event is only on Linux < 5.11
+		api.SetConfig("programs.inotify_handle_event_e.attach_to", "gadget_program_disabled")
+		api.SetConfig("programs.inotify_handle_event_x.attach_to", "gadget_program_disabled")
 		return 0
 	}
 
-	if api.KallsymsSymbolExists("fsnotify_add_event") {
-		api.SetConfig("programs.fsnotify_insert_event_e.attach_to", "fsnotify_add_event")
+	if !api.KallsymsSymbolExists("fsnotify_add_event") {
+		api.Errorf("kernel symbol not found: fsnotify_add_event or fsnotify_insert_event")
 		return 0
 	}
+	api.SetConfig("programs.fsnotify_insert_event_e.attach_to", "fsnotify_add_event")
 
-	api.Errorf("kernel symbol not found: fsnotify_add_event or fsnotify_insert_event")
+	// Linux 5.11 introduced inotify_handle_inode_event (replacing inotify_handle_event)
+	// https://github.com/torvalds/linux/commit/1a2620a99803ad660edc5d22fd9c66cce91ceb1c
+	if !api.KallsymsSymbolExists("inotify_handle_inode_event") {
+		if api.KallsymsSymbolExists("inotify_handle_event") {
+			api.SetConfig("programs.inotify_handle_inode_event_e.attach_to", "gadget_program_disabled")
+			api.SetConfig("programs.inotify_handle_inode_event_x.attach_to", "gadget_program_disabled")
+			api.Warnf("inotify_handle_inode_event not found, falling back to inotify_handle_event")
+			return 0
+		}
+		api.Errorf("kernel symbol not found: inotify_handle_inode_event or inotify_handle_event")
+	}
 	return 0
 }
 
diff --git a/gadgets/fsnotify/program.bpf.c b/gadgets/fsnotify/program.bpf.c
index ffebdc587..8922d7a21 100644
--- a/gadgets/fsnotify/program.bpf.c
+++ b/gadgets/fsnotify/program.bpf.c
@@ -10,6 +10,7 @@
 #include <gadget/buffer.h>
 #include <gadget/filesystem.h>
 #include <gadget/macros.h>
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 #include <gadget/types.h>
 #include <gadget/core_fixes.bpf.h>
@@ -271,6 +272,32 @@ static __always_inline __u32 get_priority(struct fsnotify_group *group)
 	return 0;
 }
 
+static __always_inline int get_fanotify_type(struct fanotify_event *fae)
+{
+	// fanotify types were introduced by Linux v5.6
+	// https://github.com/torvalds/linux/commit/7088f35720a55b99624ea36091538baec7ec611f
+	if (bpf_core_field_exists(fae->type))
+		return BPF_CORE_READ_BITFIELD_PROBED(fae, type);
+
+	return -1;
+}
+
+static __always_inline struct path *
+fanotify_get_path(struct fanotify_event *fae)
+{
+	struct path *p = NULL;
+	int type = get_fanotify_type(fae);
+	if (type == -1)
+		return NULL;
+
+	if (type == FANOTIFY_EVENT_TYPE_PATH)
+		p = &container_of(fae, struct fanotify_path_event, fae)->path;
+	else if (type == FANOTIFY_EVENT_TYPE_PATH_PERM)
+		p = &container_of(fae, struct fanotify_perm_event, fae)->path;
+
+	return p;
+}
+
 // Probes for the tracees
 
 SEC("kprobe/inotify_handle_inode_event")
@@ -278,6 +305,8 @@ int BPF_KPROBE(inotify_handle_inode_event_e, struct fsnotify_mark *inode_mark,
 	       u32 mask, struct inode *inode, struct inode *dir,
 	       const struct qstr *name, u32 cookie)
 {
+	// inotify_handle_inode_event is introduced in Linux v5.11:
+	// https://github.com/torvalds/linux/commit/1a2620a99803ad660edc5d22fd9c66cce91ceb1c
 	if (!fanotify_only) {
 		u64 pid_tgid = bpf_get_current_pid_tgid();
 		struct fsnotify_insert_event_value value = {
@@ -302,6 +331,38 @@ int BPF_KRETPROBE(inotify_handle_inode_event_x, int ret)
 	return 0;
 }
 
+// Linux < 5.11 does not have inotify_handle_inode_event but inotify_handle_event
+// https://github.com/torvalds/linux/commit/1a2620a99803ad660edc5d22fd9c66cce91ceb1c
+SEC("kprobe/inotify_handle_event")
+int BPF_KPROBE(inotify_handle_event_e, struct fsnotify_group *group,
+	       struct inode *inode)
+{
+	if (!fanotify_only) {
+		u64 pid_tgid = bpf_get_current_pid_tgid();
+		struct fsnotify_insert_event_value value = {
+			.type = inotify,
+			// FIXME: i_ino not available on Linux < 5.11
+			// https://github.com/inspektor-gadget/inspektor-gadget/issues/4222
+			.i_ino = 0,
+			.i_ino_dir = BPF_CORE_READ(inode, i_ino),
+		};
+		// context for fsnotify_insert_event
+		bpf_map_update_elem(&fsnotify_insert_event_ctx, &pid_tgid,
+				    &value, 0);
+	}
+	return 0;
+}
+
+SEC("kretprobe/inotify_handle_event")
+int BPF_KRETPROBE(inotify_handle_event_x, int ret)
+{
+	if (!fanotify_only) {
+		u64 pid_tgid = bpf_get_current_pid_tgid();
+		bpf_map_delete_elem(&fsnotify_insert_event_ctx, &pid_tgid);
+	}
+	return 0;
+}
+
 SEC("kprobe/fanotify_handle_event")
 int BPF_KPROBE(fanotify_handle_event_e)
 {
@@ -403,24 +464,18 @@ int BPF_KPROBE(fsnotify_insert_event_e, struct fsnotify_group *group,
 		case fanotify:
 			fae = container_of(event, struct fanotify_event, fse);
 			ee->fa_mask = BPF_CORE_READ(fae, mask);
-			ee->fa_type = BPF_CORE_READ_BITFIELD_PROBED(fae, type);
+			// fanotify types were introduced by Linux v5.6
+			// https://github.com/torvalds/linux/commit/7088f35720a55b99624ea36091538baec7ec611f
+			if (bpf_core_field_exists(fae->type))
+				ee->fa_type = BPF_CORE_READ_BITFIELD_PROBED(
+					fae, type);
 			ee->fa_pid = BPF_CORE_READ(fae, pid, numbers[0].nr);
 			ee->fa_flags =
 				BPF_CORE_READ(group, fanotify_data.flags);
 			ee->fa_f_flags =
 				BPF_CORE_READ(group, fanotify_data.f_flags);
 
-			if (ee->fa_type == FANOTIFY_EVENT_TYPE_PATH)
-				p = &container_of(fae,
-						  struct fanotify_path_event,
-						  fae)
-					     ->path;
-			else if (ee->fa_type == FANOTIFY_EVENT_TYPE_PATH_PERM)
-				p = &container_of(fae,
-						  struct fanotify_perm_event,
-						  fae)
-					     ->path;
-
+			p = fanotify_get_path(fae);
 			if (p)
 				bpf_probe_read_kernel_str(ee->name,
 							  GADGET_PATH_MAX,
@@ -466,7 +521,9 @@ int BPF_KPROBE(fsnotify_destroy_event, struct fsnotify_group *group,
 		goto out;
 
 	fae = container_of(event, struct fanotify_event, fse);
-	fa_type = BPF_CORE_READ_BITFIELD_PROBED(fae, type);
+	fa_type = get_fanotify_type(fae);
+	if (fa_type == -1)
+		goto out;
 	if (fa_type != FANOTIFY_EVENT_TYPE_PATH_PERM)
 		goto out;
 
@@ -559,7 +616,9 @@ prepare_ee_for_fa_perm(struct enriched_event *ee, struct fsnotify_event *event,
 		return;
 
 	fae = container_of(event, struct fanotify_event, fse);
-	fa_type = BPF_CORE_READ_BITFIELD_PROBED(fae, type);
+	fa_type = get_fanotify_type(fae);
+	if (fa_type == -1)
+		return;
 	if (fa_type != FANOTIFY_EVENT_TYPE_PATH_PERM)
 		return;
 
diff --git a/gadgets/fsnotify/test/unit/fsnotify_test.go b/gadgets/fsnotify/test/unit/fsnotify_test.go
index dd260f36b..5388b9166 100644
--- a/gadgets/fsnotify/test/unit/fsnotify_test.go
+++ b/gadgets/fsnotify/test/unit/fsnotify_test.go
@@ -87,17 +87,25 @@ type testDef struct {
 }
 
 func TestFsnotifyGadget(t *testing.T) {
-	gadgettesting.MinimumKernelVersion(t, "5.10")
+	gadgettesting.MinimumKernelVersion(t, "5.4")
 	gadgettesting.InitUnitTest(t)
 	runnerConfig := &utilstest.RunnerConfig{}
 
+	// i_ino field is not available in Linux < 5.11
+	// https://github.com/inspektor-gadget/inspektor-gadget/issues/4222
+	ignoreInvalidIno := false
+	if gadgettesting.CheckMinimumKernelVersion(t, "5.11") {
+		ignoreInvalidIno = true
+		t.Logf("Linux < 5.11 (%s) does not give the inode number. This field will not be tested.", gadgettesting.GetKernelVersion(t))
+	}
+
 	testCases := map[string]testDef{
 		"captures_inotify_event": {
 			runnerConfig:  runnerConfig,
 			generateEvent: generateEvent,
 			validateEvent: func(t *testing.T, info *utilstest.RunnerInfo, eventDetails EventDetails, events []ExpectedFsnotifyEvent) {
 				utilstest.ExpectAtLeastOneEvent(func(info *utilstest.RunnerInfo, pid int) *ExpectedFsnotifyEvent {
-					return &ExpectedFsnotifyEvent{
+					ev := &ExpectedFsnotifyEvent{
 						Timestamp: utils.NormalizedStr,
 
 						Type:  "inotify",
@@ -115,6 +123,10 @@ func TestFsnotifyGadget(t *testing.T) {
 
 						Name: eventDetails.FileName,
 					}
+					if ignoreInvalidIno {
+						ev.IIno = utils.NormalizedInt
+					}
+					return ev
 				})(t, info, 0, events)
 			},
 		},
@@ -132,6 +144,9 @@ func TestFsnotifyGadget(t *testing.T) {
 
 				utils.NormalizeString(&event.FaType)
 				utils.NormalizeString(&event.FaResponse)
+				if ignoreInvalidIno {
+					event.IIno = utils.NormalizedInt
+				}
 			}
 			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
 				utilstest.RunWithRunner(t, runner, func() error {
diff --git a/gadgets/profile_blockio/artifacthub-pkg.yml b/gadgets/profile_blockio/artifacthub-pkg.yml
index 63d996d2a..27e15c54c 100644
--- a/gadgets/profile_blockio/artifacthub-pkg.yml
+++ b/gadgets/profile_blockio/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "profile blockio"
 category: monitoring-logging
 displayName: "profile blockio"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Profile block I/O operations"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/profile_blockio/dev.md b/gadgets/profile_blockio/dev.md
new file mode 100644
index 000000000..388dca69f
--- /dev/null
+++ b/gadgets/profile_blockio/dev.md
@@ -0,0 +1,44 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+cgroup_map[("cgroup_map")]
+hists[("hists")]
+start[("start")]
+ig_profio_done -- "Lookup+Delete" --> start
+ig_profio_done -- "Lookup+Update" --> hists
+ig_profio_done["ig_profio_done"]
+ig_profio_ins -- "Update" --> start
+ig_profio_ins["ig_profio_ins"]
+ig_profio_iss -- "Update" --> start
+ig_profio_iss["ig_profio_iss"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_profio_done
+participant ig_profio_ins
+participant ig_profio_iss
+end
+box eBPF Maps
+participant start
+participant hists
+end
+ig_profio_done->>start: Lookup
+ig_profio_done->>hists: Lookup
+ig_profio_done->>hists: Update
+ig_profio_done->>start: Delete
+ig_profio_ins->>start: Update
+ig_profio_iss->>start: Update
+```
diff --git a/gadgets/profile_cpu/README.md b/gadgets/profile_cpu/README.md
new file mode 100644
index 000000000..49152c623
--- /dev/null
+++ b/gadgets/profile_cpu/README.md
@@ -0,0 +1,5 @@
+# profile_cpu
+
+The `profile_cpu` gadget profiles the CPU.
+
+Check the full documentation on https://inspektor-gadget.io/docs/latest/gadgets/profile_cpu
diff --git a/gadgets/profile_cpu/README.mdx b/gadgets/profile_cpu/README.mdx
new file mode 100644
index 000000000..dd0c7daa0
--- /dev/null
+++ b/gadgets/profile_cpu/README.mdx
@@ -0,0 +1,125 @@
+---
+title: profile_cpu
+sidebar_position: 0
+---
+
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+# profile_cpu
+
+The profile cpu gadget takes samples of stack traces.
+
+## Getting started
+
+Running the gadget:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --map-fetch-interval 0 [flags]
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --map-fetch-interval 0 [flags]
+        ```
+    </TabItem>
+</Tabs>
+
+## Guide
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        Here we deploy a small demo pod "random":
+
+        ```bash
+        $ kubectl run --restart=Never --image=busybox random -- sh -c 'cat /dev/urandom > /dev/null'
+        pod/random created
+        ```
+
+        Using the profile cpu gadget, we can see the list of stack traces.
+        The following command filters only for pods named "random", execute the command
+        and interrupt it after ~30 seconds. The `--kernel-stacks-only` option is passed to show only the
+        kernel stack traces.
+
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --podname random --kernel-stacks-only --map-fetch-interval 0
+        ```
+
+        After a while press with Ctrl-C to stop trace collection
+
+        ```
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --timeout 5 --podname random --kernel-stacks-only
+        K8S.NODE                 K8S.NAMESPACE            K8S.PODNAME             K8S.CONTAINERNAME              PID COMM             SAMPLES              KERN_STACK
+        minikube-docker          default                  random                  random                       38130 containerd-shim  5                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_block_generic;…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_permute; [1]ge…
+        ```
+
+        From the traces above, you can see that the pod is spending CPU time in the
+        Linux function `urandom_read`.
+
+        Instead of waiting, you can use the `--timeout` argument:
+
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/profile_cpu:%IG_TAG% --timeout 5 --podname random --kernel-stacks-only --map-fetch-interval 0
+        K8S.NODE                 K8S.NAMESPACE            K8S.PODNAME             K8S.CONTAINERNAME              PID COMM             SAMPLES              KERN_STACK
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]_copy_to_iter; [1]get…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  2                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  5                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]chacha_permute; [1]ge…
+        minikube-docker          default                  random                  random                       38130 containerd-shim  1                    [0]get_random_bytes_user…
+        ```
+
+        Finally, we need to clean up our pod:
+
+        ```bash
+        $ kubectl delete pod random
+        ```
+    </TabItem>
+    <TabItem value="ig" label="ig">
+        * Generate some kernel load:
+
+        ```bash
+        $ docker run -d --rm --name random busybox cat /dev/urandom > /dev/null
+        ```
+
+        * Start `ig`:
+
+        ```bash
+        $ sudo ./ig profile cpu --kernel-stacks-only --containername random --runtimes docker --map-fetch-interval 0
+        ```
+
+        * Observe the results:
+
+        ```bash
+        RUNTIME.CONTAINERNAME     KERNEL_IP            COMM                    PID        TID SAMPLES              KERN_STACK
+        random                    18446603336363922440 cat                   83451      83451 2                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336357767960 cat                   83451      83451 1                    [0]rcu_all_qs; [1]__cond_resched; [2]get_random_bytes_user; [3]ura…
+        random                    18446603336363922292 cat                   83451      83451 2                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922360 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922208 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922380 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363862956 cat                   83451      83451 1                    [0]push_pipe; [1]_copy_to_iter; [2]get_random_bytes_user; [3]urand…
+        random                    18446603336363922252 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922260 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336357585584 cat                   83451      83451 1                    [0]mutex_spin_on_owner; [1]__mutex_lock.constprop.0; [2]__mutex_lo…
+        random                    18446603336363922196 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        random                    18446603336363922444 cat                   83451      83451 1                    [0]chacha_permute; [1]get_random_bytes_user; [2]urandom_read_iter;…
+        ```
+
+        * Remove the docker container:
+
+        ```bash
+        $ docker stop random
+        ```
+
+    </TabItem>
+</Tabs>
\ No newline at end of file
diff --git a/gadgets/profile_cpu/artifacthub-pkg.yml b/gadgets/profile_cpu/artifacthub-pkg.yml
new file mode 100644
index 000000000..50bb4f0ef
--- /dev/null
+++ b/gadgets/profile_cpu/artifacthub-pkg.yml
@@ -0,0 +1,29 @@
+# Artifact Hub package metadata file
+version: 0.39.0
+name: "profile cpu"
+category: monitoring-logging
+displayName: "profile cpu"
+createdAt: "2025-05-02T09:29:22Z"
+digest: "2025-05-02T09:29:22Z"
+description: "Profile CPU"
+logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
+license: ""
+homeURL: "https://inspektor-gadget.io/docs/latest/gadgets/profile_cpu/"
+containersImages:
+  - name: gadget
+    image: "ghcr.io/inspektor-gadget/gadget/profile_cpu:latest"
+    platforms:
+      - linux/amd64
+      - linux/arm64
+keywords:
+  - gadget
+links:
+  - name: source
+    url: "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/profile_cpu"
+install: |
+  # Run
+  ```bash
+  sudo ig run ghcr.io/inspektor-gadget/gadget/profile_cpu:latest
+  ```
+provider:
+  name: Inspektor Gadget
diff --git a/gadgets/profile_cpu/gadget.yaml b/gadgets/profile_cpu/gadget.yaml
new file mode 100644
index 000000000..881a37dba
--- /dev/null
+++ b/gadgets/profile_cpu/gadget.yaml
@@ -0,0 +1,50 @@
+name: profile cpu
+description: The profile cpu gadget takes samples of the stack traces.
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/profile_cpu
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/profile_cpu
+programs:
+  profiler:
+    perf:
+      type: software
+      config: count_sw_cpu_clock
+      sampleType: sample_raw
+    sampler:
+      frequency: 49
+datasources:
+  samples:
+    annotations:
+      views.modes.flamegraph: true
+      views.defaults.mode: flamegraph
+      ebpf.map.flush-on-stop: true
+    fields:
+      runtime.containerName:
+        annotations:
+          flamegraph.level: 0
+          flamegraph.type: single
+      proc.comm:
+        annotations:
+          flamegraph.level: 10
+          flamegraph.type: single
+      user_stack:
+        annotations:
+          flamegraph.level: 20
+          flamegraph.type: stack
+      kern_stack:
+        annotations:
+          flamegraph.level: 30
+          flamegraph.type: stack
+params:
+  ebpf:
+    kernel_stacks_only:
+      key: kernel-stacks-only
+      defaultValue: "false"
+      description: Only include the kernel stack
+    user_stacks_only:
+      key: user-stacks-only
+      defaultValue: "false"
+      description: Only include the user stack
+    include_idle:
+      key: include-idle
+      defaultValue: "false"
+      description: Include time the cpu is idle
diff --git a/gadgets/profile_cpu/program.bpf.c b/gadgets/profile_cpu/program.bpf.c
new file mode 100644
index 000000000..2123e732f
--- /dev/null
+++ b/gadgets/profile_cpu/program.bpf.c
@@ -0,0 +1,109 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+/* Copyright (c) 2022 LG Electronics */
+#include <vmlinux.h>
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_core_read.h>
+#include <bpf/bpf_tracing.h>
+#include <gadget/maps.bpf.h>
+#include <gadget/mntns_filter.h>
+#include <gadget/filter.h>
+#include <gadget/types.h>
+#include <gadget/macros.h>
+#include <gadget/common.h>
+#include <gadget/kernel_stack_map.h>
+#include <gadget/user_stack_map.h>
+
+#define MAX_ENTRIES 10240
+
+struct key_t {
+	__u64 kernel_ip;
+	struct gadget_user_stack user_stack_raw;
+	gadget_kernel_stack kern_stack_raw;
+	struct gadget_process proc;
+};
+
+const volatile bool kernel_stacks_only = false;
+GADGET_PARAM(kernel_stacks_only);
+
+const volatile bool user_stacks_only = false;
+GADGET_PARAM(user_stacks_only);
+
+const volatile bool include_idle = false;
+GADGET_PARAM(include_idle);
+
+struct values {
+	__u64 samples;
+};
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__type(key, struct key_t);
+	__type(value, struct values);
+	__uint(max_entries, MAX_ENTRIES);
+} counts SEC(".maps");
+
+GADGET_MAPITER(samples, counts);
+
+/*
+ * If PAGE_OFFSET macro is not available in vmlinux.h, determine ip whose MSB
+ * (Most Significant Bit) is 1 as the kernel address.
+ * TODO: use end address of user space to determine the address space of ip
+ */
+#if defined(__TARGET_ARCH_arm64) || defined(__TARGET_ARCH_x86)
+#define BITS_PER_ADDR (64)
+#define MSB_SET_ULONG (1UL << (BITS_PER_ADDR - 1))
+static __always_inline bool is_kernel_addr(u64 addr)
+{
+	return !!(addr & MSB_SET_ULONG);
+}
+#else
+static __always_inline bool is_kernel_addr(u64 addr)
+{
+	return false;
+}
+#endif /* __TARGET_ARCH_arm64 || __TARGET_ARCH_x86 */
+
+SEC("perf_event/profiler")
+int ig_prof_cpu(struct bpf_perf_event_data *ctx)
+{
+	if (gadget_should_discard_data_current())
+		return 0;
+
+	u64 id = bpf_get_current_pid_tgid();
+
+	u32 tid = id;
+	struct values *valp;
+	static const struct values zero = {
+		0,
+	};
+	struct key_t key = {};
+
+	if (!include_idle && tid == 0)
+		return 0;
+
+	gadget_process_populate(&key.proc);
+
+	if (user_stacks_only)
+		key.kern_stack_raw = -1;
+	else
+		key.kern_stack_raw = bpf_get_stackid(&ctx->regs, &ig_kstack, 0);
+
+	if (!kernel_stacks_only)
+		gadget_get_user_stack(ctx, &key.user_stack_raw);
+
+	if (key.kern_stack_raw >= 0) {
+		// populate extras to fix the kernel stack
+		u64 ip = PT_REGS_IP(&ctx->regs);
+
+		if (is_kernel_addr(ip))
+			key.kernel_ip = ip;
+	}
+
+	valp = bpf_map_lookup_or_try_init(&counts, &key, &zero);
+	if (valp)
+		__sync_fetch_and_add(&valp->samples, 1);
+
+	return 0;
+}
+
+char LICENSE[] SEC("license") = "GPL";
diff --git a/gadgets/profile_qdisc_latency/artifacthub-pkg.yml b/gadgets/profile_qdisc_latency/artifacthub-pkg.yml
index b617ef8a0..ade3def24 100644
--- a/gadgets/profile_qdisc_latency/artifacthub-pkg.yml
+++ b/gadgets/profile_qdisc_latency/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "profile qdisc latency"
 category: monitoring-logging
 displayName: "profile qdisc latency"
-createdAt: "2025-02-13T00:00:00Z"
-digest: "2025-02-13T00:00:00Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "profile network scheduler latency"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/profile_qdisc_latency/dev.md b/gadgets/profile_qdisc_latency/dev.md
new file mode 100644
index 000000000..be06c3e27
--- /dev/null
+++ b/gadgets/profile_qdisc_latency/dev.md
@@ -0,0 +1,55 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+hists[("hists")]
+start[("start")]
+consume_skb -- "Lookup+Delete" --> start
+consume_skb -- "Lookup+Update" --> hists
+consume_skb["consume_skb"]
+kfree_skb -- "Lookup+Delete" --> start
+kfree_skb -- "Lookup+Update" --> hists
+kfree_skb["kfree_skb"]
+qdisc_dequeue -- "Lookup+Delete" --> start
+qdisc_dequeue -- "Lookup+Update" --> hists
+qdisc_dequeue["qdisc_dequeue"]
+qdisc_enqueue -- "Update" --> start
+qdisc_enqueue["qdisc_enqueue"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant consume_skb
+participant kfree_skb
+participant qdisc_dequeue
+participant qdisc_enqueue
+end
+box eBPF Maps
+participant start
+participant hists
+end
+consume_skb->>start: Lookup
+consume_skb->>hists: Lookup
+consume_skb->>hists: Update
+consume_skb->>start: Delete
+kfree_skb->>start: Lookup
+kfree_skb->>hists: Lookup
+kfree_skb->>hists: Update
+kfree_skb->>start: Delete
+qdisc_dequeue->>start: Lookup
+qdisc_dequeue->>hists: Lookup
+qdisc_dequeue->>hists: Update
+qdisc_dequeue->>start: Delete
+qdisc_enqueue->>start: Update
+```
diff --git a/gadgets/profile_tcprtt/artifacthub-pkg.yml b/gadgets/profile_tcprtt/artifacthub-pkg.yml
index db0e3369c..7c9b99f6d 100644
--- a/gadgets/profile_tcprtt/artifacthub-pkg.yml
+++ b/gadgets/profile_tcprtt/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "profile tcprtt"
 category: monitoring-logging
 displayName: "profile tcprtt"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Profile TCP connections' Round-Trip Time (RTT)"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/profile_tcprtt/dev.md b/gadgets/profile_tcprtt/dev.md
new file mode 100644
index 000000000..918dbc6a0
--- /dev/null
+++ b/gadgets/profile_tcprtt/dev.md
@@ -0,0 +1,30 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+hists[("hists")]
+ig_tcprcvest_kp -- "Lookup+Update" --> hists
+ig_tcprcvest_kp["ig_tcprcvest_kp"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_tcprcvest_kp
+end
+box eBPF Maps
+participant hists
+end
+ig_tcprcvest_kp->>hists: Lookup
+ig_tcprcvest_kp->>hists: Update
+```
diff --git a/gadgets/snapshot_process/artifacthub-pkg.yml b/gadgets/snapshot_process/artifacthub-pkg.yml
index 1ab736613..f45cfa5b4 100644
--- a/gadgets/snapshot_process/artifacthub-pkg.yml
+++ b/gadgets/snapshot_process/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "snapshot process"
 category: monitoring-logging
 displayName: "snapshot process"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Show running processes"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/snapshot_process/dev.md b/gadgets/snapshot_process/dev.md
new file mode 100644
index 000000000..7847080c7
--- /dev/null
+++ b/gadgets/snapshot_process/dev.md
@@ -0,0 +1,29 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_snap_proc -- "Lookup" --> gadget_mntns_filter_map
+ig_snap_proc["ig_snap_proc"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_snap_proc
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+end
+ig_snap_proc->>gadget_mntns_filter_map: Lookup
+```
diff --git a/gadgets/snapshot_process/test/integration/snapshot_process_test.go b/gadgets/snapshot_process/test/integration/snapshot_process_test.go
index 02e82f6ab..25ee46dae 100644
--- a/gadgets/snapshot_process/test/integration/snapshot_process_test.go
+++ b/gadgets/snapshot_process/test/integration/snapshot_process_test.go
@@ -41,7 +41,7 @@ func TestSnapshotProcess(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-snapshot-process"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/snapshot_socket/artifacthub-pkg.yml b/gadgets/snapshot_socket/artifacthub-pkg.yml
index 99e595d5b..83d83436f 100644
--- a/gadgets/snapshot_socket/artifacthub-pkg.yml
+++ b/gadgets/snapshot_socket/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "snapshot socket"
 category: monitoring-logging
 displayName: "snapshot socket"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Show TCP and UDP sockets"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/snapshot_socket/dev.md b/gadgets/snapshot_socket/dev.md
new file mode 100644
index 000000000..df79f3136
--- /dev/null
+++ b/gadgets/snapshot_socket/dev.md
@@ -0,0 +1,27 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+ig_snap_tcp["ig_snap_tcp"]
+ig_snap_udp["ig_snap_udp"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_snap_tcp
+participant ig_snap_udp
+end
+box eBPF Maps
+end
+```
diff --git a/gadgets/snapshot_socket/test/integration/snapshot_socket_test.go b/gadgets/snapshot_socket/test/integration/snapshot_socket_test.go
index ee57dc378..cace6b513 100644
--- a/gadgets/snapshot_socket/test/integration/snapshot_socket_test.go
+++ b/gadgets/snapshot_socket/test/integration/snapshot_socket_test.go
@@ -47,7 +47,7 @@ func TestSnapshotSocket(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-snapshot-socket"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/testing/testing.go b/gadgets/testing/testing.go
index 804e9b386..049e38f9e 100644
--- a/gadgets/testing/testing.go
+++ b/gadgets/testing/testing.go
@@ -36,6 +36,13 @@ const (
 	K8sDistroGKECOS         = "gke-COS_containerd"
 )
 
+const (
+	BusyBoxImage          = "ghcr.io/inspektor-gadget/ci/busybox:latest"
+	NginxImage            = "ghcr.io/inspektor-gadget/ci/nginx:latest"
+	GccImage              = "ghcr.io/inspektor-gadget/ci/gcc:latest"
+	NetworkMultitoolImage = "ghcr.io/inspektor-gadget/ci/network-multitool:latest"
+)
+
 func SkipK8sDistros(t testing.TB, distros ...string) {
 	t.Helper()
 
@@ -65,10 +72,9 @@ func RemoveMemlock(t testing.TB) {
 	require.NoError(t, err, "Failed to remove memlock rlimit: %s", err)
 }
 
-// MinimumKernelVersion skips the test if the current kernel version is less
-// than minKernelVersion. When used in Kubernetes, it gets the kernel version
-// from a random node in the cluster.
-func MinimumKernelVersion(t testing.TB, minKernelVersion string) {
+// GetKernelVersion returns the kernel version of the current node.
+// When used in Kubernetes, it gets the kernel version from a random node in the cluster.
+func GetKernelVersion(t testing.TB) *kernel.VersionInfo {
 	t.Helper()
 
 	var err error
@@ -85,12 +91,32 @@ func MinimumKernelVersion(t testing.TB, minKernelVersion string) {
 		require.NoError(t, err, "Failed to get kernel version: %s", err)
 	}
 
+	return currVersion
+}
+
+// CheckMinimumKernelVersion returns true if the current kernel version is
+// less than minKernelVersion. When used in Kubernetes, it gets the kernel
+// version from a random node in the cluster.
+func CheckMinimumKernelVersion(t testing.TB, minKernelVersion string) bool {
+	t.Helper()
+
+	currVersion := GetKernelVersion(t)
+
 	minVersion, err := kernel.ParseRelease(minKernelVersion)
 	require.NoError(t, err, "Failed to parse minKernelVersion: %s", err)
 
-	if kernel.CompareKernelVersion(*currVersion, *minVersion) < 0 {
+	return kernel.CompareKernelVersion(*currVersion, *minVersion) < 0
+}
+
+// MinimumKernelVersion skips the test if the current kernel version is less
+// than minKernelVersion. When used in Kubernetes, it gets the kernel version
+// from a random node in the cluster.
+func MinimumKernelVersion(t testing.TB, minKernelVersion string) {
+	t.Helper()
+
+	if CheckMinimumKernelVersion(t, minKernelVersion) {
 		t.Skipf("Skipping test because kernel version %s is less than %s",
-			currVersion, minKernelVersion)
+			GetKernelVersion(t), minKernelVersion)
 	}
 }
 
diff --git a/gadgets/top_blockio/artifacthub-pkg.yml b/gadgets/top_blockio/artifacthub-pkg.yml
index 4284d917e..4a15b4b3d 100644
--- a/gadgets/top_blockio/artifacthub-pkg.yml
+++ b/gadgets/top_blockio/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "top blockio"
 category: monitoring-logging
 displayName: "top blockio"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Periodically report input/output block device activity. This gadget requires Linux Kernel Version 6.5+"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/top_blockio/dev.md b/gadgets/top_blockio/dev.md
new file mode 100644
index 000000000..b40ff4daa
--- /dev/null
+++ b/gadgets/top_blockio/dev.md
@@ -0,0 +1,52 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+counts[("counts")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+start[("start")]
+whobyreq[("whobyreq")]
+ig_topio_done -- "Lookup+Delete" --> start
+ig_topio_done -- "Lookup+Delete" --> whobyreq
+ig_topio_done -- "Lookup+Update" --> counts
+ig_topio_done["ig_topio_done"]
+ig_topio_req -- "Update" --> start
+ig_topio_req["ig_topio_req"]
+ig_topio_start -- "Lookup" --> gadget_mntns_filter_map
+ig_topio_start -- "Update" --> whobyreq
+ig_topio_start["ig_topio_start"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_topio_done
+participant ig_topio_req
+participant ig_topio_start
+end
+box eBPF Maps
+participant start
+participant whobyreq
+participant counts
+participant gadget_mntns_filter_map
+end
+ig_topio_done->>start: Lookup
+ig_topio_done->>whobyreq: Lookup
+ig_topio_done->>counts: Lookup
+ig_topio_done->>counts: Update
+ig_topio_done->>start: Delete
+ig_topio_done->>whobyreq: Delete
+ig_topio_req->>start: Update
+ig_topio_start->>gadget_mntns_filter_map: Lookup
+ig_topio_start->>whobyreq: Update
+```
diff --git a/gadgets/top_blockio/gadget.yaml b/gadgets/top_blockio/gadget.yaml
index 41fcb9e25..438134374 100644
--- a/gadgets/top_blockio/gadget.yaml
+++ b/gadgets/top_blockio/gadget.yaml
@@ -26,6 +26,7 @@ datasources:
       rw:
         annotations:
           description: Indicates if the operation was a read or a write
+          value.one-of: "read, write"
           columns.width: 5
       us:
         annotations:
diff --git a/gadgets/top_blockio/test/integration/top_blockio_test.go b/gadgets/top_blockio/test/integration/top_blockio_test.go
index e07925894..d933d52e2 100644
--- a/gadgets/top_blockio/test/integration/top_blockio_test.go
+++ b/gadgets/top_blockio/test/integration/top_blockio_test.go
@@ -50,7 +50,7 @@ func TestTopBlockio(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-top-blockio"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{
diff --git a/gadgets/top_file/artifacthub-pkg.yml b/gadgets/top_file/artifacthub-pkg.yml
index 3c5159b82..00032140a 100644
--- a/gadgets/top_file/artifacthub-pkg.yml
+++ b/gadgets/top_file/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "top file"
 category: monitoring-logging
 displayName: "top file"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Periodically report read/write activity by file"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/top_file/dev.md b/gadgets/top_file/dev.md
new file mode 100644
index 000000000..5396f4df9
--- /dev/null
+++ b/gadgets/top_file/dev.md
@@ -0,0 +1,47 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+bufs[("bufs")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+stats[("stats")]
+ig_topfile_rd_e -- "Lookup" --> gadget_mntns_filter_map
+ig_topfile_rd_e -- "Lookup+Update" --> stats
+ig_topfile_rd_e -- "Lookup" --> bufs
+ig_topfile_rd_e["ig_topfile_rd_e"]
+ig_topfile_wr_e -- "Lookup" --> gadget_mntns_filter_map
+ig_topfile_wr_e -- "Lookup+Update" --> stats
+ig_topfile_wr_e -- "Lookup" --> bufs
+ig_topfile_wr_e["ig_topfile_wr_e"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_topfile_rd_e
+participant ig_topfile_wr_e
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant stats
+participant bufs
+end
+ig_topfile_rd_e->>gadget_mntns_filter_map: Lookup
+ig_topfile_rd_e->>stats: Lookup
+ig_topfile_rd_e->>stats: Update
+ig_topfile_rd_e->>bufs: Lookup
+ig_topfile_wr_e->>gadget_mntns_filter_map: Lookup
+ig_topfile_wr_e->>stats: Lookup
+ig_topfile_wr_e->>stats: Update
+ig_topfile_wr_e->>bufs: Lookup
+```
diff --git a/gadgets/top_file/gadget.yaml b/gadgets/top_file/gadget.yaml
index f4f08225f..79ebf229a 100644
--- a/gadgets/top_file/gadget.yaml
+++ b/gadgets/top_file/gadget.yaml
@@ -33,11 +33,13 @@ datasources:
           description: Type of file, 'R' for regular files, 'S' for sockets and 'O'
             for others (including pipes). By default, only regular files are shown;
             use the --all-files flag to include all file types.
+          value.one-of: "R, S, O"
           columns.width: 1
       t_raw:
         annotations:
           description: Raw value of file type. '0' for regular files, '1' for sockets
             and '2' for others.
+          value.one-of: "0, 1, 2"
           columns.width: 1
           columns.hidden: true
       file:
diff --git a/gadgets/top_file/program.bpf.c b/gadgets/top_file/program.bpf.c
index 3e1d19789..0628bea74 100644
--- a/gadgets/top_file/program.bpf.c
+++ b/gadgets/top_file/program.bpf.c
@@ -59,7 +59,7 @@ struct {
 
 GADGET_MAPITER(file, stats);
 
-static void get_file_path(struct file *file, __u8 *buf, size_t size)
+static void get_file_path(struct file *file, char *buf, size_t size)
 {
 	struct path f_path = BPF_CORE_READ(file, f_path);
 	// Extract the full path string
diff --git a/gadgets/top_file/test/integration/top_file_test.go b/gadgets/top_file/test/integration/top_file_test.go
index 7fa01bb8b..1bc5039f3 100644
--- a/gadgets/top_file/test/integration/top_file_test.go
+++ b/gadgets/top_file/test/integration/top_file_test.go
@@ -51,7 +51,7 @@ func TestTopFile(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-top-file"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{
diff --git a/gadgets/top_process/README.mdx b/gadgets/top_process/README.mdx
new file mode 100644
index 000000000..5026cceab
--- /dev/null
+++ b/gadgets/top_process/README.mdx
@@ -0,0 +1,77 @@
+---
+title: top_process
+sidebar_position: 0
+---
+
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+# top_process
+
+The top_process gadget periodically reports process statistics, including CPU usage, memory usage, and other process information.
+
+## Getting started
+
+Running the gadget:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/top_process:%IG_TAG%
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run ghcr.io/inspektor-gadget/gadget/top_process:%IG_TAG%
+        ```
+    </TabItem>
+</Tabs>
+
+## Guide
+
+The top_process gadget provides detailed information about running processes, including:
+
+- Process ID (PID)
+- Parent Process ID (PPID)
+- Command name
+- CPU usage percentage
+- Memory usage (RSS and virtual)
+- Thread count
+- Process state
+- User ID
+- Process start time
+- Mount namespace ID
+
+It also adds environment enrichments (container/k8s information), if possible.
+
+You can sort the output by any field, for example by CPU usage:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/top_process:%IG_TAG% --sort -cpuUsage --max-entries 12
+        K8S.NODE            K8S.NAMESPACE       K8S.PODNAME         K8S.CONTAINERNAME         PID COMM               CPUUSAGE CPUUSAGERELA…     MEMORYRSS MEMORYVIRTUAL MEMORYRELATI… THREADCOUNT STATE               UID STARTTIMESTR
+        minikube            test-namespace      test-pod            test-container            747 ig                      0.3           0.1      94101504    1979633664           2.3           8 S                     0 2025-05-20T2
+        minikube            test-namespace      test-pod            test-container          40192 ig                      0.3           0.1     134131712    2056871936           3.3           9 S                     0 2025-05-27T1
+        minikube            test-namespace      test-pod            test-container          32493 ig                      0.3           0.1     161894400    2061258752           3.9           8 S                     0 2025-05-24T1
+                                                                                               98 ata_sff                 0.0           0.0             0             0           0.0           1 I                     0 2025-05-20T2
+                                                                                               99 md                      0.0           0.0             0             0           0.0           1 I                     0 2025-05-20T2
+                                                                                              817 sshd                    0.0           0.0       6160384      15507456           0.2           1 S                     0 2025-05-20T2
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run top_process --sort -cpuUsage --max-entries 12
+        RUNTIME.CONTAINERNAME            PID COMM               CPUUSAGE CPUUSAGERELA…     MEMORYRSS MEMORYVIRTUAL MEMORYRELATI… THREADCOUNT STATE               UID STARTTIMESTR
+        test-container                   747 ig                      0.3           0.1      94101504    1979633664           2.3           8 S                     0 2025-05-20T2
+        test-container                 40192 ig                      0.3           0.1     134131712    2056871936           3.3           9 S                     0 2025-05-27T1
+        test-container                 32493 ig                      0.3           0.1     161894400    2061258752           3.9           8 S                     0 2025-05-24T1
+                                          98 ata_sff                 0.0           0.0             0             0           0.0           1 I                     0 2025-05-20T2
+                                          99 md                      0.0           0.0             0             0           0.0           1 I                     0 2025-05-20T2
+                                         817 sshd                    0.0           0.0       6160384      15507456           0.2           1 S                     0 2025-05-20T2
+        ...
+        ```
+    </TabItem>
+</Tabs>
diff --git a/gadgets/top_process/artifacthub-pkg.yml b/gadgets/top_process/artifacthub-pkg.yml
new file mode 100644
index 000000000..40ab9128a
--- /dev/null
+++ b/gadgets/top_process/artifacthub-pkg.yml
@@ -0,0 +1,31 @@
+# Artifact Hub package metadata file
+version: 0.40.0
+name: "top process"
+category: monitoring-logging
+displayName: "top process"
+createdAt: "2025-05-13T18:00:00Z"
+digest: "2025-05-13T18:00:00Z"
+description: "Periodically report process statistics"
+logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
+license: ""
+homeURL: "https://inspektor-gadget.io/docs/latest/gadgets/top_process"
+containersImages:
+    - name: gadget
+      image: "ghcr.io/inspektor-gadget/gadget/top_process:latest"
+      platforms:
+        - linux/amd64
+        - linux/arm64
+keywords:
+    - gadget
+    - process
+    - monitoring
+links:
+    - name: source
+      url: "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/top_process"
+install: |
+    # Run
+    ```bash
+    sudo ig run ghcr.io/inspektor-gadget/gadget/top_process:latest
+    ```
+provider:
+    name: Inspektor Gadget
\ No newline at end of file
diff --git a/gadgets/top_process/gadget.yaml b/gadgets/top_process/gadget.yaml
new file mode 100644
index 000000000..589a035ea
--- /dev/null
+++ b/gadgets/top_process/gadget.yaml
@@ -0,0 +1,13 @@
+name: top process
+description: Periodically report process statistics
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/top_process
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/top_process
+operator:
+  process:
+    emitstats: true
+    interval: 3s
+datasources:
+  processes:
+    annotations:
+      cli.clear-screen-before: "true"
diff --git a/gadgets/top_tcp/artifacthub-pkg.yml b/gadgets/top_tcp/artifacthub-pkg.yml
index 0e7b12f08..203202f59 100644
--- a/gadgets/top_tcp/artifacthub-pkg.yml
+++ b/gadgets/top_tcp/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "top tcp"
 category: monitoring-logging
 displayName: "top tcp"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: Periodically report tcp send receive activity by connection
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/top_tcp/dev.md b/gadgets/top_tcp/dev.md
new file mode 100644
index 000000000..0c165f91d
--- /dev/null
+++ b/gadgets/top_tcp/dev.md
@@ -0,0 +1,41 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ip_map[("ip_map")]
+ig_toptcp_clean -- "Lookup" --> gadget_mntns_filter_map
+ig_toptcp_clean -- "Lookup+Update" --> ip_map
+ig_toptcp_clean["ig_toptcp_clean"]
+ig_toptcp_sdmsg -- "Lookup" --> gadget_mntns_filter_map
+ig_toptcp_sdmsg -- "Lookup+Update" --> ip_map
+ig_toptcp_sdmsg["ig_toptcp_sdmsg"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_toptcp_clean
+participant ig_toptcp_sdmsg
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant ip_map
+end
+ig_toptcp_clean->>gadget_mntns_filter_map: Lookup
+ig_toptcp_clean->>ip_map: Lookup
+ig_toptcp_clean->>ip_map: Update
+ig_toptcp_sdmsg->>gadget_mntns_filter_map: Lookup
+ig_toptcp_sdmsg->>ip_map: Lookup
+ig_toptcp_sdmsg->>ip_map: Update
+```
diff --git a/gadgets/top_tcp/gadget.yaml b/gadgets/top_tcp/gadget.yaml
index 6deb9a8e9..d9e99aa18 100644
--- a/gadgets/top_tcp/gadget.yaml
+++ b/gadgets/top_tcp/gadget.yaml
@@ -26,7 +26,3 @@ params:
       key: family
       defaultValue: "-1"
       description: Trace traffic from the specified IPv family. Can be either 4 or 6. Specifying -1 equals to no filtering
-    target_pid:
-      key: pid
-      defaultValue: "0"
-      description: Show only events generated by process with this PID
diff --git a/gadgets/top_tcp/program.bpf.c b/gadgets/top_tcp/program.bpf.c
index 0a717facb..b9ed2508a 100644
--- a/gadgets/top_tcp/program.bpf.c
+++ b/gadgets/top_tcp/program.bpf.c
@@ -14,8 +14,6 @@
 #define AF_INET 2 /* Internet IP Protocol 	*/
 #define AF_INET6 10 /* IP version 6			*/
 
-const volatile pid_t target_pid = 0;
-GADGET_PARAM(target_pid);
 const volatile int target_family = -1;
 GADGET_PARAM(target_family);
 
@@ -53,9 +51,6 @@ static int probe_ip(bool receiving, struct sock *sk, size_t size)
 	__u32 pid = pid_tgid >> 32;
 	__u32 tid = pid_tgid;
 
-	if (target_pid != 0 && target_pid != pid)
-		return 0;
-
 	family = BPF_CORE_READ(sk, __sk_common.skc_family);
 	if (target_family != -1 && ((target_family == 4 && family != AF_INET) ||
 				    (target_family == 6 && family != AF_INET6)))
diff --git a/gadgets/top_tcp/test/integration/top_tcp_test.go b/gadgets/top_tcp/test/integration/top_tcp_test.go
index 7286ef7d3..8e03e3d38 100644
--- a/gadgets/top_tcp/test/integration/top_tcp_test.go
+++ b/gadgets/top_tcp/test/integration/top_tcp_test.go
@@ -53,7 +53,7 @@ func TestTopTcp(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-top-tcp"
-	containerImage := "docker.io/library/nginx:latest"
+	containerImage := gadgettesting.NginxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{
@@ -125,8 +125,17 @@ func TestTopTcp(t *testing.T) {
 					Tid:     utils.NormalizedInt,
 				}
 
+				if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
+					expectedEntry.Src.K8s = utils.K8s{
+						Kind: "raw",
+					}
+					expectedEntry.Dst.K8s = expectedEntry.Src.K8s
+				}
+
 				normalize := func(e *topTcpEntry) {
 					utils.NormalizeCommonData(&e.CommonData)
+					utils.NormalizeEndpoint(&e.Src)
+					utils.NormalizeEndpoint(&e.Dst)
 					utils.NormalizeInt(&e.MntNsID)
 					utils.NormalizeInt(&e.Pid)
 					utils.NormalizeInt(&e.Tid)
diff --git a/gadgets/trace_bind/artifacthub-pkg.yml b/gadgets/trace_bind/artifacthub-pkg.yml
index 89bacf6c3..7c172be5e 100644
--- a/gadgets/trace_bind/artifacthub-pkg.yml
+++ b/gadgets/trace_bind/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace bind"
 category: monitoring-logging
 displayName: "trace bind"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace stream socket binding syscalls"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_bind/dev.md b/gadgets/trace_bind/dev.md
new file mode 100644
index 000000000..e856fb220
--- /dev/null
+++ b/gadgets/trace_bind/dev.md
@@ -0,0 +1,67 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ports[("ports")]
+sockets[("sockets")]
+ig_bind_ipv4_e -- "Lookup" --> gadget_mntns_filter_map
+ig_bind_ipv4_e -- "Update" --> sockets
+ig_bind_ipv4_e["ig_bind_ipv4_e"]
+ig_bind_ipv4_x -- "Lookup+Delete" --> sockets
+ig_bind_ipv4_x -- "Lookup" --> ports
+ig_bind_ipv4_x -- "Lookup" --> gadget_heap
+ig_bind_ipv4_x -- "EventOutput" --> events
+ig_bind_ipv4_x["ig_bind_ipv4_x"]
+ig_bind_ipv6_e -- "Lookup" --> gadget_mntns_filter_map
+ig_bind_ipv6_e -- "Update" --> sockets
+ig_bind_ipv6_e["ig_bind_ipv6_e"]
+ig_bind_ipv6_x -- "Lookup+Delete" --> sockets
+ig_bind_ipv6_x -- "Lookup" --> ports
+ig_bind_ipv6_x -- "Lookup" --> gadget_heap
+ig_bind_ipv6_x -- "EventOutput" --> events
+ig_bind_ipv6_x["ig_bind_ipv6_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_bind_ipv4_e
+participant ig_bind_ipv4_x
+participant ig_bind_ipv6_e
+participant ig_bind_ipv6_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant sockets
+participant ports
+participant gadget_heap
+participant events
+end
+ig_bind_ipv4_e->>gadget_mntns_filter_map: Lookup
+ig_bind_ipv4_e->>sockets: Update
+ig_bind_ipv4_x->>sockets: Lookup
+ig_bind_ipv4_x->>ports: Lookup
+ig_bind_ipv4_x->>gadget_heap: Lookup
+ig_bind_ipv4_x->>events: EventOutput
+ig_bind_ipv4_x->>sockets: Delete
+ig_bind_ipv6_e->>gadget_mntns_filter_map: Lookup
+ig_bind_ipv6_e->>sockets: Update
+ig_bind_ipv6_x->>sockets: Lookup
+ig_bind_ipv6_x->>ports: Lookup
+ig_bind_ipv6_x->>gadget_heap: Lookup
+ig_bind_ipv6_x->>events: EventOutput
+ig_bind_ipv6_x->>sockets: Delete
+```
diff --git a/gadgets/trace_bind/test/integration/trace_bind_test.go b/gadgets/trace_bind/test/integration/trace_bind_test.go
index f9fd03be6..2b2eae8bf 100644
--- a/gadgets/trace_bind/test/integration/trace_bind_test.go
+++ b/gadgets/trace_bind/test/integration/trace_bind_test.go
@@ -47,7 +47,7 @@ func TestTraceBind(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-bind"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
@@ -98,8 +98,16 @@ func TestTraceBind(t *testing.T) {
 				Timestamp: utils.NormalizedStr,
 			}
 
+			if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
+				expectedEntry.Addr.K8s = utils.K8s{
+					Kind: "raw",
+				}
+			}
+
 			normalize := func(e *traceBindEvent) {
 				utils.NormalizeCommonData(&e.CommonData)
+				utils.NormalizeEndpoint(&e.Addr)
+				utils.NormalizeEndpoint(&e.Addr)
 				utils.NormalizeString(&e.Timestamp)
 				utils.NormalizeProc(&e.Proc)
 			}
diff --git a/gadgets/trace_bind/test/unit/trace_bind_test.go b/gadgets/trace_bind/test/unit/trace_bind_test.go
new file mode 100644
index 000000000..48b56b1e7
--- /dev/null
+++ b/gadgets/trace_bind/test/unit/trace_bind_test.go
@@ -0,0 +1,171 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"net"
+	"syscall"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/require"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	utilstest "github.com/inspektor-gadget/inspektor-gadget/internal/test"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/gadgetrunner"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
+)
+
+type ExpectedTraceBindEvent struct {
+	Addr  utils.L4Endpoint `json:"addr"`
+	Error string           `json:"error"`
+	Proc  utils.Process
+}
+
+type testCase struct {
+	name    string
+	port    uint16
+	network string
+	version uint8
+	addr    string
+}
+
+func TestTraceBind(t *testing.T) {
+	gadgettesting.InitUnitTest(t)
+	testCases := []testCase{
+		{
+			name:    "TCP4 loopback on fixed port",
+			addr:    "127.0.0.1",
+			network: "TCP",
+			version: 4,
+			port:    12345,
+		},
+		{
+			name:    "TCP4 loopback on ephemeral port",
+			addr:    "127.0.0.1",
+			network: "TCP",
+			version: 4,
+			port:    0,
+		},
+		{
+			name:    "TCP6 loopback on fixed port",
+			addr:    "::1",
+			network: "TCP",
+			port:    2154,
+			version: 6,
+		},
+		{
+			name:    "UDP4 loopback on high port",
+			addr:    "127.0.0.1",
+			network: "UDP",
+			port:    12345,
+			version: 4,
+		},
+		{
+			name:    "UDP6 loopback on ephemeral port",
+			addr:    "::1",
+			network: "UDP",
+			port:    0,
+			version: 6,
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			t.Parallel()
+			runner := utilstest.NewRunnerWithTest(t, &utilstest.RunnerConfig{})
+			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
+				utilstest.RunWithRunner(t, runner, func() error {
+					// pick socket parameters based on tc.network
+					var domain, socktype, proto int
+					var sa syscall.Sockaddr
+
+					switch tc.network {
+					case "TCP":
+						socktype, proto = syscall.SOCK_STREAM, syscall.IPPROTO_TCP
+					case "UDP":
+						socktype, proto = syscall.SOCK_DGRAM, syscall.IPPROTO_UDP
+					}
+
+					switch tc.version {
+					case 4:
+						domain = syscall.AF_INET
+						ip := net.ParseIP(tc.addr).To4()
+						var ipArray [4]byte
+						copy(ipArray[:], ip)
+						sa = &syscall.SockaddrInet4{Port: int(tc.port), Addr: ipArray}
+					case 6:
+						domain = syscall.AF_INET6
+						ip := net.ParseIP(tc.addr).To16()
+						var ipArray [16]byte
+						copy(ipArray[:], ip)
+						sa = &syscall.SockaddrInet6{Port: int(tc.port), Addr: ipArray}
+					}
+
+					fd, err := syscall.Socket(domain, socktype, proto)
+					require.NoError(t, err)
+					err = syscall.Bind(fd, sa)
+
+					if tc.port == 0 {
+						sockAddr, err := syscall.Getsockname(fd)
+						require.NoError(t, err)
+						switch s := sockAddr.(type) {
+						case *syscall.SockaddrInet4:
+							tc.port = uint16(s.Port)
+						case *syscall.SockaddrInet6:
+							tc.port = uint16(s.Port)
+						}
+					}
+
+					defer syscall.Close(fd)
+
+					require.NoError(t, err)
+					return nil
+				})
+				return nil
+			}
+
+			opts := gadgetrunner.GadgetRunnerOpts[ExpectedTraceBindEvent]{
+				Image:          "trace_bind",
+				Timeout:        5 * time.Second,
+				MntnsFilterMap: utilstest.CreateMntNsFilterMap(t, runner.Info.MountNsID),
+				OnGadgetRun:    onGadgetRun,
+				ParamValues: api.ParamValues{
+					"operator.oci.ebpf.ignore-errors": "false",
+				},
+			}
+
+			gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+			gadgetRunner.RunGadget()
+
+			utilstest.ExpectOneEvent(
+				func(info *utilstest.RunnerInfo, fd int) *ExpectedTraceBindEvent {
+					return &ExpectedTraceBindEvent{
+						Addr: utils.L4Endpoint{
+							Addr:    tc.addr,
+							Version: tc.version,
+							Port:    tc.port,
+							Proto:   tc.network,
+						},
+						Proc:  info.Proc,
+						Error: "",
+					}
+				},
+			)(t, runner.Info, 0, gadgetRunner.CapturedEvents)
+		})
+	}
+}
diff --git a/gadgets/trace_capabilities/README.mdx b/gadgets/trace_capabilities/README.mdx
index 89050cdcf..68a183b86 100644
--- a/gadgets/trace_capabilities/README.mdx
+++ b/gadgets/trace_capabilities/README.mdx
@@ -46,15 +46,15 @@ Only show audit checks
 
 Default value: "false"
 
-### `--print-kstack`
+### `--collect-kstack`
 
-Show kernel stack traces
+Collect kernel stack traces
 
 Default value: "true"
 
-### `--print-ustack`
+### `--collect-ustack`
 
-Show user stack traces
+Collect user stack traces
 
 Default value: "false"
 
diff --git a/gadgets/trace_capabilities/artifacthub-pkg.yml b/gadgets/trace_capabilities/artifacthub-pkg.yml
index c1816818a..134b52ac4 100644
--- a/gadgets/trace_capabilities/artifacthub-pkg.yml
+++ b/gadgets/trace_capabilities/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace capabilities"
 category: monitoring-logging
 displayName: "trace capabilities"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace security capability checks"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_capabilities/dev.md b/gadgets/trace_capabilities/dev.md
new file mode 100644
index 000000000..31ae2da5b
--- /dev/null
+++ b/gadgets/trace_capabilities/dev.md
@@ -0,0 +1,75 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+current_syscall[("current_syscall")]
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_kstack[("ig_kstack")]
+ig_ustack[("ig_ustack")]
+seen[("seen")]
+start[("start")]
+ig_cap_sched_exec -- "Delete" --> current_syscall
+ig_cap_sched_exec["ig_cap_sched_exec"]
+ig_cap_sched_exit -- "Delete" --> current_syscall
+ig_cap_sched_exit["ig_cap_sched_exit"]
+ig_cap_sys_enter -- "Lookup" --> gadget_mntns_filter_map
+ig_cap_sys_enter -- "Update" --> current_syscall
+ig_cap_sys_enter["ig_cap_sys_enter"]
+ig_cap_sys_exit -- "Delete" --> current_syscall
+ig_cap_sys_exit["ig_cap_sys_exit"]
+ig_trace_cap_e -- "Lookup" --> gadget_mntns_filter_map
+ig_trace_cap_e -- "Lookup+Update" --> seen
+ig_trace_cap_e -- "Update" --> start
+ig_trace_cap_e["ig_trace_cap_e"]
+ig_trace_cap_x -- "Lookup+Delete" --> start
+ig_trace_cap_x -- "Lookup" --> gadget_heap
+ig_trace_cap_x -- "Lookup" --> current_syscall
+ig_trace_cap_x -- "EventOutput" --> events
+ig_trace_cap_x["ig_trace_cap_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_cap_sched_exec
+participant ig_cap_sched_exit
+participant ig_cap_sys_enter
+participant ig_cap_sys_exit
+participant ig_trace_cap_e
+participant ig_trace_cap_x
+end
+box eBPF Maps
+participant current_syscall
+participant gadget_mntns_filter_map
+participant seen
+participant start
+participant gadget_heap
+participant events
+end
+ig_cap_sched_exec->>current_syscall: Delete
+ig_cap_sched_exit->>current_syscall: Delete
+ig_cap_sys_enter->>gadget_mntns_filter_map: Lookup
+ig_cap_sys_enter->>current_syscall: Update
+ig_cap_sys_exit->>current_syscall: Delete
+ig_trace_cap_e->>gadget_mntns_filter_map: Lookup
+ig_trace_cap_e->>seen: Lookup
+ig_trace_cap_e->>seen: Update
+ig_trace_cap_e->>start: Update
+ig_trace_cap_x->>start: Lookup
+ig_trace_cap_x->>gadget_heap: Lookup
+ig_trace_cap_x->>current_syscall: Lookup
+ig_trace_cap_x->>events: EventOutput
+ig_trace_cap_x->>start: Delete
+```
diff --git a/gadgets/trace_capabilities/gadget.yaml b/gadgets/trace_capabilities/gadget.yaml
index 741b6d90e..136500b50 100644
--- a/gadgets/trace_capabilities/gadget.yaml
+++ b/gadgets/trace_capabilities/gadget.yaml
@@ -23,6 +23,15 @@ datasources:
         annotations:
           columns.hidden: true
       cap:
+        annotations:
+          description: capability name in a human friendly format
+          value.one-of: 'CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_DAC_READ_SEARCH, CAP_FOWNER, CAP_FSETID,
+            CAP_KILL, CAP_SETGID, CAP_SETUID, CAP_SETPCAP, CAP_LINUX_IMMUTABLE, CAP_NET_BIND_SERVICE,
+            CAP_NET_BROADCAST, CAP_NET_ADMIN, CAP_NET_RAW, CAP_IPC_LOCK, CAP_IPC_OWNER, CAP_SYS_MODULE,
+            CAP_SYS_RAWIO, CAP_SYS_CHROOT, CAP_SYS_PTRACE, CAP_SYS_PACCT, CAP_SYS_ADMIN, CAP_SYS_BOOT,
+            CAP_SYS_NICE, CAP_SYS_RESOURCE, CAP_SYS_TIME, CAP_SYS_TTY_CONFIG, CAP_MKNOD, CAP_LEASE,
+            CAP_AUDIT_WRITE, CAP_AUDIT_CONTROL, CAP_SETFCAP, CAP_MAC_OVERRIDE, CAP_MAC_ADMIN, CAP_SYSLOG,
+            CAP_WAKE_ALARM, CAP_BLOCK_SUSPEND, CAP_AUDIT_READ, CAP_PERFMON, CAP_BPF, CAP_CHECKPOINT_RESTORE'
       audit:
         annotations:
           columns.width: 11
@@ -48,28 +57,16 @@ datasources:
         annotations:
           description: if the process has the requested capability
           columns.width: 10
-      ustack_raw:
-        annotations:
-          columns.hidden: true
-      ustack:
-        annotations:
-          description: User stack
-          columns.hidden: true
-          columns.width: 20
 params:
   ebpf:
     audit_only:
       key: audit-only
       defaultValue: "false"
       description: Only show audit checks
-    print_kstack:
-      key: print-kstack
+    collect_kstack:
+      key: collect-kstack
       defaultValue: "true"
-      description: Show kernel stack traces
-    print_ustack:
-      key: print-ustack
-      defaultValue: "false"
-      description: Show user stack traces
+      description: Collect kernel stack traces
     unique:
       key: unique
       defaultValue: "false"
diff --git a/gadgets/trace_capabilities/program.bpf.c b/gadgets/trace_capabilities/program.bpf.c
index 27f352cee..2e017dce8 100644
--- a/gadgets/trace_capabilities/program.bpf.c
+++ b/gadgets/trace_capabilities/program.bpf.c
@@ -89,7 +89,7 @@ struct cap_event {
 	int insetid;
 	gadget_syscall syscall_raw;
 	gadget_kernel_stack kstack_raw;
-	struct gadget_user_stack ustack_raw;
+	struct gadget_user_stack ustack;
 };
 
 #define MAX_ENTRIES 10240
@@ -164,17 +164,13 @@ struct {
 GADGET_TRACER_MAP(events, 1024 * 256);
 GADGET_TRACER(capabilities, events, cap_event);
 
-const volatile bool print_kstack = true;
-GADGET_PARAM(print_kstack);
-
-const volatile bool print_ustack = false;
-GADGET_PARAM(print_ustack);
+const volatile bool collect_kstack = true;
+GADGET_PARAM(collect_kstack);
 
 SEC("kprobe/cap_capable")
 int BPF_KPROBE(ig_trace_cap_e, const struct cred *cred,
 	       struct user_namespace *targ_ns, int cap, int cap_opt)
 {
-	u64 mntns_id;
 	__u64 pid_tgid;
 	struct task_struct *task;
 
@@ -206,7 +202,7 @@ int BPF_KPROBE(ig_trace_cap_e, const struct cred *cred,
 	if (unique) {
 		struct unique_key key = {
 			.cap = cap,
-			.mntns_id = mntns_id,
+			.mntns_id = gadget_get_current_mntns_id(),
 		};
 
 		if (bpf_map_lookup_elem(&seen, &key) != NULL) {
@@ -266,9 +262,9 @@ int BPF_KRETPROBE(ig_trace_cap_x)
 	event->cap_raw = ap->cap;
 	// ret=0 means the process has the requested capability, otherwise ret=-EPERM
 	event->capable = PT_REGS_RC(ctx) == 0;
-	event->kstack_raw = gadget_get_kernel_stack(ctx);
-	if (print_ustack)
-		gadget_get_user_stack(ctx, &event->ustack_raw);
+	if (collect_kstack)
+		event->kstack_raw = gadget_get_kernel_stack(ctx);
+	gadget_get_user_stack(ctx, &event->ustack);
 
 	event->timestamp_raw = bpf_ktime_get_boot_ns();
 
diff --git a/gadgets/trace_capabilities/test/integration/trace_capabilities_test.go b/gadgets/trace_capabilities/test/integration/trace_capabilities_test.go
index 81ee30b20..2d38bb241 100644
--- a/gadgets/trace_capabilities/test/integration/trace_capabilities_test.go
+++ b/gadgets/trace_capabilities/test/integration/trace_capabilities_test.go
@@ -31,6 +31,10 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
 )
 
+type ustack struct {
+	Symbols string `json:"symbols"`
+}
+
 type traceCapabilitiesEvent struct {
 	utils.CommonData
 
@@ -45,7 +49,7 @@ type traceCapabilitiesEvent struct {
 	Insetid       uint32 `json:"insetid"`
 	Syscall       string `json:"syscall"`
 	Kstack        string `json:"kstack"`
-	Ustack        string `json:"ustack"`
+	Ustack        ustack `json:"ustack"`
 	Capable       bool   `json:"capable"`
 }
 
@@ -60,7 +64,7 @@ func TestTraceCapabilities(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-capabilities"
-	containerImage := "docker.io/library/gcc:latest"
+	containerImage := gadgettesting.GccImage
 
 	execProgram := `
 #include <stdio.h>
@@ -112,7 +116,7 @@ int main() {
 	var testingOpts []igtesting.Option
 	commonDataOpts := []utils.CommonDataOption{utils.WithContainerImageName(containerImage), utils.WithContainerID(testContainer.ID())}
 
-	ustackFlag := "--print-ustack=true"
+	ustackFlag := "--collect-ustack=true"
 	switch utils.CurrentTestComponent {
 	case utils.IgLocalTestComponent:
 		runnerOpts = append(runnerOpts, igrunner.WithFlags(fmt.Sprintf("-r=%s", utils.Runtime), ustackFlag))
@@ -131,8 +135,8 @@ int main() {
 					Cap:        "CAP_SYS_CHROOT",
 					Syscall:    "SYS_CHROOT",
 					Audit:      1,
-					Capable:    false,    // container runtime dependent. See normalize function.
-					Ustack:     "level2", // normalize() just checks for the presence of this string
+					Capable:    false,            // container runtime dependent. See normalize function.
+					Ustack:     ustack{"level2"}, // normalize() just checks for the presence of this string
 
 					// Check the existence of the following fields
 					Timestamp:     utils.NormalizedStr,
@@ -149,7 +153,7 @@ int main() {
 					Syscall:    "SYS_SETPRIORITY",
 					Audit:      1,
 					Capable:    false,
-					Ustack:     "",
+					Ustack:     ustack{""},
 
 					// Check the existence of the following fields
 					Timestamp:     utils.NormalizedStr,
@@ -169,8 +173,8 @@ int main() {
 				utils.NormalizeString(&e.CapEffective)
 
 				if e.Proc.Comm == "mychroot" {
-					if strings.Contains(e.Ustack, "level2") {
-						e.Ustack = "level2"
+					if strings.Contains(e.Ustack.Symbols, "level2") {
+						e.Ustack.Symbols = "level2"
 					}
 
 					// The default capabilities vary between container runtimes:
@@ -186,7 +190,7 @@ int main() {
 					// able to chroot.
 					e.Capable = false
 				} else {
-					e.Ustack = ""
+					e.Ustack.Symbols = ""
 				}
 
 				// Manually normalize fields that might contain 0
diff --git a/gadgets/trace_capabilities/test/unit/trace_capabilities_test.go b/gadgets/trace_capabilities/test/unit/trace_capabilities_test.go
new file mode 100644
index 000000000..cdf8b5434
--- /dev/null
+++ b/gadgets/trace_capabilities/test/unit/trace_capabilities_test.go
@@ -0,0 +1,189 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"os"
+	"os/exec"
+	"syscall"
+	"testing"
+	"time"
+	"unsafe"
+
+	"github.com/stretchr/testify/require"
+	"golang.org/x/sys/unix"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	utilstest "github.com/inspektor-gadget/inspektor-gadget/internal/test"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/gadgetrunner"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
+)
+
+type ExpectedTraceCapabilitiesEvent struct {
+	Proc          utils.Process
+	Cap           string `json:"cap"`
+	Audit         uint32 `json:"audit"`
+	Syscall       string `json:"syscall"`
+	CurrentUserNs uint64 `json:"current_userns"`
+	TargetUserNs  uint64 `json:"target_userns"`
+	Insetid       uint32 `json:"insetid"`
+}
+
+type testDef struct {
+	name                string
+	generateEvent       func()
+	requestedPermission string
+	syscall             string
+	insetId             uint32
+}
+
+func TestTraceCapabilitiesGadget(t *testing.T) {
+	gadgettesting.InitUnitTest(t)
+	testCases := []testDef{
+		{
+			name: "raw_socket",
+			generateEvent: func() {
+				fd, err := syscall.Socket(syscall.AF_INET, syscall.SOCK_RAW, syscall.IPPROTO_ICMP)
+				if err != nil {
+					syscall.Close(fd)
+				}
+			},
+			syscall:             "SYS_SOCKET",
+			requestedPermission: "CAP_NET_RAW",
+		},
+		{
+			name: "device_access",
+			generateEvent: func() {
+				fd, _ := syscall.Open("/dev/mem", syscall.O_RDONLY, 0)
+				if fd >= 0 {
+					syscall.Close(fd)
+				}
+			},
+			requestedPermission: "CAP_SYS_RAWIO",
+			syscall:             "SYS_OPENAT",
+		},
+		{
+			name: "perf_event_open",
+			generateEvent: func() {
+				// Open perf event with dummy args; usually fails unless properly configured.
+				attr := &unix.PerfEventAttr{Type: unix.PERF_TYPE_HARDWARE, Size: uint32(unsafe.Sizeof(unix.PerfEventAttr{}))}
+				fd, _ := unix.PerfEventOpen(attr, -1, 0, -1, 0)
+				if fd >= 0 {
+					syscall.Close(fd)
+				}
+			},
+			requestedPermission: func() string {
+				kernelVersion := gadgettesting.GetKernelVersion(t)
+				if kernelVersion.Kernel < 5 || (kernelVersion.Kernel == 5 && kernelVersion.Major < 8) {
+					// CAP_SYS_ADMIN is requested for kernel < 5.8
+					return "CAP_SYS_ADMIN"
+				}
+				return "CAP_PERFMON"
+			}(),
+			syscall: "SYS_PERF_EVENT_OPEN",
+		},
+		{
+			name: "nice",
+			generateEvent: func() {
+				currPriority, _ := syscall.Getpriority(syscall.PRIO_PROCESS, 0)
+				err := syscall.Setpriority(syscall.PRIO_PROCESS, 0, -1)
+				if err != nil {
+					syscall.Setpriority(syscall.PRIO_PROCESS, 0, currPriority)
+				}
+			},
+			requestedPermission: "CAP_SYS_NICE",
+			syscall:             "SYS_SETPRIORITY",
+		},
+	}
+	for _, testCase := range testCases {
+		t.Run(testCase.name, func(t *testing.T) {
+			t.Parallel()
+			runner := utilstest.NewRunnerWithTest(t, &utilstest.RunnerConfig{})
+			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
+				utilstest.RunWithRunner(t, runner, func() error {
+					testCase.generateEvent()
+					return nil
+				})
+				return nil
+			}
+			opts := gadgetrunner.GadgetRunnerOpts[ExpectedTraceCapabilitiesEvent]{
+				Image:          "trace_capabilities",
+				Timeout:        5 * time.Second,
+				MntnsFilterMap: utilstest.CreateMntNsFilterMap(t, runner.Info.MountNsID),
+				OnGadgetRun:    onGadgetRun,
+			}
+			gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+
+			gadgetRunner.RunGadget()
+			utilstest.ExpectAtLeastOneEvent(func(info *utilstest.RunnerInfo, fd int) *ExpectedTraceCapabilitiesEvent {
+				return &ExpectedTraceCapabilitiesEvent{
+					Proc:          info.Proc,
+					Cap:           testCase.requestedPermission,
+					Audit:         1,
+					Insetid:       testCase.insetId,
+					CurrentUserNs: info.UserNsID,
+					TargetUserNs:  info.UserNsID,
+					Syscall:       testCase.syscall,
+				}
+			})(t, runner.Info, 0, gadgetRunner.CapturedEvents)
+		})
+	}
+}
+
+func TestNonAuditCapabilities(t *testing.T) {
+	gadgettesting.InitUnitTest(t)
+	runner := utilstest.NewRunnerWithTest(t, &utilstest.RunnerConfig{})
+	var cmd *exec.Cmd
+	onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
+		utilstest.RunWithRunner(t, runner, func() error {
+			cmd = exec.Command("/bin/cat", "/proc/kallsyms")
+			err := cmd.Run()
+			require.NoError(t, err)
+			return nil
+		})
+		return nil
+	}
+	opts := gadgetrunner.GadgetRunnerOpts[ExpectedTraceCapabilitiesEvent]{
+		Image:          "trace_capabilities",
+		Timeout:        5 * time.Second,
+		MntnsFilterMap: utilstest.CreateMntNsFilterMap(t, runner.Info.MountNsID),
+		OnGadgetRun:    onGadgetRun,
+	}
+	gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+
+	gadgetRunner.RunGadget()
+
+	utilstest.ExpectAtLeastOneEvent(func(info *utilstest.RunnerInfo, fd int) *ExpectedTraceCapabilitiesEvent {
+		return &ExpectedTraceCapabilitiesEvent{
+			Proc: utils.Process{
+				Pid:     uint32(cmd.Process.Pid),
+				Tid:     uint32(cmd.Process.Pid),
+				Comm:    "cat",
+				MntNsID: info.MountNsID,
+				Parent: utils.Parent{
+					Comm: "unit.test",
+					Pid:  uint32(os.Getpid()),
+				},
+			},
+			Cap:           "CAP_SYSLOG",
+			Audit:         0,
+			Insetid:       0,
+			CurrentUserNs: info.UserNsID,
+			TargetUserNs:  info.UserNsID,
+			Syscall:       "SYS_OPENAT",
+		}
+	})(t, runner.Info, 0, gadgetRunner.CapturedEvents)
+}
diff --git a/gadgets/trace_dns/README.mdx b/gadgets/trace_dns/README.mdx
index 8d3bc0718..a8f0ec280 100644
--- a/gadgets/trace_dns/README.mdx
+++ b/gadgets/trace_dns/README.mdx
@@ -140,39 +140,6 @@ Running the gadget:
         You might not see the upstream DNS request / response if you are using [CoreDNS cache plugin](https://coredns.io/plugins/cache/) since CoreDNS will cache the upstream response. Also, the output isn't sorted based on `timestamp` but you can use it to understand the sequence of events.
         :::
 
-        ### Tracing with context related to OS:
-
-        At this point we already have the idea about what is happening to the request at different stages. In order to include context related to the OS, we can restart the gadget and don't filter by pod names:
-
-        ```bash
-        kubectl gadget run trace_dns:%IG_TAG% -n demo,kube-system  -F "name==inspektor-gadget.io." --fields=k8s.node,k8s.namespace,k8s.podname,id,pky_type,src,dst,qr,name,rcode,latency_ns,timestamp
-        ```
-
-        :::note
-        It is important that name is fully qualified domain name (FQDN) and ends with a dot (`.`) to match the domain name exactly.
-        :::
-
-        Again perform the DNS request and you will see the following output from the gadget:
-
-        ```
-        K8S.NODE                K8S.NAMESPACE        K8S.PODNAME                     ID            PKT_TYPE         NETNS_ID  SRC                                                    DST                                          QR NAME                       RCODE      LATENCY_NS TIMESTAMP
-        minikube-docker         demo                 mypod                           7f22          OUTGOING       4026533235  p/demo/mypod:51340                                     s/kube-system/kube-dns:53                    Q  inspektor-gadget.io.                  0          2024-08-30T15:43:35.463173731Z
-        minikube-docker                                                              7f22          OTHERHOST      4026532708  p/demo/mypod:51340                                     s/kube-system/kube-dns:53                    Q  inspektor-gadget.io.                  0          2024-08-30T15:43:35.463189865Z
-        minikube-docker                                                              7f22          OUTGOING       4026532708  p/demo/mypod:51340                                     p/kube-system/coredns-7db6d8ff4d-r7hwl:53    Q  inspektor-gadget.io.                  0          2024-08-30T15:43:35.463244572Z
-        minikube-docker         kube-system          coredns-7db6d8ff4d-r7hwl        7f22          HOST           4026533053  p/demo/mypod:51340                                     p/kube-system/coredns-7db6d8ff4d-r7hwl:53    Q  inspektor-gadget.io.                  0          2024-08-30T15:43:35.463249670Z
-        minikube-docker         kube-system          coredns-7db6d8ff4d-r7hwl        ae34          OUTGOING       4026533053  p/kube-system/coredns-7db6d8ff4d-r7hwl:50859           192.168.49.1:53                              Q  inspektor-gadget.io.                  0          2024-08-30T15:43:35.463918762Z
-        minikube-docker                                                              ae34          OTHERHOST      4026532708  p/kube-system/coredns-7db6d8ff4d-r7hwl:50859           192.168.49.1:53                              Q  inspektor-gadget.io.                  0          2024-08-30T15:43:35.463930870Z
-        minikube-docker                                                              ae34          OUTGOING       4026532708  192.168.49.1:53                                        p/kube-system/coredns-7db6d8ff4d-r7hwl:50859 R  inspektor-gadget.io.       Success    0          2024-08-30T15:43:35.493270618Z
-        minikube-docker                                                              ae34          OUTGOING       4026532708  192.168.49.1:53                                        p/kube-system/coredns-7db6d8ff4d-r7hwl:50859 R  inspektor-gadget.io.       Success    0          2024-08-30T15:43:35.493277616Z
-        minikube-docker         kube-system          coredns-7db6d8ff4d-r7hwl        ae34          HOST           4026533053  192.168.49.1:53                                        p/kube-system/coredns-7db6d8ff4d-r7hwl:50859 R  inspektor-gadget.io.       Success    29361746   2024-08-30T15:43:35.493280508Z
-        minikube-docker         kube-system          coredns-7db6d8ff4d-r7hwl        7f22          OUTGOING       4026533053  p/kube-system/coredns-7db6d8ff4d-r7hwl:53              p/demo/mypod:51340                           R  inspektor-gadget.io.       Success    0          2024-08-30T15:43:35.493400601Z
-        minikube-docker                                                              7f22          OTHERHOST      4026532708  p/kube-system/coredns-7db6d8ff4d-r7hwl:53              p/demo/mypod:51340                           R  inspektor-gadget.io.       Success    0          2024-08-30T15:43:35.493405074Z
-        minikube-docker                                                              7f22          OUTGOING       4026532708  s/kube-system/kube-dns:53                              p/demo/mypod:51340                           R  inspektor-gadget.io.       Success    0          2024-08-30T15:43:35.493416278Z
-        minikube-docker         demo                 mypod                           7f22          HOST           4026533235  s/kube-system/kube-dns:53                              p/demo/mypod:51340                           R  inspektor-gadget.io.       Success    30245219   2024-08-30T15:43:35.493418950Z
-        ```
-
-        The output is same as previous scenario, but now it provides additional context related to what is happening to DNS traffic at node level. For example, the second/third line show how packet is forwarded via the host (`NETNS_ID=4026532708`) and how kube-dns service IP is translated (e.g. by `iptables`) to specific pod IP. Similarly you can use other events with `NETNS_ID=4026532708` (or without kubernetes enrichment) to understand how the packet is handled at host level.
-
         This showcases how `trace_dns` gadget can be used to trace DNS request at different stages. This is helpful to understand if a request/response is being dropped/altered at a specific stage. Again the output can vary based on the DNS/CNI setup in your cluster but the idea here is to provide a starting point to debug DNS issues.
     </TabItem>
 
diff --git a/gadgets/trace_dns/artifacthub-pkg.yml b/gadgets/trace_dns/artifacthub-pkg.yml
index 9f5aa1748..fe0dd47e2 100644
--- a/gadgets/trace_dns/artifacthub-pkg.yml
+++ b/gadgets/trace_dns/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace dns"
 category: monitoring-logging
 displayName: "trace dns"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace dns requests and responses"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_dns/dev.md b/gadgets/trace_dns/dev.md
new file mode 100644
index 000000000..e2b20eacc
--- /dev/null
+++ b/gadgets/trace_dns/dev.md
@@ -0,0 +1,47 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+gadget_sockets[("gadget_sockets")]
+query_map[("query_map")]
+tmp_events[("tmp_events")]
+ig_trace_dns -- "Lookup" --> tmp_events
+ig_trace_dns -- "Lookup" --> gadget_sockets
+ig_trace_dns -- "Lookup" --> gadget_mntns_filter_map
+ig_trace_dns -- "Lookup+Update+Delete" --> query_map
+ig_trace_dns -- "EventOutput" --> events
+ig_trace_dns["ig_trace_dns"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_trace_dns
+end
+box eBPF Maps
+participant tmp_events
+participant gadget_sockets
+participant gadget_mntns_filter_map
+participant query_map
+participant events
+end
+ig_trace_dns->>tmp_events: Lookup
+ig_trace_dns->>gadget_sockets: Lookup
+ig_trace_dns->>gadget_mntns_filter_map: Lookup
+ig_trace_dns->>query_map: Update
+ig_trace_dns->>query_map: Lookup
+ig_trace_dns->>query_map: Delete
+ig_trace_dns->>events: EventOutput
+```
diff --git a/gadgets/trace_dns/gadget.yaml b/gadgets/trace_dns/gadget.yaml
index d38fb421a..d12b2cff1 100644
--- a/gadgets/trace_dns/gadget.yaml
+++ b/gadgets/trace_dns/gadget.yaml
@@ -39,6 +39,7 @@ datasources:
           template: l4endpoint
       id:
         annotations:
+          description: DNS query/response ID, used to match queries with responses
           columns.hidden: "true"
       latency_ns_raw:
         annotations:
@@ -47,6 +48,7 @@ datasources:
           description: DNS request latency
       name:
         annotations:
+          description: Domain name being queried
           columns.width: "30"
       num_answers:
         annotations:
@@ -61,6 +63,8 @@ datasources:
           columns.hidden: "true"
       qr:
         annotations:
+          description: Specifies whether this message is a query (Q), or a response (R).
+          value.one-of: "Q, R"
           columns.minwidth: "2"
           columns.width: "2"
       qr_raw:
@@ -69,11 +73,14 @@ datasources:
       qtype:
         annotations:
           description: Query type
+          value.one-of: "A, NS, CNAME, SOA, PTR, MX, TXT, AAAA, SRV, OPT, WKS, HINFO, MINFO, AXFR, ALL"
       qtype_raw:
         annotations:
           columns.hidden: "true"
       rcode:
         annotations:
+          description: Response code
+          value.one-of: "Success, FormatError, ServerFailure, NameError, NotImplemented, Refused"
           columns.minwidth: "8"
           columns.width: "8"
       rcode_raw:
@@ -95,6 +102,9 @@ datasources:
         annotations:
           columns.hidden: "true"
           description: Recursion Desired Flag
+      nameserver:
+        annotations:
+          description: Nameserver for the DNS request
 
 params:
   ebpf:
diff --git a/gadgets/trace_dns/go/go.mod b/gadgets/trace_dns/go/go.mod
index 369a9facb..b611d3349 100644
--- a/gadgets/trace_dns/go/go.mod
+++ b/gadgets/trace_dns/go/go.mod
@@ -1,11 +1,11 @@
 module trace_dns
 
-go 1.23.0
+go 1.24.0
 
 require (
 	// Version doesn't matter because of the replace directive below.
 	github.com/inspektor-gadget/inspektor-gadget v0.0.0
-	golang.org/x/net v0.35.0
+	golang.org/x/net v0.40.0
 )
 
 // Only needed by in-tree gadgets
diff --git a/gadgets/trace_dns/go/go.sum b/gadgets/trace_dns/go/go.sum
index f4761f9ab..b194d6828 100644
--- a/gadgets/trace_dns/go/go.sum
+++ b/gadgets/trace_dns/go/go.sum
@@ -1,2 +1,2 @@
-golang.org/x/net v0.35.0 h1:T5GQRQb2y08kTAByq9L4/bz8cipCdA8FbRTXewonqY8=
-golang.org/x/net v0.35.0/go.mod h1:EglIi67kWsHKlRzzVMUD93VMSWGFOMSZgxFjparz1Qk=
+golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
+golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
diff --git a/gadgets/trace_dns/program.bpf.c b/gadgets/trace_dns/program.bpf.c
index f0b6d906c..8bfcbf5c4 100644
--- a/gadgets/trace_dns/program.bpf.c
+++ b/gadgets/trace_dns/program.bpf.c
@@ -9,17 +9,16 @@
 #include <linux/tcp.h>
 #include <linux/types.h>
 #include <linux/udp.h>
-#include <sys/socket.h>
-#include <stdbool.h>
 
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_endian.h>
 
+#define GADGET_TYPE_NETWORKING
+
 #include <gadget/macros.h>
 #include <gadget/types.h>
-
-#define GADGET_TYPE_NETWORKING
 #include <gadget/sockets-map.h>
+#include <gadget/filter.h>
 
 // Don't include <gadget/filesystem.h> in networking gadgets
 #define GADGET_PATH_MAX 512
@@ -79,6 +78,7 @@ struct event_t {
 	gadget_timestamp timestamp_raw;
 	struct gadget_l4endpoint_t src;
 	struct gadget_l4endpoint_t dst;
+	struct gadget_l3endpoint_t nameserver;
 	gadget_netns_id netns_id;
 	struct gadget_process proc;
 	char cwd[GADGET_PATH_MAX];
@@ -104,6 +104,7 @@ struct event_header_t {
 	gadget_timestamp timestamp_raw;
 	struct gadget_l4endpoint_t src;
 	struct gadget_l4endpoint_t dst;
+	struct gadget_l3endpoint_t nameserver;
 	gadget_netns_id netns_id;
 	struct gadget_process proc;
 	char cwd[GADGET_PATH_MAX];
@@ -281,13 +282,13 @@ int ig_trace_dns(struct __sk_buff *skb)
 		return 0;
 
 	// Calculate the DNS offset in the packet
+	struct tcphdr tcph;
 	switch (proto) {
 	case IPPROTO_UDP:
 		dns_off = l4_off + sizeof(struct udphdr);
 		break;
 	case IPPROTO_TCP:
 		// This is best effort, since we don't reassemble TCP segments.
-		struct tcphdr tcph;
 		if (bpf_skb_load_bytes(skb, l4_off, &tcph, sizeof tcph))
 			return 0;
 
@@ -356,15 +357,57 @@ int ig_trace_dns(struct __sk_buff *skb)
 		break;
 	}
 
-	// Enrich event with process metadata
 	struct sockets_value *skb_val = gadget_socket_lookup(skb);
+	if (gadget_should_discard_data_by_skb(skb_val))
+		return 0;
+
+	// Enrich event with process metadata
 	gadget_process_populate_from_socket(skb_val, &event->proc);
-	if (paths) {
-		bpf_probe_read_kernel_str(&event->cwd, sizeof(event->cwd),
-					  skb_val->cwd);
-		bpf_probe_read_kernel_str(&event->exepath,
-					  sizeof(event->exepath),
-					  skb_val->exepath);
+
+	if (paths && skb_val != NULL) {
+		if (bpf_core_enum_value_exists(
+			    enum bpf_func_id, BPF_FUNC_probe_read_kernel_str)) {
+			bpf_probe_read_kernel_str(
+				&event->cwd, sizeof(event->cwd), skb_val->cwd);
+			bpf_probe_read_kernel_str(&event->exepath,
+						  sizeof(event->exepath),
+						  skb_val->exepath);
+		} else {
+			if (sizeof(skb_val->cwd) <= sizeof(event->cwd)) {
+				int cwd_len = sizeof(skb_val->cwd);
+				if (bpf_skb_load_bytes(
+					    skb, (unsigned long)skb_val->cwd,
+					    event->cwd, cwd_len) < 0) {
+					return 0;
+				}
+			}
+
+			if (sizeof(skb_val->exepath) <=
+			    sizeof(event->exepath)) {
+				int exepath_len = sizeof(skb_val->exepath);
+				if (bpf_skb_load_bytes(
+					    skb,
+					    (unsigned long)skb_val->exepath,
+					    event->exepath, exepath_len) < 0) {
+					return 0;
+				}
+			}
+		}
+	}
+
+	// Handle nameserver
+	union dnsflags flags;
+	flags.flags = load_half(skb, dns_off + offsetof(struct dnshdr, flags));
+	__u8 qr = flags.qr;
+	if (qr == DNS_QR_QUERY) {
+		event->nameserver.version = event->dst.version;
+		event->nameserver.addr_raw = event->dst.addr_raw;
+	} else if (qr == DNS_QR_RESP) {
+		event->nameserver.version = event->src.version;
+		event->nameserver.addr_raw = event->src.addr_raw;
+	} else {
+		// Unknown QR value
+		return 0;
 	}
 
 	// Calculate latency:
@@ -385,11 +428,7 @@ int ig_trace_dns(struct __sk_buff *skb)
 	// or if event->timestamp == 0 (kernels before 5.8 don't support bpf_ktime_get_boot_ns, and the patched
 	// version IG injects always returns zero).
 	if (skb_val != NULL && event->timestamp_raw > 0) {
-		union dnsflags flags;
-		flags.flags = load_half(skb, dns_off + offsetof(struct dnshdr,
-								flags));
 		id = load_half(skb, dns_off + offsetof(struct dnshdr, id));
-		__u8 qr = flags.qr;
 
 		struct query_key_t query_key = {
 			.pid_tgid = skb_val->pid_tgid,
diff --git a/gadgets/trace_dns/test/integration/trace_dns_test.go b/gadgets/trace_dns/test/integration/trace_dns_test.go
index b09e3d839..cfa51a341 100644
--- a/gadgets/trace_dns/test/integration/trace_dns_test.go
+++ b/gadgets/trace_dns/test/integration/trace_dns_test.go
@@ -38,8 +38,9 @@ type traceDNSEvent struct {
 	NetNsID   uint64        `json:"netns_id"`
 	Proc      utils.Process `json:"proc"`
 
-	Src utils.L4Endpoint `json:"src"`
-	Dst utils.L4Endpoint `json:"dst"`
+	Src        utils.L4Endpoint `json:"src"`
+	Dst        utils.L4Endpoint `json:"dst"`
+	Nameserver utils.L3Endpoint `json:"nameserver"`
 
 	// Raw fields are coming from wasm, test them too
 	ID                 string `json:"id"`
@@ -59,8 +60,8 @@ type traceDNSEvent struct {
 }
 
 const (
-	DefaultServerImage = "ghcr.io/inspektor-gadget/dnstester:latest"
-	DefaultClientImage = "docker.io/library/busybox:latest"
+	DefaultServerImage = "ghcr.io/inspektor-gadget/dnstester:main"
+	DefaultClientImage = gadgettesting.BusyBoxImage
 )
 
 type testCase struct {
@@ -163,6 +164,10 @@ func newTraceDNSStep(t *testing.T, tc testCase) (igtesting.TestStep, []igtesting
 						Proto:   strings.ToUpper(tc.protocol),
 						K8s:     k8sDataServer,
 					},
+					Nameserver: utils.L3Endpoint{
+						Addr:    serverIP,
+						Version: 4,
+					},
 					QrRaw:    false,
 					Qr:       "Q",
 					Name:     "fake.test.com.",
@@ -198,6 +203,10 @@ func newTraceDNSStep(t *testing.T, tc testCase) (igtesting.TestStep, []igtesting
 						Proto:   strings.ToUpper(tc.protocol),
 						K8s:     k8sDataClient,
 					},
+					Nameserver: utils.L3Endpoint{
+						Addr:    serverIP,
+						Version: 4,
+					},
 					QrRaw:     true,
 					Qr:        "R",
 					Name:      "fake.test.com.",
@@ -234,6 +243,10 @@ func newTraceDNSStep(t *testing.T, tc testCase) (igtesting.TestStep, []igtesting
 						Proto:   strings.ToUpper(tc.protocol),
 						K8s:     k8sDataServer,
 					},
+					Nameserver: utils.L3Endpoint{
+						Addr:    serverIP,
+						Version: 4,
+					},
 					QrRaw:    false,
 					Qr:       "Q",
 					Name:     "fake.test.com.",
@@ -269,6 +282,10 @@ func newTraceDNSStep(t *testing.T, tc testCase) (igtesting.TestStep, []igtesting
 						Proto:   strings.ToUpper(tc.protocol),
 						K8s:     k8sDataClient,
 					},
+					Nameserver: utils.L3Endpoint{
+						Addr:    serverIP,
+						Version: 4,
+					},
 					QrRaw:     true,
 					Qr:        "R",
 					Name:      "fake.test.com.",
@@ -307,7 +324,7 @@ func newTraceDNSStep(t *testing.T, tc testCase) (igtesting.TestStep, []igtesting
 				}
 
 				if utils.CurrentTestComponent == utils.IgLocalTestComponent {
-					utils.NormalizeString(&e.CommonData.Runtime.ContainerImageName)
+					utils.NormalizeString(&e.Runtime.ContainerImageName)
 				}
 			}
 
diff --git a/gadgets/trace_exec/artifacthub-pkg.yml b/gadgets/trace_exec/artifacthub-pkg.yml
index 84594c368..ca1808ab8 100644
--- a/gadgets/trace_exec/artifacthub-pkg.yml
+++ b/gadgets/trace_exec/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace exec"
 category: monitoring-logging
 displayName: "trace exec"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace process executions"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_exec/dev.md b/gadgets/trace_exec/dev.md
new file mode 100644
index 000000000..d9eff054f
--- /dev/null
+++ b/gadgets/trace_exec/dev.md
@@ -0,0 +1,93 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+bufs[("bufs")]
+events[("events")]
+execs[("execs")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+security_bprm_hit_map[("security_bprm_hit_map")]
+ig_execve_e -- "Lookup" --> gadget_mntns_filter_map
+ig_execve_e -- "Lookup+Update" --> execs
+ig_execve_e -- "Lookup" --> bufs
+ig_execve_e["ig_execve_e"]
+ig_execve_x -- "Lookup+Delete" --> execs
+ig_execve_x -- "Lookup" --> bufs
+ig_execve_x -- "EventOutput" --> events
+ig_execve_x -- "Delete" --> security_bprm_hit_map
+ig_execve_x["ig_execve_x"]
+ig_execveat_e -- "Lookup" --> gadget_mntns_filter_map
+ig_execveat_e -- "Lookup+Update" --> execs
+ig_execveat_e -- "Lookup" --> bufs
+ig_execveat_e["ig_execveat_e"]
+ig_execveat_x -- "Lookup+Delete" --> execs
+ig_execveat_x -- "Lookup" --> bufs
+ig_execveat_x -- "EventOutput" --> events
+ig_execveat_x -- "Delete" --> security_bprm_hit_map
+ig_execveat_x["ig_execveat_x"]
+ig_sched_exec -- "Lookup+Delete" --> execs
+ig_sched_exec -- "Lookup" --> bufs
+ig_sched_exec -- "EventOutput" --> events
+ig_sched_exec -- "Delete" --> security_bprm_hit_map
+ig_sched_exec["ig_sched_exec"]
+security_bprm_check -- "Lookup" --> execs
+security_bprm_check -- "Lookup+Update" --> security_bprm_hit_map
+security_bprm_check -- "Lookup" --> bufs
+security_bprm_check["security_bprm_check"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_execve_e
+participant ig_execve_x
+participant ig_execveat_e
+participant ig_execveat_x
+participant ig_sched_exec
+participant security_bprm_check
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant execs
+participant bufs
+participant events
+participant security_bprm_hit_map
+end
+ig_execve_e->>gadget_mntns_filter_map: Lookup
+ig_execve_e->>execs: Update
+ig_execve_e->>execs: Lookup
+ig_execve_e->>bufs: Lookup
+ig_execve_x->>execs: Lookup
+ig_execve_x->>bufs: Lookup
+ig_execve_x->>events: EventOutput
+ig_execve_x->>execs: Delete
+ig_execve_x->>security_bprm_hit_map: Delete
+ig_execveat_e->>gadget_mntns_filter_map: Lookup
+ig_execveat_e->>execs: Update
+ig_execveat_e->>execs: Lookup
+ig_execveat_e->>bufs: Lookup
+ig_execveat_x->>execs: Lookup
+ig_execveat_x->>bufs: Lookup
+ig_execveat_x->>events: EventOutput
+ig_execveat_x->>execs: Delete
+ig_execveat_x->>security_bprm_hit_map: Delete
+ig_sched_exec->>execs: Lookup
+ig_sched_exec->>bufs: Lookup
+ig_sched_exec->>events: EventOutput
+ig_sched_exec->>execs: Delete
+ig_sched_exec->>security_bprm_hit_map: Delete
+security_bprm_check->>execs: Lookup
+security_bprm_check->>security_bprm_hit_map: Lookup
+security_bprm_check->>security_bprm_hit_map: Update
+security_bprm_check->>bufs: Lookup
+```
diff --git a/gadgets/trace_exec/gadget.yaml b/gadgets/trace_exec/gadget.yaml
index f63f5449e..7640a99c1 100644
--- a/gadgets/trace_exec/gadget.yaml
+++ b/gadgets/trace_exec/gadget.yaml
@@ -18,6 +18,12 @@ datasources:
           columns.width: 64
           columns.hidden: "true"
           columns.alignment: left
+      parent_exepath:
+        annotations:
+          description: The executable binary file of the parent process (require --paths flag)
+          columns.width: 64
+          columns.hidden: "true"
+          columns.alignment: left
       file:
         annotations:
           description: The executable file of the process. It might be different to exepath in case of a script (require --paths flag)
diff --git a/gadgets/trace_exec/go/go.mod b/gadgets/trace_exec/go/go.mod
index 92f7c4556..890581e06 100644
--- a/gadgets/trace_exec/go/go.mod
+++ b/gadgets/trace_exec/go/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/trace_exec/program.bpf.c b/gadgets/trace_exec/program.bpf.c
index da504afb1..54a97d1be 100644
--- a/gadgets/trace_exec/program.bpf.c
+++ b/gadgets/trace_exec/program.bpf.c
@@ -50,6 +50,7 @@ struct event {
 	unsigned int dev_minor;
 	unsigned long inode;
 	char exepath[GADGET_PATH_MAX];
+	char parent_exepath[GADGET_PATH_MAX];
 	char args[FULL_MAX_ARGS_ARR];
 };
 
@@ -243,6 +244,13 @@ int ig_sched_exec(struct trace_event_raw_sched_process_exec *ctx)
 		char *exepath = get_path_str(&exe_file->f_path);
 		bpf_probe_read_kernel_str(event->exepath,
 					  sizeof(event->exepath), exepath);
+
+		struct file *parent_exe_file =
+			BPF_CORE_READ(parent, mm, exe_file);
+		char *parent_exepath = get_path_str(&parent_exe_file->f_path);
+		bpf_probe_read_kernel_str(event->parent_exepath,
+					  sizeof(event->parent_exepath),
+					  parent_exepath);
 	}
 
 	size_t len = EVENT_SIZE(event);
diff --git a/gadgets/trace_exec/test/integration/trace_exec_test.go b/gadgets/trace_exec/test/integration/trace_exec_test.go
index 0b53170f0..c18c295be 100644
--- a/gadgets/trace_exec/test/integration/trace_exec_test.go
+++ b/gadgets/trace_exec/test/integration/trace_exec_test.go
@@ -37,19 +37,20 @@ type traceExecEvent struct {
 	Timestamp string        `json:"timestamp"`
 	Proc      utils.Process `json:"proc"`
 
-	Loginuid    uint32 `json:"loginuid"`
-	Sessionid   uint32 `json:"sessionid"`
-	Error       string `json:"error"`
-	UpperLayer  bool   `json:"upper_layer"`
-	PupperLayer bool   `json:"pupper_layer"`
-	FupperLayer bool   `json:"fupper_layer"`
-	Exepath     string `json:"exepath"`
-	File        string `json:"file"`
-	Cwd         string `json:"cwd"`
-	Args        string `json:"args"`
-	DevMajor    uint32 `json:"dev_major"`
-	DevMinor    uint32 `json:"dev_minor"`
-	Inode       uint64 `json:"inode"`
+	Loginuid      uint32 `json:"loginuid"`
+	Sessionid     uint32 `json:"sessionid"`
+	Error         string `json:"error"`
+	UpperLayer    bool   `json:"upper_layer"`
+	PupperLayer   bool   `json:"pupper_layer"`
+	FupperLayer   bool   `json:"fupper_layer"`
+	Exepath       string `json:"exepath"`
+	File          string `json:"file"`
+	Cwd           string `json:"cwd"`
+	Args          string `json:"args"`
+	DevMajor      uint32 `json:"dev_major"`
+	DevMinor      uint32 `json:"dev_minor"`
+	Inode         uint64 `json:"inode"`
+	ParentExepath string `json:"parent_exepath"`
 }
 
 func TestTraceExec(t *testing.T) {
@@ -62,7 +63,7 @@ func TestTraceExec(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-exec"
-	containerImage := "docker.io/library/gcc:latest"
+	containerImage := gadgettesting.GccImage
 
 	execProgram := `
 #define _GNU_SOURCE
@@ -202,19 +203,20 @@ int main(int argc, char *argv[], char **envp) {
 						Sessionid: utils.NormalizedInt,
 					},
 					{
-						CommonData:  utils.BuildCommonData(containerName, commonDataOpts...),
-						Proc:        utils.BuildProc("with_shebeng.sh", 1000, 1111),
-						Cwd:         "/tmp",
-						Args:        "/bin/with_shebeng.sh",
-						PupperLayer: true,
-						UpperLayer:  false,
-						FupperLayer: true,
-						Exepath:     "/usr/bin/dash",
-						File:        "/usr/bin/with_shebeng.sh",
-						Error:       "",
-						DevMajor:    utils.NormalizedInt,
-						DevMinor:    utils.NormalizedInt,
-						Inode:       utils.NormalizedInt,
+						CommonData:    utils.BuildCommonData(containerName, commonDataOpts...),
+						Proc:          utils.BuildProc("with_shebeng.sh", 1000, 1111),
+						Cwd:           "/tmp",
+						Args:          "/bin/with_shebeng.sh",
+						PupperLayer:   true,
+						UpperLayer:    false,
+						FupperLayer:   true,
+						Exepath:       "/usr/bin/dash",
+						File:          "/usr/bin/with_shebeng.sh",
+						Error:         "",
+						DevMajor:      utils.NormalizedInt,
+						DevMinor:      utils.NormalizedInt,
+						Inode:         utils.NormalizedInt,
+						ParentExepath: "/usr/bin/sh2",
 
 						// Check the existence of the following fields
 						Timestamp: utils.NormalizedStr,
@@ -223,18 +225,19 @@ int main(int argc, char *argv[], char **envp) {
 					},
 					// inner sh
 					{
-						CommonData:  utils.BuildCommonData(containerName, commonDataOpts...),
-						Proc:        utils.BuildProc("sh2", 1000, 1111),
-						Cwd:         "/",
-						Args:        strings.Join(innerShArgs, " "),
-						PupperLayer: false,
-						UpperLayer:  true,
-						FupperLayer: true,
-						Exepath:     "/usr/bin/sh2",
-						File:        "/usr/bin/sh2",
-						DevMajor:    utils.NormalizedInt,
-						DevMinor:    utils.NormalizedInt,
-						Inode:       utils.NormalizedInt,
+						CommonData:    utils.BuildCommonData(containerName, commonDataOpts...),
+						Proc:          utils.BuildProc("sh2", 1000, 1111),
+						Cwd:           "/",
+						Args:          strings.Join(innerShArgs, " "),
+						PupperLayer:   false,
+						UpperLayer:    true,
+						FupperLayer:   true,
+						Exepath:       "/usr/bin/sh2",
+						File:          "/usr/bin/sh2",
+						DevMajor:      utils.NormalizedInt,
+						DevMinor:      utils.NormalizedInt,
+						Inode:         utils.NormalizedInt,
+						ParentExepath: "/usr/bin/dash",
 
 						// Check the existence of the following fields
 						Timestamp: utils.NormalizedStr,
@@ -243,18 +246,19 @@ int main(int argc, char *argv[], char **envp) {
 					},
 					// sleeps
 					{
-						CommonData:  utils.BuildCommonData(containerName, commonDataOpts...),
-						Proc:        utils.BuildProc("sleep", 1000, 1111),
-						Cwd:         "/tmp",
-						Args:        strings.Join(sleep1Args, " "),
-						PupperLayer: true,
-						UpperLayer:  false,
-						FupperLayer: false,
-						Exepath:     "/usr/bin/sleep",
-						File:        "/usr/bin/sleep",
-						DevMajor:    utils.NormalizedInt,
-						DevMinor:    utils.NormalizedInt,
-						Inode:       utils.NormalizedInt,
+						CommonData:    utils.BuildCommonData(containerName, commonDataOpts...),
+						Proc:          utils.BuildProc("sleep", 1000, 1111),
+						Cwd:           "/tmp",
+						Args:          strings.Join(sleep1Args, " "),
+						PupperLayer:   true,
+						UpperLayer:    false,
+						FupperLayer:   false,
+						Exepath:       "/usr/bin/sleep",
+						File:          "/usr/bin/sleep",
+						DevMajor:      utils.NormalizedInt,
+						DevMinor:      utils.NormalizedInt,
+						Inode:         utils.NormalizedInt,
+						ParentExepath: "/usr/bin/sh2",
 
 						// Check the existence of the following fields
 						Timestamp: utils.NormalizedStr,
@@ -262,18 +266,19 @@ int main(int argc, char *argv[], char **envp) {
 						Sessionid: utils.NormalizedInt,
 					},
 					{
-						CommonData:  utils.BuildCommonData(containerName, commonDataOpts...),
-						Proc:        utils.BuildProc("sleep", 1000, 1111),
-						Cwd:         "/tmp",
-						Args:        strings.Join(sleep2Args, " "),
-						PupperLayer: true,
-						UpperLayer:  false,
-						FupperLayer: false,
-						Exepath:     "/usr/bin/sleep",
-						File:        "/usr/bin/sleep",
-						DevMajor:    utils.NormalizedInt,
-						DevMinor:    utils.NormalizedInt,
-						Inode:       utils.NormalizedInt,
+						CommonData:    utils.BuildCommonData(containerName, commonDataOpts...),
+						Proc:          utils.BuildProc("sleep", 1000, 1111),
+						Cwd:           "/tmp",
+						Args:          strings.Join(sleep2Args, " "),
+						PupperLayer:   true,
+						UpperLayer:    false,
+						FupperLayer:   false,
+						Exepath:       "/usr/bin/sleep",
+						File:          "/usr/bin/sleep",
+						DevMajor:      utils.NormalizedInt,
+						DevMinor:      utils.NormalizedInt,
+						Inode:         utils.NormalizedInt,
+						ParentExepath: "/usr/bin/sh2",
 
 						// Check the existence of the following fields
 						Timestamp: utils.NormalizedStr,
diff --git a/gadgets/trace_exec/test/unit/trace_exec_test.go b/gadgets/trace_exec/test/unit/trace_exec_test.go
new file mode 100644
index 000000000..83b8581d9
--- /dev/null
+++ b/gadgets/trace_exec/test/unit/trace_exec_test.go
@@ -0,0 +1,206 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"fmt"
+	"os"
+	"os/exec"
+	"runtime"
+	"strings"
+	"testing"
+	"time"
+
+	"github.com/cilium/ebpf"
+	"github.com/stretchr/testify/require"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	utilstest "github.com/inspektor-gadget/inspektor-gadget/internal/test"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/gadgetrunner"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
+)
+
+type ExpectedTraceExecEvent struct {
+	Proc  utils.Process `json:"proc"`
+	Error string        `json:"error"`
+	Args  string        `json:"args"`
+}
+
+type testDef struct {
+	runnerConfig   *utilstest.RunnerConfig
+	mntnsFilterMap func(info *utilstest.RunnerInfo) *ebpf.Map
+	argv           []string
+	runFromThread  bool
+	validate       func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string)
+}
+
+func TestTraceExecGadget(t *testing.T) {
+	gadgettesting.InitUnitTest(t)
+	testCases := map[string]testDef{
+		"simple_executable": {
+			runnerConfig: &utilstest.RunnerConfig{},
+			argv:         []string{"/bin/echo", "hello", "world"},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				require.Len(t, events, 1, "Expected 1 event but got %d", len(events))
+				expectedArgs := strings.Join(inputArgs, " ")
+				require.Equal(t, expectedArgs, events[0].Args, "Expected Args %q, got %q", expectedArgs, events[0].Args)
+			},
+		},
+		"large_argument_list": {
+			runnerConfig: &utilstest.RunnerConfig{},
+			// should only capture TOTAL_ARGS_SIZE ~ 20 arguments
+			argv: []string{"/bin/echo", "arg1", "arg2", "arg3", "arg4", "arg5", "arg6", "arg7", "arg8", "arg9", "arg10", "arg11", "arg12", "arg13", "arg14", "arg15", "arg16", "arg17", "arg18", "arg19", "arg20", "arg21"},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				require.Len(t, events, 1, "Expected 1 event but got %d", len(events))
+				expectedArgs := strings.Join(inputArgs[:20], " ")
+				require.Equal(t, expectedArgs, events[0].Args, "Expected Args %q, got %q", expectedArgs, events[0].Args)
+			},
+		},
+		"uid_gid": {
+			runnerConfig: &utilstest.RunnerConfig{
+				Uid:         1000,
+				Gid:         1000,
+				HostNetwork: false,
+			},
+			argv: []string{"/bin/ls", "-l", "/"},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				require.Len(t, events, 1, "Expected 1 event but got %d", len(events))
+				expectedArgs := strings.Join(inputArgs, " ")
+				require.Equal(t, expectedArgs, events[0].Args, "Expected Args %q, got %q", expectedArgs, events[0].Args)
+				require.Equal(t, uint32(info.Uid), events[0].Proc.Creds.Uid)
+				require.Equal(t, uint32(info.Gid), events[0].Proc.Creds.Gid)
+			},
+		},
+		"mount_namespace_filter_blocked": {
+			runnerConfig: &utilstest.RunnerConfig{},
+			mntnsFilterMap: func(info *utilstest.RunnerInfo) *ebpf.Map {
+				return utilstest.CreateMntNsFilterMap(t, info.MountNsID+100)
+			},
+			argv: []string{"/bin/date"},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				utilstest.ExpectNoEvent(t, info, "Expected 0 events", events)
+			},
+		},
+		"error": {
+			runnerConfig: &utilstest.RunnerConfig{},
+			argv:         []string{"/bin/foobar", "hello"},
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				require.Len(t, events, 1, "Expected 1 event but got %d", len(events))
+				expectedArgs := strings.Join(inputArgs, " ")
+				require.Equal(t, expectedArgs, events[0].Args, "Expected Args %q, got %q", expectedArgs, events[0].Args)
+				require.Equal(t, "ENOENT", events[0].Error)
+			},
+		},
+		"successful_exec_from_thread": {
+			runnerConfig:  &utilstest.RunnerConfig{},
+			argv:          []string{"/bin/echo", "hello", "world"},
+			runFromThread: true,
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				require.Len(t, events, 2, "Expected 2 events but got %d", len(events))
+				require.Contains(t, events[0].Args, "/usr/bin/python3 -c")
+				expectedArgs := strings.Join(inputArgs, " ")
+				require.Equal(t, expectedArgs, events[1].Args, "Expected Args %q, got %q", expectedArgs, events[0].Args)
+			},
+		},
+		"failed_exec_from_thread": {
+			runnerConfig:  &utilstest.RunnerConfig{},
+			argv:          []string{"/bin/meowmeow", "hello", "world"},
+			runFromThread: true,
+			validate: func(t *testing.T, info *utilstest.RunnerInfo, events []ExpectedTraceExecEvent, inputArgs []string) {
+				require.Len(t, events, 2, "Expected 2 events but got %d", len(events))
+				require.Contains(t, events[0].Args, "/usr/bin/python3 -c")
+				expectedArgs := strings.Join(inputArgs, " ")
+				require.Equal(t, expectedArgs, events[1].Args, "Expected Args %q, got %q", expectedArgs, events[1].Args)
+				require.Equal(t, "ENOENT", events[1].Error)
+			},
+		},
+	}
+
+	for name, testCase := range testCases {
+		t.Run(name, func(t *testing.T) {
+			t.Parallel()
+			runner := utilstest.NewRunnerWithTest(t, testCase.runnerConfig)
+			var mntnsFilterMap *ebpf.Map
+			if testCase.mntnsFilterMap == nil {
+				// by default we use the mount namespace of the runner
+				mntnsFilterMap = utilstest.CreateMntNsFilterMap(t, runner.Info.MountNsID)
+			} else {
+				mntnsFilterMap = testCase.mntnsFilterMap(runner.Info)
+			}
+			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
+				utilstest.RunWithRunner(t, runner, func() error {
+					if testCase.runFromThread {
+						generateEventFromThread(t, testCase.argv)
+					} else {
+						os.StartProcess(testCase.argv[0], testCase.argv, &os.ProcAttr{})
+					}
+					return nil
+				})
+				return nil
+			}
+			opts := gadgetrunner.GadgetRunnerOpts[ExpectedTraceExecEvent]{
+				Image:   "trace_exec",
+				Timeout: 5 * time.Second,
+				ParamValues: api.ParamValues{
+					"operator.oci.ebpf.ignore-failed": "false",
+				},
+				MntnsFilterMap: mntnsFilterMap,
+				OnGadgetRun:    onGadgetRun,
+			}
+			gadgetRunner := gadgetrunner.NewGadgetRunner(t, opts)
+
+			gadgetRunner.RunGadget()
+			testCase.validate(t, runner.Info, gadgetRunner.CapturedEvents, testCase.argv)
+		})
+	}
+}
+
+func generateEventFromThread(t *testing.T, argv []string) {
+	runtime.LockOSThread()
+	defer runtime.UnlockOSThread()
+
+	args := "["
+	for i, arg := range argv {
+		if i > 0 {
+			args += ", "
+		}
+		args += `"` + arg + `"`
+	}
+	args += "]"
+
+	script := fmt.Sprintf(`
+import threading
+import os
+
+def exec():
+    os.execve("%s", %v, {})
+
+def main():
+    thread = threading.Thread(target=exec)
+    thread.start()
+    thread.join()
+
+if __name__ == "__main__":
+    main()
+`, argv[0], args)
+	cmd := exec.Command("python3", "-c", script)
+	err := cmd.Run()
+	if err != nil {
+		// python3 is not available
+		t.Skip("Skipping test, python3 is needed to run the test")
+	}
+}
diff --git a/gadgets/trace_fsslower/artifacthub-pkg.yml b/gadgets/trace_fsslower/artifacthub-pkg.yml
index b06ebeed7..4cf3f824b 100644
--- a/gadgets/trace_fsslower/artifacthub-pkg.yml
+++ b/gadgets/trace_fsslower/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace fsslower"
 category: monitoring-logging
 displayName: "trace fsslower"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "Trace open, read, write and fsync operations slower than a threshold"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_fsslower/dev.md b/gadgets/trace_fsslower/dev.md
new file mode 100644
index 000000000..2beb45169
--- /dev/null
+++ b/gadgets/trace_fsslower/dev.md
@@ -0,0 +1,106 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+starts[("starts")]
+ig_fssl_open_e -- "Lookup" --> gadget_mntns_filter_map
+ig_fssl_open_e -- "Update" --> starts
+ig_fssl_open_e["ig_fssl_open_e"]
+ig_fssl_open_x -- "Lookup+Delete" --> starts
+ig_fssl_open_x -- "Lookup" --> gadget_heap
+ig_fssl_open_x -- "EventOutput" --> events
+ig_fssl_open_x["ig_fssl_open_x"]
+ig_fssl_read_e -- "Lookup" --> gadget_mntns_filter_map
+ig_fssl_read_e -- "Update" --> starts
+ig_fssl_read_e["ig_fssl_read_e"]
+ig_fssl_read_x -- "Lookup+Delete" --> starts
+ig_fssl_read_x -- "Lookup" --> gadget_heap
+ig_fssl_read_x -- "EventOutput" --> events
+ig_fssl_read_x["ig_fssl_read_x"]
+ig_fssl_statfs_e -- "Lookup" --> gadget_mntns_filter_map
+ig_fssl_statfs_e -- "Update" --> starts
+ig_fssl_statfs_e["ig_fssl_statfs_e"]
+ig_fssl_statfs_x -- "Lookup+Delete" --> starts
+ig_fssl_statfs_x -- "Lookup" --> gadget_heap
+ig_fssl_statfs_x -- "EventOutput" --> events
+ig_fssl_statfs_x["ig_fssl_statfs_x"]
+ig_fssl_sync_e -- "Lookup" --> gadget_mntns_filter_map
+ig_fssl_sync_e -- "Update" --> starts
+ig_fssl_sync_e["ig_fssl_sync_e"]
+ig_fssl_sync_x -- "Lookup+Delete" --> starts
+ig_fssl_sync_x -- "Lookup" --> gadget_heap
+ig_fssl_sync_x -- "EventOutput" --> events
+ig_fssl_sync_x["ig_fssl_sync_x"]
+ig_fssl_wr_e -- "Lookup" --> gadget_mntns_filter_map
+ig_fssl_wr_e -- "Update" --> starts
+ig_fssl_wr_e["ig_fssl_wr_e"]
+ig_fssl_wr_x -- "Lookup+Delete" --> starts
+ig_fssl_wr_x -- "Lookup" --> gadget_heap
+ig_fssl_wr_x -- "EventOutput" --> events
+ig_fssl_wr_x["ig_fssl_wr_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_fssl_open_e
+participant ig_fssl_open_x
+participant ig_fssl_read_e
+participant ig_fssl_read_x
+participant ig_fssl_statfs_e
+participant ig_fssl_statfs_x
+participant ig_fssl_sync_e
+participant ig_fssl_sync_x
+participant ig_fssl_wr_e
+participant ig_fssl_wr_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant starts
+participant gadget_heap
+participant events
+end
+ig_fssl_open_e->>gadget_mntns_filter_map: Lookup
+ig_fssl_open_e->>starts: Update
+ig_fssl_open_x->>starts: Lookup
+ig_fssl_open_x->>starts: Delete
+ig_fssl_open_x->>gadget_heap: Lookup
+ig_fssl_open_x->>events: EventOutput
+ig_fssl_read_e->>gadget_mntns_filter_map: Lookup
+ig_fssl_read_e->>starts: Update
+ig_fssl_read_x->>starts: Lookup
+ig_fssl_read_x->>starts: Delete
+ig_fssl_read_x->>gadget_heap: Lookup
+ig_fssl_read_x->>events: EventOutput
+ig_fssl_statfs_e->>gadget_mntns_filter_map: Lookup
+ig_fssl_statfs_e->>starts: Update
+ig_fssl_statfs_x->>starts: Lookup
+ig_fssl_statfs_x->>starts: Delete
+ig_fssl_statfs_x->>gadget_heap: Lookup
+ig_fssl_statfs_x->>events: EventOutput
+ig_fssl_sync_e->>gadget_mntns_filter_map: Lookup
+ig_fssl_sync_e->>starts: Update
+ig_fssl_sync_x->>starts: Lookup
+ig_fssl_sync_x->>starts: Delete
+ig_fssl_sync_x->>gadget_heap: Lookup
+ig_fssl_sync_x->>events: EventOutput
+ig_fssl_wr_e->>gadget_mntns_filter_map: Lookup
+ig_fssl_wr_e->>starts: Update
+ig_fssl_wr_x->>starts: Lookup
+ig_fssl_wr_x->>starts: Delete
+ig_fssl_wr_x->>gadget_heap: Lookup
+ig_fssl_wr_x->>events: EventOutput
+```
diff --git a/gadgets/trace_fsslower/go/go.mod b/gadgets/trace_fsslower/go/go.mod
index 92f7c4556..890581e06 100644
--- a/gadgets/trace_fsslower/go/go.mod
+++ b/gadgets/trace_fsslower/go/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/trace_fsslower/test/integration/trace_fsslower_test.go b/gadgets/trace_fsslower/test/integration/trace_fsslower_test.go
index 313e98001..044a2cb86 100644
--- a/gadgets/trace_fsslower/test/integration/trace_fsslower_test.go
+++ b/gadgets/trace_fsslower/test/integration/trace_fsslower_test.go
@@ -55,7 +55,7 @@ func TestTraceFSSlower(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-fsslower"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/trace_lsm/artifacthub-pkg.yml b/gadgets/trace_lsm/artifacthub-pkg.yml
index 5a7ff9c8d..e881a1563 100644
--- a/gadgets/trace_lsm/artifacthub-pkg.yml
+++ b/gadgets/trace_lsm/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace lsm"
 category: monitoring-logging
 displayName: "trace lsm"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "a strace for LSM tracepoints"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_lsm/dev.md b/gadgets/trace_lsm/dev.md
new file mode 100644
index 000000000..79a4cc264
--- /dev/null
+++ b/gadgets/trace_lsm/dev.md
@@ -0,0 +1,615 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+trace_lsm_binder_set_context_mgr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_binder_set_context_mgr["trace_lsm_binder_set_context_mgr"]
+trace_lsm_binder_transaction -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_binder_transaction["trace_lsm_binder_transaction"]
+trace_lsm_binder_transfer_binder -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_binder_transfer_binder["trace_lsm_binder_transfer_binder"]
+trace_lsm_binder_transfer_file -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_binder_transfer_file["trace_lsm_binder_transfer_file"]
+trace_lsm_bprm_check_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_bprm_check_security["trace_lsm_bprm_check_security"]
+trace_lsm_bprm_committed_creds -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_bprm_committed_creds["trace_lsm_bprm_committed_creds"]
+trace_lsm_bprm_committing_creds -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_bprm_committing_creds["trace_lsm_bprm_committing_creds"]
+trace_lsm_bprm_creds_for_exec -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_bprm_creds_for_exec["trace_lsm_bprm_creds_for_exec"]
+trace_lsm_bprm_creds_from_file -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_bprm_creds_from_file["trace_lsm_bprm_creds_from_file"]
+trace_lsm_capable -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_capable["trace_lsm_capable"]
+trace_lsm_capget -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_capget["trace_lsm_capget"]
+trace_lsm_capset -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_capset["trace_lsm_capset"]
+trace_lsm_cred_alloc_blank -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_cred_alloc_blank["trace_lsm_cred_alloc_blank"]
+trace_lsm_cred_free -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_cred_free["trace_lsm_cred_free"]
+trace_lsm_cred_getsecid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_cred_getsecid["trace_lsm_cred_getsecid"]
+trace_lsm_cred_prepare -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_cred_prepare["trace_lsm_cred_prepare"]
+trace_lsm_cred_transfer -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_cred_transfer["trace_lsm_cred_transfer"]
+trace_lsm_d_instantiate -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_d_instantiate["trace_lsm_d_instantiate"]
+trace_lsm_dentry_create_files_as -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_dentry_create_files_as["trace_lsm_dentry_create_files_as"]
+trace_lsm_dentry_init_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_dentry_init_security["trace_lsm_dentry_init_security"]
+trace_lsm_file_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_alloc_security["trace_lsm_file_alloc_security"]
+trace_lsm_file_fcntl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_fcntl["trace_lsm_file_fcntl"]
+trace_lsm_file_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_free_security["trace_lsm_file_free_security"]
+trace_lsm_file_ioctl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_ioctl["trace_lsm_file_ioctl"]
+trace_lsm_file_lock -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_lock["trace_lsm_file_lock"]
+trace_lsm_file_mprotect -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_mprotect["trace_lsm_file_mprotect"]
+trace_lsm_file_open -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_open["trace_lsm_file_open"]
+trace_lsm_file_permission -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_permission["trace_lsm_file_permission"]
+trace_lsm_file_receive -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_receive["trace_lsm_file_receive"]
+trace_lsm_file_send_sigiotask -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_send_sigiotask["trace_lsm_file_send_sigiotask"]
+trace_lsm_file_set_fowner -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_file_set_fowner["trace_lsm_file_set_fowner"]
+trace_lsm_fs_context_dup -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_fs_context_dup["trace_lsm_fs_context_dup"]
+trace_lsm_fs_context_parse_param -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_fs_context_parse_param["trace_lsm_fs_context_parse_param"]
+trace_lsm_getprocattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_getprocattr["trace_lsm_getprocattr"]
+trace_lsm_inode_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_alloc_security["trace_lsm_inode_alloc_security"]
+trace_lsm_inode_copy_up -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_copy_up["trace_lsm_inode_copy_up"]
+trace_lsm_inode_copy_up_xattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_copy_up_xattr["trace_lsm_inode_copy_up_xattr"]
+trace_lsm_inode_create -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_create["trace_lsm_inode_create"]
+trace_lsm_inode_follow_link -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_follow_link["trace_lsm_inode_follow_link"]
+trace_lsm_inode_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_free_security["trace_lsm_inode_free_security"]
+trace_lsm_inode_getattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_getattr["trace_lsm_inode_getattr"]
+trace_lsm_inode_getsecctx -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_getsecctx["trace_lsm_inode_getsecctx"]
+trace_lsm_inode_getsecid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_getsecid["trace_lsm_inode_getsecid"]
+trace_lsm_inode_getsecurity -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_getsecurity["trace_lsm_inode_getsecurity"]
+trace_lsm_inode_getxattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_getxattr["trace_lsm_inode_getxattr"]
+trace_lsm_inode_init_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_init_security["trace_lsm_inode_init_security"]
+trace_lsm_inode_init_security_anon -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_init_security_anon["trace_lsm_inode_init_security_anon"]
+trace_lsm_inode_invalidate_secctx -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_invalidate_secctx["trace_lsm_inode_invalidate_secctx"]
+trace_lsm_inode_killpriv -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_killpriv["trace_lsm_inode_killpriv"]
+trace_lsm_inode_link -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_link["trace_lsm_inode_link"]
+trace_lsm_inode_listsecurity -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_listsecurity["trace_lsm_inode_listsecurity"]
+trace_lsm_inode_listxattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_listxattr["trace_lsm_inode_listxattr"]
+trace_lsm_inode_mkdir -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_mkdir["trace_lsm_inode_mkdir"]
+trace_lsm_inode_mknod -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_mknod["trace_lsm_inode_mknod"]
+trace_lsm_inode_need_killpriv -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_need_killpriv["trace_lsm_inode_need_killpriv"]
+trace_lsm_inode_notifysecctx -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_notifysecctx["trace_lsm_inode_notifysecctx"]
+trace_lsm_inode_permission -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_permission["trace_lsm_inode_permission"]
+trace_lsm_inode_post_setxattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_post_setxattr["trace_lsm_inode_post_setxattr"]
+trace_lsm_inode_readlink -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_readlink["trace_lsm_inode_readlink"]
+trace_lsm_inode_removexattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_removexattr["trace_lsm_inode_removexattr"]
+trace_lsm_inode_rename -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_rename["trace_lsm_inode_rename"]
+trace_lsm_inode_rmdir -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_rmdir["trace_lsm_inode_rmdir"]
+trace_lsm_inode_setattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_setattr["trace_lsm_inode_setattr"]
+trace_lsm_inode_setsecctx -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_setsecctx["trace_lsm_inode_setsecctx"]
+trace_lsm_inode_setsecurity -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_setsecurity["trace_lsm_inode_setsecurity"]
+trace_lsm_inode_setxattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_setxattr["trace_lsm_inode_setxattr"]
+trace_lsm_inode_symlink -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_symlink["trace_lsm_inode_symlink"]
+trace_lsm_inode_unlink -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_inode_unlink["trace_lsm_inode_unlink"]
+trace_lsm_ipc_getsecid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_ipc_getsecid["trace_lsm_ipc_getsecid"]
+trace_lsm_ipc_permission -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_ipc_permission["trace_lsm_ipc_permission"]
+trace_lsm_ismaclabel -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_ismaclabel["trace_lsm_ismaclabel"]
+trace_lsm_kernel_act_as -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_act_as["trace_lsm_kernel_act_as"]
+trace_lsm_kernel_create_files_as -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_create_files_as["trace_lsm_kernel_create_files_as"]
+trace_lsm_kernel_load_data -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_load_data["trace_lsm_kernel_load_data"]
+trace_lsm_kernel_module_request -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_module_request["trace_lsm_kernel_module_request"]
+trace_lsm_kernel_post_load_data -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_post_load_data["trace_lsm_kernel_post_load_data"]
+trace_lsm_kernel_post_read_file -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_post_read_file["trace_lsm_kernel_post_read_file"]
+trace_lsm_kernel_read_file -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernel_read_file["trace_lsm_kernel_read_file"]
+trace_lsm_kernfs_init_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_kernfs_init_security["trace_lsm_kernfs_init_security"]
+trace_lsm_mmap_addr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_mmap_addr["trace_lsm_mmap_addr"]
+trace_lsm_mmap_file -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_mmap_file["trace_lsm_mmap_file"]
+trace_lsm_move_mount -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_move_mount["trace_lsm_move_mount"]
+trace_lsm_msg_msg_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_msg_alloc_security["trace_lsm_msg_msg_alloc_security"]
+trace_lsm_msg_msg_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_msg_free_security["trace_lsm_msg_msg_free_security"]
+trace_lsm_msg_queue_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_queue_alloc_security["trace_lsm_msg_queue_alloc_security"]
+trace_lsm_msg_queue_associate -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_queue_associate["trace_lsm_msg_queue_associate"]
+trace_lsm_msg_queue_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_queue_free_security["trace_lsm_msg_queue_free_security"]
+trace_lsm_msg_queue_msgctl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_queue_msgctl["trace_lsm_msg_queue_msgctl"]
+trace_lsm_msg_queue_msgrcv -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_queue_msgrcv["trace_lsm_msg_queue_msgrcv"]
+trace_lsm_msg_queue_msgsnd -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_msg_queue_msgsnd["trace_lsm_msg_queue_msgsnd"]
+trace_lsm_netlink_send -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_netlink_send["trace_lsm_netlink_send"]
+trace_lsm_path_notify -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_path_notify["trace_lsm_path_notify"]
+trace_lsm_ptrace_access_check -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_ptrace_access_check["trace_lsm_ptrace_access_check"]
+trace_lsm_ptrace_traceme -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_ptrace_traceme["trace_lsm_ptrace_traceme"]
+trace_lsm_quota_on -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_quota_on["trace_lsm_quota_on"]
+trace_lsm_quotactl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_quotactl["trace_lsm_quotactl"]
+trace_lsm_release_secctx -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_release_secctx["trace_lsm_release_secctx"]
+trace_lsm_sb_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_alloc_security["trace_lsm_sb_alloc_security"]
+trace_lsm_sb_clone_mnt_opts -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_clone_mnt_opts["trace_lsm_sb_clone_mnt_opts"]
+trace_lsm_sb_delete -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_delete["trace_lsm_sb_delete"]
+trace_lsm_sb_eat_lsm_opts -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_eat_lsm_opts["trace_lsm_sb_eat_lsm_opts"]
+trace_lsm_sb_free_mnt_opts -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_free_mnt_opts["trace_lsm_sb_free_mnt_opts"]
+trace_lsm_sb_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_free_security["trace_lsm_sb_free_security"]
+trace_lsm_sb_kern_mount -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_kern_mount["trace_lsm_sb_kern_mount"]
+trace_lsm_sb_mnt_opts_compat -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_mnt_opts_compat["trace_lsm_sb_mnt_opts_compat"]
+trace_lsm_sb_mount -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_mount["trace_lsm_sb_mount"]
+trace_lsm_sb_pivotroot -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_pivotroot["trace_lsm_sb_pivotroot"]
+trace_lsm_sb_remount -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_remount["trace_lsm_sb_remount"]
+trace_lsm_sb_set_mnt_opts -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_set_mnt_opts["trace_lsm_sb_set_mnt_opts"]
+trace_lsm_sb_show_options -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_show_options["trace_lsm_sb_show_options"]
+trace_lsm_sb_statfs -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_statfs["trace_lsm_sb_statfs"]
+trace_lsm_sb_umount -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sb_umount["trace_lsm_sb_umount"]
+trace_lsm_secctx_to_secid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_secctx_to_secid["trace_lsm_secctx_to_secid"]
+trace_lsm_secid_to_secctx -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_secid_to_secctx["trace_lsm_secid_to_secctx"]
+trace_lsm_sem_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sem_alloc_security["trace_lsm_sem_alloc_security"]
+trace_lsm_sem_associate -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sem_associate["trace_lsm_sem_associate"]
+trace_lsm_sem_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sem_free_security["trace_lsm_sem_free_security"]
+trace_lsm_sem_semctl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sem_semctl["trace_lsm_sem_semctl"]
+trace_lsm_sem_semop -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_sem_semop["trace_lsm_sem_semop"]
+trace_lsm_setprocattr -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_setprocattr["trace_lsm_setprocattr"]
+trace_lsm_settime -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_settime["trace_lsm_settime"]
+trace_lsm_shm_alloc_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_shm_alloc_security["trace_lsm_shm_alloc_security"]
+trace_lsm_shm_associate -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_shm_associate["trace_lsm_shm_associate"]
+trace_lsm_shm_free_security -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_shm_free_security["trace_lsm_shm_free_security"]
+trace_lsm_shm_shmat -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_shm_shmat["trace_lsm_shm_shmat"]
+trace_lsm_shm_shmctl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_shm_shmctl["trace_lsm_shm_shmctl"]
+trace_lsm_syslog -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_syslog["trace_lsm_syslog"]
+trace_lsm_task_alloc -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_alloc["trace_lsm_task_alloc"]
+trace_lsm_task_fix_setgid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_fix_setgid["trace_lsm_task_fix_setgid"]
+trace_lsm_task_fix_setuid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_fix_setuid["trace_lsm_task_fix_setuid"]
+trace_lsm_task_free -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_free["trace_lsm_task_free"]
+trace_lsm_task_getioprio -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_getioprio["trace_lsm_task_getioprio"]
+trace_lsm_task_getpgid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_getpgid["trace_lsm_task_getpgid"]
+trace_lsm_task_getscheduler -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_getscheduler["trace_lsm_task_getscheduler"]
+trace_lsm_task_getsecid_obj -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_getsecid_obj["trace_lsm_task_getsecid_obj"]
+trace_lsm_task_getsid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_getsid["trace_lsm_task_getsid"]
+trace_lsm_task_kill -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_kill["trace_lsm_task_kill"]
+trace_lsm_task_movememory -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_movememory["trace_lsm_task_movememory"]
+trace_lsm_task_prctl -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_prctl["trace_lsm_task_prctl"]
+trace_lsm_task_prlimit -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_prlimit["trace_lsm_task_prlimit"]
+trace_lsm_task_setioprio -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_setioprio["trace_lsm_task_setioprio"]
+trace_lsm_task_setnice -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_setnice["trace_lsm_task_setnice"]
+trace_lsm_task_setpgid -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_setpgid["trace_lsm_task_setpgid"]
+trace_lsm_task_setrlimit -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_setrlimit["trace_lsm_task_setrlimit"]
+trace_lsm_task_setscheduler -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_setscheduler["trace_lsm_task_setscheduler"]
+trace_lsm_task_to_inode -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_task_to_inode["trace_lsm_task_to_inode"]
+trace_lsm_vm_enough_memory -- "Lookup" --> gadget_mntns_filter_map
+trace_lsm_vm_enough_memory["trace_lsm_vm_enough_memory"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant trace_lsm_binder_set_context_mgr
+participant trace_lsm_binder_transaction
+participant trace_lsm_binder_transfer_binder
+participant trace_lsm_binder_transfer_file
+participant trace_lsm_bprm_check_security
+participant trace_lsm_bprm_committed_creds
+participant trace_lsm_bprm_committing_creds
+participant trace_lsm_bprm_creds_for_exec
+participant trace_lsm_bprm_creds_from_file
+participant trace_lsm_capable
+participant trace_lsm_capget
+participant trace_lsm_capset
+participant trace_lsm_cred_alloc_blank
+participant trace_lsm_cred_free
+participant trace_lsm_cred_getsecid
+participant trace_lsm_cred_prepare
+participant trace_lsm_cred_transfer
+participant trace_lsm_d_instantiate
+participant trace_lsm_dentry_create_files_as
+participant trace_lsm_dentry_init_security
+participant trace_lsm_file_alloc_security
+participant trace_lsm_file_fcntl
+participant trace_lsm_file_free_security
+participant trace_lsm_file_ioctl
+participant trace_lsm_file_lock
+participant trace_lsm_file_mprotect
+participant trace_lsm_file_open
+participant trace_lsm_file_permission
+participant trace_lsm_file_receive
+participant trace_lsm_file_send_sigiotask
+participant trace_lsm_file_set_fowner
+participant trace_lsm_fs_context_dup
+participant trace_lsm_fs_context_parse_param
+participant trace_lsm_getprocattr
+participant trace_lsm_inode_alloc_security
+participant trace_lsm_inode_copy_up
+participant trace_lsm_inode_copy_up_xattr
+participant trace_lsm_inode_create
+participant trace_lsm_inode_follow_link
+participant trace_lsm_inode_free_security
+participant trace_lsm_inode_getattr
+participant trace_lsm_inode_getsecctx
+participant trace_lsm_inode_getsecid
+participant trace_lsm_inode_getsecurity
+participant trace_lsm_inode_getxattr
+participant trace_lsm_inode_init_security
+participant trace_lsm_inode_init_security_anon
+participant trace_lsm_inode_invalidate_secctx
+participant trace_lsm_inode_killpriv
+participant trace_lsm_inode_link
+participant trace_lsm_inode_listsecurity
+participant trace_lsm_inode_listxattr
+participant trace_lsm_inode_mkdir
+participant trace_lsm_inode_mknod
+participant trace_lsm_inode_need_killpriv
+participant trace_lsm_inode_notifysecctx
+participant trace_lsm_inode_permission
+participant trace_lsm_inode_post_setxattr
+participant trace_lsm_inode_readlink
+participant trace_lsm_inode_removexattr
+participant trace_lsm_inode_rename
+participant trace_lsm_inode_rmdir
+participant trace_lsm_inode_setattr
+participant trace_lsm_inode_setsecctx
+participant trace_lsm_inode_setsecurity
+participant trace_lsm_inode_setxattr
+participant trace_lsm_inode_symlink
+participant trace_lsm_inode_unlink
+participant trace_lsm_ipc_getsecid
+participant trace_lsm_ipc_permission
+participant trace_lsm_ismaclabel
+participant trace_lsm_kernel_act_as
+participant trace_lsm_kernel_create_files_as
+participant trace_lsm_kernel_load_data
+participant trace_lsm_kernel_module_request
+participant trace_lsm_kernel_post_load_data
+participant trace_lsm_kernel_post_read_file
+participant trace_lsm_kernel_read_file
+participant trace_lsm_kernfs_init_security
+participant trace_lsm_mmap_addr
+participant trace_lsm_mmap_file
+participant trace_lsm_move_mount
+participant trace_lsm_msg_msg_alloc_security
+participant trace_lsm_msg_msg_free_security
+participant trace_lsm_msg_queue_alloc_security
+participant trace_lsm_msg_queue_associate
+participant trace_lsm_msg_queue_free_security
+participant trace_lsm_msg_queue_msgctl
+participant trace_lsm_msg_queue_msgrcv
+participant trace_lsm_msg_queue_msgsnd
+participant trace_lsm_netlink_send
+participant trace_lsm_path_notify
+participant trace_lsm_ptrace_access_check
+participant trace_lsm_ptrace_traceme
+participant trace_lsm_quota_on
+participant trace_lsm_quotactl
+participant trace_lsm_release_secctx
+participant trace_lsm_sb_alloc_security
+participant trace_lsm_sb_clone_mnt_opts
+participant trace_lsm_sb_delete
+participant trace_lsm_sb_eat_lsm_opts
+participant trace_lsm_sb_free_mnt_opts
+participant trace_lsm_sb_free_security
+participant trace_lsm_sb_kern_mount
+participant trace_lsm_sb_mnt_opts_compat
+participant trace_lsm_sb_mount
+participant trace_lsm_sb_pivotroot
+participant trace_lsm_sb_remount
+participant trace_lsm_sb_set_mnt_opts
+participant trace_lsm_sb_show_options
+participant trace_lsm_sb_statfs
+participant trace_lsm_sb_umount
+participant trace_lsm_secctx_to_secid
+participant trace_lsm_secid_to_secctx
+participant trace_lsm_sem_alloc_security
+participant trace_lsm_sem_associate
+participant trace_lsm_sem_free_security
+participant trace_lsm_sem_semctl
+participant trace_lsm_sem_semop
+participant trace_lsm_setprocattr
+participant trace_lsm_settime
+participant trace_lsm_shm_alloc_security
+participant trace_lsm_shm_associate
+participant trace_lsm_shm_free_security
+participant trace_lsm_shm_shmat
+participant trace_lsm_shm_shmctl
+participant trace_lsm_syslog
+participant trace_lsm_task_alloc
+participant trace_lsm_task_fix_setgid
+participant trace_lsm_task_fix_setuid
+participant trace_lsm_task_free
+participant trace_lsm_task_getioprio
+participant trace_lsm_task_getpgid
+participant trace_lsm_task_getscheduler
+participant trace_lsm_task_getsecid_obj
+participant trace_lsm_task_getsid
+participant trace_lsm_task_kill
+participant trace_lsm_task_movememory
+participant trace_lsm_task_prctl
+participant trace_lsm_task_prlimit
+participant trace_lsm_task_setioprio
+participant trace_lsm_task_setnice
+participant trace_lsm_task_setpgid
+participant trace_lsm_task_setrlimit
+participant trace_lsm_task_setscheduler
+participant trace_lsm_task_to_inode
+participant trace_lsm_vm_enough_memory
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+end
+trace_lsm_binder_set_context_mgr->>gadget_mntns_filter_map: Lookup
+trace_lsm_binder_transaction->>gadget_mntns_filter_map: Lookup
+trace_lsm_binder_transfer_binder->>gadget_mntns_filter_map: Lookup
+trace_lsm_binder_transfer_file->>gadget_mntns_filter_map: Lookup
+trace_lsm_bprm_check_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_bprm_committed_creds->>gadget_mntns_filter_map: Lookup
+trace_lsm_bprm_committing_creds->>gadget_mntns_filter_map: Lookup
+trace_lsm_bprm_creds_for_exec->>gadget_mntns_filter_map: Lookup
+trace_lsm_bprm_creds_from_file->>gadget_mntns_filter_map: Lookup
+trace_lsm_capable->>gadget_mntns_filter_map: Lookup
+trace_lsm_capget->>gadget_mntns_filter_map: Lookup
+trace_lsm_capset->>gadget_mntns_filter_map: Lookup
+trace_lsm_cred_alloc_blank->>gadget_mntns_filter_map: Lookup
+trace_lsm_cred_free->>gadget_mntns_filter_map: Lookup
+trace_lsm_cred_getsecid->>gadget_mntns_filter_map: Lookup
+trace_lsm_cred_prepare->>gadget_mntns_filter_map: Lookup
+trace_lsm_cred_transfer->>gadget_mntns_filter_map: Lookup
+trace_lsm_d_instantiate->>gadget_mntns_filter_map: Lookup
+trace_lsm_dentry_create_files_as->>gadget_mntns_filter_map: Lookup
+trace_lsm_dentry_init_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_fcntl->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_ioctl->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_lock->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_mprotect->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_open->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_permission->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_receive->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_send_sigiotask->>gadget_mntns_filter_map: Lookup
+trace_lsm_file_set_fowner->>gadget_mntns_filter_map: Lookup
+trace_lsm_fs_context_dup->>gadget_mntns_filter_map: Lookup
+trace_lsm_fs_context_parse_param->>gadget_mntns_filter_map: Lookup
+trace_lsm_getprocattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_copy_up->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_copy_up_xattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_create->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_follow_link->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_getattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_getsecctx->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_getsecid->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_getsecurity->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_getxattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_init_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_init_security_anon->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_invalidate_secctx->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_killpriv->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_link->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_listsecurity->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_listxattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_mkdir->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_mknod->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_need_killpriv->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_notifysecctx->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_permission->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_post_setxattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_readlink->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_removexattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_rename->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_rmdir->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_setattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_setsecctx->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_setsecurity->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_setxattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_symlink->>gadget_mntns_filter_map: Lookup
+trace_lsm_inode_unlink->>gadget_mntns_filter_map: Lookup
+trace_lsm_ipc_getsecid->>gadget_mntns_filter_map: Lookup
+trace_lsm_ipc_permission->>gadget_mntns_filter_map: Lookup
+trace_lsm_ismaclabel->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_act_as->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_create_files_as->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_load_data->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_module_request->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_post_load_data->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_post_read_file->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernel_read_file->>gadget_mntns_filter_map: Lookup
+trace_lsm_kernfs_init_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_mmap_addr->>gadget_mntns_filter_map: Lookup
+trace_lsm_mmap_file->>gadget_mntns_filter_map: Lookup
+trace_lsm_move_mount->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_msg_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_msg_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_queue_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_queue_associate->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_queue_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_queue_msgctl->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_queue_msgrcv->>gadget_mntns_filter_map: Lookup
+trace_lsm_msg_queue_msgsnd->>gadget_mntns_filter_map: Lookup
+trace_lsm_netlink_send->>gadget_mntns_filter_map: Lookup
+trace_lsm_path_notify->>gadget_mntns_filter_map: Lookup
+trace_lsm_ptrace_access_check->>gadget_mntns_filter_map: Lookup
+trace_lsm_ptrace_traceme->>gadget_mntns_filter_map: Lookup
+trace_lsm_quota_on->>gadget_mntns_filter_map: Lookup
+trace_lsm_quotactl->>gadget_mntns_filter_map: Lookup
+trace_lsm_release_secctx->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_clone_mnt_opts->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_delete->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_eat_lsm_opts->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_free_mnt_opts->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_kern_mount->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_mnt_opts_compat->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_mount->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_pivotroot->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_remount->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_set_mnt_opts->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_show_options->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_statfs->>gadget_mntns_filter_map: Lookup
+trace_lsm_sb_umount->>gadget_mntns_filter_map: Lookup
+trace_lsm_secctx_to_secid->>gadget_mntns_filter_map: Lookup
+trace_lsm_secid_to_secctx->>gadget_mntns_filter_map: Lookup
+trace_lsm_sem_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_sem_associate->>gadget_mntns_filter_map: Lookup
+trace_lsm_sem_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_sem_semctl->>gadget_mntns_filter_map: Lookup
+trace_lsm_sem_semop->>gadget_mntns_filter_map: Lookup
+trace_lsm_setprocattr->>gadget_mntns_filter_map: Lookup
+trace_lsm_settime->>gadget_mntns_filter_map: Lookup
+trace_lsm_shm_alloc_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_shm_associate->>gadget_mntns_filter_map: Lookup
+trace_lsm_shm_free_security->>gadget_mntns_filter_map: Lookup
+trace_lsm_shm_shmat->>gadget_mntns_filter_map: Lookup
+trace_lsm_shm_shmctl->>gadget_mntns_filter_map: Lookup
+trace_lsm_syslog->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_alloc->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_fix_setgid->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_fix_setuid->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_free->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_getioprio->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_getpgid->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_getscheduler->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_getsecid_obj->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_getsid->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_kill->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_movememory->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_prctl->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_prlimit->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_setioprio->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_setnice->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_setpgid->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_setrlimit->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_setscheduler->>gadget_mntns_filter_map: Lookup
+trace_lsm_task_to_inode->>gadget_mntns_filter_map: Lookup
+trace_lsm_vm_enough_memory->>gadget_mntns_filter_map: Lookup
+```
diff --git a/gadgets/trace_malloc/README.mdx b/gadgets/trace_malloc/README.mdx
index 0d84a889b..3ed0b9c97 100644
--- a/gadgets/trace_malloc/README.mdx
+++ b/gadgets/trace_malloc/README.mdx
@@ -30,7 +30,7 @@ Running the gadget:
 
 ## Flags
 
-### `--print-ustack`
+### `--collect-ustack`
 
 Show user stack traces
 
diff --git a/gadgets/trace_malloc/artifacthub-pkg.yml b/gadgets/trace_malloc/artifacthub-pkg.yml
index 8953584dc..0932d5336 100644
--- a/gadgets/trace_malloc/artifacthub-pkg.yml
+++ b/gadgets/trace_malloc/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace malloc"
 category: monitoring-logging
 displayName: "trace malloc"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "use uprobe to trace malloc and free in libc.so"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_malloc/dev.md b/gadgets/trace_malloc/dev.md
new file mode 100644
index 000000000..e178d230b
--- /dev/null
+++ b/gadgets/trace_malloc/dev.md
@@ -0,0 +1,202 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_ustack[("ig_ustack")]
+memptrs[("memptrs")]
+sizes[("sizes")]
+trace_sched_process_exit -- "Delete" --> sizes
+trace_sched_process_exit -- "Delete" --> memptrs
+trace_sched_process_exit["trace_sched_process_exit"]
+trace_uprobe_aligned_alloc -- "Update" --> sizes
+trace_uprobe_aligned_alloc["trace_uprobe_aligned_alloc"]
+trace_uprobe_calloc -- "Update" --> sizes
+trace_uprobe_calloc["trace_uprobe_calloc"]
+trace_uprobe_free -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_free -- "Lookup" --> gadget_heap
+trace_uprobe_free -- "EventOutput" --> events
+trace_uprobe_free["trace_uprobe_free"]
+trace_uprobe_malloc -- "Update" --> sizes
+trace_uprobe_malloc["trace_uprobe_malloc"]
+trace_uprobe_memalign -- "Update" --> sizes
+trace_uprobe_memalign["trace_uprobe_memalign"]
+trace_uprobe_mmap -- "Update" --> sizes
+trace_uprobe_mmap["trace_uprobe_mmap"]
+trace_uprobe_munmap -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_munmap -- "Lookup" --> gadget_heap
+trace_uprobe_munmap -- "EventOutput" --> events
+trace_uprobe_munmap["trace_uprobe_munmap"]
+trace_uprobe_posix_memalign -- "Update" --> memptrs
+trace_uprobe_posix_memalign -- "Update" --> sizes
+trace_uprobe_posix_memalign["trace_uprobe_posix_memalign"]
+trace_uprobe_pvalloc -- "Update" --> sizes
+trace_uprobe_pvalloc["trace_uprobe_pvalloc"]
+trace_uprobe_realloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_realloc -- "Lookup" --> gadget_heap
+trace_uprobe_realloc -- "EventOutput" --> events
+trace_uprobe_realloc -- "Update" --> sizes
+trace_uprobe_realloc["trace_uprobe_realloc"]
+trace_uprobe_valloc -- "Update" --> sizes
+trace_uprobe_valloc["trace_uprobe_valloc"]
+trace_uretprobe_aligned_alloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_aligned_alloc -- "Lookup+Delete" --> sizes
+trace_uretprobe_aligned_alloc -- "Lookup" --> gadget_heap
+trace_uretprobe_aligned_alloc -- "EventOutput" --> events
+trace_uretprobe_aligned_alloc["trace_uretprobe_aligned_alloc"]
+trace_uretprobe_calloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_calloc -- "Lookup+Delete" --> sizes
+trace_uretprobe_calloc -- "Lookup" --> gadget_heap
+trace_uretprobe_calloc -- "EventOutput" --> events
+trace_uretprobe_calloc["trace_uretprobe_calloc"]
+trace_uretprobe_malloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_malloc -- "Lookup+Delete" --> sizes
+trace_uretprobe_malloc -- "Lookup" --> gadget_heap
+trace_uretprobe_malloc -- "EventOutput" --> events
+trace_uretprobe_malloc["trace_uretprobe_malloc"]
+trace_uretprobe_memalign -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_memalign -- "Lookup+Delete" --> sizes
+trace_uretprobe_memalign -- "Lookup" --> gadget_heap
+trace_uretprobe_memalign -- "EventOutput" --> events
+trace_uretprobe_memalign["trace_uretprobe_memalign"]
+trace_uretprobe_mmap -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_mmap -- "Lookup+Delete" --> sizes
+trace_uretprobe_mmap -- "Lookup" --> gadget_heap
+trace_uretprobe_mmap -- "EventOutput" --> events
+trace_uretprobe_mmap["trace_uretprobe_mmap"]
+trace_uretprobe_posix_memalign -- "Lookup+Delete" --> memptrs
+trace_uretprobe_posix_memalign -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_posix_memalign -- "Lookup+Delete" --> sizes
+trace_uretprobe_posix_memalign -- "Lookup" --> gadget_heap
+trace_uretprobe_posix_memalign -- "EventOutput" --> events
+trace_uretprobe_posix_memalign["trace_uretprobe_posix_memalign"]
+trace_uretprobe_pvalloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_pvalloc -- "Lookup+Delete" --> sizes
+trace_uretprobe_pvalloc -- "Lookup" --> gadget_heap
+trace_uretprobe_pvalloc -- "EventOutput" --> events
+trace_uretprobe_pvalloc["trace_uretprobe_pvalloc"]
+trace_uretprobe_realloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_realloc -- "Lookup+Delete" --> sizes
+trace_uretprobe_realloc -- "Lookup" --> gadget_heap
+trace_uretprobe_realloc -- "EventOutput" --> events
+trace_uretprobe_realloc["trace_uretprobe_realloc"]
+trace_uretprobe_valloc -- "Lookup" --> gadget_mntns_filter_map
+trace_uretprobe_valloc -- "Lookup+Delete" --> sizes
+trace_uretprobe_valloc -- "Lookup" --> gadget_heap
+trace_uretprobe_valloc -- "EventOutput" --> events
+trace_uretprobe_valloc["trace_uretprobe_valloc"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant trace_sched_process_exit
+participant trace_uprobe_aligned_alloc
+participant trace_uprobe_calloc
+participant trace_uprobe_free
+participant trace_uprobe_malloc
+participant trace_uprobe_memalign
+participant trace_uprobe_mmap
+participant trace_uprobe_munmap
+participant trace_uprobe_posix_memalign
+participant trace_uprobe_pvalloc
+participant trace_uprobe_realloc
+participant trace_uprobe_valloc
+participant trace_uretprobe_aligned_alloc
+participant trace_uretprobe_calloc
+participant trace_uretprobe_malloc
+participant trace_uretprobe_memalign
+participant trace_uretprobe_mmap
+participant trace_uretprobe_posix_memalign
+participant trace_uretprobe_pvalloc
+participant trace_uretprobe_realloc
+participant trace_uretprobe_valloc
+end
+box eBPF Maps
+participant sizes
+participant memptrs
+participant gadget_mntns_filter_map
+participant gadget_heap
+participant events
+end
+trace_sched_process_exit->>sizes: Delete
+trace_sched_process_exit->>memptrs: Delete
+trace_uprobe_aligned_alloc->>sizes: Update
+trace_uprobe_calloc->>sizes: Update
+trace_uprobe_free->>gadget_mntns_filter_map: Lookup
+trace_uprobe_free->>gadget_heap: Lookup
+trace_uprobe_free->>events: EventOutput
+trace_uprobe_malloc->>sizes: Update
+trace_uprobe_memalign->>sizes: Update
+trace_uprobe_mmap->>sizes: Update
+trace_uprobe_munmap->>gadget_mntns_filter_map: Lookup
+trace_uprobe_munmap->>gadget_heap: Lookup
+trace_uprobe_munmap->>events: EventOutput
+trace_uprobe_posix_memalign->>memptrs: Update
+trace_uprobe_posix_memalign->>sizes: Update
+trace_uprobe_pvalloc->>sizes: Update
+trace_uprobe_realloc->>gadget_mntns_filter_map: Lookup
+trace_uprobe_realloc->>gadget_heap: Lookup
+trace_uprobe_realloc->>events: EventOutput
+trace_uprobe_realloc->>sizes: Update
+trace_uprobe_valloc->>sizes: Update
+trace_uretprobe_aligned_alloc->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_aligned_alloc->>sizes: Lookup
+trace_uretprobe_aligned_alloc->>sizes: Delete
+trace_uretprobe_aligned_alloc->>gadget_heap: Lookup
+trace_uretprobe_aligned_alloc->>events: EventOutput
+trace_uretprobe_calloc->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_calloc->>sizes: Lookup
+trace_uretprobe_calloc->>sizes: Delete
+trace_uretprobe_calloc->>gadget_heap: Lookup
+trace_uretprobe_calloc->>events: EventOutput
+trace_uretprobe_malloc->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_malloc->>sizes: Lookup
+trace_uretprobe_malloc->>sizes: Delete
+trace_uretprobe_malloc->>gadget_heap: Lookup
+trace_uretprobe_malloc->>events: EventOutput
+trace_uretprobe_memalign->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_memalign->>sizes: Lookup
+trace_uretprobe_memalign->>sizes: Delete
+trace_uretprobe_memalign->>gadget_heap: Lookup
+trace_uretprobe_memalign->>events: EventOutput
+trace_uretprobe_mmap->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_mmap->>sizes: Lookup
+trace_uretprobe_mmap->>sizes: Delete
+trace_uretprobe_mmap->>gadget_heap: Lookup
+trace_uretprobe_mmap->>events: EventOutput
+trace_uretprobe_posix_memalign->>memptrs: Lookup
+trace_uretprobe_posix_memalign->>memptrs: Delete
+trace_uretprobe_posix_memalign->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_posix_memalign->>sizes: Lookup
+trace_uretprobe_posix_memalign->>sizes: Delete
+trace_uretprobe_posix_memalign->>gadget_heap: Lookup
+trace_uretprobe_posix_memalign->>events: EventOutput
+trace_uretprobe_pvalloc->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_pvalloc->>sizes: Lookup
+trace_uretprobe_pvalloc->>sizes: Delete
+trace_uretprobe_pvalloc->>gadget_heap: Lookup
+trace_uretprobe_pvalloc->>events: EventOutput
+trace_uretprobe_realloc->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_realloc->>sizes: Lookup
+trace_uretprobe_realloc->>sizes: Delete
+trace_uretprobe_realloc->>gadget_heap: Lookup
+trace_uretprobe_realloc->>events: EventOutput
+trace_uretprobe_valloc->>gadget_mntns_filter_map: Lookup
+trace_uretprobe_valloc->>sizes: Lookup
+trace_uretprobe_valloc->>sizes: Delete
+trace_uretprobe_valloc->>gadget_heap: Lookup
+trace_uretprobe_valloc->>events: EventOutput
+```
diff --git a/gadgets/trace_malloc/gadget.yaml b/gadgets/trace_malloc/gadget.yaml
index c3f76c769..7406143ee 100644
--- a/gadgets/trace_malloc/gadget.yaml
+++ b/gadgets/trace_malloc/gadget.yaml
@@ -21,17 +21,3 @@ datasources:
         annotations:
           description: size of malloc operations
           columns.width: 20
-      ustack_raw:
-        annotations:
-          columns.hidden: true
-      ustack:
-        annotations:
-          description: User stack
-          columns.hidden: true
-          columns.width: 20
-params:
-  ebpf:
-    print_ustack:
-      key: print-ustack
-      defaultValue: "false"
-      description: Show user stack traces
diff --git a/gadgets/trace_malloc/program.bpf.c b/gadgets/trace_malloc/program.bpf.c
index 4157c6078..9198ee21d 100644
--- a/gadgets/trace_malloc/program.bpf.c
+++ b/gadgets/trace_malloc/program.bpf.c
@@ -33,7 +33,7 @@ struct event {
 	gadget_timestamp timestamp_raw;
 	struct gadget_process proc;
 
-	struct gadget_user_stack ustack_raw;
+	struct gadget_user_stack ustack;
 
 	enum memop operation_raw;
 	__u64 addr;
@@ -75,9 +75,6 @@ int trace_sched_process_exit(void *ctx)
 GADGET_TRACER_MAP(events, 1024 * 256);
 GADGET_TRACER(malloc, events, event);
 
-const volatile bool print_ustack = false;
-GADGET_PARAM(print_ustack);
-
 static __always_inline int gen_alloc_enter(size_t size)
 {
 	u32 tid;
@@ -118,8 +115,7 @@ static __always_inline int gen_alloc_exit(struct pt_regs *ctx,
 	event->size = size;
 	event->timestamp_raw = bpf_ktime_get_ns();
 
-	if (print_ustack)
-		gadget_get_user_stack(ctx, &event->ustack_raw);
+	gadget_get_user_stack(ctx, &event->ustack);
 
 	gadget_submit_buf(ctx, &events, event, sizeof(*event));
 
@@ -144,8 +140,7 @@ static __always_inline int gen_free_enter(struct pt_regs *ctx,
 	event->size = 0;
 	event->timestamp_raw = bpf_ktime_get_ns();
 
-	if (print_ustack)
-		gadget_get_user_stack(ctx, &event->ustack_raw);
+	gadget_get_user_stack(ctx, &event->ustack);
 
 	gadget_submit_buf(ctx, &events, event, sizeof(*event));
 
diff --git a/gadgets/trace_mount/artifacthub-pkg.yml b/gadgets/trace_mount/artifacthub-pkg.yml
index 38f47c4bb..6c4a66b4f 100644
--- a/gadgets/trace_mount/artifacthub-pkg.yml
+++ b/gadgets/trace_mount/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace mount"
 category: monitoring-logging
 displayName: "trace mount"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace mount syscalls"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_mount/dev.md b/gadgets/trace_mount/dev.md
new file mode 100644
index 000000000..ab24d1a03
--- /dev/null
+++ b/gadgets/trace_mount/dev.md
@@ -0,0 +1,62 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+args[("args")]
+bufs[("bufs")]
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_mount_e -- "Lookup" --> gadget_mntns_filter_map
+ig_mount_e -- "Update" --> args
+ig_mount_e["ig_mount_e"]
+ig_mount_x -- "Lookup+Delete" --> args
+ig_mount_x -- "Lookup" --> gadget_heap
+ig_mount_x -- "EventOutput" --> events
+ig_mount_x["ig_mount_x"]
+ig_umount_e -- "Lookup" --> gadget_mntns_filter_map
+ig_umount_e -- "Update" --> args
+ig_umount_e["ig_umount_e"]
+ig_umount_x -- "Lookup+Delete" --> args
+ig_umount_x -- "Lookup" --> gadget_heap
+ig_umount_x -- "EventOutput" --> events
+ig_umount_x["ig_umount_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_mount_e
+participant ig_mount_x
+participant ig_umount_e
+participant ig_umount_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant args
+participant gadget_heap
+participant events
+end
+ig_mount_e->>gadget_mntns_filter_map: Lookup
+ig_mount_e->>args: Update
+ig_mount_x->>args: Lookup
+ig_mount_x->>gadget_heap: Lookup
+ig_mount_x->>events: EventOutput
+ig_mount_x->>args: Delete
+ig_umount_e->>gadget_mntns_filter_map: Lookup
+ig_umount_e->>args: Update
+ig_umount_x->>args: Lookup
+ig_umount_x->>gadget_heap: Lookup
+ig_umount_x->>events: EventOutput
+ig_umount_x->>args: Delete
+```
diff --git a/gadgets/trace_mount/go/go.mod b/gadgets/trace_mount/go/go.mod
index 92f7c4556..890581e06 100644
--- a/gadgets/trace_mount/go/go.mod
+++ b/gadgets/trace_mount/go/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/trace_mount/test/integration/trace_mount_test.go b/gadgets/trace_mount/test/integration/trace_mount_test.go
index 904881bd6..9c7e50244 100644
--- a/gadgets/trace_mount/test/integration/trace_mount_test.go
+++ b/gadgets/trace_mount/test/integration/trace_mount_test.go
@@ -53,7 +53,7 @@ func TestTraceMount(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-mount"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/trace_oomkill/artifacthub-pkg.yml b/gadgets/trace_oomkill/artifacthub-pkg.yml
index 12dc7327c..490813f86 100644
--- a/gadgets/trace_oomkill/artifacthub-pkg.yml
+++ b/gadgets/trace_oomkill/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace oomkill"
 category: monitoring-logging
 displayName: "trace oomkill"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace OOM killer"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_oomkill/dev.md b/gadgets/trace_oomkill/dev.md
new file mode 100644
index 000000000..8559c0287
--- /dev/null
+++ b/gadgets/trace_oomkill/dev.md
@@ -0,0 +1,37 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_oom_kill -- "Lookup" --> gadget_mntns_filter_map
+ig_oom_kill -- "Lookup" --> gadget_heap
+ig_oom_kill -- "EventOutput" --> events
+ig_oom_kill["ig_oom_kill"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_oom_kill
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant gadget_heap
+participant events
+end
+ig_oom_kill->>gadget_mntns_filter_map: Lookup
+ig_oom_kill->>gadget_heap: Lookup
+ig_oom_kill->>events: EventOutput
+```
diff --git a/gadgets/trace_oomkill/program.bpf.c b/gadgets/trace_oomkill/program.bpf.c
index ffad1bd22..3ba92c334 100644
--- a/gadgets/trace_oomkill/program.bpf.c
+++ b/gadgets/trace_oomkill/program.bpf.c
@@ -39,7 +39,6 @@ int BPF_KPROBE(ig_oom_kill, struct oom_control *oc, const char *message)
 {
 	struct event *event;
 	u64 mntns_id;
-	u64 uid_gid = bpf_get_current_uid_gid();
 
 	mntns_id = (u64)BPF_CORE_READ(oc, chosen, nsproxy, mnt_ns, ns.inum);
 
diff --git a/gadgets/trace_oomkill/test/integration/trace_oomkill_test.go b/gadgets/trace_oomkill/test/integration/trace_oomkill_test.go
index c694729bb..2fd6b8286 100644
--- a/gadgets/trace_oomkill/test/integration/trace_oomkill_test.go
+++ b/gadgets/trace_oomkill/test/integration/trace_oomkill_test.go
@@ -49,7 +49,7 @@ func TestTraceOomKill(t *testing.T) {
 
 	containerFactory := &containers.K8sManager{}
 	containerName := "test-trace-oomkill"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/trace_open/README.mdx b/gadgets/trace_open/README.mdx
index 6ab825b3a..32e2f7276 100644
--- a/gadgets/trace_open/README.mdx
+++ b/gadgets/trace_open/README.mdx
@@ -29,6 +29,12 @@ $ sudo ig run ghcr.io/inspektor-gadget/gadget/trace_open:%IG_TAG% [flags]
 </Tabs>
 ## Flags
 
+### `--collect-ustack`
+
+Collect user stack traces
+
+Default value: "false"
+
 ### `--failed`
 
 Show only failed events
diff --git a/gadgets/trace_open/artifacthub-pkg.yml b/gadgets/trace_open/artifacthub-pkg.yml
index 4766d0b81..25da12364 100644
--- a/gadgets/trace_open/artifacthub-pkg.yml
+++ b/gadgets/trace_open/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace open"
 category: monitoring-logging
 displayName: "trace open"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace open files"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_open/dev.md b/gadgets/trace_open/dev.md
new file mode 100644
index 000000000..d9c856818
--- /dev/null
+++ b/gadgets/trace_open/dev.md
@@ -0,0 +1,62 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ig_ustack[("ig_ustack")]
+start[("start")]
+ig_open_e -- "Lookup" --> gadget_mntns_filter_map
+ig_open_e -- "Update" --> start
+ig_open_e["ig_open_e"]
+ig_open_x -- "Lookup+Delete" --> start
+ig_open_x -- "Lookup" --> gadget_heap
+ig_open_x -- "EventOutput" --> events
+ig_open_x["ig_open_x"]
+ig_openat_e -- "Lookup" --> gadget_mntns_filter_map
+ig_openat_e -- "Update" --> start
+ig_openat_e["ig_openat_e"]
+ig_openat_x -- "Lookup+Delete" --> start
+ig_openat_x -- "Lookup" --> gadget_heap
+ig_openat_x -- "EventOutput" --> events
+ig_openat_x["ig_openat_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_open_e
+participant ig_open_x
+participant ig_openat_e
+participant ig_openat_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant start
+participant gadget_heap
+participant events
+end
+ig_open_e->>gadget_mntns_filter_map: Lookup
+ig_open_e->>start: Update
+ig_open_x->>start: Lookup
+ig_open_x->>gadget_heap: Lookup
+ig_open_x->>events: EventOutput
+ig_open_x->>start: Delete
+ig_openat_e->>gadget_mntns_filter_map: Lookup
+ig_openat_e->>start: Update
+ig_openat_x->>start: Lookup
+ig_openat_x->>gadget_heap: Lookup
+ig_openat_x->>events: EventOutput
+ig_openat_x->>start: Delete
+```
diff --git a/gadgets/trace_open/go/go.mod b/gadgets/trace_open/go/go.mod
index 92f7c4556..890581e06 100644
--- a/gadgets/trace_open/go/go.mod
+++ b/gadgets/trace_open/go/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/gadgets/trace_open/program.bpf.c b/gadgets/trace_open/program.bpf.c
index ad9f58664..9c5e7625b 100644
--- a/gadgets/trace_open/program.bpf.c
+++ b/gadgets/trace_open/program.bpf.c
@@ -11,6 +11,7 @@
 #include <gadget/filter.h>
 #include <gadget/macros.h>
 #include <gadget/types.h>
+#include <gadget/user_stack_map.h>
 
 #define TASK_RUNNING 0
 #define NAME_MAX 255
@@ -29,6 +30,7 @@ struct event {
 	__u32 fd;
 	int flags_raw;
 	__u16 mode_raw;
+	struct gadget_user_stack ustack;
 	char fname[NAME_MAX];
 };
 
@@ -112,6 +114,7 @@ static __always_inline int trace_exit(struct syscall_trace_exit *ctx)
 
 	/* event data */
 	gadget_process_populate(&event->proc);
+	gadget_get_user_stack(ctx, &event->ustack);
 
 	bpf_probe_read_user_str(&event->fname, sizeof(event->fname), ap->fname);
 	event->flags_raw = ap->flags;
diff --git a/gadgets/trace_open/test/integration/trace_open_test.go b/gadgets/trace_open/test/integration/trace_open_test.go
index bb3a05004..ae080e9cc 100644
--- a/gadgets/trace_open/test/integration/trace_open_test.go
+++ b/gadgets/trace_open/test/integration/trace_open_test.go
@@ -48,7 +48,7 @@ func TestTraceOpen(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-open"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/trace_signal/artifacthub-pkg.yml b/gadgets/trace_signal/artifacthub-pkg.yml
index 813b54bed..0dde3b3c3 100644
--- a/gadgets/trace_signal/artifacthub-pkg.yml
+++ b/gadgets/trace_signal/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace signal"
 category: monitoring-logging
 displayName: "trace signal"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace signal"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_signal/dev.md b/gadgets/trace_signal/dev.md
new file mode 100644
index 000000000..8b15bb028
--- /dev/null
+++ b/gadgets/trace_signal/dev.md
@@ -0,0 +1,84 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+values[("values")]
+ig_sig_generate -- "Lookup" --> gadget_mntns_filter_map
+ig_sig_generate -- "Lookup" --> gadget_heap
+ig_sig_generate -- "EventOutput" --> events
+ig_sig_generate["ig_sig_generate"]
+ig_sig_kill_e -- "Lookup" --> gadget_mntns_filter_map
+ig_sig_kill_e -- "Update" --> values
+ig_sig_kill_e["ig_sig_kill_e"]
+ig_sig_kill_x -- "Lookup+Delete" --> values
+ig_sig_kill_x -- "Lookup" --> gadget_heap
+ig_sig_kill_x -- "EventOutput" --> events
+ig_sig_kill_x["ig_sig_kill_x"]
+ig_sig_tgkill_e -- "Lookup" --> gadget_mntns_filter_map
+ig_sig_tgkill_e -- "Update" --> values
+ig_sig_tgkill_e["ig_sig_tgkill_e"]
+ig_sig_tgkill_x -- "Lookup+Delete" --> values
+ig_sig_tgkill_x -- "Lookup" --> gadget_heap
+ig_sig_tgkill_x -- "EventOutput" --> events
+ig_sig_tgkill_x["ig_sig_tgkill_x"]
+ig_sig_tkill_e -- "Lookup" --> gadget_mntns_filter_map
+ig_sig_tkill_e -- "Update" --> values
+ig_sig_tkill_e["ig_sig_tkill_e"]
+ig_sig_tkill_x -- "Lookup+Delete" --> values
+ig_sig_tkill_x -- "Lookup" --> gadget_heap
+ig_sig_tkill_x -- "EventOutput" --> events
+ig_sig_tkill_x["ig_sig_tkill_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_sig_generate
+participant ig_sig_kill_e
+participant ig_sig_kill_x
+participant ig_sig_tgkill_e
+participant ig_sig_tgkill_x
+participant ig_sig_tkill_e
+participant ig_sig_tkill_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant gadget_heap
+participant events
+participant values
+end
+ig_sig_generate->>gadget_mntns_filter_map: Lookup
+ig_sig_generate->>gadget_heap: Lookup
+ig_sig_generate->>events: EventOutput
+ig_sig_kill_e->>gadget_mntns_filter_map: Lookup
+ig_sig_kill_e->>values: Update
+ig_sig_kill_x->>values: Lookup
+ig_sig_kill_x->>gadget_heap: Lookup
+ig_sig_kill_x->>events: EventOutput
+ig_sig_kill_x->>values: Delete
+ig_sig_tgkill_e->>gadget_mntns_filter_map: Lookup
+ig_sig_tgkill_e->>values: Update
+ig_sig_tgkill_x->>values: Lookup
+ig_sig_tgkill_x->>gadget_heap: Lookup
+ig_sig_tgkill_x->>events: EventOutput
+ig_sig_tgkill_x->>values: Delete
+ig_sig_tkill_e->>gadget_mntns_filter_map: Lookup
+ig_sig_tkill_e->>values: Update
+ig_sig_tkill_x->>values: Lookup
+ig_sig_tkill_x->>gadget_heap: Lookup
+ig_sig_tkill_x->>events: EventOutput
+ig_sig_tkill_x->>values: Delete
+```
diff --git a/gadgets/trace_signal/test/integration/trace_signal_test.go b/gadgets/trace_signal/test/integration/trace_signal_test.go
index 6ad396457..d187b1d52 100644
--- a/gadgets/trace_signal/test/integration/trace_signal_test.go
+++ b/gadgets/trace_signal/test/integration/trace_signal_test.go
@@ -46,7 +46,7 @@ func TestTraceSignal(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-signal"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/trace_sni/artifacthub-pkg.yml b/gadgets/trace_sni/artifacthub-pkg.yml
index 2856d4c6a..2c25cd04c 100644
--- a/gadgets/trace_sni/artifacthub-pkg.yml
+++ b/gadgets/trace_sni/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace sni"
 category: monitoring-logging
 displayName: "trace sni"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace sni"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_sni/dev.md b/gadgets/trace_sni/dev.md
new file mode 100644
index 000000000..7eae1906a
--- /dev/null
+++ b/gadgets/trace_sni/dev.md
@@ -0,0 +1,37 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+gadget_sockets[("gadget_sockets")]
+ig_trace_sni -- "Lookup" --> gadget_sockets
+ig_trace_sni -- "Lookup" --> gadget_mntns_filter_map
+ig_trace_sni -- "EventOutput" --> events
+ig_trace_sni["ig_trace_sni"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_trace_sni
+end
+box eBPF Maps
+participant gadget_sockets
+participant gadget_mntns_filter_map
+participant events
+end
+ig_trace_sni->>gadget_sockets: Lookup
+ig_trace_sni->>gadget_mntns_filter_map: Lookup
+ig_trace_sni->>events: EventOutput
+```
diff --git a/gadgets/trace_sni/program.bpf.c b/gadgets/trace_sni/program.bpf.c
index 732231797..e9ba3272a 100644
--- a/gadgets/trace_sni/program.bpf.c
+++ b/gadgets/trace_sni/program.bpf.c
@@ -13,12 +13,12 @@
 
 #define GADGET_NO_BUF_RESERVE
 #define MAX_EVENT_SIZE 512
+#define GADGET_TYPE_NETWORKING
 #include <gadget/macros.h>
 #include <gadget/buffer.h>
 #include <gadget/types.h>
-
-#define GADGET_TYPE_NETWORKING
 #include <gadget/sockets-map.h>
+#include <gadget/filter.h>
 
 #define TLS_CONTENT_TYPE_HANDSHAKE 0x16
 #define TLS_HANDSHAKE_TYPE_CLIENT_HELLO 0x1
@@ -208,6 +208,10 @@ int ig_trace_sni(struct __sk_buff *skb)
 	if (read == 0)
 		return 0;
 
+	struct sockets_value *skb_val = gadget_socket_lookup(skb);
+	if (gadget_should_discard_data_by_skb(skb_val))
+		return 0;
+
 	struct event_t event = {
 		0,
 	};
@@ -221,8 +225,7 @@ int ig_trace_sni(struct __sk_buff *skb)
 	event.timestamp_raw = bpf_ktime_get_boot_ns();
 
 	// Enrich event with process metadata
-	gadget_process_populate_from_socket(gadget_socket_lookup(skb),
-					    &event.proc);
+	gadget_process_populate_from_socket(skb_val, &event.proc);
 
 	gadget_output_buf(skb, &events, &event, sizeof(event));
 
diff --git a/gadgets/trace_sni/test/integration/trace_sni_test.go b/gadgets/trace_sni/test/integration/trace_sni_test.go
index d2162dfc4..78d48e224 100644
--- a/gadgets/trace_sni/test/integration/trace_sni_test.go
+++ b/gadgets/trace_sni/test/integration/trace_sni_test.go
@@ -49,7 +49,7 @@ func TestTraceSNI(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-sni"
-	containerImage := "docker.io/library/busybox:latest"
+	containerImage := gadgettesting.BusyBoxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
diff --git a/gadgets/trace_ssl/artifacthub-pkg.yml b/gadgets/trace_ssl/artifacthub-pkg.yml
index 299dee2cf..861a03e17 100644
--- a/gadgets/trace_ssl/artifacthub-pkg.yml
+++ b/gadgets/trace_ssl/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace ssl"
 category: monitoring-logging
 displayName: "trace ssl"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "use uprobe to capture data on read/recv or write/send functions of OpenSSL, GnuTLS, NSS and Libcrypto"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_ssl/dev.md b/gadgets/trace_ssl/dev.md
new file mode 100644
index 000000000..0c6c7e709
--- /dev/null
+++ b/gadgets/trace_ssl/dev.md
@@ -0,0 +1,309 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+crypto_context[("crypto_context")]
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+ssl_context[("ssl_context")]
+trace_sched_process_exit -- "Delete" --> ssl_context
+trace_sched_process_exit -- "Delete" --> crypto_context
+trace_sched_process_exit["trace_sched_process_exit"]
+trace_uprobe_libcrypto_RSA_sign -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_RSA_sign -- "Update" --> crypto_context
+trace_uprobe_libcrypto_RSA_sign["trace_uprobe_libcrypto_RSA_sign"]
+trace_uprobe_libcrypto_RSA_verify -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_RSA_verify -- "Update" --> crypto_context
+trace_uprobe_libcrypto_RSA_verify["trace_uprobe_libcrypto_RSA_verify"]
+trace_uprobe_libcrypto_ossl_ecdh_compute_key -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_ossl_ecdh_compute_key -- "Update" --> crypto_context
+trace_uprobe_libcrypto_ossl_ecdh_compute_key["trace_uprobe_libcrypto_ossl_ecdh_compute_key"]
+trace_uprobe_libcrypto_ossl_ecdsa_sign -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_ossl_ecdsa_sign -- "Update" --> crypto_context
+trace_uprobe_libcrypto_ossl_ecdsa_sign["trace_uprobe_libcrypto_ossl_ecdsa_sign"]
+trace_uprobe_libcrypto_ossl_ecdsa_verify -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_ossl_ecdsa_verify -- "Update" --> crypto_context
+trace_uprobe_libcrypto_ossl_ecdsa_verify["trace_uprobe_libcrypto_ossl_ecdsa_verify"]
+trace_uprobe_libcrypto_rsa_ossl_private_decrypt -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_rsa_ossl_private_decrypt -- "Update" --> crypto_context
+trace_uprobe_libcrypto_rsa_ossl_private_decrypt["trace_uprobe_libcrypto_rsa_ossl_private_decrypt"]
+trace_uprobe_libcrypto_rsa_ossl_private_encrypt -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_rsa_ossl_private_encrypt -- "Update" --> crypto_context
+trace_uprobe_libcrypto_rsa_ossl_private_encrypt["trace_uprobe_libcrypto_rsa_ossl_private_encrypt"]
+trace_uprobe_libcrypto_rsa_ossl_public_decrypt -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_rsa_ossl_public_decrypt -- "Update" --> crypto_context
+trace_uprobe_libcrypto_rsa_ossl_public_decrypt["trace_uprobe_libcrypto_rsa_ossl_public_decrypt"]
+trace_uprobe_libcrypto_rsa_ossl_public_encrypt -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libcrypto_rsa_ossl_public_encrypt -- "Update" --> crypto_context
+trace_uprobe_libcrypto_rsa_ossl_public_encrypt["trace_uprobe_libcrypto_rsa_ossl_public_encrypt"]
+trace_uprobe_libgnutls_gnutls_record_recv -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libgnutls_gnutls_record_recv -- "Update" --> ssl_context
+trace_uprobe_libgnutls_gnutls_record_recv["trace_uprobe_libgnutls_gnutls_record_recv"]
+trace_uprobe_libgnutls_gnutls_record_send -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libgnutls_gnutls_record_send -- "Update" --> ssl_context
+trace_uprobe_libgnutls_gnutls_record_send["trace_uprobe_libgnutls_gnutls_record_send"]
+trace_uprobe_libnss_PR_Read -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libnss_PR_Read -- "Update" --> ssl_context
+trace_uprobe_libnss_PR_Read["trace_uprobe_libnss_PR_Read"]
+trace_uprobe_libnss_PR_Recv -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libnss_PR_Recv -- "Update" --> ssl_context
+trace_uprobe_libnss_PR_Recv["trace_uprobe_libnss_PR_Recv"]
+trace_uprobe_libnss_PR_Send -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libnss_PR_Send -- "Update" --> ssl_context
+trace_uprobe_libnss_PR_Send["trace_uprobe_libnss_PR_Send"]
+trace_uprobe_libnss_PR_Write -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libnss_PR_Write -- "Update" --> ssl_context
+trace_uprobe_libnss_PR_Write["trace_uprobe_libnss_PR_Write"]
+trace_uprobe_libssl_SSL_do_handshake -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libssl_SSL_do_handshake -- "Update" --> ssl_context
+trace_uprobe_libssl_SSL_do_handshake["trace_uprobe_libssl_SSL_do_handshake"]
+trace_uprobe_libssl_SSL_read -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libssl_SSL_read -- "Update" --> ssl_context
+trace_uprobe_libssl_SSL_read["trace_uprobe_libssl_SSL_read"]
+trace_uprobe_libssl_SSL_write -- "Lookup" --> gadget_mntns_filter_map
+trace_uprobe_libssl_SSL_write -- "Update" --> ssl_context
+trace_uprobe_libssl_SSL_write["trace_uprobe_libssl_SSL_write"]
+trace_uretprobe_libcrypto_RSA_sign -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_RSA_sign -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_RSA_sign -- "EventOutput" --> events
+trace_uretprobe_libcrypto_RSA_sign["trace_uretprobe_libcrypto_RSA_sign"]
+trace_uretprobe_libcrypto_RSA_verify -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_RSA_verify -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_RSA_verify -- "EventOutput" --> events
+trace_uretprobe_libcrypto_RSA_verify["trace_uretprobe_libcrypto_RSA_verify"]
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key -- "EventOutput" --> events
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key["trace_uretprobe_libcrypto_ossl_ecdh_compute_key"]
+trace_uretprobe_libcrypto_ossl_ecdsa_sign -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_ossl_ecdsa_sign -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_ossl_ecdsa_sign -- "EventOutput" --> events
+trace_uretprobe_libcrypto_ossl_ecdsa_sign["trace_uretprobe_libcrypto_ossl_ecdsa_sign"]
+trace_uretprobe_libcrypto_ossl_ecdsa_verify -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_ossl_ecdsa_verify -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_ossl_ecdsa_verify -- "EventOutput" --> events
+trace_uretprobe_libcrypto_ossl_ecdsa_verify["trace_uretprobe_libcrypto_ossl_ecdsa_verify"]
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt -- "EventOutput" --> events
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt["trace_uretprobe_libcrypto_rsa_ossl_private_decrypt"]
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt -- "EventOutput" --> events
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt["trace_uretprobe_libcrypto_rsa_ossl_private_encrypt"]
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt -- "EventOutput" --> events
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt["trace_uretprobe_libcrypto_rsa_ossl_public_decrypt"]
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt -- "Lookup+Delete" --> crypto_context
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt -- "Lookup" --> gadget_heap
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt -- "EventOutput" --> events
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt["trace_uretprobe_libcrypto_rsa_ossl_public_encrypt"]
+trace_uretprobe_libgnutls_gnutls_record_recv -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libgnutls_gnutls_record_recv -- "Lookup" --> gadget_heap
+trace_uretprobe_libgnutls_gnutls_record_recv -- "EventOutput" --> events
+trace_uretprobe_libgnutls_gnutls_record_recv["trace_uretprobe_libgnutls_gnutls_record_recv"]
+trace_uretprobe_libgnutls_gnutls_record_send -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libgnutls_gnutls_record_send -- "Lookup" --> gadget_heap
+trace_uretprobe_libgnutls_gnutls_record_send -- "EventOutput" --> events
+trace_uretprobe_libgnutls_gnutls_record_send["trace_uretprobe_libgnutls_gnutls_record_send"]
+trace_uretprobe_libnss_PR_Read -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libnss_PR_Read -- "Lookup" --> gadget_heap
+trace_uretprobe_libnss_PR_Read -- "EventOutput" --> events
+trace_uretprobe_libnss_PR_Read["trace_uretprobe_libnss_PR_Read"]
+trace_uretprobe_libnss_PR_Recv -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libnss_PR_Recv -- "Lookup" --> gadget_heap
+trace_uretprobe_libnss_PR_Recv -- "EventOutput" --> events
+trace_uretprobe_libnss_PR_Recv["trace_uretprobe_libnss_PR_Recv"]
+trace_uretprobe_libnss_PR_Send -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libnss_PR_Send -- "Lookup" --> gadget_heap
+trace_uretprobe_libnss_PR_Send -- "EventOutput" --> events
+trace_uretprobe_libnss_PR_Send["trace_uretprobe_libnss_PR_Send"]
+trace_uretprobe_libnss_PR_Write -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libnss_PR_Write -- "Lookup" --> gadget_heap
+trace_uretprobe_libnss_PR_Write -- "EventOutput" --> events
+trace_uretprobe_libnss_PR_Write["trace_uretprobe_libnss_PR_Write"]
+trace_uretprobe_libssl_SSL_do_handshake -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libssl_SSL_do_handshake -- "Lookup" --> gadget_heap
+trace_uretprobe_libssl_SSL_do_handshake -- "EventOutput" --> events
+trace_uretprobe_libssl_SSL_do_handshake["trace_uretprobe_libssl_SSL_do_handshake"]
+trace_uretprobe_libssl_SSL_read -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libssl_SSL_read -- "Lookup" --> gadget_heap
+trace_uretprobe_libssl_SSL_read -- "EventOutput" --> events
+trace_uretprobe_libssl_SSL_read["trace_uretprobe_libssl_SSL_read"]
+trace_uretprobe_libssl_SSL_write -- "Lookup+Delete" --> ssl_context
+trace_uretprobe_libssl_SSL_write -- "Lookup" --> gadget_heap
+trace_uretprobe_libssl_SSL_write -- "EventOutput" --> events
+trace_uretprobe_libssl_SSL_write["trace_uretprobe_libssl_SSL_write"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant trace_sched_process_exit
+participant trace_uprobe_libcrypto_RSA_sign
+participant trace_uprobe_libcrypto_RSA_verify
+participant trace_uprobe_libcrypto_ossl_ecdh_compute_key
+participant trace_uprobe_libcrypto_ossl_ecdsa_sign
+participant trace_uprobe_libcrypto_ossl_ecdsa_verify
+participant trace_uprobe_libcrypto_rsa_ossl_private_decrypt
+participant trace_uprobe_libcrypto_rsa_ossl_private_encrypt
+participant trace_uprobe_libcrypto_rsa_ossl_public_decrypt
+participant trace_uprobe_libcrypto_rsa_ossl_public_encrypt
+participant trace_uprobe_libgnutls_gnutls_record_recv
+participant trace_uprobe_libgnutls_gnutls_record_send
+participant trace_uprobe_libnss_PR_Read
+participant trace_uprobe_libnss_PR_Recv
+participant trace_uprobe_libnss_PR_Send
+participant trace_uprobe_libnss_PR_Write
+participant trace_uprobe_libssl_SSL_do_handshake
+participant trace_uprobe_libssl_SSL_read
+participant trace_uprobe_libssl_SSL_write
+participant trace_uretprobe_libcrypto_RSA_sign
+participant trace_uretprobe_libcrypto_RSA_verify
+participant trace_uretprobe_libcrypto_ossl_ecdh_compute_key
+participant trace_uretprobe_libcrypto_ossl_ecdsa_sign
+participant trace_uretprobe_libcrypto_ossl_ecdsa_verify
+participant trace_uretprobe_libcrypto_rsa_ossl_private_decrypt
+participant trace_uretprobe_libcrypto_rsa_ossl_private_encrypt
+participant trace_uretprobe_libcrypto_rsa_ossl_public_decrypt
+participant trace_uretprobe_libcrypto_rsa_ossl_public_encrypt
+participant trace_uretprobe_libgnutls_gnutls_record_recv
+participant trace_uretprobe_libgnutls_gnutls_record_send
+participant trace_uretprobe_libnss_PR_Read
+participant trace_uretprobe_libnss_PR_Recv
+participant trace_uretprobe_libnss_PR_Send
+participant trace_uretprobe_libnss_PR_Write
+participant trace_uretprobe_libssl_SSL_do_handshake
+participant trace_uretprobe_libssl_SSL_read
+participant trace_uretprobe_libssl_SSL_write
+end
+box eBPF Maps
+participant ssl_context
+participant crypto_context
+participant gadget_mntns_filter_map
+participant gadget_heap
+participant events
+end
+trace_sched_process_exit->>ssl_context: Delete
+trace_sched_process_exit->>crypto_context: Delete
+trace_uprobe_libcrypto_RSA_sign->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_RSA_sign->>crypto_context: Update
+trace_uprobe_libcrypto_RSA_verify->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_RSA_verify->>crypto_context: Update
+trace_uprobe_libcrypto_ossl_ecdh_compute_key->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_ossl_ecdh_compute_key->>crypto_context: Update
+trace_uprobe_libcrypto_ossl_ecdsa_sign->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_ossl_ecdsa_sign->>crypto_context: Update
+trace_uprobe_libcrypto_ossl_ecdsa_verify->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_ossl_ecdsa_verify->>crypto_context: Update
+trace_uprobe_libcrypto_rsa_ossl_private_decrypt->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_rsa_ossl_private_decrypt->>crypto_context: Update
+trace_uprobe_libcrypto_rsa_ossl_private_encrypt->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_rsa_ossl_private_encrypt->>crypto_context: Update
+trace_uprobe_libcrypto_rsa_ossl_public_decrypt->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_rsa_ossl_public_decrypt->>crypto_context: Update
+trace_uprobe_libcrypto_rsa_ossl_public_encrypt->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libcrypto_rsa_ossl_public_encrypt->>crypto_context: Update
+trace_uprobe_libgnutls_gnutls_record_recv->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libgnutls_gnutls_record_recv->>ssl_context: Update
+trace_uprobe_libgnutls_gnutls_record_send->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libgnutls_gnutls_record_send->>ssl_context: Update
+trace_uprobe_libnss_PR_Read->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libnss_PR_Read->>ssl_context: Update
+trace_uprobe_libnss_PR_Recv->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libnss_PR_Recv->>ssl_context: Update
+trace_uprobe_libnss_PR_Send->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libnss_PR_Send->>ssl_context: Update
+trace_uprobe_libnss_PR_Write->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libnss_PR_Write->>ssl_context: Update
+trace_uprobe_libssl_SSL_do_handshake->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libssl_SSL_do_handshake->>ssl_context: Update
+trace_uprobe_libssl_SSL_read->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libssl_SSL_read->>ssl_context: Update
+trace_uprobe_libssl_SSL_write->>gadget_mntns_filter_map: Lookup
+trace_uprobe_libssl_SSL_write->>ssl_context: Update
+trace_uretprobe_libcrypto_RSA_sign->>crypto_context: Lookup
+trace_uretprobe_libcrypto_RSA_sign->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_RSA_sign->>events: EventOutput
+trace_uretprobe_libcrypto_RSA_sign->>crypto_context: Delete
+trace_uretprobe_libcrypto_RSA_verify->>crypto_context: Lookup
+trace_uretprobe_libcrypto_RSA_verify->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_RSA_verify->>events: EventOutput
+trace_uretprobe_libcrypto_RSA_verify->>crypto_context: Delete
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key->>crypto_context: Lookup
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key->>events: EventOutput
+trace_uretprobe_libcrypto_ossl_ecdh_compute_key->>crypto_context: Delete
+trace_uretprobe_libcrypto_ossl_ecdsa_sign->>crypto_context: Lookup
+trace_uretprobe_libcrypto_ossl_ecdsa_sign->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_ossl_ecdsa_sign->>events: EventOutput
+trace_uretprobe_libcrypto_ossl_ecdsa_sign->>crypto_context: Delete
+trace_uretprobe_libcrypto_ossl_ecdsa_verify->>crypto_context: Lookup
+trace_uretprobe_libcrypto_ossl_ecdsa_verify->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_ossl_ecdsa_verify->>events: EventOutput
+trace_uretprobe_libcrypto_ossl_ecdsa_verify->>crypto_context: Delete
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt->>crypto_context: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt->>events: EventOutput
+trace_uretprobe_libcrypto_rsa_ossl_private_decrypt->>crypto_context: Delete
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt->>crypto_context: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt->>events: EventOutput
+trace_uretprobe_libcrypto_rsa_ossl_private_encrypt->>crypto_context: Delete
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt->>crypto_context: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt->>events: EventOutput
+trace_uretprobe_libcrypto_rsa_ossl_public_decrypt->>crypto_context: Delete
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt->>crypto_context: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt->>gadget_heap: Lookup
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt->>events: EventOutput
+trace_uretprobe_libcrypto_rsa_ossl_public_encrypt->>crypto_context: Delete
+trace_uretprobe_libgnutls_gnutls_record_recv->>ssl_context: Lookup
+trace_uretprobe_libgnutls_gnutls_record_recv->>gadget_heap: Lookup
+trace_uretprobe_libgnutls_gnutls_record_recv->>events: EventOutput
+trace_uretprobe_libgnutls_gnutls_record_recv->>ssl_context: Delete
+trace_uretprobe_libgnutls_gnutls_record_send->>ssl_context: Lookup
+trace_uretprobe_libgnutls_gnutls_record_send->>gadget_heap: Lookup
+trace_uretprobe_libgnutls_gnutls_record_send->>events: EventOutput
+trace_uretprobe_libgnutls_gnutls_record_send->>ssl_context: Delete
+trace_uretprobe_libnss_PR_Read->>ssl_context: Lookup
+trace_uretprobe_libnss_PR_Read->>gadget_heap: Lookup
+trace_uretprobe_libnss_PR_Read->>events: EventOutput
+trace_uretprobe_libnss_PR_Read->>ssl_context: Delete
+trace_uretprobe_libnss_PR_Recv->>ssl_context: Lookup
+trace_uretprobe_libnss_PR_Recv->>gadget_heap: Lookup
+trace_uretprobe_libnss_PR_Recv->>events: EventOutput
+trace_uretprobe_libnss_PR_Recv->>ssl_context: Delete
+trace_uretprobe_libnss_PR_Send->>ssl_context: Lookup
+trace_uretprobe_libnss_PR_Send->>gadget_heap: Lookup
+trace_uretprobe_libnss_PR_Send->>events: EventOutput
+trace_uretprobe_libnss_PR_Send->>ssl_context: Delete
+trace_uretprobe_libnss_PR_Write->>ssl_context: Lookup
+trace_uretprobe_libnss_PR_Write->>gadget_heap: Lookup
+trace_uretprobe_libnss_PR_Write->>events: EventOutput
+trace_uretprobe_libnss_PR_Write->>ssl_context: Delete
+trace_uretprobe_libssl_SSL_do_handshake->>ssl_context: Lookup
+trace_uretprobe_libssl_SSL_do_handshake->>gadget_heap: Lookup
+trace_uretprobe_libssl_SSL_do_handshake->>events: EventOutput
+trace_uretprobe_libssl_SSL_do_handshake->>ssl_context: Delete
+trace_uretprobe_libssl_SSL_read->>ssl_context: Lookup
+trace_uretprobe_libssl_SSL_read->>gadget_heap: Lookup
+trace_uretprobe_libssl_SSL_read->>events: EventOutput
+trace_uretprobe_libssl_SSL_read->>ssl_context: Delete
+trace_uretprobe_libssl_SSL_write->>ssl_context: Lookup
+trace_uretprobe_libssl_SSL_write->>gadget_heap: Lookup
+trace_uretprobe_libssl_SSL_write->>events: EventOutput
+trace_uretprobe_libssl_SSL_write->>ssl_context: Delete
+```
diff --git a/gadgets/trace_tcp/artifacthub-pkg.yml b/gadgets/trace_tcp/artifacthub-pkg.yml
index 306452b12..6ae69caad 100644
--- a/gadgets/trace_tcp/artifacthub-pkg.yml
+++ b/gadgets/trace_tcp/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace tcp"
 category: monitoring-logging
 displayName: "trace tcp"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "monitor connect, accept and close events of TCP connections"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_tcp/dev.md b/gadgets/trace_tcp/dev.md
new file mode 100644
index 000000000..5a062676a
--- /dev/null
+++ b/gadgets/trace_tcp/dev.md
@@ -0,0 +1,128 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+tcp_tid_fd[("tcp_tid_fd")]
+tcp_tid_sock[("tcp_tid_sock")]
+tuplepid[("tuplepid")]
+ig_tcp_accept -- "Lookup" --> gadget_mntns_filter_map
+ig_tcp_accept -- "Update" --> tcp_tid_sock
+ig_tcp_accept["ig_tcp_accept"]
+ig_tcp_close -- "Lookup" --> gadget_mntns_filter_map
+ig_tcp_close -- "Lookup" --> gadget_heap
+ig_tcp_close -- "EventOutput" --> events
+ig_tcp_close["ig_tcp_close"]
+ig_tcp_state -- "Lookup+Delete" --> tuplepid
+ig_tcp_state -- "Lookup" --> gadget_heap
+ig_tcp_state -- "EventOutput" --> events
+ig_tcp_state["ig_tcp_state"]
+ig_tcp_v4_co_e -- "Lookup" --> gadget_mntns_filter_map
+ig_tcp_v4_co_e -- "Update" --> tcp_tid_sock
+ig_tcp_v4_co_e["ig_tcp_v4_co_e"]
+ig_tcp_v4_co_x -- "Lookup" --> tcp_tid_sock
+ig_tcp_v4_co_x -- "Lookup" --> tcp_tid_fd
+ig_tcp_v4_co_x -- "Update" --> tuplepid
+ig_tcp_v4_co_x["ig_tcp_v4_co_x"]
+ig_tcp_v6_co_e -- "Lookup" --> gadget_mntns_filter_map
+ig_tcp_v6_co_e -- "Update" --> tcp_tid_sock
+ig_tcp_v6_co_e["ig_tcp_v6_co_e"]
+ig_tcp_v6_co_x -- "Lookup" --> tcp_tid_sock
+ig_tcp_v6_co_x -- "Lookup" --> tcp_tid_fd
+ig_tcp_v6_co_x -- "Update" --> tuplepid
+ig_tcp_v6_co_x["ig_tcp_v6_co_x"]
+sys_accept4_e -- "Update" --> tcp_tid_fd
+sys_accept4_e["sys_accept4_e"]
+sys_accept4_x -- "Lookup+Delete" --> tcp_tid_fd
+sys_accept4_x -- "Lookup+Delete" --> tcp_tid_sock
+sys_accept4_x -- "Lookup" --> gadget_heap
+sys_accept4_x -- "EventOutput" --> events
+sys_accept4_x["sys_accept4_x"]
+sys_accept_e -- "Update" --> tcp_tid_fd
+sys_accept_e["sys_accept_e"]
+sys_accept_x -- "Lookup+Delete" --> tcp_tid_fd
+sys_accept_x -- "Lookup+Delete" --> tcp_tid_sock
+sys_accept_x -- "Lookup" --> gadget_heap
+sys_accept_x -- "EventOutput" --> events
+sys_accept_x["sys_accept_x"]
+sys_connect_e -- "Update" --> tcp_tid_fd
+sys_connect_e["sys_connect_e"]
+sys_connect_x -- "Delete" --> tcp_tid_sock
+sys_connect_x -- "Delete" --> tcp_tid_fd
+sys_connect_x["sys_connect_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_tcp_accept
+participant ig_tcp_close
+participant ig_tcp_state
+participant ig_tcp_v4_co_e
+participant ig_tcp_v4_co_x
+participant ig_tcp_v6_co_e
+participant ig_tcp_v6_co_x
+participant sys_accept4_e
+participant sys_accept4_x
+participant sys_accept_e
+participant sys_accept_x
+participant sys_connect_e
+participant sys_connect_x
+end
+box eBPF Maps
+participant gadget_mntns_filter_map
+participant tcp_tid_sock
+participant gadget_heap
+participant events
+participant tuplepid
+participant tcp_tid_fd
+end
+ig_tcp_accept->>gadget_mntns_filter_map: Lookup
+ig_tcp_accept->>tcp_tid_sock: Update
+ig_tcp_close->>gadget_mntns_filter_map: Lookup
+ig_tcp_close->>gadget_heap: Lookup
+ig_tcp_close->>events: EventOutput
+ig_tcp_state->>tuplepid: Lookup
+ig_tcp_state->>gadget_heap: Lookup
+ig_tcp_state->>events: EventOutput
+ig_tcp_state->>tuplepid: Delete
+ig_tcp_v4_co_e->>gadget_mntns_filter_map: Lookup
+ig_tcp_v4_co_e->>tcp_tid_sock: Update
+ig_tcp_v4_co_x->>tcp_tid_sock: Lookup
+ig_tcp_v4_co_x->>tcp_tid_fd: Lookup
+ig_tcp_v4_co_x->>tuplepid: Update
+ig_tcp_v6_co_e->>gadget_mntns_filter_map: Lookup
+ig_tcp_v6_co_e->>tcp_tid_sock: Update
+ig_tcp_v6_co_x->>tcp_tid_sock: Lookup
+ig_tcp_v6_co_x->>tcp_tid_fd: Lookup
+ig_tcp_v6_co_x->>tuplepid: Update
+sys_accept4_e->>tcp_tid_fd: Update
+sys_accept4_x->>tcp_tid_fd: Lookup
+sys_accept4_x->>tcp_tid_fd: Delete
+sys_accept4_x->>tcp_tid_sock: Lookup
+sys_accept4_x->>gadget_heap: Lookup
+sys_accept4_x->>events: EventOutput
+sys_accept4_x->>tcp_tid_sock: Delete
+sys_accept_e->>tcp_tid_fd: Update
+sys_accept_x->>tcp_tid_fd: Lookup
+sys_accept_x->>tcp_tid_fd: Delete
+sys_accept_x->>tcp_tid_sock: Lookup
+sys_accept_x->>gadget_heap: Lookup
+sys_accept_x->>events: EventOutput
+sys_accept_x->>tcp_tid_sock: Delete
+sys_connect_e->>tcp_tid_fd: Update
+sys_connect_x->>tcp_tid_sock: Delete
+sys_connect_x->>tcp_tid_fd: Delete
+```
diff --git a/gadgets/trace_tcp/gadget.yaml b/gadgets/trace_tcp/gadget.yaml
index a3d5e2497..7be48ff87 100644
--- a/gadgets/trace_tcp/gadget.yaml
+++ b/gadgets/trace_tcp/gadget.yaml
@@ -17,7 +17,8 @@ datasources:
           columns.hidden: true
       type:
         annotations:
-          description: Type of TCP connection event (connect, accept, close)
+          description: Type of TCP connection event
+          value.one-of: "connect, accept, close"
       error_raw:
         annotations:
           columns.hidden: true
diff --git a/gadgets/trace_tcp/test/integration/trace_tcp_test.go b/gadgets/trace_tcp/test/integration/trace_tcp_test.go
index 3f4d4982d..e7b3c8ebb 100644
--- a/gadgets/trace_tcp/test/integration/trace_tcp_test.go
+++ b/gadgets/trace_tcp/test/integration/trace_tcp_test.go
@@ -50,7 +50,7 @@ func TestTraceTCP(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-tcp"
-	containerImage := "docker.io/library/nginx:latest"
+	containerImage := gadgettesting.NginxImage
 
 	var ns string
 	containerOpts := []containers.ContainerOption{containers.WithContainerImage(containerImage)}
@@ -165,8 +165,19 @@ func TestTraceTCP(t *testing.T) {
 				},
 			}
 
+			if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
+				for _, expectedEntry := range expectedEntries {
+					expectedEntry.Src.K8s = utils.K8s{
+						Kind: "raw",
+					}
+					expectedEntry.Dst.K8s = expectedEntry.Src.K8s
+				}
+			}
+
 			normalize := func(e *traceTCPEvent) {
 				utils.NormalizeCommonData(&e.CommonData)
+				utils.NormalizeEndpoint(&e.Src)
+				utils.NormalizeEndpoint(&e.Dst)
 				utils.NormalizeString(&e.Timestamp)
 				utils.NormalizeProc(&e.Proc)
 				utils.NormalizeInt(&e.NetNsID)
diff --git a/gadgets/trace_tcp/test/unit/trace_tcp_test.go b/gadgets/trace_tcp/test/unit/trace_tcp_test.go
index 3e4bc3b99..b591f9558 100644
--- a/gadgets/trace_tcp/test/unit/trace_tcp_test.go
+++ b/gadgets/trace_tcp/test/unit/trace_tcp_test.go
@@ -201,8 +201,8 @@ func TestTraceTcpGadget(t *testing.T) {
 					utils.NormalizeInt(&event.Src.Port)
 				}
 			}
-			var fd int = -1
-			var acceptFd int = -1
+			fd := -1
+			acceptFd := -1
 
 			onGadgetRun := func(gadgetCtx operators.GadgetContext) error {
 				utilstest.RunWithRunner(t, runner, func() error {
diff --git a/gadgets/trace_tcpdrop/artifacthub-pkg.yml b/gadgets/trace_tcpdrop/artifacthub-pkg.yml
index ffb0d9c7f..e739e9213 100644
--- a/gadgets/trace_tcpdrop/artifacthub-pkg.yml
+++ b/gadgets/trace_tcpdrop/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace tcpdrop"
 category: monitoring-logging
 displayName: "trace tcpdrop"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace TCP packets dropped by the kernel"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_tcpdrop/dev.md b/gadgets/trace_tcpdrop/dev.md
new file mode 100644
index 000000000..f386136a6
--- /dev/null
+++ b/gadgets/trace_tcpdrop/dev.md
@@ -0,0 +1,42 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+gadget_sockets[("gadget_sockets")]
+ig_kstack[("ig_kstack")]
+ig_tcpdrop -- "Lookup" --> gadget_heap
+ig_tcpdrop -- "Lookup" --> gadget_sockets
+ig_tcpdrop -- "Lookup" --> gadget_mntns_filter_map
+ig_tcpdrop -- "EventOutput" --> events
+ig_tcpdrop["ig_tcpdrop"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_tcpdrop
+end
+box eBPF Maps
+participant gadget_heap
+participant gadget_sockets
+participant gadget_mntns_filter_map
+participant events
+end
+ig_tcpdrop->>gadget_heap: Lookup
+ig_tcpdrop->>gadget_sockets: Lookup
+ig_tcpdrop->>gadget_mntns_filter_map: Lookup
+ig_tcpdrop->>events: EventOutput
+```
diff --git a/gadgets/trace_tcpdrop/gadget.yaml b/gadgets/trace_tcpdrop/gadget.yaml
index 3ea446dd3..7a3e6de2c 100644
--- a/gadgets/trace_tcpdrop/gadget.yaml
+++ b/gadgets/trace_tcpdrop/gadget.yaml
@@ -25,12 +25,38 @@ datasources:
         annotations:
           description: Reason for dropping a packet
           columns.ellipsis: start
+          value.one-of: 'SKB_NOT_DROPPED_YET, SKB_CONSUMED, SKB_DROP_REASON_NOT_SPECIFIED, SKB_DROP_REASON_NO_SOCKET,
+            SKB_DROP_REASON_PKT_TOO_SMALL, SKB_DROP_REASON_TCP_CSUM, SKB_DROP_REASON_SOCKET_FILTER,
+            SKB_DROP_REASON_UDP_CSUM, SKB_DROP_REASON_NETFILTER_DROP, SKB_DROP_REASON_OTHERHOST,
+            SKB_DROP_REASON_IP_CSUM, SKB_DROP_REASON_IP_INHDR, SKB_DROP_REASON_IP_RPFILTER,
+            SKB_DROP_REASON_UNICAST_IN_L2_MULTICAST, SKB_DROP_REASON_XFRM_POLICY, SKB_DROP_REASON_IP_NOPROTO,
+            SKB_DROP_REASON_SOCKET_RCVBUFF, SKB_DROP_REASON_PROTO_MEM, SKB_DROP_REASON_TCP_MD5NOTFOUND,
+            SKB_DROP_REASON_TCP_MD5UNEXPECTED, SKB_DROP_REASON_TCP_MD5FAILURE, SKB_DROP_REASON_SOCKET_BACKLOG,
+            SKB_DROP_REASON_TCP_FLAGS, SKB_DROP_REASON_TCP_ZEROWINDOW, SKB_DROP_REASON_TCP_OLD_DATA,
+            SKB_DROP_REASON_TCP_OVERWINDOW, SKB_DROP_REASON_TCP_OFOMERGE, SKB_DROP_REASON_TCP_RFC7323_PAWS,
+            SKB_DROP_REASON_TCP_INVALID_SEQUENCE, SKB_DROP_REASON_TCP_RESET, SKB_DROP_REASON_TCP_INVALID_SYN,
+            SKB_DROP_REASON_TCP_CLOSE, SKB_DROP_REASON_TCP_FASTOPEN, SKB_DROP_REASON_TCP_OLD_ACK,
+            SKB_DROP_REASON_TCP_TOO_OLD_ACK, SKB_DROP_REASON_TCP_ACK_UNSENT_DATA, SKB_DROP_REASON_TCP_OFO_QUEUE_PRUNE,
+            SKB_DROP_REASON_TCP_OFO_DROP, SKB_DROP_REASON_IP_OUTNOROUTES, SKB_DROP_REASON_BPF_CGROUP_EGRESS,
+            SKB_DROP_REASON_IPV6DISABLED, SKB_DROP_REASON_NEIGH_CREATEFAIL, SKB_DROP_REASON_NEIGH_FAILED,
+            SKB_DROP_REASON_NEIGH_QUEUEFULL, SKB_DROP_REASON_NEIGH_DEAD, SKB_DROP_REASON_TC_EGRESS,
+            SKB_DROP_REASON_QDISC_DROP, SKB_DROP_REASON_CPU_BACKLOG, SKB_DROP_REASON_XDP, SKB_DROP_REASON_TC_INGRESS,
+            SKB_DROP_REASON_UNHANDLED_PROTO, SKB_DROP_REASON_SKB_CSUM, SKB_DROP_REASON_SKB_GSO_SEG,
+            SKB_DROP_REASON_SKB_UCOPY_FAULT, SKB_DROP_REASON_DEV_HDR, SKB_DROP_REASON_DEV_READY,
+            SKB_DROP_REASON_FULL_RING, SKB_DROP_REASON_NOMEM, SKB_DROP_REASON_HDR_TRUNC, SKB_DROP_REASON_TAP_FILTER,
+            SKB_DROP_REASON_TAP_TXFILTER, SKB_DROP_REASON_ICMP_CSUM, SKB_DROP_REASON_INVALID_PROTO,
+            SKB_DROP_REASON_IP_INADDRERRORS, SKB_DROP_REASON_IP_INNOROUTES, SKB_DROP_REASON_PKT_TOO_BIG,
+            SKB_DROP_REASON_DUP_FRAG, SKB_DROP_REASON_FRAG_REASM_TIMEOUT, SKB_DROP_REASON_FRAG_TOO_FAR,
+            SKB_DROP_REASON_MAX'
       state_raw:
         annotations:
           columns.hidden: true
       state:
         annotations:
           description: State of the TCP connection
+          value.one-of: 'tcp_established, tcp_syn_sent, tcp_syn_recv, tcp_fin_wait1,
+            tcp_fin_wait2, tcp_time_wait, tcp_close, tcp_close_wait, tcp_last_ack,
+            tcp_listen, tcp_closing, tcp_new_syn_recv, tcp_max_states'
       kernel_stack_raw:
         annotations:
           columns.hidden: true
diff --git a/gadgets/trace_tcpdrop/program.bpf.c b/gadgets/trace_tcpdrop/program.bpf.c
index 986e5a1c0..83a48ff2c 100644
--- a/gadgets/trace_tcpdrop/program.bpf.c
+++ b/gadgets/trace_tcpdrop/program.bpf.c
@@ -154,13 +154,13 @@ static __always_inline int __trace_tcp_drop(void *ctx, struct sock *sk,
 		event->src.version = event->dst.version = 6;
 
 		BPF_CORE_READ_INTO(
-			&event->src.addr_raw.v6, sk,
+			&event->src.addr_raw.v6_raw, sk,
 			__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr32);
-		if (event->src.addr_raw.v6 == 0)
+		if (event->src.addr_raw.v6_raw == 0)
 			goto cleanup;
-		BPF_CORE_READ_INTO(&event->dst.addr_raw.v6, sk,
+		BPF_CORE_READ_INTO(&event->dst.addr_raw.v6_raw, sk,
 				   __sk_common.skc_v6_daddr.in6_u.u6_addr32);
-		if (event->dst.addr_raw.v6 == 0)
+		if (event->dst.addr_raw.v6_raw == 0)
 			goto cleanup;
 		break;
 
diff --git a/gadgets/trace_tcpretrans/artifacthub-pkg.yml b/gadgets/trace_tcpretrans/artifacthub-pkg.yml
index aa2561593..9beef9dcd 100644
--- a/gadgets/trace_tcpretrans/artifacthub-pkg.yml
+++ b/gadgets/trace_tcpretrans/artifacthub-pkg.yml
@@ -1,10 +1,10 @@
 # Artifact Hub package metadata file
-version: 0.37.0
+version: 0.40.0
 name: "trace tcpretrans"
 category: monitoring-logging
 displayName: "trace tcpretrans"
-createdAt: "2025-02-03T11:23:41Z"
-digest: "2025-02-03T11:23:41Z"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
 description: "trace TCP retransmissions"
 logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
 license: ""
diff --git a/gadgets/trace_tcpretrans/dev.md b/gadgets/trace_tcpretrans/dev.md
new file mode 100644
index 000000000..e089150e5
--- /dev/null
+++ b/gadgets/trace_tcpretrans/dev.md
@@ -0,0 +1,51 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+events[("events")]
+gadget_heap[("gadget_heap")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+gadget_sockets[("gadget_sockets")]
+ig_tcplossprobe -- "Lookup" --> gadget_heap
+ig_tcplossprobe -- "Lookup" --> gadget_sockets
+ig_tcplossprobe -- "Lookup" --> gadget_mntns_filter_map
+ig_tcplossprobe -- "EventOutput" --> events
+ig_tcplossprobe["ig_tcplossprobe"]
+ig_tcpretrans -- "Lookup" --> gadget_heap
+ig_tcpretrans -- "Lookup" --> gadget_sockets
+ig_tcpretrans -- "Lookup" --> gadget_mntns_filter_map
+ig_tcpretrans -- "EventOutput" --> events
+ig_tcpretrans["ig_tcpretrans"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_tcplossprobe
+participant ig_tcpretrans
+end
+box eBPF Maps
+participant gadget_heap
+participant gadget_sockets
+participant gadget_mntns_filter_map
+participant events
+end
+ig_tcplossprobe->>gadget_heap: Lookup
+ig_tcplossprobe->>gadget_sockets: Lookup
+ig_tcplossprobe->>gadget_mntns_filter_map: Lookup
+ig_tcplossprobe->>events: EventOutput
+ig_tcpretrans->>gadget_heap: Lookup
+ig_tcpretrans->>gadget_sockets: Lookup
+ig_tcpretrans->>gadget_mntns_filter_map: Lookup
+ig_tcpretrans->>events: EventOutput
+```
diff --git a/gadgets/trace_tcpretrans/gadget.yaml b/gadgets/trace_tcpretrans/gadget.yaml
index d9bb6c938..5ce55d949 100644
--- a/gadgets/trace_tcpretrans/gadget.yaml
+++ b/gadgets/trace_tcpretrans/gadget.yaml
@@ -29,7 +29,8 @@ datasources:
           columns.hidden: true
       type:
         annotations:
-          description: Type of the retransmission, either RETRANS or LOSS
+          description: Type of the retransmission
+          value.one-of: "RETRANS, LOSS"
           columns.width: 10
       state:
         annotations:
diff --git a/gadgets/trace_tcpretrans/test/integration/trace_tcpretrans_test.go b/gadgets/trace_tcpretrans/test/integration/trace_tcpretrans_test.go
index d6b1b3ba5..9b4163318 100644
--- a/gadgets/trace_tcpretrans/test/integration/trace_tcpretrans_test.go
+++ b/gadgets/trace_tcpretrans/test/integration/trace_tcpretrans_test.go
@@ -53,7 +53,7 @@ func TestTraceTCPretrans(t *testing.T) {
 	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
 	require.NoError(t, err, "new container factory")
 	containerName := "test-trace-tcpretrans"
-	containerImage := "docker.io/wbitt/network-multitool:latest"
+	containerImage := gadgettesting.NetworkMultitoolImage
 
 	var ns string
 	// run the container with privileged mode to be able to use tc command
@@ -108,6 +108,14 @@ func TestTraceTCPretrans(t *testing.T) {
 				Timestamp: utils.NormalizedStr,
 				NetNs:     utils.NormalizedInt,
 			}
+
+			if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
+				expectedEntries.Src.K8s = utils.K8s{
+					Kind: "raw",
+				}
+				expectedEntries.Dst.K8s = expectedEntries.Src.K8s
+			}
+
 			normalize := func(e *traceTCPretransEvent) {
 				utils.NormalizeCommonData(&e.CommonData)
 				utils.NormalizeString(&e.Timestamp)
diff --git a/gadgets/traceloop/README.md b/gadgets/traceloop/README.md
new file mode 100644
index 000000000..9e78e02ad
--- /dev/null
+++ b/gadgets/traceloop/README.md
@@ -0,0 +1,5 @@
+# traceloop
+
+The `traceloop` gadget is used as a syscalls flight recorder.
+
+Check the full documentation on https://inspektor-gadget.io/docs/latest/gadgets/traceloop
diff --git a/gadgets/traceloop/README.mdx b/gadgets/traceloop/README.mdx
new file mode 100644
index 000000000..df5145887
--- /dev/null
+++ b/gadgets/traceloop/README.mdx
@@ -0,0 +1,147 @@
+---
+title: traceloop
+sidebar_position: 0
+---
+
+import Tabs from '@theme/Tabs';
+import TabItem from '@theme/TabItem';
+
+# traceloop
+
+The traceloop gadget is a syscalls flight recorder.
+
+## Getting started
+
+Running the gadget:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        $ kubectl gadget run ghcr.io/inspektor-gadget/gadget/traceloop:%IG_TAG% [flags]
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run ghcr.io/inspektor-gadget/gadget/traceloop:%IG_TAG% [flags]
+        ```
+    </TabItem>
+</Tabs>
+
+## Guide
+
+First, we need to run an application that generates some events.
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl create ns test-traceloop-ns
+        namespace/test-traceloop-ns created
+        $ kubectl run -n test-traceloop-ns --image busybox test-traceloop-pod --command -- sleep inf
+        pod/test-traceloop-pod created
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ docker run -it --rm --name test-traceloop busybox /bin/sh
+        ```
+    </TabItem>
+</Tabs>
+
+Then, let's run the gadget:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        $ kubectl gadget run traceloop:%IG_TAG% --namespace test-traceloop-ns
+        K8S.NODE            K8S.NAMESPACE       K8S.PODNAME         K8S.CONTAINERNAME   CPU         PID COMM      SYSCALL     PARAMETERS      RET
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ sudo ig run traceloop:%IG_TAG% --containername test-traceloop
+        RUNTIME.CONTAINERNAME                        CPU         PID COMM             SYSCALL                     PARAMETERS                  RET
+        ```
+    </TabItem>
+</Tabs>
+
+Now, let's generate some events:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        Run a command inside the pod:
+
+        ```bash
+        $ kubectl exec -ti -n test-traceloop-ns test-traceloop-pod -- /bin/hush
+        / # ls
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        Run a command inside the container:
+
+        ```bash
+        / # ls
+        ```
+    </TabItem>
+</Tabs>
+
+Let's collect the syscalls:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        Press Ctrl+C to collect the syscalls:
+
+        ```bash
+        $ kubectl gadget run traceloop:%IG_TAG% --namespace test-traceloop-ns
+        K8S.NODE            K8S.NAMESPACE       K8S.PODNAME         K8S.CONTAINERNAME   CPU         PID COMM      SYSCALL     PARAMETERS      RET
+        ^C
+        ...
+        minikube-docker     test-traceloop-ns   test-traceloop-pod  test-traceloop-pod  2         95419 ls        brk         brk=0        94032…
+        minikube-docker     test-traceloop-ns   test-traceloop-pod  test-traceloop-pod  2         95419 ls        mmap        addr=0, len… 14008…
+        minikube-docker     test-traceloop-ns   test-traceloop-pod  test-traceloop-pod  2         95419 ls        access      filename="/… -1 (P…
+        ...
+        minikube-docker     test-traceloop-ns   test-traceloop-pod  test-traceloop-pod  2         95419 ls        write       fd=1, buf="…    201
+        minikube-docker     test-traceloop-ns   test-traceloop-pod  test-traceloop-pod  2         95419 ls        exit_group  error_code=0      X
+        ```
+
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        Press Ctrl+C to collect the syscalls:
+
+        ```bash
+        $ sudo ig run traceloop:%IG_TAG% --containername test-traceloop
+        RUNTIME.CONTAINERNAME                        CPU         PID COMM             SYSCALL                     PARAMETERS                  RET
+        ^C
+        ...
+        test-traceloop                            5         58054 sh               execve                    filename="/bin/ls", a…             0
+        test-traceloop                            5         58054 ls               brk                       brk=0                  102559763509…
+        test-traceloop                            5         58054 ls               mmap                      addr=0, len=8192, pro… 123786398932…
+        test-traceloop                            5         58054 ls               access                    filename="/etc/ld.so.… -1 (Permissi…
+        ...
+        test-traceloop                            5         58054 ls               write                     fd=1, buf="\x1b[1;34m…           201
+        test-traceloop                            5         58054 ls               exit_group                error_code=0                       X
+        ...
+        ```
+    </TabItem>
+</Tabs>
+
+Finally, clean the system:
+
+<Tabs groupId="env">
+    <TabItem value="kubectl-gadget" label="kubectl gadget">
+        ```bash
+        $ kubectl delete ns test-traceloop-ns
+        namespace "test-traceloop-ns" deleted
+        ```
+    </TabItem>
+
+    <TabItem value="ig" label="ig">
+        ```bash
+        $ docker rm -f test-traceloop
+        ```
+    </TabItem>
+</Tabs>
+
+## Limitations
+
+Timestamps are not filled on kernel older than 5.7.
diff --git a/gadgets/traceloop/artifacthub-pkg.yml b/gadgets/traceloop/artifacthub-pkg.yml
new file mode 100644
index 000000000..6b008c18d
--- /dev/null
+++ b/gadgets/traceloop/artifacthub-pkg.yml
@@ -0,0 +1,29 @@
+# Artifact Hub package metadata file
+version: 0.40.0
+name: "traceloop"
+category: monitoring-logging
+displayName: "traceloop"
+createdAt: "2025-05-05T21:08:08Z"
+digest: "2025-05-05T21:08:08Z"
+description: "syscalls flight recorder"
+logoURL: "https://inspektor-gadget.io/media/brand-icon.svg"
+license: ""
+homeURL: "https://inspektor-gadget.io/docs/latest/gadgets/traceloop"
+containersImages:
+    - name: gadget
+      image: "ghcr.io/inspektor-gadget/gadget/traceloop:latest"
+      platforms:
+        - linux/amd64
+        - linux/arm64
+keywords:
+    - gadget
+links:
+    - name: source
+      url: "https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/traceloop"
+install: |
+    # Run
+    ```bash
+    sudo ig run ghcr.io/inspektor-gadget/gadget/traceloop:latest
+    ```
+provider:
+    name: Inspektor Gadget
diff --git a/gadgets/traceloop/build.yaml b/gadgets/traceloop/build.yaml
new file mode 100644
index 000000000..afb57e07c
--- /dev/null
+++ b/gadgets/traceloop/build.yaml
@@ -0,0 +1,5 @@
+wasm: go/program.go
+# To print debug messages:
+# cflags: '-DSHOW_DEBUG'
+# To print error messages:
+# cflags: '-DSHOW_ERROR'
diff --git a/gadgets/traceloop/dev.md b/gadgets/traceloop/dev.md
new file mode 100644
index 000000000..aa35838a9
--- /dev/null
+++ b/gadgets/traceloop/dev.md
@@ -0,0 +1,66 @@
+# Developer Notes
+
+This file complements the README file with implementation details specific to this gadget. It includes diagrams that illustrate how eBPF programs interact with eBPF maps. These visualizations help clarify the internal data flow and logic, making it easier to understand, maintain, and extend the gadget.
+
+## Program-Map interactions
+
+The following diagrams are generated using the `ig image inspect` command. Note they are a best-effort representation of the actual interactions, as they do not account for conditionals in the code that may prevent certain program–map interactions from occurring at runtime.
+
+### Flowchart
+
+```mermaid
+flowchart LR
+fake_stack[("fake_stack")]
+gadget_mntns_filter_map[("gadget_mntns_filter_map")]
+map_of_perf_buffers[("map_of_perf_buffers")]
+probe_at_sys_exit[("probe_at_sys_exit")]
+regs_map[("regs_map")]
+syscalls[("syscalls")]
+ig_traceloop_e -- "Lookup" --> map_of_perf_buffers
+ig_traceloop_e -- "Lookup+Update" --> fake_stack
+ig_traceloop_e -- "Lookup" --> syscalls
+ig_traceloop_e -- "Lookup+Update+Delete" --> regs_map
+ig_traceloop_e -- "Lookup+Update" --> probe_at_sys_exit
+ig_traceloop_e["ig_traceloop_e"]
+ig_traceloop_x -- "Lookup" --> map_of_perf_buffers
+ig_traceloop_x -- "Lookup+Update+Delete" --> regs_map
+ig_traceloop_x -- "Lookup+Update" --> fake_stack
+ig_traceloop_x -- "Lookup" --> syscalls
+ig_traceloop_x -- "Lookup+Delete" --> probe_at_sys_exit
+ig_traceloop_x["ig_traceloop_x"]
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+box eBPF Programs
+participant ig_traceloop_e
+participant ig_traceloop_x
+end
+box eBPF Maps
+participant map_of_perf_buffers
+participant fake_stack
+participant syscalls
+participant regs_map
+participant probe_at_sys_exit
+end
+ig_traceloop_e->>map_of_perf_buffers: Lookup
+ig_traceloop_e->>fake_stack: Update
+ig_traceloop_e->>fake_stack: Lookup
+ig_traceloop_e->>syscalls: Lookup
+ig_traceloop_e->>regs_map: Update
+ig_traceloop_e->>regs_map: Lookup
+ig_traceloop_e->>probe_at_sys_exit: Update
+ig_traceloop_e->>probe_at_sys_exit: Lookup
+ig_traceloop_e->>regs_map: Delete
+ig_traceloop_x->>map_of_perf_buffers: Lookup
+ig_traceloop_x->>regs_map: Update
+ig_traceloop_x->>regs_map: Lookup
+ig_traceloop_x->>fake_stack: Update
+ig_traceloop_x->>fake_stack: Lookup
+ig_traceloop_x->>syscalls: Lookup
+ig_traceloop_x->>probe_at_sys_exit: Lookup
+ig_traceloop_x->>probe_at_sys_exit: Delete
+ig_traceloop_x->>regs_map: Delete
+```
diff --git a/gadgets/traceloop/gadget.yaml b/gadgets/traceloop/gadget.yaml
new file mode 100644
index 000000000..2068a1f0c
--- /dev/null
+++ b/gadgets/traceloop/gadget.yaml
@@ -0,0 +1,44 @@
+name: traceloop
+description: syscalls flight recorder
+homepageURL: https://inspektor-gadget.io/
+documentationURL: https://www.inspektor-gadget.io/docs/latest/gadgets/traceloop
+sourceURL: https://github.com/inspektor-gadget/inspektor-gadget/tree/main/gadgets/traceloop
+annotations:
+  enable-containers-datasource: true
+datasources:
+  traceloop:
+    annotations:
+      description: Syscalls
+    fields:
+      mntns_id:
+        annotations:
+          template: mntns_id
+      cpu:
+        annotations:
+          description: CPU number where the syscall was executed
+          columns.maxwidth: 4
+      pid:
+        annotations:
+          template: pid
+      comm:
+        annotations:
+          template: comm
+      syscall:
+        annotations:
+          template: syscall
+      parameters:
+        annotations:
+          description: Syscall's parameters
+          columns.width: 20
+      ret:
+        annotations:
+          description: Syscall's return value
+          columns.width: 10
+          columns.alignment: right
+params:
+  wasm:
+    syscall-filters:
+      key: syscall-filters
+      defaultValue: ""
+      description: "Filter out by syscall names. Join multiple names with ','"
+      title: Syscallfilters
diff --git a/gadgets/traceloop/go/go.mod b/gadgets/traceloop/go/go.mod
new file mode 100644
index 000000000..ec64f960e
--- /dev/null
+++ b/gadgets/traceloop/go/go.mod
@@ -0,0 +1,9 @@
+module traceloop
+
+go 1.24.0
+
+// Version doesn't matter because of the replace directive below.
+require github.com/inspektor-gadget/inspektor-gadget v0.0.0
+
+// Only needed by in-tree gadgets
+replace github.com/inspektor-gadget/inspektor-gadget => ../../../
diff --git a/gadgets/traceloop/go/go.sum b/gadgets/traceloop/go/go.sum
new file mode 100644
index 000000000..e69de29bb
diff --git a/gadgets/traceloop/go/program.go b/gadgets/traceloop/go/program.go
new file mode 100644
index 000000000..31364d5a5
--- /dev/null
+++ b/gadgets/traceloop/go/program.go
@@ -0,0 +1,882 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"bytes"
+	"errors"
+	"fmt"
+	"os"
+	"sort"
+	"strconv"
+	"strings"
+	"sync"
+	"syscall"
+	"time"
+	"unsafe"
+
+	api "github.com/inspektor-gadget/inspektor-gadget/wasmapi/go"
+)
+
+type eventType uint32
+
+const (
+	syscallEventTypeEnter eventType = 0
+	syscallEventTypeExit            = 1
+	syscallEventTypeCont            = 2
+)
+
+// These consts must match the content of program.bpf.c.
+const (
+	useNullByteLength        uint64 = 0x0fffffffffffffff
+	useRetAsParamLength      uint64 = 0x0ffffffffffffffe
+	useArgIndexAsParamLength uint64 = 0x0ffffffffffffff0
+	paramProbeAtExitMask     uint64 = 0xf000000000000000
+
+	syscallArgs uint8 = 6
+
+	// os.Getpagesize() in wasm will return 65536:
+	// https://cs.opensource.google/go/go/+/master:src/runtime/os_wasm.go;l=13-14?q=physPageSize&ss=go%2Fgo&start=11
+	// https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances
+	linuxPageSize uint32 = 4096
+
+	// the max entries of the syscall_filters map
+	maxSyscallFilters int = 16
+)
+
+// TODO Find all syscalls which take a char * as argument and add them there.
+var syscallDefs = map[string][6]uint64{
+	"execve":      {useNullByteLength, 0, 0, 0, 0, 0},
+	"access":      {useNullByteLength, 0, 0, 0, 0, 0},
+	"open":        {useNullByteLength, 0, 0, 0, 0, 0},
+	"openat":      {0, useNullByteLength, 0, 0, 0, 0},
+	"mkdir":       {useNullByteLength, 0, 0, 0, 0, 0},
+	"chdir":       {useNullByteLength, 0, 0, 0, 0, 0},
+	"pivot_root":  {useNullByteLength, useNullByteLength, 0, 0, 0, 0},
+	"mount":       {useNullByteLength, useNullByteLength, useNullByteLength, 0, 0, 0},
+	"umount2":     {useNullByteLength, 0, 0, 0, 0, 0},
+	"sethostname": {useNullByteLength, 0, 0, 0, 0, 0},
+	"statfs":      {useNullByteLength, 0, 0, 0, 0, 0},
+	"stat":        {useNullByteLength, 0, 0, 0, 0, 0},
+	"statx":       {0, useNullByteLength, 0, 0, 0, 0},
+	"lstat":       {useNullByteLength, 0, 0, 0, 0, 0},
+	"fgetxattr":   {0, useNullByteLength, 0, 0, 0, 0},
+	"lgetxattr":   {useNullByteLength, useNullByteLength, 0, 0, 0, 0},
+	"getxattr":    {useNullByteLength, useNullByteLength, 0, 0, 0, 0},
+	"newfstatat":  {0, useNullByteLength, 0, 0, 0, 0},
+	"read":        {0, useRetAsParamLength | paramProbeAtExitMask, 0, 0, 0, 0},
+	"write":       {0, useArgIndexAsParamLength + 2, 0, 0, 0, 0},
+	"getcwd":      {useNullByteLength | paramProbeAtExitMask, 0, 0, 0, 0, 0},
+	"pread64":     {0, useRetAsParamLength | paramProbeAtExitMask, 0, 0, 0, 0},
+}
+
+// Used as cache for getSyscallDeclaration().
+var sysDeclarationCache map[string]api.SyscallDeclaration
+
+type eventFields struct {
+	mntnsID    api.Field
+	cpu        api.Field
+	pid        api.Field
+	comm       api.Field
+	syscall    api.Field
+	parameters api.Field
+	ret        api.Field
+}
+
+var (
+	dsOutput api.DataSource
+	fields   eventFields
+)
+
+type containerRingReader struct {
+	innerBuffer api.Map
+	perfReader  api.PerfReader
+}
+
+type tracelooper struct {
+	mapOfPerfBuffers api.Map
+
+	// key:   mntnsID
+	// value: *containerRingReader
+	readers sync.Map
+}
+
+var t tracelooper
+
+// Keep in sync with type in program.bpf.c.
+type traceloopSyscallEventContT struct {
+	EventType          eventType
+	Param              [128]uint8
+	MonotonicTimestamp uint64
+	Length             uint64
+	Index              uint8
+	Failed             uint8
+	_                  [5]byte
+}
+
+// Keep in sync with type in program.bpf.c.
+type traceloopSyscallEventT struct {
+	EventType          eventType
+	Args               [6]uint64
+	MonotonicTimestamp uint64
+	BootTimestamp      uint64
+	Pid                uint32
+	Cpu                uint16
+	Id                 uint16
+	Comm               [16]uint8
+	ContNr             uint8
+	_                  [62]byte
+}
+
+type syscallEvent struct {
+	bootTimestamp      uint64
+	monotonicTimestamp uint64
+	typ                eventType
+	contNr             uint8
+	cpu                uint16
+	id                 uint16
+	pid                uint32
+	comm               string
+	args               []uint64
+	mountNsID          uint64
+	retval             uint64
+}
+
+type syscallEventContinued struct {
+	monotonicTimestamp uint64
+	index              uint8
+	param              string
+}
+
+type syscallParam struct {
+	name    string
+	value   string
+	content *string
+}
+
+type event struct {
+	timestamp  int64
+	mountNsID  uint64
+	cpu        uint16
+	pid        uint32
+	comm       string
+	syscall    string
+	parameters []syscallParam
+	retval     string
+}
+
+func paramsToString(parameters []syscallParam) string {
+	var sb strings.Builder
+
+	for idx, p := range parameters {
+		value := p.value
+		if p.content != nil {
+			value = *p.content
+		}
+
+		fmt.Fprintf(&sb, "%s=%s", p.name, value)
+
+		if idx < len(parameters)-1 {
+			sb.WriteString(", ")
+		}
+	}
+
+	return sb.String()
+}
+
+func (t *tracelooper) attach(mntnsID uint64) error {
+	perfBufferName := fmt.Sprintf("perf_buffer_%d", mntnsID)
+
+	// 1. Create inner Map as perf buffer.
+	// Keep the spec in sync with program.bpf.c.
+	innerBuffer, err := api.NewMap(api.MapSpec{
+		Name:      perfBufferName,
+		Type:      api.PerfEventArray,
+		KeySize:   uint32(4),
+		ValueSize: uint32(4),
+	})
+	if err != nil {
+		return fmt.Errorf("creating map %s", fmt.Sprintf("perf_buffer_%d", mntnsID))
+	}
+
+	// 2. Use this inner Map to create the perf reader.
+	perfReader, err := api.NewPerfReader(innerBuffer, 64*linuxPageSize, true)
+	if err != nil {
+		innerBuffer.Close()
+
+		return fmt.Errorf("creating perf ring buffer: %w", err)
+	}
+
+	// 3. Add the inner map's file descriptor to outer map.
+	err = t.mapOfPerfBuffers.Update(mntnsID, innerBuffer, api.UpdateNoExist)
+	if err != nil {
+		innerBuffer.Close()
+		perfReader.Close()
+
+		return fmt.Errorf("adding perf buffer to map with mntnsID %d: %w", mntnsID, err)
+	}
+
+	t.readers.Store(mntnsID, &containerRingReader{
+		innerBuffer: innerBuffer,
+		perfReader:  perfReader,
+	})
+
+	return nil
+}
+
+func (t *tracelooper) detach(mntnsID uint64) error {
+	err := t.mapOfPerfBuffers.Delete(mntnsID)
+	if err != nil {
+		return fmt.Errorf("removing perf buffer from map with mntnsID %d: %w", mntnsID, err)
+	}
+
+	return nil
+}
+
+func fromCString(in []byte) string {
+	idx := bytes.IndexByte(in, 0)
+	switch {
+	case idx == -1:
+		return string(in)
+	case idx < len(in):
+		return string(in[:idx])
+	default:
+		return string(in)
+	}
+}
+
+func fromCStringN(in []byte, length int) string {
+	l := len(in)
+	if length < l {
+		l = length
+	}
+
+	buf := in[:l]
+	idx := bytes.IndexByte(buf, 0)
+	switch {
+	case idx == -1:
+		return string(in)
+	case idx < l:
+		return string(in[:idx])
+	default:
+		return string(in)
+	}
+}
+
+func timestampFromEvent(event *syscallEvent) int64 {
+	return time.Unix(0, int64(event.bootTimestamp)).Add(0).UnixNano()
+}
+
+// Copied/pasted/adapted from kernel macro round_up:
+// https://elixir.bootlin.com/linux/v6.0/source/include/linux/math.h#L25
+func roundUp(x, y uintptr) uintptr {
+	return ((x - 1) | (y - 1)) + 1
+}
+
+// The kernel aligns size of perf event with the following snippet:
+// void perf_prepare_sample(...)
+//
+//	{
+//		//...
+//		size = round_up(sum + sizeof(u32), sizeof(u64));
+//		raw->size = size - sizeof(u32);
+//		frag->pad = raw->size - sum;
+//		// ...
+//	}
+//
+// (https://elixir.bootlin.com/linux/v6.0/source/kernel/events/core.c#L7353)
+// In the case of our structure of interest (i.e. struct_syscall_event_t and
+// struct_syscall_event_cont_t), their size will be increased by 4, here is
+// an example for struct_syscall_event_t which size is 88:
+// size = round_up(sum + sizeof(u32), sizeof(u64))
+//
+//	= round_up(88 + 4, 8)
+//	= round_up(92, 8)
+//	= 96
+//
+// raw->size = size - sizeof(u32)
+//
+//	= 96 - 4
+//	= 92
+//
+// So, 4 bytes will be added as padding at the end of the event and the size we
+// will read getting perfEventSample will be 92 instead of 88.
+func alignSize(structSize uintptr) uintptr {
+	var ret uintptr
+	var foo uint64
+	var bar uint32
+
+	ret = roundUp(structSize+unsafe.Sizeof(bar), unsafe.Sizeof(foo))
+	ret = ret - unsafe.Sizeof(bar)
+
+	return ret
+}
+
+// Convert a return value to corresponding error number if meaningful.
+// See man syscalls:
+// Note:
+// system calls indicate a failure by returning a negative error
+// number to the caller on architectures without a separate error
+// register/flag, as noted in syscall(2); when this happens, the
+// wrapper function negates the returned error number (to make it
+// positive), copies it to errno, and returns -1 to the caller of
+// the wrapper.
+func retToStr(ret uint64) string {
+	errNo := int64(ret)
+	if errNo >= -4095 && errNo <= -1 {
+		return fmt.Sprintf("-1 (%s)", syscall.Errno(-errNo).Error())
+	}
+	return fmt.Sprintf("%d", ret)
+}
+
+func getSyscallDeclaration(name string) (api.SyscallDeclaration, error) {
+	if sysDeclarationCache == nil {
+		sysDeclarationCache = make(map[string]api.SyscallDeclaration)
+	}
+
+	if declaration, ok := sysDeclarationCache[name]; ok {
+		return declaration, nil
+	}
+
+	declaration, err := api.GetSyscallDeclaration(name)
+	if err != nil {
+		return api.SyscallDeclaration{}, fmt.Errorf("getting syscall definition: %w", err)
+	}
+
+	sysDeclarationCache[name] = declaration
+
+	return declaration, nil
+}
+
+func (t *tracelooper) read(mntnsID uint64, reader *containerRingReader) ([]*event, error) {
+	syscallContinuedEventsMap := make(map[uint64][]*syscallEventContinued)
+	syscallEnterEventsMap := make(map[uint64][]*syscallEvent)
+	syscallExitEventsMap := make(map[uint64][]*syscallEvent)
+	var sysEventCont *traceloopSyscallEventContT
+	events := make([]*event, 0)
+	var sysEvent *traceloopSyscallEventT
+
+	err := reader.perfReader.Pause()
+	if err != nil {
+		return nil, err
+	}
+
+	sysEventSize := alignSize(unsafe.Sizeof(*sysEvent))
+	for {
+		record := make([]byte, sysEventSize)
+		if err := reader.perfReader.Read(record); err != nil {
+			if errors.Is(err, os.ErrDeadlineExceeded) {
+				break
+			} else {
+				return nil, err
+			}
+		}
+
+		sysEvent = (*traceloopSyscallEventT)(unsafe.Pointer(&record[0]))
+
+		switch sysEvent.EventType {
+		case syscallEventTypeEnter, syscallEventTypeExit:
+
+			event := &syscallEvent{
+				bootTimestamp:      sysEvent.BootTimestamp,
+				monotonicTimestamp: sysEvent.MonotonicTimestamp,
+				typ:                sysEvent.EventType,
+				contNr:             sysEvent.ContNr,
+				cpu:                sysEvent.Cpu,
+				id:                 sysEvent.Id,
+				pid:                sysEvent.Pid,
+				comm:               fromCString(sysEvent.Comm[:]),
+				mountNsID:          mntnsID,
+			}
+
+			var typeMap *map[uint64][]*syscallEvent
+			switch event.typ {
+			case syscallEventTypeEnter:
+				event.args = make([]uint64, syscallArgs)
+				for i := uint8(0); i < syscallArgs; i++ {
+					event.args[i] = sysEvent.Args[i]
+				}
+
+				typeMap = &syscallEnterEventsMap
+			case syscallEventTypeExit:
+				event.retval = sysEvent.Args[0]
+
+				typeMap = &syscallExitEventsMap
+			}
+
+			(*typeMap)[event.monotonicTimestamp] = append((*typeMap)[event.monotonicTimestamp], event)
+		case syscallEventTypeCont:
+			sysEventCont = (*traceloopSyscallEventContT)(unsafe.Pointer(&record[0]))
+
+			event := &syscallEventContinued{
+				monotonicTimestamp: sysEventCont.MonotonicTimestamp,
+				index:              sysEventCont.Index,
+			}
+
+			if sysEventCont.Failed != 0 {
+				event.param = "(Failed to dereference pointer)"
+			} else if sysEventCont.Length == useNullByteLength {
+				// 0 byte at [C.PARAM_LENGTH - 1] is enforced in BPF code
+				event.param = fromCString(sysEventCont.Param[:])
+			} else {
+				event.param = fromCStringN(sysEventCont.Param[:], int(sysEventCont.Length))
+			}
+
+			// Remove all non unicode character from the string.
+			event.param = strconv.Quote(event.param)
+
+			syscallContinuedEventsMap[event.monotonicTimestamp] = append(syscallContinuedEventsMap[event.monotonicTimestamp], event)
+		default:
+			api.Debugf("unknown event type: got %d, expected %d or %d", sysEvent.EventType, syscallEventTypeEnter, syscallEventTypeCont)
+		}
+	}
+
+	err = reader.perfReader.Resume()
+	if err != nil {
+		return nil, err
+	}
+
+	// Publish the events we gathered.
+	for enterTimestamp, enterTimestampEvents := range syscallEnterEventsMap {
+		for _, enterEvent := range enterTimestampEvents {
+			syscallName, err := api.GetSyscallName(enterEvent.id)
+			if err != nil {
+				return nil, fmt.Errorf("getting syscall name: %w", err)
+			}
+
+			event := &event{
+				timestamp: timestampFromEvent(enterEvent),
+				mountNsID: enterEvent.mountNsID,
+				cpu:       enterEvent.cpu,
+				pid:       enterEvent.pid,
+				comm:      enterEvent.comm,
+				syscall:   syscallName,
+			}
+
+			syscallDeclaration, err := getSyscallDeclaration(event.syscall)
+			if err != nil {
+				return nil, fmt.Errorf("getting syscall definition: %w", err)
+			}
+
+			parametersNumber := len(syscallDeclaration.Params)
+			event.parameters = make([]syscallParam, parametersNumber)
+			api.Debugf("\tevent parametersNumber: %d", parametersNumber)
+
+			for i := 0; i < parametersNumber; i++ {
+				paramName := syscallDeclaration.Params[i].Name
+				api.Debugf("\t\tevent paramName: %q", paramName)
+
+				isPointer := syscallDeclaration.Params[i].IsPointer
+
+				format := "%d"
+				if isPointer {
+					format = "0x%x"
+				}
+				paramValue := fmt.Sprintf(format, enterEvent.args[i])
+				api.Debugf("\t\tevent paramValue: %q", paramValue)
+
+				var paramContent *string
+
+				for _, syscallContEvent := range syscallContinuedEventsMap[enterTimestamp] {
+					if syscallContEvent.index == uint8(i) {
+						paramContent = &syscallContEvent.param
+						api.Debugf("\t\t\tevent paramContent: %q", *paramContent)
+
+						break
+					}
+				}
+
+				event.parameters[i] = syscallParam{
+					name:    paramName,
+					value:   paramValue,
+					content: paramContent,
+				}
+			}
+
+			delete(syscallContinuedEventsMap, enterTimestamp)
+
+			// There is no exit event for exit(), exit_group() and rt_sigreturn().
+			if event.syscall == "exit" || event.syscall == "exit_group" || event.syscall == "rt_sigreturn" {
+				delete(syscallEnterEventsMap, enterTimestamp)
+
+				// As there is no exit events for these syscalls,
+				// then there is no return value.
+				event.retval = "X"
+
+				api.Debugf("%v", event)
+				events = append(events, event)
+
+				continue
+			}
+
+			exitTimestampEvents, ok := syscallExitEventsMap[enterTimestamp]
+			if !ok {
+				api.Debugf("no exit event for timestamp %d", enterTimestamp)
+
+				continue
+			}
+
+			for _, exitEvent := range exitTimestampEvents {
+				if enterEvent.id != exitEvent.id || enterEvent.pid != exitEvent.pid {
+					continue
+				}
+
+				event.retval = retToStr(exitEvent.retval)
+
+				delete(syscallEnterEventsMap, enterTimestamp)
+				delete(syscallExitEventsMap, enterTimestamp)
+
+				api.Debugf("%v", event)
+				events = append(events, event)
+
+				break
+			}
+		}
+	}
+
+	api.Debugf("len(events): %d; len(syscallEnterEventsMap): %d; len(syscallExitEventsMap): %d; len(syscallContinuedEventsMap): %d\n", len(events), len(syscallEnterEventsMap), len(syscallExitEventsMap), len(syscallContinuedEventsMap))
+
+	// It is possible there are some incomplete events for several reasons:
+	// 1. Traceloop was started in the middle of a syscall, then we will only get
+	//    the exit but not the enter.
+	// 2. Traceloop was stopped in the middle of a syscall, then we will only get
+	//    the enter but not the exit
+	// 3. The buffer is full and so it only remains some exit events and not the
+	//    corresponding enter.
+	// Rather than dropping these incomplete events, we just add them to the
+	// events to be published.
+	for _, enterTimestampEvents := range syscallEnterEventsMap {
+		for _, enterEvent := range enterTimestampEvents {
+			syscallName, err := api.GetSyscallName(enterEvent.id)
+			if err != nil {
+				return nil, fmt.Errorf("getting syscall name: %w", err)
+			}
+
+			incompleteEnterEvent := &event{
+				timestamp: timestampFromEvent(enterEvent),
+				mountNsID: enterEvent.mountNsID,
+				cpu:       enterEvent.cpu,
+				pid:       enterEvent.pid,
+				comm:      enterEvent.comm,
+				syscall:   syscallName,
+				retval:    "unfinished",
+			}
+
+			events = append(events, incompleteEnterEvent)
+
+			api.Debugf("enterEvent(%q): %v\n", syscallName, enterEvent)
+		}
+	}
+
+	for _, exitTimestampEvents := range syscallExitEventsMap {
+		for _, exitEvent := range exitTimestampEvents {
+			syscallName, err := api.GetSyscallName(exitEvent.id)
+			if err != nil {
+				return nil, fmt.Errorf("getting syscall name: %w", err)
+			}
+
+			incompleteExitEvent := &event{
+				timestamp: timestampFromEvent(exitEvent),
+				cpu:       exitEvent.cpu,
+				pid:       exitEvent.pid,
+				comm:      exitEvent.comm,
+				mountNsID: exitEvent.mountNsID,
+				syscall:   syscallName,
+				retval:    retToStr(exitEvent.retval),
+			}
+
+			events = append(events, incompleteExitEvent)
+
+			api.Debugf("exitEvent(%q): %v\n", syscallName, exitEvent)
+		}
+	}
+
+	// Sort all events by ascending timestamp.
+	sort.Slice(events, func(i, j int) bool {
+		return events[i].timestamp < events[j].timestamp
+	})
+
+	return events, nil
+}
+
+//go:wasmexport gadgetInit
+func gadgetInit() int32 {
+	var sysEventCont *traceloopSyscallEventContT
+	var sysEvent *traceloopSyscallEventT
+	var err error
+	sysEventSize := alignSize(unsafe.Sizeof(*sysEvent))
+	sysEventContSize := alignSize(unsafe.Sizeof(*sysEventCont))
+
+	if sysEventSize != sysEventContSize {
+		api.Errorf("event sizes must be the same, there is a mismatch: %d != %d", sysEventSize, sysEventContSize)
+		return 1
+	}
+
+	dsOutput, err = api.NewDataSource("traceloop", api.DataSourceTypeSingle)
+	if err != nil {
+		api.Errorf("creating datasource: %v", err)
+		return 1
+	}
+
+	fieldsInfo := []struct {
+		name  string
+		kind  api.FieldKind
+		field *api.Field
+	}{
+		{
+			name:  "mntns_id",
+			kind:  api.Kind_Uint64,
+			field: &fields.mntnsID,
+		},
+		{
+			name:  "cpu",
+			kind:  api.Kind_Uint16,
+			field: &fields.cpu,
+		},
+		{
+			name:  "pid",
+			kind:  api.Kind_Uint32,
+			field: &fields.pid,
+		},
+		{
+			name:  "comm",
+			kind:  api.Kind_String,
+			field: &fields.comm,
+		},
+		{
+			name:  "syscall",
+			kind:  api.Kind_String,
+			field: &fields.syscall,
+		},
+		{
+			name:  "parameters",
+			kind:  api.Kind_String,
+			field: &fields.parameters,
+		},
+		{
+			name:  "ret",
+			kind:  api.Kind_String,
+			field: &fields.ret,
+		},
+	}
+	for _, fieldInfo := range fieldsInfo {
+		name := fieldInfo.name
+		*fieldInfo.field, err = dsOutput.AddField(name, fieldInfo.kind)
+		if err != nil {
+			api.Errorf("adding %s field: %v", name, err)
+			return 1
+		}
+	}
+
+	err = fields.mntnsID.AddTag("type:gadget_mntns_id")
+	if err != nil {
+		api.Errorf("adding tag to mntns_id field: %v", err)
+		return 1
+	}
+
+	return 0
+}
+
+//go:wasmexport gadgetStart
+func gadgetStart() int32 {
+	rawString, err := api.GetParamValue("syscall-filters", 256)
+	if err != nil {
+		api.Errorf("failed to get param: %v", err)
+		return 1
+	}
+
+	syscallsFilterMapName := "syscall_filters"
+	syscallsFilterMap, err := api.GetMap(syscallsFilterMapName)
+	if err != nil {
+		api.Errorf("no map named %s", syscallsFilterMapName)
+		return 1
+	}
+
+	var syscallFilters []string
+
+	if rawString != "" {
+		syscallFilters = strings.Split(rawString, ",")
+	}
+
+	// Try to keep the max entries in syscall_filters in sync with user code and
+	// ebpf code.
+	if len(syscallFilters) > maxSyscallFilters {
+		api.Errorf("Length of --syscall-filters exceeded. No more than 16 values can be added.")
+		return 1
+	}
+	for _, name := range syscallFilters {
+		id, err := api.GetSyscallID(name)
+		if err != nil {
+			api.Errorf("syscall %q does not exist", name)
+			return 1
+		}
+
+		err = syscallsFilterMap.Put(uint64(id), true)
+		if err != nil {
+			api.Errorf("Could not add %q (%d) to syscall filter map: %v", name, id, err)
+			return 1
+		}
+	}
+
+	if len(syscallFilters) > 0 {
+		syscallsEnableFilterMapName := "syscall_enable_filters"
+		syscallsEnableFilterMap, err := api.GetMap(syscallsEnableFilterMapName)
+		if err != nil {
+			api.Errorf("no map named %s", syscallsEnableFilterMapName)
+			return 1
+		}
+		err = syscallsEnableFilterMap.Put(uint32(0), true)
+		if err != nil {
+			api.Errorf("Could not add not enable filter syscall: %v", err)
+			return 1
+		}
+	}
+
+	mapName := "map_of_perf_buffers"
+
+	t.mapOfPerfBuffers, err = api.GetMap(mapName)
+	if err != nil {
+		api.Errorf("no map named %s", mapName)
+		return 1
+	}
+
+	syscallsMapName := "syscalls"
+
+	syscallsMap, err := api.GetMap(syscallsMapName)
+	if err != nil {
+		api.Errorf("no map named %s", syscallsMapName)
+		return 1
+	}
+
+	// Fill the syscall map with specific syscall signatures.
+	for name, def := range syscallDefs {
+		id, err := api.GetSyscallID(name)
+		if err != nil {
+			// It's possible that the syscall doesn't exist for this architecture, skip it
+			continue
+		}
+
+		err = syscallsMap.Put(uint64(id), def)
+		if err != nil {
+			api.Errorf("storing %s definition in corresponding map: %v", name, err)
+			return 1
+		}
+	}
+
+	ds, err := api.GetDataSource(api.DataSourceContainers)
+	if err != nil {
+		api.Errorf("Failed to get data source: %v", err)
+		return 1
+	}
+
+	eventTypeField, err := ds.GetField("event_type")
+	if err != nil {
+		api.Errorf("Failed to get field: %v", err)
+		return 1
+	}
+
+	mntnsIDField, err := ds.GetField("mntns_id")
+	if err != nil {
+		api.Errorf("Failed to get field: %v", err)
+		return 1
+	}
+
+	nameField, err := ds.GetField("name")
+	if err != nil {
+		api.Errorf("Failed to get field: %v", err)
+		return 1
+	}
+
+	ds.Subscribe(func(ds api.DataSource, data api.Data) {
+		eventType, err := eventTypeField.String(data, api.DataSourceContainersEventTypeMaxSize)
+		if err != nil {
+			api.Errorf("getting event_type from corresponding field: %v", err)
+			return
+		}
+
+		mntnsID, err := mntnsIDField.Uint64(data)
+		if err != nil {
+			api.Errorf("getting mntns_id from corresponding field: %v", err)
+			return
+		}
+
+		name, err := nameField.String(data, 64)
+		if err != nil {
+			api.Errorf("getting name from corresponding field: %v", err)
+			return
+		}
+
+		switch eventType {
+		case "CREATED":
+			api.Debugf("attaching %v", name)
+			err = t.attach(mntnsID)
+			if err != nil {
+				api.Errorf("attaching container %v: %v", name, err)
+				return
+			}
+		case "DELETED":
+			api.Debugf("detaching %v", name)
+			err := t.detach(mntnsID)
+			if err != nil {
+				api.Errorf("detaching container %v: %v", name, err)
+				return
+			}
+		default:
+			// Nothing to do, we don't care about other events.
+		}
+	}, 0)
+
+	return 0
+}
+
+//go:wasmexport gadgetStop
+func gadgetStop() int32 {
+	t.readers.Range(func(key, value any) bool {
+		mntnsID := key.(uint64)
+		reader := value.(*containerRingReader)
+
+		events, err := t.read(mntnsID, reader)
+		if err != nil {
+			api.Errorf("reading container: %v", err)
+			return true
+		}
+
+		reader.perfReader.Close()
+
+		for _, event := range events {
+			packet, err := dsOutput.NewPacketSingle()
+			if err != nil {
+				api.Errorf("creating datasource packet: %v", err)
+				continue
+			}
+
+			fields.mntnsID.SetUint64(api.Data(packet), event.mountNsID)
+			fields.cpu.SetUint16(api.Data(packet), event.cpu)
+			fields.pid.SetUint32(api.Data(packet), event.pid)
+			fields.comm.SetString(api.Data(packet), event.comm)
+			fields.syscall.SetString(api.Data(packet), event.syscall)
+			fields.parameters.SetString(api.Data(packet), paramsToString(event.parameters))
+			fields.ret.SetString(api.Data(packet), event.retval)
+
+			dsOutput.EmitAndRelease(api.Packet(packet))
+		}
+
+		return true
+	})
+
+	return 0
+}
+
+func main() {}
diff --git a/gadgets/traceloop/program.bpf.c b/gadgets/traceloop/program.bpf.c
new file mode 100644
index 000000000..195320cb9
--- /dev/null
+++ b/gadgets/traceloop/program.bpf.c
@@ -0,0 +1,666 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <vmlinux.h>
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_core_read.h>
+#include <bpf/bpf_tracing.h>
+#include <gadget/mntns.h>
+#include <gadget/mntns_filter.h>
+
+#ifndef TASK_COMM_LEN
+#define TASK_COMM_LEN 16
+#endif
+
+#define PARAM_LEN 128
+
+/* The syscall can have max 6 arguments. */
+#define SYSCALL_ARGS 6
+
+/* 16 syscalls should be enough to filter out. */
+#define SYSCALL_FILTERS 16
+
+const __u64 PARAM_PROBE_AT_EXIT_MASK = 0xf000000000000000ULL;
+const __u64 USE_RET_AS_PARAM_LENGTH = 0x0ffffffffffffffeULL;
+
+/* Special values used to refer to dynamic length. */
+const __u64 USE_NULL_BYTE_LENGTH = 0x0fffffffffffffffULL;
+
+/*
+ * INDEX(x) is not defined (Cgo cannot access macros),
+ * use bit arithmetic with mask below to get value and use addition to generate.
+ * The current maximum of parameters is 6, so that means only values until 5 may
+ * be added to specify the index. The other theoretical limit is 13 since
+ * 14 and 15 are reserved as written above 0xff (null-byte length) and
+ * 0xfe (ret as param. length).
+ */
+const __u64 USE_ARG_INDEX_AS_PARAM_LENGTH = 0x0ffffffffffffff0ULL;
+const __u64 USE_ARG_INDEX_AS_PARAM_LENGTH_MASK = 0xfULL;
+
+enum event_type {
+	SYSCALL_EVENT_TYPE_ENTER = 0,
+	SYSCALL_EVENT_TYPE_EXIT = 1,
+	SYSCALL_EVENT_TYPE_CONT = 2
+};
+
+struct syscall_event_t {
+	/*
+	 * event_type must be the first field.
+	 * So, userspace can figure out the type of events in the ring buffer.
+	 */
+	enum event_type event_type;
+
+	/* __u64 ret stored in args[0] */
+	__u64 args[SYSCALL_ARGS];
+	__u64 monotonic_timestamp;
+	__u64 boot_timestamp;
+	__u32 pid;
+
+	__u16 cpu;
+	__u16 id;
+	__u8 comm[TASK_COMM_LEN];
+	/* how many syscall_event_cont_t messages to expect after */
+	__u8 cont_nr;
+
+	__u8 padding[60];
+};
+
+struct syscall_event_cont_t {
+	/*
+	 * event_type must be the first field.
+	 * So, userspace can figure out the type of events in the ring buffer.
+	 */
+	enum event_type event_type;
+
+	__u8 param[PARAM_LEN];
+	__u64 monotonic_timestamp;
+	__u64 length;
+	__u8 index;
+	__u8 failed;
+};
+
+_Static_assert(
+	sizeof(struct syscall_event_cont_t) == sizeof(struct syscall_event_t),
+	"syscall_event_t and syscall_event_cont_t must have the same size as API does not permit having different sizes");
+
+struct syscall_def_t {
+	__u64 args_len[SYSCALL_ARGS];
+};
+
+struct remembered_args {
+	__u64 monotonic_timestamp;
+	__u64 nr;
+	__u64 args[SYSCALL_ARGS];
+};
+
+/*
+ * Taken from:
+ * https://github.com/seccomp/libseccomp/blob/afbde6ddaec7c58c3b281d43b0b287269ffca9bd/src/syscalls.csv
+ */
+#if defined(__TARGET_ARCH_arm64)
+#define __NR_rt_sigreturn 139
+#define __NR_exit_group 94
+#define __NR_exit 93
+#elif defined(__TARGET_ARCH_x86)
+#define __NR_rt_sigreturn 15
+#define __NR_exit_group 231
+#define __NR_exit 60
+#else
+#error "Traceloop is not supported on your architecture."
+#endif
+
+/*
+ * Add the following in build.yaml to print debug messages:
+ *  cflags: '-DSHOW_DEBUG'
+ */
+#if defined(SHOW_DEBUG)
+#define bpf_debug_printk(fmt, ...) bpf_printk(fmt, ##__VA_ARGS__)
+#else /* !defined(SHOW_DEBUG) */
+#define bpf_debug_printk(fmt, ...) \
+	do {                       \
+	} while (0)
+#endif /* !defined(SHOW_DEBUG) */
+
+/*
+ * Add the following in build.yaml to print error messages:
+ *  cflags: '-DSHOW_ERROR'
+ */
+#if defined(SHOW_ERROR)
+#define bpf_error_printk(fmt, ...) bpf_printk(fmt, ##__VA_ARGS__)
+#else /* !defined(SHOW_ERROR) */
+#define bpf_error_printk(fmt, ...) \
+	do {                       \
+	} while (0)
+#endif /* !defined(SHOW_ERROR) */
+
+const struct syscall_event_t *unused_event __attribute__((unused));
+const struct syscall_event_cont_t *unused_event_cont __attribute__((unused));
+
+/*
+ * We need this to avoid hitting the 512 bytes stack limit.
+ * Indeed, pt_regs contains several u64 fields, so it is quite big.
+ */
+static const struct pt_regs empty;
+static struct syscall_def_t default_definition;
+static const struct syscall_event_t empty_syscall_event = {};
+static const struct syscall_event_cont_t empty_syscall_cont_event = {};
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH_OF_MAPS);
+	/*
+	 * We will use mount namespace ID to get the perf buffer corresponding
+	 * to this container.
+	 */
+	__uint(key_size, sizeof(u64));
+	__uint(value_size, sizeof(u32));
+	__uint(max_entries, 1024);
+	__array(
+		values, struct {
+			__uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);
+			__uint(key_size, sizeof(u32));
+			__uint(value_size, sizeof(u32));
+		});
+} map_of_perf_buffers SEC(".maps");
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__uint(key_size, sizeof(u64));
+	__uint(value_size, sizeof(struct syscall_def_t));
+	/*
+	 * For now, we only support 22 syscalls, let's use the immediate greater
+	 * power of 2.
+	 * This value should be increased when new syscalls are added to
+	 * syscallDefs in program.go.
+	 */
+	__uint(max_entries, 32);
+} syscalls SEC(".maps");
+
+/*
+ * This key/value store maps thread PIDs to syscall arg arrays
+ * that were remembered at sys_enter so that sys_exit can probe buffer
+ * contents and generate syscall events showing the result content.
+ */
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__uint(key_size, sizeof(u64));
+	__uint(value_size, sizeof(struct remembered_args));
+	__uint(max_entries, 1024);
+} probe_at_sys_exit SEC(".maps");
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__uint(key_size, sizeof(u64));
+	__uint(value_size, sizeof(struct pt_regs));
+	__uint(max_entries, 1024);
+} regs_map SEC(".maps");
+
+/*
+ * syscall_event_t and syscall_event_cont_t are big structures, let store them
+ * here instead of using the stack.
+ */
+struct {
+	__uint(type, BPF_MAP_TYPE_PERCPU_ARRAY);
+	__uint(key_size, sizeof(u32));
+	__uint(value_size, sizeof(struct syscall_event_t));
+	__uint(max_entries, 1);
+} fake_stack SEC(".maps");
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__uint(key_size, sizeof(u64));
+	/*
+	 * We do not care about the value here, so let's use a bool to consume one
+	 * byte per value.
+	 */
+	__uint(value_size, sizeof(bool));
+	__uint(map_flags, BPF_F_NO_PREALLOC);
+	__uint(max_entries, SYSCALL_FILTERS);
+} syscall_filters SEC(".maps");
+
+// the below map is a surrogate for the --sycall-filters parameter
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__uint(max_entries, 1);
+	__type(key, __u32); // index: zero
+	__type(value, bool);
+} syscall_enable_filters SEC(".maps");
+
+void *fake_stack_alloc(const void *event)
+{
+	u32 zero = 0;
+
+	if (bpf_map_update_elem(&fake_stack, &zero, event, BPF_ANY))
+		return NULL;
+
+	return bpf_map_lookup_elem(&fake_stack, &zero);
+}
+
+static __always_inline int skip_exit_probe(int nr)
+{
+	return !!(nr == __NR_exit || nr == __NR_exit_group ||
+		  nr == __NR_rt_sigreturn);
+}
+
+static __always_inline bool should_filter_out_syscall(u64 syscall_nr)
+{
+	__u32 zero = 0;
+	return bpf_map_lookup_elem(&syscall_enable_filters, &zero) != NULL &&
+	       bpf_map_lookup_elem(&syscall_filters, &syscall_nr) == NULL;
+}
+
+/*
+ * Highly inspired from ksnoop.bpf.c:
+ * https://github.com/iovisor/bcc/blob/f90126bb3770ea1bdd915ff3b47e451c6dde5c40/libbpf-tools/ksnoop.bpf.c#L280
+ */
+static __always_inline u64 get_arg(struct pt_regs *regs, int i)
+{
+	switch (i) {
+	case 1:
+		return PT_REGS_PARM1_CORE_SYSCALL(regs);
+	case 2:
+		return PT_REGS_PARM2_CORE_SYSCALL(regs);
+	case 3:
+		return PT_REGS_PARM3_CORE_SYSCALL(regs);
+	case 4:
+		return PT_REGS_PARM4_CORE_SYSCALL(regs);
+	case 5:
+		return PT_REGS_PARM5_CORE_SYSCALL(regs);
+	case 6:
+		return PT_REGS_PARM6_CORE_SYSCALL(regs);
+	default:
+		bpf_error_printk(
+			"There is no PT_REGS_PARM%d_SYSCALL macro, check the argument!",
+			i);
+		return 0;
+	}
+}
+
+/*
+ * sys_enter is defined as:
+ * TP_PROTO(struct pt_regs *regs, long id)
+ * (https://elixir.bootlin.com/linux/v5.19/source/include/trace/events/syscalls.h#L20)
+ * So, ctx->args[0] contains a struct pt_regs and ctx->args[1] the syscall ID.
+ */
+SEC("raw_tracepoint/sys_enter")
+int ig_traceloop_e(struct bpf_raw_tracepoint_args *ctx)
+{
+	u64 mntns_id = gadget_get_current_mntns_id();
+	struct remembered_args remembered = {};
+	u64 pid = bpf_get_current_pid_tgid();
+	struct syscall_def_t *syscall_def;
+	struct syscall_event_t *sc;
+	u64 nr = ctx->args[1];
+	struct pt_regs *args;
+	void *perf_buffer;
+	int ret;
+	int i;
+
+	if (should_filter_out_syscall(nr))
+		return 0;
+
+	perf_buffer = bpf_map_lookup_elem(&map_of_perf_buffers, &mntns_id);
+	if (!perf_buffer)
+		return 0;
+
+	sc = fake_stack_alloc(&empty_syscall_event);
+	if (!sc)
+		return 0;
+
+	/*
+	 * The boot time timestamp is used to give the timestamp to users. It
+	 * is converted to the wall-clock time in userspace. It only works
+	 * from Linux 5.7. On older kernels, the BPF bytecode for
+	 * bpf_ktime_get_boot_ns is automatically removed by the BPF loader,
+	 * see FixBpfKtimeGetBootNs. In this way, this BPF program can still be
+	 * loaded on older kernels.
+	 */
+	u64 boot_ts = bpf_ktime_get_boot_ns();
+
+	/*
+	 * The monotonic timestamp is used by traceloop to match the sys_enter
+	 * event with the cont and sys_exit events. This is an internal
+	 * implementation detail not exposed to the user.
+	 */
+	u64 monotonic_ts = bpf_ktime_get_ns();
+
+	sc->event_type = SYSCALL_EVENT_TYPE_ENTER;
+	sc->boot_timestamp = boot_ts;
+	sc->monotonic_timestamp = monotonic_ts;
+	sc->cont_nr = 0;
+	sc->cpu = bpf_get_smp_processor_id();
+	sc->pid = pid >> 32;
+	sc->id = nr;
+
+	remembered.monotonic_timestamp = monotonic_ts;
+	remembered.nr = nr;
+
+	syscall_def = bpf_map_lookup_elem(&syscalls, &nr);
+	/*
+	 * syscalls map contains definition for specific syscall like read or
+	 * write.
+	 * All others syscalls, like nanosleep, are not in this map because
+	 * their signature is not specific, in this case, we use the default
+	 * definition.
+	 */
+	if (syscall_def == NULL)
+		syscall_def = &default_definition;
+
+	bpf_get_current_comm(sc->comm, sizeof(sc->comm));
+
+	ret = bpf_map_update_elem(&regs_map, &pid, &empty, BPF_NOEXIST);
+	if (ret) {
+		bpf_error_printk(
+			"enter: there should not be any pt_regs for key %lu: %d",
+			pid, ret);
+
+		goto end;
+	}
+
+	args = bpf_map_lookup_elem(&regs_map, &pid);
+	if (!args) {
+		bpf_error_printk("enter: there should be a pt_regs for key %lu",
+				 pid);
+
+		goto end;
+	}
+
+	bpf_probe_read_kernel(args, sizeof(*args), (void *)ctx->args[0]);
+
+	for (i = 0; i < SYSCALL_ARGS; i++) {
+		/* + 1 because PT_REGS_PARM begins from 1. */
+		u64 arg = get_arg(args, i + 1);
+		sc->args[i] = arg;
+		remembered.args[i] = arg;
+		if (syscall_def->args_len[i])
+			sc->cont_nr++;
+	}
+
+	bpf_debug_printk(
+		"Perf event output: sc.id: %d; sc.comm: %s; sizeof(sc): %d",
+		sc->id, sc->comm, sizeof(sc));
+	ret = bpf_perf_event_output(ctx, perf_buffer, BPF_F_CURRENT_CPU, sc,
+				    sizeof(*sc));
+	if (ret != 0) {
+		bpf_error_printk("Problem outputting perf event: %d", ret);
+	}
+
+	// Avoid using probe_at_sys_exit for exit() and exit_group() because sys_exit
+	// would not be called and the map would not be cleaned up and would get full.
+	// Note that a process can still get killed in the middle, so we would need
+	// a userspace cleaner for this case (TODO).
+	if (!skip_exit_probe(nr))
+		bpf_map_update_elem(&probe_at_sys_exit, &pid, &remembered,
+				    BPF_ANY);
+
+// We need to unroll this loop to make this work on kernels 5.4.0-x on ubuntu, see
+// https://github.com/inspektor-gadget/inspektor-gadget/issues/1465 for more details.
+#pragma unroll
+	for (i = 0; i < SYSCALL_ARGS; i++) {
+		u64 arg_len = syscall_def->args_len[i];
+		struct syscall_event_cont_t *sc_cont;
+
+		if (!arg_len || (arg_len & PARAM_PROBE_AT_EXIT_MASK) ||
+		    arg_len == USE_RET_AS_PARAM_LENGTH)
+			continue;
+
+		sc_cont = fake_stack_alloc(&empty_syscall_cont_event);
+		if (!sc_cont)
+			continue;
+
+		sc_cont->event_type = SYSCALL_EVENT_TYPE_CONT;
+		sc_cont->monotonic_timestamp = monotonic_ts;
+		sc_cont->index = i;
+		sc_cont->failed = false;
+
+		bool null_terminated = false;
+		if (arg_len == USE_NULL_BYTE_LENGTH) {
+			null_terminated = true;
+			arg_len = 0;
+		} else if (arg_len >= USE_ARG_INDEX_AS_PARAM_LENGTH) {
+			__u64 idx = arg_len &
+				    USE_ARG_INDEX_AS_PARAM_LENGTH_MASK;
+
+			/*
+			 * Access args via the previously saved map entry instead of
+			 * the ctx pointer or 'remembered' struct to avoid this verifier
+			 * issue (which does not occur in sys_exit for the same code):
+			 * "variable ctx access var_off=(0x0; 0x38) disallowed"
+			 */
+			struct remembered_args *remembered_ctx_workaround;
+			if (idx < SYSCALL_ARGS) {
+				remembered_ctx_workaround = bpf_map_lookup_elem(
+					&probe_at_sys_exit, &pid);
+				if (remembered_ctx_workaround)
+					arg_len = remembered_ctx_workaround
+							  ->args[idx];
+				else
+					arg_len = 0;
+			} else {
+				arg_len = PARAM_LEN;
+			}
+		}
+
+		if (arg_len > sizeof(sc_cont->param))
+			arg_len = sizeof(sc_cont->param);
+
+		if (null_terminated)
+			sc_cont->length = USE_NULL_BYTE_LENGTH;
+		else
+			sc_cont->length = arg_len;
+
+		/* + 1 because PT_REGS_PARM begins from 1. */
+		u64 arg = get_arg(args, i + 1);
+
+		if (!arg_len &&
+		    null_terminated /* NULL terminated argument like string */
+		    && bpf_probe_read_user_str(sc_cont->param, PARAM_LEN,
+					       (void *)(arg)) < 0)
+			sc_cont->failed = true;
+		else if (sizeof(u8) <= arg_len &&
+			 arg_len <=
+				 sizeof(u64) /* Conventional arguments like type (char, int, etc.) */
+			 && bpf_probe_read_user(sc_cont->param, arg_len,
+						(void *)(arg)))
+			sc_cont->failed = true;
+		else if (bpf_probe_read_user(
+				 sc_cont->param, PARAM_LEN,
+				 (void *)(arg))) /* TODO Struct arguments? */
+			sc_cont->failed = true;
+
+		bpf_debug_printk(
+			"Perf event output: sc_cont.index: %d; sizeof(sc_cont): %d",
+			sc_cont->index, sizeof(sc_cont));
+		ret = bpf_perf_event_output(ctx, perf_buffer, BPF_F_CURRENT_CPU,
+					    sc_cont, sizeof(*sc_cont));
+		if (ret != 0) {
+			bpf_error_printk(
+				"Problem outputting continued perf event: %d",
+				ret);
+		}
+	}
+
+end:
+	bpf_map_delete_elem(&regs_map, &pid);
+
+	return 0;
+}
+
+/*
+ * syscall_get_nr() is defined for each architecture in the Linux kernel.
+ * As we cannot use trace_event_raw_sys_exit, we need to get the current syscall
+ * number from the register.
+ * So, this function should be expanded with the code of the architecture we
+ * support.
+ */
+static __always_inline int syscall_get_nr(struct pt_regs *regs)
+{
+#if defined(__TARGET_ARCH_arm64)
+	return regs->syscallno;
+#elif defined(__TARGET_ARCH_x86)
+	return regs->orig_ax;
+#else
+#error "Traceloop is not supported on your architecture."
+#endif
+}
+
+/*
+ * sys_exit is defined as:
+ * TP_PROTO(struct pt_regs *regs, long ret),
+ * (https://elixir.bootlin.com/linux/v5.19/source/include/trace/events/syscalls.h#L46)
+ * So, ctx->args[0] contains a struct pt_regs and ctx->args[1] the syscall
+ * return value.
+ */
+SEC("raw_tracepoint/sys_exit")
+int ig_traceloop_x(struct bpf_raw_tracepoint_args *ctx)
+{
+	u64 mntns_id = gadget_get_current_mntns_id();
+	u64 pid = bpf_get_current_pid_tgid();
+	struct remembered_args *remembered;
+	struct syscall_def_t *syscall_def;
+	struct syscall_event_t *sc;
+	long ret = ctx->args[1];
+	struct pt_regs *args;
+	void *perf_buffer;
+	int i, r;
+	u64 nr;
+
+	perf_buffer = bpf_map_lookup_elem(&map_of_perf_buffers, &mntns_id);
+	if (!perf_buffer)
+		return 0;
+
+	r = bpf_map_update_elem(&regs_map, &pid, &empty, BPF_NOEXIST);
+	if (r) {
+		bpf_error_printk(
+			"exit: there should not be any pt_regs for key %lu: %d",
+			pid, r);
+
+		return 0;
+	}
+
+	args = bpf_map_lookup_elem(&regs_map, &pid);
+	if (!args) {
+		bpf_error_printk("exit: there should be a pt_regs for key %lu",
+				 pid);
+
+		goto end;
+	}
+
+	bpf_probe_read_kernel(args, sizeof(*args), (void *)ctx->args[0]);
+	nr = syscall_get_nr(args);
+	/* TODO Why this can occur? */
+	if (nr == -1)
+		goto end;
+
+	sc = fake_stack_alloc(&empty_syscall_event);
+	if (!sc)
+		goto end;
+
+	sc->event_type = SYSCALL_EVENT_TYPE_EXIT;
+	sc->boot_timestamp = bpf_ktime_get_boot_ns();
+	sc->cpu = bpf_get_smp_processor_id();
+	sc->pid = pid >> 32;
+	sc->id = nr;
+	sc->args[0] = ret;
+
+	syscall_def = bpf_map_lookup_elem(&syscalls, &nr);
+	if (syscall_def == NULL)
+		syscall_def = &default_definition;
+
+	remembered = bpf_map_lookup_elem(&probe_at_sys_exit, &pid);
+	if (!remembered)
+		goto end;
+
+	/*
+	 * This ensures all events (enter, exit and cont) related to a given
+	 * syscall have the same timestamp.
+	 */
+	sc->monotonic_timestamp = remembered->monotonic_timestamp;
+
+	bpf_get_current_comm(sc->comm, sizeof(sc->comm));
+
+	bpf_debug_printk(
+		"Perf event output (exit): sc.id: %d; sc.comm: %s; sizeof(sc): %d",
+		sc->id, sc->comm, sizeof(sc));
+	r = bpf_perf_event_output(ctx, perf_buffer, BPF_F_CURRENT_CPU, sc,
+				  sizeof(*sc));
+	if (r != 0)
+		bpf_error_printk("Problem outputting exit perf event: %d", ret);
+
+	for (i = 0; i < SYSCALL_ARGS; i++) {
+		u64 arg_len = syscall_def->args_len[i];
+		struct syscall_event_cont_t *sc_cont;
+
+		if (!arg_len || !(arg_len & PARAM_PROBE_AT_EXIT_MASK))
+			goto end_loop;
+
+		sc_cont = fake_stack_alloc(&empty_syscall_cont_event);
+		if (!sc_cont)
+			continue;
+
+		sc_cont->event_type = SYSCALL_EVENT_TYPE_CONT;
+		sc_cont->monotonic_timestamp = remembered->monotonic_timestamp;
+		sc_cont->index = i;
+		sc_cont->failed = false;
+
+		bool null_terminated = false;
+		arg_len &= ~PARAM_PROBE_AT_EXIT_MASK;
+
+		if (arg_len == USE_RET_AS_PARAM_LENGTH) {
+			if ((signed long)ret < 0)
+				arg_len = 0;
+			else
+				arg_len = ret;
+		} else if (arg_len == USE_NULL_BYTE_LENGTH) {
+			null_terminated = true;
+			arg_len = 0;
+		} else if (arg_len >= USE_ARG_INDEX_AS_PARAM_LENGTH) {
+			__u64 idx = arg_len &
+				    USE_ARG_INDEX_AS_PARAM_LENGTH_MASK;
+			if (idx < SYSCALL_ARGS)
+				arg_len = remembered->args[idx];
+			else
+				arg_len = PARAM_LEN;
+		}
+
+		if (arg_len > sizeof(sc_cont->param))
+			arg_len = sizeof(sc_cont->param);
+
+		if (null_terminated)
+			sc_cont->length = USE_NULL_BYTE_LENGTH;
+		else
+			sc_cont->length = arg_len;
+
+		if (arg_len == 0 && null_terminated) {
+			if (bpf_probe_read_user_str(
+				    sc_cont->param, PARAM_LEN,
+				    (void *)(remembered->args[i])) < 0)
+				sc_cont->failed = true;
+		} else if (sizeof(u8) <= arg_len && arg_len <= sizeof(u64) &&
+			   bpf_probe_read_user(sc_cont->param, arg_len,
+					       (void *)(remembered->args[i]))) {
+			sc_cont->failed = true;
+		} else if (bpf_probe_read_user(sc_cont->param, PARAM_LEN,
+					       (void *)(remembered->args[i]))) {
+			sc_cont->failed = true;
+		}
+
+		bpf_debug_printk(
+			"Perf event output (continued): sc_cont.index: %d; sizeof(sc_cont): %d",
+			sc_cont->index, sizeof(sc_cont));
+		r = bpf_perf_event_output(ctx, perf_buffer, BPF_F_CURRENT_CPU,
+					  sc_cont, sizeof(*sc_cont));
+		if (r != 0) {
+			bpf_error_printk(
+				"Problem outputting continued perf event: %d",
+				ret);
+		}
+
+end_loop:
+		bpf_map_delete_elem(&probe_at_sys_exit, &pid);
+	}
+
+end:
+	bpf_map_delete_elem(&regs_map, &pid);
+
+	return 0;
+}
+
+char LICENSE[] SEC("license") = "GPL";
diff --git a/gadgets/traceloop/test/integration/traceloop_test.go b/gadgets/traceloop/test/integration/traceloop_test.go
new file mode 100644
index 000000000..5d40ec5e0
--- /dev/null
+++ b/gadgets/traceloop/test/integration/traceloop_test.go
@@ -0,0 +1,123 @@
+// Copyright 2024 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package tests
+
+import (
+	"fmt"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/require"
+
+	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
+	igtesting "github.com/inspektor-gadget/inspektor-gadget/pkg/testing"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/containers"
+	igrunner "github.com/inspektor-gadget/inspektor-gadget/pkg/testing/ig"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/match"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/utils"
+)
+
+type traceloopEvent struct {
+	utils.CommonData
+
+	MntnsID    uint64 `json:"mntns_id"`
+	CPU        uint16 `json:"cpu"`
+	PID        uint32 `json:"pid"`
+	Comm       string `json:"comm"`
+	Syscall    string `json:"syscall"`
+	Parameters string `json:"parameters"`
+	Ret        string `json:"ret"`
+}
+
+func TestTraceloop(t *testing.T) {
+	gadgettesting.RequireEnvironmentVariables(t)
+	utils.InitTest(t)
+
+	containerFactory, err := containers.NewContainerFactory(utils.Runtime)
+	require.NoError(t, err, "new container factory")
+	containerName := "test-traceloop"
+	containerImage := gadgettesting.BusyBoxImage
+
+	var ns string
+	containerOpts := []containers.ContainerOption{
+		containers.WithContainerImage(containerImage),
+	}
+
+	if utils.CurrentTestComponent == utils.KubectlGadgetTestComponent {
+		ns = utils.GenerateTestNamespaceName(t, "test-traceloop")
+		containerOpts = append(containerOpts, containers.WithContainerNamespace(ns))
+	}
+
+	testContainer := containerFactory.NewContainer(
+		containerName,
+		"while true; do ls > /dev/null; sleep 0.1; done",
+		containerOpts...,
+	)
+
+	testContainer.Start(t)
+	t.Cleanup(func() {
+		testContainer.Stop(t)
+	})
+
+	var runnerOpts []igrunner.Option
+	var testingOpts []igtesting.Option
+	commonDataOpts := []utils.CommonDataOption{utils.WithContainerImageName(containerImage), utils.WithContainerID(testContainer.ID())}
+
+	switch utils.CurrentTestComponent {
+	case utils.IgLocalTestComponent:
+		runnerOpts = append(runnerOpts, igrunner.WithFlags(fmt.Sprintf("-r=%s", utils.Runtime)))
+	case utils.KubectlGadgetTestComponent:
+		runnerOpts = append(runnerOpts, igrunner.WithFlags(fmt.Sprintf("-n=%s", ns)))
+		testingOpts = append(testingOpts, igtesting.WithCbBeforeCleanup(utils.PrintLogsFn(ns)))
+		commonDataOpts = append(commonDataOpts, utils.WithK8sNamespace(ns))
+	}
+
+	runnerOpts = append(runnerOpts, igrunner.WithValidateOutput(
+		func(t *testing.T, output string) {
+			expectedEntry := &traceloopEvent{
+				CommonData: utils.BuildCommonData(containerName, commonDataOpts...),
+				MntnsID:    utils.NormalizedInt,
+				CPU:        utils.NormalizedInt,
+				PID:        utils.NormalizedInt,
+				Comm:       "ls",
+				Syscall:    "write",
+				Parameters: utils.NormalizedStr,
+				Ret:        utils.NormalizedStr,
+			}
+
+			normalize := func(e *traceloopEvent) {
+				utils.NormalizeCommonData(&e.CommonData)
+				utils.NormalizeInt(&e.MntnsID)
+				utils.NormalizeInt(&e.CPU)
+				utils.NormalizeInt(&e.PID)
+				utils.NormalizeString(&e.Parameters)
+				utils.NormalizeString(&e.Ret)
+			}
+
+			match.MatchEntries(t, match.JSONMultiObjectMode, output, normalize, expectedEntry)
+		},
+	))
+
+	// Use timeout to simulate Ctrl^C.
+	runnerOpts = append(runnerOpts, igrunner.WithFlags("--timeout=10"))
+	traceloopContainersCmd := igrunner.New("traceloop", runnerOpts...)
+
+	steps := []igtesting.TestStep{
+		traceloopContainersCmd,
+		// wait to ensure ig or kubectl-gadget has started
+		utils.Sleep(3 * time.Second),
+	}
+	igtesting.RunTestSteps(steps, t, testingOpts...)
+}
diff --git a/go.mod b/go.mod
index 7b8bab9fe..e844cc955 100644
--- a/go.mod
+++ b/go.mod
@@ -1,83 +1,86 @@
 module github.com/inspektor-gadget/inspektor-gadget
 
-go 1.23.0
+go 1.24.0
 
 require (
 	github.com/blang/semver v3.5.1+incompatible
-	github.com/cilium/ebpf v0.17.3
-	github.com/containerd/containerd v1.7.25
+	github.com/cilium/ebpf v0.18.0
+	github.com/containerd/containerd v1.7.27
 	github.com/containerd/errdefs v1.0.0
 	github.com/containerd/nri v0.9.0
-	github.com/containers/common v0.62.0
-	github.com/containers/image/v5 v5.34.0
+	github.com/containers/common v0.63.0
+	github.com/containers/image/v5 v5.35.0
 	github.com/coreos/go-systemd/v22 v22.5.0
 	github.com/cyphar/filepath-securejoin v0.4.1
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc
 	github.com/distribution/reference v0.6.0
-	github.com/docker/cli v27.5.1+incompatible
-	github.com/docker/docker v27.5.1+incompatible
+	github.com/docker/cli v28.1.1+incompatible
+	github.com/docker/docker v28.1.1+incompatible
 	github.com/docker/go-connections v0.5.0
 	github.com/docker/go-units v0.5.0
 	github.com/dustin/go-humanize v1.0.1
-	github.com/expr-lang/expr v1.16.9
-	github.com/florianl/go-tc v0.4.4
-	github.com/fsnotify/fsnotify v1.8.0
-	github.com/giantswarm/crd-docs-generator v0.11.2
+	github.com/expr-lang/expr v1.17.4
+	github.com/florianl/go-tc v0.4.5
+	github.com/fsnotify/fsnotify v1.9.0
+	github.com/giantswarm/crd-docs-generator v0.11.4
 	github.com/godbus/dbus/v5 v5.1.0
 	github.com/gofrs/flock v0.12.1
 	github.com/google/go-cmp v0.7.0
 	github.com/google/uuid v1.6.0
 	github.com/gopacket/gopacket v1.3.1
 	github.com/kr/pretty v0.3.1
-	github.com/moby/moby v27.5.1+incompatible
+	github.com/moby/moby v28.1.1+incompatible
 	github.com/onsi/ginkgo v1.16.5
-	github.com/onsi/gomega v1.36.2
-	github.com/opencontainers/image-spec v1.1.0
-	github.com/opencontainers/runtime-spec v1.2.0
-	github.com/prometheus/client_golang v1.21.0
+	github.com/onsi/gomega v1.37.0
+	github.com/opencontainers/image-spec v1.1.1
+	github.com/opencontainers/runtime-spec v1.2.1
+	github.com/prometheus/client_golang v1.22.0
 	github.com/s3rj1k/go-fanotify/fanotify v0.0.0-20210917134616-9c00a300bb7a
 	github.com/seccomp/libseccomp-golang v0.10.0 // indirect
 	github.com/shopspring/decimal v1.4.0
-	github.com/sigstore/sigstore v1.8.15
+	github.com/sigstore/sigstore v1.9.4
 	github.com/sirupsen/logrus v1.9.3
 	github.com/spf13/cobra v1.9.1
 	github.com/spf13/pflag v1.0.6
-	github.com/spf13/viper v1.19.0
+	github.com/spf13/viper v1.20.1
 	github.com/stretchr/testify v1.10.0
 	github.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635
 	github.com/tetratelabs/wazero v1.9.0
-	github.com/tklauser/numcpus v0.9.0
-	github.com/vishvananda/netlink v1.3.0
+	github.com/tklauser/numcpus v0.10.0
+	github.com/vishvananda/netlink v1.3.1
 	github.com/vishvananda/netns v0.0.5
-	go.opentelemetry.io/otel v1.34.0
-	go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.10.0
-	go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.34.0
-	go.opentelemetry.io/otel/exporters/prometheus v0.56.0
-	go.opentelemetry.io/otel/log v0.10.0
-	go.opentelemetry.io/otel/metric v1.34.0
-	go.opentelemetry.io/otel/sdk v1.34.0
-	go.opentelemetry.io/otel/sdk/log v0.10.0
-	go.opentelemetry.io/otel/sdk/metric v1.34.0
+	go.opentelemetry.io/contrib/instrumentation/runtime v0.61.0
+	go.opentelemetry.io/otel v1.36.0
+	go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.12.2
+	go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.36.0
+	go.opentelemetry.io/otel/exporters/prometheus v0.58.0
+	go.opentelemetry.io/otel/log v0.12.2
+	go.opentelemetry.io/otel/metric v1.36.0
+	go.opentelemetry.io/otel/sdk v1.36.0
+	go.opentelemetry.io/otel/sdk/log v0.12.2
+	go.opentelemetry.io/otel/sdk/metric v1.36.0
 	golang.org/x/exp v0.0.0-20250103183323-7d7fa50e5329
-	golang.org/x/sync v0.11.0
-	golang.org/x/sys v0.30.0
-	golang.org/x/term v0.29.0
-	golang.org/x/text v0.22.0
-	google.golang.org/grpc v1.70.0
-	google.golang.org/protobuf v1.36.5
+	golang.org/x/net v0.40.0 // indirect
+	golang.org/x/sync v0.14.0
+	golang.org/x/sys v0.33.0
+	golang.org/x/term v0.32.0
+	golang.org/x/text v0.25.0
+	golang.org/x/tools v0.33.0 // indirect
+	google.golang.org/grpc v1.72.2
+	google.golang.org/protobuf v1.36.6
 	gopkg.in/yaml.v2 v2.4.0
 	gopkg.in/yaml.v3 v3.0.1
-	k8s.io/api v0.32.2
-	k8s.io/apiextensions-apiserver v0.32.2
-	k8s.io/apimachinery v0.32.2
-	k8s.io/cli-runtime v0.32.2
-	k8s.io/client-go v0.32.2
-	k8s.io/code-generator v0.32.2
-	k8s.io/cri-api v0.32.2
-	k8s.io/kubelet v0.32.2
-	oras.land/oras-go/v2 v2.5.0
-	sigs.k8s.io/controller-runtime v0.20.2
-	sigs.k8s.io/security-profiles-operator v0.8.4
+	k8s.io/api v0.33.1
+	k8s.io/apiextensions-apiserver v0.33.1
+	k8s.io/apimachinery v0.33.1
+	k8s.io/cli-runtime v0.33.1
+	k8s.io/client-go v0.33.1
+	k8s.io/code-generator v0.33.1
+	k8s.io/cri-api v0.33.1
+	k8s.io/kubelet v0.33.1
+	oras.land/oras-go/v2 v2.6.0
+	sigs.k8s.io/controller-runtime v0.21.0
+	sigs.k8s.io/security-profiles-operator v0.9.1
 	sigs.k8s.io/yaml v1.4.0
 )
 
@@ -85,37 +88,38 @@ require (
 	dario.cat/mergo v1.0.1 // indirect
 	github.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 // indirect
 	github.com/AdamKorcz/go-118-fuzz-build v0.0.0-20230306123547-8075edf89bb0 // indirect
-	github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 // indirect
-	github.com/BurntSushi/toml v1.4.0 // indirect
+	github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c // indirect
+	github.com/BurntSushi/toml v1.5.0 // indirect
 	github.com/Masterminds/goutils v1.1.1 // indirect
-	github.com/Masterminds/semver/v3 v3.3.0 // indirect
+	github.com/Masterminds/semver/v3 v3.3.1 // indirect
 	github.com/Masterminds/sprig/v3 v3.3.0 // indirect
 	github.com/Microsoft/go-winio v0.6.2 // indirect
 	github.com/Microsoft/hcsshim v0.12.9 // indirect
+	github.com/PaesslerAG/gval v1.0.0 // indirect
+	github.com/PaesslerAG/jsonpath v0.1.1
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/blang/semver/v4 v4.0.0 // indirect
-	github.com/cenkalti/backoff/v4 v4.3.0 // indirect
 	github.com/cespare/xxhash/v2 v2.3.0 // indirect
-	github.com/containerd/cgroups/v3 v3.0.3 // indirect
+	github.com/containerd/cgroups/v3 v3.0.5 // indirect
 	github.com/containerd/containerd/api v1.8.0 // indirect
 	github.com/containerd/continuity v0.4.4 // indirect
 	github.com/containerd/errdefs/pkg v0.3.0 // indirect
 	github.com/containerd/fifo v1.1.0 // indirect
 	github.com/containerd/log v0.1.0 // indirect
 	github.com/containerd/platforms v0.2.1 // indirect
-	github.com/containerd/ttrpc v1.2.6-0.20240827082320-b5cd6e4b3287 // indirect
+	github.com/containerd/ttrpc v1.2.7 // indirect
 	github.com/containerd/typeurl/v2 v2.2.3 // indirect
 	github.com/containers/libtrust v0.0.0-20230121012942-c1716e8a8d01 // indirect
 	github.com/containers/ocicrypt v1.2.1 // indirect
-	github.com/containers/storage v1.57.1 // indirect
+	github.com/containers/storage v1.58.0 // indirect
 	github.com/creack/pty v1.1.20 // indirect
 	github.com/docker/distribution v2.8.3+incompatible // indirect
-	github.com/docker/docker-credential-helpers v0.8.2 // indirect
+	github.com/docker/docker-credential-helpers v0.9.3 // indirect
 	github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c // indirect
 	github.com/emicklei/go-restful/v3 v3.12.1 // indirect
 	github.com/evanphx/json-patch/v5 v5.9.11 // indirect
 	github.com/felixge/httpsnoop v1.0.4 // indirect
-	github.com/fxamacker/cbor/v2 v2.7.0 // indirect
+	github.com/fxamacker/cbor/v2 v2.8.0 // indirect
 	github.com/ghodss/yaml v1.0.0 // indirect
 	github.com/giantswarm/microerror v0.4.1 // indirect
 	github.com/go-errors/errors v1.4.2 // indirect
@@ -125,46 +129,43 @@ require (
 	github.com/go-logr/zapr v1.3.0 // indirect
 	github.com/go-openapi/jsonpointer v0.21.0 // indirect
 	github.com/go-openapi/jsonreference v0.21.0 // indirect
-	github.com/go-openapi/swag v0.23.0 // indirect
+	github.com/go-openapi/swag v0.23.1 // indirect
+	github.com/go-viper/mapstructure/v2 v2.2.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
-	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
-	github.com/golang/protobuf v1.5.4 // indirect
+	github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 // indirect
 	github.com/google/btree v1.1.3 // indirect
-	github.com/google/gnostic-models v0.6.9-0.20230804172637-c7be7c783f49 // indirect
-	github.com/google/go-containerregistry v0.20.2 // indirect
-	github.com/google/gofuzz v1.2.0 // indirect
+	github.com/google/gnostic-models v0.6.9 // indirect
+	github.com/google/go-containerregistry v0.20.3 // indirect
 	github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect
 	github.com/gorilla/mux v1.8.1 // indirect
-	github.com/gorilla/websocket v1.5.0 // indirect
+	github.com/gorilla/websocket v1.5.4-0.20250319132907-e064f32e3674 // indirect
 	github.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 // indirect
-	github.com/grpc-ecosystem/grpc-gateway/v2 v2.25.1 // indirect
-	github.com/hashicorp/hcl v1.0.1-vault-5 // indirect
+	github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.3 // indirect
 	github.com/huandu/xstrings v1.5.0 // indirect
 	github.com/inconshreveable/mousetrap v1.1.0 // indirect
 	github.com/josharian/intern v1.0.0 // indirect
 	github.com/josharian/native v1.1.0 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
-	github.com/klauspost/compress v1.17.11 // indirect
+	github.com/klauspost/compress v1.18.0 // indirect
 	github.com/kr/text v0.2.0 // indirect
 	github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec // indirect
 	github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de // indirect
-	github.com/magiconair/properties v1.8.7 // indirect
-	github.com/mailru/easyjson v0.7.7 // indirect
+	github.com/mailru/easyjson v0.9.0 // indirect
 	github.com/mdlayher/netlink v1.7.2 // indirect
 	github.com/mdlayher/socket v0.4.1 // indirect
 	github.com/mitchellh/copystructure v1.2.0 // indirect
-	github.com/mitchellh/mapstructure v1.5.0 // indirect
 	github.com/mitchellh/reflectwalk v1.0.2 // indirect
 	github.com/moby/docker-image-spec v1.3.1 // indirect
 	github.com/moby/locker v1.0.1 // indirect
 	github.com/moby/spdystream v0.5.0 // indirect
+	github.com/moby/sys/atomicwriter v0.1.0 // indirect
 	github.com/moby/sys/capability v0.4.0 // indirect
 	github.com/moby/sys/mountinfo v0.7.2 // indirect
-	github.com/moby/sys/sequential v0.5.0 // indirect
+	github.com/moby/sys/sequential v0.6.0 // indirect
 	github.com/moby/sys/signal v0.7.0 // indirect
-	github.com/moby/sys/user v0.3.0 // indirect
+	github.com/moby/sys/user v0.4.0 // indirect
 	github.com/moby/sys/userns v0.1.0 // indirect
-	github.com/moby/term v0.5.0 // indirect
+	github.com/moby/term v0.5.2 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00 // indirect
@@ -173,60 +174,59 @@ require (
 	github.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f // indirect
 	github.com/nxadm/tail v1.4.11 // indirect
 	github.com/opencontainers/go-digest v1.0.0 // indirect
-	github.com/opencontainers/selinux v1.11.1 // indirect
-	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
+	github.com/opencontainers/selinux v1.12.0 // indirect
+	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
 	github.com/peterbourgon/diskv v2.0.1+incompatible // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
-	github.com/prometheus/client_model v0.6.1 // indirect
-	github.com/prometheus/common v0.62.0 // indirect
-	github.com/prometheus/procfs v0.15.1 // indirect
-	github.com/rogpeppe/go-internal v1.13.1 // indirect
+	github.com/prometheus/client_model v0.6.2 // indirect
+	github.com/prometheus/common v0.64.0 // indirect
+	github.com/prometheus/procfs v0.16.1 // indirect
+	github.com/rogpeppe/go-internal v1.13.2-0.20241226121412-a5dc8ff20d0a // indirect
 	github.com/russross/blackfriday/v2 v2.1.0 // indirect
-	github.com/sagikazarmark/locafero v0.4.0 // indirect
-	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
+	github.com/sagikazarmark/locafero v0.7.0 // indirect
 	github.com/secure-systems-lab/go-securesystemslib v0.9.0 // indirect
-	github.com/sigstore/protobuf-specs v0.4.0 // indirect
+	github.com/sigstore/protobuf-specs v0.4.1 // indirect
 	github.com/sourcegraph/conc v0.3.0 // indirect
-	github.com/spf13/afero v1.11.0 // indirect
-	github.com/spf13/cast v1.7.0 // indirect
+	github.com/spf13/afero v1.12.0 // indirect
+	github.com/spf13/cast v1.7.1 // indirect
 	github.com/subosito/gotenv v1.6.0 // indirect
 	github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399 // indirect
 	github.com/x448/float16 v0.8.4 // indirect
 	github.com/xlab/treeprint v1.2.0 // indirect
 	go.opencensus.io v0.24.0 // indirect
 	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
-	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
-	go.opentelemetry.io/otel/trace v1.34.0 // indirect
-	go.opentelemetry.io/proto/otlp v1.5.0 // indirect
+	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.59.0 // indirect
+	go.opentelemetry.io/otel/trace v1.36.0 // indirect
+	go.opentelemetry.io/proto/otlp v1.6.0 // indirect
 	go.uber.org/multierr v1.11.0 // indirect
 	go.uber.org/zap v1.27.0 // indirect
-	golang.org/x/crypto v0.35.0 // indirect
-	golang.org/x/mod v0.22.0 // indirect
-	golang.org/x/net v0.35.0 // indirect
-	golang.org/x/oauth2 v0.26.0 // indirect
-	golang.org/x/time v0.7.0 // indirect
-	golang.org/x/tools v0.28.0 // indirect
+	golang.org/x/crypto v0.38.0 // indirect
+	golang.org/x/mod v0.24.0 // indirect
+	golang.org/x/oauth2 v0.30.0 // indirect
+	golang.org/x/time v0.11.0 // indirect
 	gomodules.xyz/jsonpatch/v2 v2.4.0 // indirect
-	google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20250115164207-1a7da9e5054f // indirect
-	google.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f // indirect
+	google.golang.org/genproto v0.0.0-20241118233622-e639e219e697 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20250519155744-55703ea1f237 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20250519155744-55703ea1f237 // indirect
 	gopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect
 	gopkg.in/inf.v0 v0.9.1 // indirect
-	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 // indirect
-	k8s.io/component-base v0.32.2 // indirect
-	k8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9 // indirect
+	k8s.io/component-base v0.33.1 // indirect
+	k8s.io/gengo/v2 v2.0.0-20250207200755-1244d31929d7 // indirect
 	k8s.io/klog/v2 v2.130.1 // indirect
-	k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f // indirect
-	k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 // indirect
-	sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 // indirect
-	sigs.k8s.io/kustomize/api v0.18.0 // indirect
-	sigs.k8s.io/kustomize/kyaml v0.18.1 // indirect
-	sigs.k8s.io/release-utils v0.8.1 // indirect
-	sigs.k8s.io/structured-merge-diff/v4 v4.4.2 // indirect
+	k8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff // indirect
+	k8s.io/utils v0.0.0-20250321185631-1f6e0b77f77e // indirect
+	sigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8 // indirect
+	sigs.k8s.io/kustomize/api v0.19.0 // indirect
+	sigs.k8s.io/kustomize/kyaml v0.19.0 // indirect
+	sigs.k8s.io/randfill v1.0.0 // indirect
+	sigs.k8s.io/release-utils v0.11.1 // indirect
+	sigs.k8s.io/structured-merge-diff/v4 v4.7.0 // indirect
 )
 
+require github.com/cenkalti/backoff/v5 v5.0.2 // indirect
+
 // gopacket/gopacket with:
 // - https://github.com/gopacket/gopacket/pull/101
 replace github.com/gopacket/gopacket => github.com/gopacket/gopacket v1.3.2-0.20241202175635-b43272ae1eb8
diff --git a/go.sum b/go.sum
index 8a52a7e5f..2e6d8b6dd 100644
--- a/go.sum
+++ b/go.sum
@@ -5,21 +5,26 @@ github.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9
 github.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=
 github.com/AdamKorcz/go-118-fuzz-build v0.0.0-20230306123547-8075edf89bb0 h1:59MxjQVfjXsBpLy+dbd2/ELV5ofnUkUZBvWSC85sheA=
 github.com/AdamKorcz/go-118-fuzz-build v0.0.0-20230306123547-8075edf89bb0/go.mod h1:OahwfttHWG6eJ0clwcfBAHoDI6X/LV/15hx/wlMZSrU=
-github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 h1:L/gRVlceqvL25UVaW/CKtUDjefjrs0SPonmDGUVOYP0=
-github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
+github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c h1:udKWzYgxTojEKWjV8V+WSxDXJ4NFATAsZjh8iIbsQIg=
+github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
-github.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=
-github.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=
+github.com/BurntSushi/toml v1.5.0 h1:W5quZX/G/csjUnuI8SUYlsHs9M38FC7znL0lIO+DvMg=
+github.com/BurntSushi/toml v1.5.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=
 github.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=
 github.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=
-github.com/Masterminds/semver/v3 v3.3.0 h1:B8LGeaivUe71a5qox1ICM/JLl0NqZSW5CHyL+hmvYS0=
-github.com/Masterminds/semver/v3 v3.3.0/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=
+github.com/Masterminds/semver/v3 v3.3.1 h1:QtNSWtVZ3nBfk8mAOu/B6v7FMJ+NHTIgUPi7rj+4nv4=
+github.com/Masterminds/semver/v3 v3.3.1/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=
 github.com/Masterminds/sprig/v3 v3.3.0 h1:mQh0Yrg1XPo6vjYXgtf5OtijNAKJRNcTdOOGZe3tPhs=
 github.com/Masterminds/sprig/v3 v3.3.0/go.mod h1:Zy1iXRYNqNLUolqCpL4uhk6SHUMAOSCzdgBfDb35Lz0=
 github.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=
 github.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=
 github.com/Microsoft/hcsshim v0.12.9 h1:2zJy5KA+l0loz1HzEGqyNnjd3fyZA31ZBCGKacp6lLg=
 github.com/Microsoft/hcsshim v0.12.9/go.mod h1:fJ0gkFAna6ukt0bLdKB8djt4XIJhF/vEPuoIWYVvZ8Y=
+github.com/PaesslerAG/gval v1.0.0 h1:GEKnRwkWDdf9dOmKcNrar9EA1bz1z9DqPIO1+iLzhd8=
+github.com/PaesslerAG/gval v1.0.0/go.mod h1:y/nm5yEyTeX6av0OfKJNp9rBNj2XrGhAf5+v24IBN1I=
+github.com/PaesslerAG/jsonpath v0.1.0/go.mod h1:4BzmtoM/PI8fPO4aQGIusjGxGir2BzcV0grWtFzq1Y8=
+github.com/PaesslerAG/jsonpath v0.1.1 h1:c1/AToHQMVsduPAa4Vh6xp2U0evy4t8SWp8imEsylIk=
+github.com/PaesslerAG/jsonpath v0.1.1/go.mod h1:lVboNxFGal/VwW6d9JzIy56bUsYAP6tH/x80vjnCseY=
 github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=
 github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
@@ -30,20 +35,22 @@ github.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM
 github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
 github.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=
 github.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=
+github.com/cenkalti/backoff/v5 v5.0.2 h1:rIfFVxEf1QsI7E1ZHfp/B4DF/6QBAUhmgkxc0H7Zss8=
+github.com/cenkalti/backoff/v5 v5.0.2/go.mod h1:rkhZdG3JZukswDf7f0cwqPNk4K0sa+F97BxZthm/crw=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
 github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=
 github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cilium/ebpf v0.5.0/go.mod h1:4tRaxcgiL706VnOzHOdBlY8IEAIdxINsQBcU4xJJXRs=
 github.com/cilium/ebpf v0.7.0/go.mod h1:/oI2+1shJiTGAMgl6/RgJr36Eo1jzrRcAWbcXO2usCA=
 github.com/cilium/ebpf v0.8.1/go.mod h1:f5zLIM0FSNuAkSyLAN7X+Hy6yznlF1mNiWUMfxMtrgk=
-github.com/cilium/ebpf v0.17.3 h1:FnP4r16PWYSE4ux6zN+//jMcW4nMVRvuTLVTvCjyyjg=
-github.com/cilium/ebpf v0.17.3/go.mod h1:G5EDHij8yiLzaqn0WjyfJHvRa+3aDlReIaLVRMvOyJk=
+github.com/cilium/ebpf v0.18.0 h1:OsSwqS4y+gQHxaKgg2U/+Fev834kdnsQbtzRnbVC6Gs=
+github.com/cilium/ebpf v0.18.0/go.mod h1:vmsAT73y4lW2b4peE+qcOqw6MxvWQdC+LiU5gd/xyo4=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
-github.com/containerd/cgroups/v3 v3.0.3 h1:S5ByHZ/h9PMe5IOQoN7E+nMc2UcLEM/V48DGDJ9kip0=
-github.com/containerd/cgroups/v3 v3.0.3/go.mod h1:8HBe7V3aWGLFPd/k03swSIsGjZhHI2WzJmticMgVuz0=
-github.com/containerd/containerd v1.7.25 h1:khEQOAXOEJalRO228yzVsuASLH42vT7DIo9Ss+9SMFQ=
-github.com/containerd/containerd v1.7.25/go.mod h1:tWfHzVI0azhw4CT2vaIjsb2CoV4LJ9PrMPaULAr21Ok=
+github.com/containerd/cgroups/v3 v3.0.5 h1:44na7Ud+VwyE7LIoJ8JTNQOa549a8543BmzaJHo6Bzo=
+github.com/containerd/cgroups/v3 v3.0.5/go.mod h1:SA5DLYnXO8pTGYiAHXz94qvLQTKfVM5GEVisn4jpins=
+github.com/containerd/containerd v1.7.27 h1:yFyEyojddO3MIGVER2xJLWoCIn+Up4GaHFquP7hsFII=
+github.com/containerd/containerd v1.7.27/go.mod h1:xZmPnl75Vc+BLGt4MIfu6bp+fy03gdHAn9bz+FreFR0=
 github.com/containerd/containerd/api v1.8.0 h1:hVTNJKR8fMc/2Tiw60ZRijntNMd1U+JVMyTRdsD2bS0=
 github.com/containerd/containerd/api v1.8.0/go.mod h1:dFv4lt6S20wTu/hMcP4350RL87qPWLVa/OHOwmmdnYc=
 github.com/containerd/continuity v0.4.4 h1:/fNVfTJ7wIl/YPMHjf+5H32uFhl63JucB34PlCpMKII=
@@ -60,20 +67,20 @@ github.com/containerd/nri v0.9.0 h1:jribDJs/oQ95vLO4Yn19HKFYriZGWKiG6nKWjl9Y/x4=
 github.com/containerd/nri v0.9.0/go.mod h1:sDRoMy5U4YolsWthg7TjTffAwPb6LEr//83O+D3xVU4=
 github.com/containerd/platforms v0.2.1 h1:zvwtM3rz2YHPQsF2CHYM8+KtB5dvhISiXh5ZpSBQv6A=
 github.com/containerd/platforms v0.2.1/go.mod h1:XHCb+2/hzowdiut9rkudds9bE5yJ7npe7dG/wG+uFPw=
-github.com/containerd/ttrpc v1.2.6-0.20240827082320-b5cd6e4b3287 h1:zwv64tCdT888KxuXQuv5i36cEdljoXq3sVqLmOEbCQI=
-github.com/containerd/ttrpc v1.2.6-0.20240827082320-b5cd6e4b3287/go.mod h1:YCXHsb32f+Sq5/72xHubdiJRQY9inL4a4ZQrAbN1q9o=
+github.com/containerd/ttrpc v1.2.7 h1:qIrroQvuOL9HQ1X6KHe2ohc7p+HP/0VE6XPU7elJRqQ=
+github.com/containerd/ttrpc v1.2.7/go.mod h1:YCXHsb32f+Sq5/72xHubdiJRQY9inL4a4ZQrAbN1q9o=
 github.com/containerd/typeurl/v2 v2.2.3 h1:yNA/94zxWdvYACdYO8zofhrTVuQY73fFU1y++dYSw40=
 github.com/containerd/typeurl/v2 v2.2.3/go.mod h1:95ljDnPfD3bAbDJRugOiShd/DlAAsxGtUBhJxIn7SCk=
-github.com/containers/common v0.62.0 h1:Sl9WE5h7Y/F3bejrMAA4teP1EcY9ygqJmW4iwSloZ10=
-github.com/containers/common v0.62.0/go.mod h1:Yec+z8mrSq4rydHofrnDCBqAcNA/BGrSg1kfFUL6F6s=
-github.com/containers/image/v5 v5.34.0 h1:HPqQaDUsox/3mC1pbOyLAIQEp0JhQqiUZ+6JiFIZLDI=
-github.com/containers/image/v5 v5.34.0/go.mod h1:/WnvUSEfdqC/ahMRd4YJDBLrpYWkGl018rB77iB3FDo=
+github.com/containers/common v0.63.0 h1:ox6vgUYX5TSvt4W+bE36sYBVz/aXMAfRGVAgvknSjBg=
+github.com/containers/common v0.63.0/go.mod h1:+3GCotSqNdIqM3sPs152VvW7m5+Mg8Kk+PExT3G9hZw=
+github.com/containers/image/v5 v5.35.0 h1:T1OeyWp3GjObt47bchwD9cqiaAm/u4O4R9hIWdrdrP8=
+github.com/containers/image/v5 v5.35.0/go.mod h1:8vTsgb+1gKcBL7cnjyNOInhJQfTUQjJoO2WWkKDoebM=
 github.com/containers/libtrust v0.0.0-20230121012942-c1716e8a8d01 h1:Qzk5C6cYglewc+UyGf6lc8Mj2UaPTHy/iF2De0/77CA=
 github.com/containers/libtrust v0.0.0-20230121012942-c1716e8a8d01/go.mod h1:9rfv8iPl1ZP7aqh9YA68wnZv2NUDbXdcdPHVz0pFbPY=
 github.com/containers/ocicrypt v1.2.1 h1:0qIOTT9DoYwcKmxSt8QJt+VzMY18onl9jUXsxpVhSmM=
 github.com/containers/ocicrypt v1.2.1/go.mod h1:aD0AAqfMp0MtwqWgHM1bUwe1anx0VazI108CRrSKINQ=
-github.com/containers/storage v1.57.1 h1:hKPoFsuBcB3qTzBxa4IFpZMRzUuL5Xhv/BE44W0XHx8=
-github.com/containers/storage v1.57.1/go.mod h1:i/Hb4lu7YgFr9G0K6BMjqW0BLJO1sFsnWQwj2UoWCUM=
+github.com/containers/storage v1.58.0 h1:Q7SyyCCjqgT3wYNgRNIL8o/wUS92heIj2/cc8Sewvcc=
+github.com/containers/storage v1.58.0/go.mod h1:w7Jl6oG+OpeLGLzlLyOZPkmUso40kjpzgrHUk5tyBlo=
 github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=
 github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
 github.com/cpuguy83/go-md2man/v2 v2.0.6/go.mod h1:oOW0eioCTA6cOiMLiUPZOpcVxMig6NIQQ7OS05n1F4g=
@@ -88,14 +95,14 @@ github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=
 github.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=
-github.com/docker/cli v27.5.1+incompatible h1:JB9cieUT9YNiMITtIsguaN55PLOHhBSz3LKVc6cqWaY=
-github.com/docker/cli v27.5.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=
+github.com/docker/cli v28.1.1+incompatible h1:eyUemzeI45DY7eDPuwUcmDyDj1pM98oD5MdSpiItp8k=
+github.com/docker/cli v28.1.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=
 github.com/docker/distribution v2.8.3+incompatible h1:AtKxIZ36LoNK51+Z6RpzLpddBirtxJnzDrHLEKxTAYk=
 github.com/docker/distribution v2.8.3+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=
-github.com/docker/docker v27.5.1+incompatible h1:4PYU5dnBYqRQi0294d1FBECqT9ECWeQAIfE8q4YnPY8=
-github.com/docker/docker v27.5.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
-github.com/docker/docker-credential-helpers v0.8.2 h1:bX3YxiGzFP5sOXWc3bTPEXdEaZSeVMrFgOr3T+zrFAo=
-github.com/docker/docker-credential-helpers v0.8.2/go.mod h1:P3ci7E3lwkZg6XiHdRKft1KckHiO9a2rNtyFbZ/ry9M=
+github.com/docker/docker v28.1.1+incompatible h1:49M11BFLsVO1gxY9UX9p/zwkE/rswggs8AdFmXQw51I=
+github.com/docker/docker v28.1.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
+github.com/docker/docker-credential-helpers v0.9.3 h1:gAm/VtF9wgqJMoxzT3Gj5p4AqIjCBS4wrsOh9yRqcz8=
+github.com/docker/docker-credential-helpers v0.9.3/go.mod h1:x+4Gbw9aGmChi3qTLZj8Dfn0TD20M/fuWy0E5+WDeCo=
 github.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=
 github.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=
 github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c h1:+pKlWGMw7gf6bQ+oDZB4KHQFypsfjYlq/C4rfL7D3g8=
@@ -112,16 +119,16 @@ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymF
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
-github.com/evanphx/json-patch v5.7.0+incompatible h1:vgGkfT/9f8zE6tvSCe74nfpAVDQ2tG6yudJd8LBksgI=
-github.com/evanphx/json-patch v5.7.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=
+github.com/evanphx/json-patch v0.5.2 h1:xVCHIVMUu1wtM/VkR9jVZ45N3FhZfYMMYGorLCR8P3k=
+github.com/evanphx/json-patch v0.5.2/go.mod h1:ZWS5hhDbVDyob71nXKNL0+PWn6ToqBHMikGIFbs31qQ=
 github.com/evanphx/json-patch/v5 v5.9.11 h1:/8HVnzMq13/3x9TPvjG08wUGqBTmZBsCWzjTM0wiaDU=
 github.com/evanphx/json-patch/v5 v5.9.11/go.mod h1:3j+LviiESTElxA4p3EMKAB9HXj3/XEtnUf6OZxqIQTM=
-github.com/expr-lang/expr v1.16.9 h1:WUAzmR0JNI9JCiF0/ewwHB1gmcGw5wW7nWt8gc6PpCI=
-github.com/expr-lang/expr v1.16.9/go.mod h1:8/vRC7+7HBzESEqt5kKpYXxrxkr31SaO8r40VO/1IT4=
+github.com/expr-lang/expr v1.17.4 h1:qhTVftZ2Z3WpOEXRHWErEl2xf1Kq011MnQmWgLq06CY=
+github.com/expr-lang/expr v1.17.4/go.mod h1:8/vRC7+7HBzESEqt5kKpYXxrxkr31SaO8r40VO/1IT4=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/florianl/go-tc v0.4.4 h1:q6lhEWEfyhGffRzdl3eIcNqX/yVIw0IJwXqa9Rdcctw=
-github.com/florianl/go-tc v0.4.4/go.mod h1:uvp6pIlOw7Z8hhfnT5M4+V1hHVgZWRZwwMS8Z0JsRxc=
+github.com/florianl/go-tc v0.4.5 h1:8lvecARs3c/vGee46j0ro8kco98ga9XjwWvXGwlzrXA=
+github.com/florianl/go-tc v0.4.5/go.mod h1:uvp6pIlOw7Z8hhfnT5M4+V1hHVgZWRZwwMS8Z0JsRxc=
 github.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=
 github.com/frankban/quicktest v1.14.0/go.mod h1:NeW+ay9A/U67EYXNFA1nPE8e/tnQv/09mUdL/ijj8og=
 github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
@@ -129,20 +136,18 @@ github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7z
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=
-github.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=
-github.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=
-github.com/fxamacker/cbor/v2 v2.7.0 h1:iM5WgngdRBanHcxugY4JySA0nk1wZorNOpTgCMedv5E=
-github.com/fxamacker/cbor/v2 v2.7.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=
+github.com/fsnotify/fsnotify v1.9.0 h1:2Ml+OJNzbYCTzsxtv8vKSFD9PbJjmhYF14k/jKC7S9k=
+github.com/fsnotify/fsnotify v1.9.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=
+github.com/fxamacker/cbor/v2 v2.8.0 h1:fFtUGXUzXPHTIUdne5+zzMPTfffl3RD5qYnkY40vtxU=
+github.com/fxamacker/cbor/v2 v2.8.0/go.mod h1:vM4b+DJCtHn+zz7h3FFp/hDAI9WNWCsZj23V5ytsSxQ=
 github.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=
 github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
-github.com/giantswarm/crd-docs-generator v0.11.2 h1:8HvKIsDwju5ISCH2irh74I1+giE1AeUMpy6hFXNdCQ0=
-github.com/giantswarm/crd-docs-generator v0.11.2/go.mod h1:glZH+TRVDQvTEMZmleIxQU8S78SeYgZGLVcDRis2k0A=
+github.com/giantswarm/crd-docs-generator v0.11.4 h1:JtBJ42pqJ8f5T8Ay/9Xb3J/VU5jUnTMe1t1+oHgohtE=
+github.com/giantswarm/crd-docs-generator v0.11.4/go.mod h1:dTKNRUUcoU0uvP5xYYe6L8c/OJd1VuFOzeSAfM1DqvU=
 github.com/giantswarm/microerror v0.4.1 h1:WMiD7HQASoUA9lZzPlPK+erCEOJ0uT4cyo18VfCXHD0=
 github.com/giantswarm/microerror v0.4.1/go.mod h1:URFj0gFCmZihjya6saQCXxslBrgctXb4NsXYHB5JdrI=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=
-github.com/go-jose/go-jose/v4 v4.0.4 h1:VsjPI33J0SB9vQM6PLmNjoHqMQNGPiZ0rHL7Ni7Q6/E=
-github.com/go-jose/go-jose/v4 v4.0.4/go.mod h1:NKb5HO1EZccyMpiZNbdUw/14tiXNyUJh188dfnMCAfc=
 github.com/go-jose/go-jose/v4 v4.0.5 h1:M6T8+mKZl/+fNNuFHvGIzDz7BTLQPIounk/b9dw3AaE=
 github.com/go-jose/go-jose/v4 v4.0.5/go.mod h1:s3P1lRrkT8igV8D9OjyL4WRyHvjB6a4JSllnOrmmBOA=
 github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
@@ -156,16 +161,18 @@ github.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1
 github.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=
 github.com/go-openapi/jsonreference v0.21.0 h1:Rs+Y7hSXT83Jacb7kFyjn4ijOuVGSvOdF2+tg1TRrwQ=
 github.com/go-openapi/jsonreference v0.21.0/go.mod h1:LmZmgsrTkVg9LG4EaHeY8cBDslNPMo06cago5JNLkm4=
-github.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=
-github.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=
-github.com/go-quicktest/qt v1.101.0 h1:O1K29Txy5P2OK0dGo59b7b0LR6wKfIhttaAhHUyn7eI=
-github.com/go-quicktest/qt v1.101.0/go.mod h1:14Bz/f7NwaXPtdYEgzsx46kqSxVwTbzVZsDC26tQJow=
+github.com/go-openapi/swag v0.23.1 h1:lpsStH0n2ittzTnbaSloVZLuB5+fvSY/+hnagBjSNZU=
+github.com/go-openapi/swag v0.23.1/go.mod h1:STZs8TbRvEQQKUA+JZNAm3EWlgaOBGpyFDqQnDHMef0=
+github.com/go-quicktest/qt v1.101.1-0.20240301121107-c6c8733fa1e6 h1:teYtXy9B7y5lHTp8V9KPxpYRAVA7dozigQcMiBust1s=
+github.com/go-quicktest/qt v1.101.1-0.20240301121107-c6c8733fa1e6/go.mod h1:p4lGIVX+8Wa6ZPNDvqcxq36XpUDLh42FLetFU7odllI=
 github.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0 h1:p104kn46Q8WdvHunIJ9dAyjPVtrBPhSr3KT2yUst43I=
 github.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=
 github.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=
 github.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=
 github.com/go-test/deep v1.1.1 h1:0r/53hagsehfO4bzD2Pgr/+RgHqhmf+k1Bpse2cTu1U=
 github.com/go-test/deep v1.1.1/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=
+github.com/go-viper/mapstructure/v2 v2.2.1 h1:ZAaOCxANMuZx5RCeg0mBdEZk7DZasvvZIxtHqx8aGss=
+github.com/go-viper/mapstructure/v2 v2.2.1/go.mod h1:oJDH3BJKyqBA2TXFhDsKDGDTlndYOZ6rGS0BRZIxGhM=
 github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
 github.com/godbus/dbus/v5 v5.1.0 h1:4KLkAxT3aOY8Li4FRJe/KvhoNFFxo0m6fNuFUO8QJUk=
 github.com/godbus/dbus/v5 v5.1.0/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
@@ -175,8 +182,8 @@ github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 h1:f+oWsMOmNPc8JmEHVZIycC7hBoQxHH9pNKQORJNozsQ=
+github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8/go.mod h1:wcDNUvekVysuuOpQKo3191zZyTpiI6se1N1ULghS0sw=
 github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
@@ -192,8 +199,8 @@ github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek
 github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/google/btree v1.1.3 h1:CVpQJjYgC4VbzxeGVHfvZrv1ctoYCAI8vbl07Fcxlyg=
 github.com/google/btree v1.1.3/go.mod h1:qOPhT0dTNdNzV6Z/lhRX0YXUafgPLFUh+gZMl761Gm4=
-github.com/google/gnostic-models v0.6.9-0.20230804172637-c7be7c783f49 h1:0VpGH+cDhbDtdcweoyCVsF3fhN8kejK6rFe/2FFX2nU=
-github.com/google/gnostic-models v0.6.9-0.20230804172637-c7be7c783f49/go.mod h1:BkkQ4L1KS1xMt2aWSPStnn55ChGC0DPOn2FQYj+f25M=
+github.com/google/gnostic-models v0.6.9 h1:MU/8wDLif2qCXZmzncUQ/BOfxWfthHi63KqpoNbWqVw=
+github.com/google/gnostic-models v0.6.9/go.mod h1:CiWsm0s6BSQd1hRn8/QmxqB6BesYcbSZxsz9b0KuDBw=
 github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
 github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
@@ -209,13 +216,13 @@ github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeN
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
 github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
-github.com/google/go-containerregistry v0.20.2 h1:B1wPJ1SN/S7pB+ZAimcciVD+r+yV/l/DSArMxlbwseo=
-github.com/google/go-containerregistry v0.20.2/go.mod h1:z38EKdKh4h7IP2gSfUUqEvalZBqs6AoLeWfUy34nQC8=
+github.com/google/go-containerregistry v0.20.3 h1:oNx7IdTI936V8CQRveCjaxOiegWwvM7kqkbXTpyiovI=
+github.com/google/go-containerregistry v0.20.3/go.mod h1:w00pIgBRDVUDFM6bq+Qx8lwNWK+cxgCuX1vd3PIBDNI=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=
 github.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
-github.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad h1:a6HEuzUHeKH6hwfN/ZoQgRgVIWFJljSWa/zetS2WTvg=
-github.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=
+github.com/google/pprof v0.0.0-20250403155104-27863c87afa6 h1:BHT72Gu3keYf3ZEu2J0b1vyeLSOYI8bm5wbJM/8yDe8=
+github.com/google/pprof v0.0.0-20250403155104-27863c87afa6/go.mod h1:boTsfXsheKC2y+lKOCMpSfarhxDeIzfZG1jqGcPl3cA=
 github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=
 github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=
 github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
@@ -225,14 +232,12 @@ github.com/gopacket/gopacket v1.3.2-0.20241202175635-b43272ae1eb8 h1:PoilRl1aPz9
 github.com/gopacket/gopacket v1.3.2-0.20241202175635-b43272ae1eb8/go.mod h1:3I13qcqSpB2R9fFQg866OOgzylYkZxLTmkvcXhvf6qg=
 github.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=
 github.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=
-github.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=
-github.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+github.com/gorilla/websocket v1.5.4-0.20250319132907-e064f32e3674 h1:JeSE6pjso5THxAzdVpqr6/geYxZytqFMBCOtn/ujyeo=
+github.com/gorilla/websocket v1.5.4-0.20250319132907-e064f32e3674/go.mod h1:r4w70xmWCQKmi1ONH4KIaBptdivuRPyosB9RmPlGEwA=
 github.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 h1:+ngKgrYPPJrOjhax5N+uePQ0Fh1Z7PheYoUI/0nzkPA=
 github.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
-github.com/grpc-ecosystem/grpc-gateway/v2 v2.25.1 h1:VNqngBF40hVlDloBruUehVYC3ArSgIyScOAyMRqBxRg=
-github.com/grpc-ecosystem/grpc-gateway/v2 v2.25.1/go.mod h1:RBRO7fro65R6tjKzYgLAFo0t1QEXY1Dp+i/bvpRiqiQ=
-github.com/hashicorp/hcl v1.0.1-vault-5 h1:kI3hhbbyzr4dldA8UdTb7ZlVVlI2DACdCfz31RPDgJM=
-github.com/hashicorp/hcl v1.0.1-vault-5/go.mod h1:XYhtn6ijBSAj6n4YqAaf7RBPS4I06AItNorpy+MoQNM=
+github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.3 h1:5ZPtiqj0JL5oKWmcsq4VMaAW5ukBEgSGXEN89zeH1Jo=
+github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.3/go.mod h1:ndYquD05frm2vACXE1nsccT4oJzjhw2arTS2cpUD1PI=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
 github.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=
 github.com/huandu/xstrings v1.5.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
@@ -262,8 +267,8 @@ github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnr
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
-github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=
-github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=
+github.com/klauspost/compress v1.18.0 h1:c/Cqfb0r+Yi+JtIEq73FWXVkRonBlf0CRNYc8Zttxdo=
+github.com/klauspost/compress v1.18.0/go.mod h1:2Pp+KzxcywXVXMr50+X0Q/Lsb43OQHYWRCY2AiWywWQ=
 github.com/klauspost/pgzip v1.2.6 h1:8RXeL5crjEUFnR2/Sn6GJNWtSQ3Dk8pq4CL3jvdDyjU=
 github.com/klauspost/pgzip v1.2.6/go.mod h1:Ch1tH69qFZu15pkjo5kYi6mth2Zzwzt50oCQKQE9RUs=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
@@ -281,10 +286,8 @@ github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec h1:2tTW6cDth2T
 github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec/go.mod h1:TmwEoGCwIti7BCeJ9hescZgRtatxRE+A72pCoPfmcfk=
 github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de h1:9TO3cAIGXtEhnIaL+V+BEER86oLrvS+kWobKpbJuye0=
 github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de/go.mod h1:zAbeS9B/r2mtpb6U+EI2rYA5OAXxsYw6wTamcNW+zcE=
-github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=
-github.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
-github.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=
-github.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
+github.com/mailru/easyjson v0.9.0 h1:PrnmzHw7262yW8sTBwxi1PdJA3Iw/EKBa8psRf7d9a4=
+github.com/mailru/easyjson v0.9.0/go.mod h1:1+xMtQp2MRNVL/V1bOzuP3aP8VNwRW55fQUto+XFtTU=
 github.com/mdlayher/ethtool v0.0.0-20210210192532-2b88debcdd43/go.mod h1:+t7E0lkKfbBsebllff1xdTmyJt8lH37niI6kwFk9OTo=
 github.com/mdlayher/genetlink v1.0.0/go.mod h1:0rJ0h4itni50A86M2kHcgS85ttZazNt7a8H2a2cw0Gc=
 github.com/mdlayher/netlink v0.0.0-20190409211403-11939a169225/go.mod h1:eQB3mZE4aiYnlUsyGGCOpPETfdQq4Jhsgf1fk3cwQaA=
@@ -306,32 +309,32 @@ github.com/mdlayher/socket v0.4.1 h1:eM9y2/jlbs1M615oshPQOHZzj6R6wMT7bX5NPiQvn2U
 github.com/mdlayher/socket v0.4.1/go.mod h1:cAqeGjoufqdxWkD7DkpyS+wcefOtmu5OQ8KuoJGIReA=
 github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=
 github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=
-github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
-github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
 github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=
 github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
 github.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=
 github.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=
 github.com/moby/locker v1.0.1 h1:fOXqR41zeveg4fFODix+1Ch4mj/gT0NE1XJbp/epuBg=
 github.com/moby/locker v1.0.1/go.mod h1:S7SDdo5zpBK84bzzVlKr2V0hz+7x9hWbYC/kq7oQppc=
-github.com/moby/moby v27.5.1+incompatible h1:/pN59F/t3U7Q4FPzV88nzqf7Fp0qqCSL2KzhZaiKcKw=
-github.com/moby/moby v27.5.1+incompatible/go.mod h1:fDXVQ6+S340veQPv35CzDahGBmHsiclFwfEygB/TWMc=
+github.com/moby/moby v28.1.1+incompatible h1:lyEaGTiUhIdXRUv/vPamckAbPt5LcPQkeHmwAHN98eQ=
+github.com/moby/moby v28.1.1+incompatible/go.mod h1:fDXVQ6+S340veQPv35CzDahGBmHsiclFwfEygB/TWMc=
 github.com/moby/spdystream v0.5.0 h1:7r0J1Si3QO/kjRitvSLVVFUjxMEb/YLj6S9FF62JBCU=
 github.com/moby/spdystream v0.5.0/go.mod h1:xBAYlnt/ay+11ShkdFKNAG7LsyK/tmNBVvVOwrfMgdI=
+github.com/moby/sys/atomicwriter v0.1.0 h1:kw5D/EqkBwsBFi0ss9v1VG3wIkVhzGvLklJ+w3A14Sw=
+github.com/moby/sys/atomicwriter v0.1.0/go.mod h1:Ul8oqv2ZMNHOceF643P6FKPXeCmYtlQMvpizfsSoaWs=
 github.com/moby/sys/capability v0.4.0 h1:4D4mI6KlNtWMCM1Z/K0i7RV1FkX+DBDHKVJpCndZoHk=
 github.com/moby/sys/capability v0.4.0/go.mod h1:4g9IK291rVkms3LKCDOoYlnV8xKwoDTpIrNEE35Wq0I=
 github.com/moby/sys/mountinfo v0.7.2 h1:1shs6aH5s4o5H2zQLn796ADW1wMrIwHsyJ2v9KouLrg=
 github.com/moby/sys/mountinfo v0.7.2/go.mod h1:1YOa8w8Ih7uW0wALDUgT1dTTSBrZ+HiBLGws92L2RU4=
-github.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=
-github.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=
+github.com/moby/sys/sequential v0.6.0 h1:qrx7XFUd/5DxtqcoH1h438hF5TmOvzC/lspjy7zgvCU=
+github.com/moby/sys/sequential v0.6.0/go.mod h1:uyv8EUTrca5PnDsdMGXhZe6CCe8U/UiTWd+lL+7b/Ko=
 github.com/moby/sys/signal v0.7.0 h1:25RW3d5TnQEoKvRbEKUGay6DCQ46IxAVTT9CUMgmsSI=
 github.com/moby/sys/signal v0.7.0/go.mod h1:GQ6ObYZfqacOwTtlXvcmh9A26dVRul/hbOZn88Kg8Tg=
-github.com/moby/sys/user v0.3.0 h1:9ni5DlcW5an3SvRSx4MouotOygvzaXbaSrc/wGDFWPo=
-github.com/moby/sys/user v0.3.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=
+github.com/moby/sys/user v0.4.0 h1:jhcMKit7SA80hivmFJcbB1vqmw//wU61Zdui2eQXuMs=
+github.com/moby/sys/user v0.4.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=
 github.com/moby/sys/userns v0.1.0 h1:tVLXkFOxVu9A64/yh59slHVv9ahO9UIev4JZusOLG/g=
 github.com/moby/sys/userns v0.1.0/go.mod h1:IHUYgu/kao6N8YZlp9Cf444ySSvCmDlmzUcYfDHOl28=
-github.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=
-github.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=
+github.com/moby/term v0.5.2 h1:6qk3FJAFDs6i/q3W/pQ97SX192qKfZgGjCQqfCJkgzQ=
+github.com/moby/term v0.5.2/go.mod h1:d3djjFCrjnB+fl8NJux+EJzu0msscUP+f8it8hPkFLc=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
@@ -353,24 +356,24 @@ github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+W
 github.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=
 github.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=
 github.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=
-github.com/onsi/ginkgo/v2 v2.22.2 h1:/3X8Panh8/WwhU/3Ssa6rCKqPLuAkVY2I0RoyDLySlU=
-github.com/onsi/ginkgo/v2 v2.22.2/go.mod h1:oeMosUL+8LtarXBHu/c0bx2D/K9zyQ6uX3cTyztHwsk=
+github.com/onsi/ginkgo/v2 v2.23.4 h1:ktYTpKJAVZnDT4VjxSbiBenUjmlL/5QkBEocaWXiQus=
+github.com/onsi/ginkgo/v2 v2.23.4/go.mod h1:Bt66ApGPBFzHyR+JO10Zbt0Gsp4uWxu5mIOTusL46e8=
 github.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=
 github.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=
-github.com/onsi/gomega v1.36.2 h1:koNYke6TVk6ZmnyHrCXba/T/MoLBXFjeC1PtvYgw0A8=
-github.com/onsi/gomega v1.36.2/go.mod h1:DdwyADRjrc825LhMEkD76cHR5+pUnjhUN8GlHlRPHzY=
+github.com/onsi/gomega v1.37.0 h1:CdEG8g0S133B4OswTDC/5XPSzE1OeP29QOioj2PID2Y=
+github.com/onsi/gomega v1.37.0/go.mod h1:8D9+Txp43QWKhM24yyOBEdpkzN8FvJyAwecBgsU4KU0=
 github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
 github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
-github.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=
-github.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=
-github.com/opencontainers/runtime-spec v1.2.0 h1:z97+pHb3uELt/yiAWD691HNHQIF07bE7dzrbT927iTk=
-github.com/opencontainers/runtime-spec v1.2.0/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
-github.com/opencontainers/runtime-tools v0.9.1-0.20241108202711-f7e3563b0271 h1:TPj0pMLCTy1CKwmrat3hqTxoZfqOuTy0asG0ccpGk8Q=
-github.com/opencontainers/runtime-tools v0.9.1-0.20241108202711-f7e3563b0271/go.mod h1:oIH6VwKkaDOO+SIYZpdwrC/0wKYqrfO6E1sG1j3UVws=
-github.com/opencontainers/selinux v1.11.1 h1:nHFvthhM0qY8/m+vfhJylliSshm8G1jJ2jDMcgULaH8=
-github.com/opencontainers/selinux v1.11.1/go.mod h1:E5dMC3VPuVvVHDYmi78qvhJp8+M586T4DlDRYpFkyec=
-github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
-github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
+github.com/opencontainers/image-spec v1.1.1 h1:y0fUlFfIZhPF1W537XOLg0/fcx6zcHCJwooC2xJA040=
+github.com/opencontainers/image-spec v1.1.1/go.mod h1:qpqAh3Dmcf36wStyyWU+kCeDgrGnAve2nCC8+7h8Q0M=
+github.com/opencontainers/runtime-spec v1.2.1 h1:S4k4ryNgEpxW1dzyqffOmhI1BHYcjzU8lpJfSlR0xww=
+github.com/opencontainers/runtime-spec v1.2.1/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
+github.com/opencontainers/runtime-tools v0.9.1-0.20250303011046-260e151b8552 h1:CkXngT0nixZqQUPDVfwVs3GiuhfTqCMk0V+OoHpxIvA=
+github.com/opencontainers/runtime-tools v0.9.1-0.20250303011046-260e151b8552/go.mod h1:T487Kf80NeF2i0OyVXHiylg217e0buz8pQsa0T791RA=
+github.com/opencontainers/selinux v1.12.0 h1:6n5JV4Cf+4y0KNXW48TLj5DwfXpvWlxXplUkdTrmPb8=
+github.com/opencontainers/selinux v1.12.0/go.mod h1:BTPX+bjVbWGXw7ZZWUbdENt8w0htPSrlgOOysQaU62U=
+github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
+github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
 github.com/peterbourgon/diskv v2.0.1+incompatible h1:UBdAOUP5p4RWqPBg048CAvpKN+vxiaj6gdUUzhl4XmI=
 github.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
@@ -379,27 +382,25 @@ github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINE
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/prometheus/client_golang v1.21.0 h1:DIsaGmiaBkSangBgMtWdNfxbMNdku5IK6iNhrEqWvdA=
-github.com/prometheus/client_golang v1.21.0/go.mod h1:U9NM32ykUErtVBxdvD3zfi+EuFkkaBvMb09mIfe0Zgg=
+github.com/prometheus/client_golang v1.22.0 h1:rb93p9lokFEsctTys46VnV1kLCDpVZ0a/Y92Vm0Zc6Q=
+github.com/prometheus/client_golang v1.22.0/go.mod h1:R7ljNsLXhuQXYZYtw6GAE9AZg8Y7vEW5scdCXrWRXC0=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
-github.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=
-github.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=
-github.com/prometheus/common v0.62.0 h1:xasJaQlnWAeyHdUBeGjXmutelfJHWMRr+Fg4QszZ2Io=
-github.com/prometheus/common v0.62.0/go.mod h1:vyBcEuLSvWos9B1+CyL7JZ2up+uFzXhkqml0W5zIY1I=
-github.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=
-github.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=
+github.com/prometheus/client_model v0.6.2 h1:oBsgwpGs7iVziMvrGhE53c/GrLUsZdHnqNwqPLxwZyk=
+github.com/prometheus/client_model v0.6.2/go.mod h1:y3m2F6Gdpfy6Ut/GBsUqTWZqCUvMVzSfMLjcu6wAwpE=
+github.com/prometheus/common v0.64.0 h1:pdZeA+g617P7oGv1CzdTzyeShxAGrTBsolKNOLQPGO4=
+github.com/prometheus/common v0.64.0/go.mod h1:0gZns+BLRQ3V6NdaerOhMbwwRbNh9hkGINtQAsP5GS8=
+github.com/prometheus/procfs v0.16.1 h1:hZ15bTNuirocR6u0JZ6BAHHmwS1p8B4P6MRqxtzMyRg=
+github.com/prometheus/procfs v0.16.1/go.mod h1:teAbpZRB1iIAJYREa1LsoWUXykVXA1KlTmWl8x/U+Is=
 github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
-github.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=
-github.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=
+github.com/rogpeppe/go-internal v1.13.2-0.20241226121412-a5dc8ff20d0a h1:w3tdWGKbLGBPtR/8/oO74W6hmz0qE5q0z9aqSAewaaM=
+github.com/rogpeppe/go-internal v1.13.2-0.20241226121412-a5dc8ff20d0a/go.mod h1:S8kfXMp+yh77OxPD4fdM6YUknrZpQxLhvxzS4gDHENY=
 github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/s3rj1k/go-fanotify/fanotify v0.0.0-20210917134616-9c00a300bb7a h1:np2nR32/A/VcOG9Hn+IOPA8kMk1gbBzK5LpSsgq5pJI=
 github.com/s3rj1k/go-fanotify/fanotify v0.0.0-20210917134616-9c00a300bb7a/go.mod h1:wiP6GQ2T378F+YIyuNw7yXtBxJZR+fqrrn1Z6UHZi0Q=
-github.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=
-github.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=
-github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
-github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
+github.com/sagikazarmark/locafero v0.7.0 h1:5MqpDsTGNDhY8sGp0Aowyf0qKsPrhewaLSsFaodPcyo=
+github.com/sagikazarmark/locafero v0.7.0/go.mod h1:2za3Cg5rMaTMoG/2Ulr9AwtFaIppKXTRYnozin4aB5k=
 github.com/seccomp/libseccomp-golang v0.10.0 h1:aA4bp+/Zzi0BnWZ2F1wgNBs5gTpm+na2rWM6M9YjLpY=
 github.com/seccomp/libseccomp-golang v0.10.0/go.mod h1:JA8cRccbGaA1s33RQf7Y1+q9gHmZX1yB/z9WDN1C6fg=
 github.com/secure-systems-lab/go-securesystemslib v0.9.0 h1:rf1HIbL64nUpEIZnjLZ3mcNEL9NBPB0iuVjyxvq3LZc=
@@ -408,24 +409,24 @@ github.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=
 github.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=
 github.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=
 github.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=
-github.com/sigstore/protobuf-specs v0.4.0 h1:yoZbdh0kZYKOSiVbYyA8J3f2wLh5aUk2SQB7LgAfIdU=
-github.com/sigstore/protobuf-specs v0.4.0/go.mod h1:FKW5NYhnnFQ/Vb9RKtQk91iYd0MKJ9AxyqInEwU6+OI=
-github.com/sigstore/sigstore v1.8.15 h1:9HHnZmxjPQSTPXTCZc25HDxxSTWwsGMh/ZhWZZ39maU=
-github.com/sigstore/sigstore v1.8.15/go.mod h1:+Wa5mrG6A+Gss516YC9owy10q3IazqIRe0y1EoQRHHM=
+github.com/sigstore/protobuf-specs v0.4.1 h1:5SsMqZbdkcO/DNHudaxuCUEjj6x29tS2Xby1BxGU7Zc=
+github.com/sigstore/protobuf-specs v0.4.1/go.mod h1:+gXR+38nIa2oEupqDdzg4qSBT0Os+sP7oYv6alWewWc=
+github.com/sigstore/sigstore v1.9.4 h1:64+OGed80+A4mRlNzRd055vFcgBeDghjZw24rPLZgDU=
+github.com/sigstore/sigstore v1.9.4/go.mod h1:Q7tGTC3gbtK7c3jcxEmGc2MmK4rRpIRzi3bxRFWKvEY=
 github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
 github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=
 github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=
-github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
-github.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=
-github.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=
-github.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
+github.com/spf13/afero v1.12.0 h1:UcOPyRBYczmFn6yvphxkn9ZEOY65cpwGKb5mL36mrqs=
+github.com/spf13/afero v1.12.0/go.mod h1:ZTlWwG4/ahT8W7T0WQ5uYmjI9duaLQGy3Q2OAl4sk/4=
+github.com/spf13/cast v1.7.1 h1:cuNEagBQEHWN1FnbGEjCXL2szYEXqfJPbP2HNUaca9Y=
+github.com/spf13/cast v1.7.1/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
 github.com/spf13/cobra v1.9.1 h1:CXSaggrXdbHK9CF+8ywj8Amf7PBRmPCOJugH954Nnlo=
 github.com/spf13/cobra v1.9.1/go.mod h1:nDyEzZ8ogv936Cinf6g1RU9MRY64Ir93oCnqb9wxYW0=
 github.com/spf13/pflag v1.0.6 h1:jFzHGLGAlb3ruxLB8MhbI6A8+AQX/2eW4qeyNZXNp2o=
 github.com/spf13/pflag v1.0.6/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
-github.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=
-github.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=
+github.com/spf13/viper v1.20.1 h1:ZMi+z/lvLyPSCoNtFCpqjy0S4kPbirhpTMwl8BkW9X4=
+github.com/spf13/viper v1.20.1/go.mod h1:P9Mdzt1zoHIG8m2eZQinpiBjo6kCmZSKBClNNqjJvu4=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
@@ -437,8 +438,6 @@ github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
-github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
-github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
 github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=
@@ -449,15 +448,14 @@ github.com/tetratelabs/wazero v1.9.0 h1:IcZ56OuxrtaEz8UYNRHBrUa9bYeX9oVY93KspZZB
 github.com/tetratelabs/wazero v1.9.0/go.mod h1:TSbcXCfFP0L2FGkRPxHphadXPjo1T6W+CseNNY7EkjM=
 github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399 h1:e/5i7d4oYZ+C1wj2THlRK+oAhjeS/TRQwMfkIuet3w0=
 github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399/go.mod h1:LdwHTNJT99C5fTAzDz0ud328OgXz+gierycbcIx2fRs=
-github.com/tklauser/numcpus v0.9.0 h1:lmyCHtANi8aRUgkckBgoDk1nHCux3n2cgkJLXdQGPDo=
-github.com/tklauser/numcpus v0.9.0/go.mod h1:SN6Nq1O3VychhC1npsWostA+oW+VOQTxZrS604NSRyI=
+github.com/tklauser/numcpus v0.10.0 h1:18njr6LDBk1zuna922MgdjQuJFjrdppsZG60sHGfjso=
+github.com/tklauser/numcpus v0.10.0/go.mod h1:BiTKazU708GQTYF4mB+cmlpT2Is1gLk7XVuEeem8LsQ=
 github.com/ulikunitz/xz v0.5.12 h1:37Nm15o69RwBkXM0J6A5OlE67RZTfzUxTj8fB3dfcsc=
 github.com/ulikunitz/xz v0.5.12/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=
-github.com/vbatts/tar-split v0.11.7 h1:ixZ93pO/GmvaZw4Vq9OwmfZK/kc2zKdPfu0B+gYqs3U=
-github.com/vbatts/tar-split v0.11.7/go.mod h1:eF6B6i6ftWQcDqEn3/iGFRFRo8cBIMSJVOpnNdfTMFA=
-github.com/vishvananda/netlink v1.3.0 h1:X7l42GfcV4S6E4vHTsw48qbrV+9PVojNfIhZcwQdrZk=
-github.com/vishvananda/netlink v1.3.0/go.mod h1:i6NetklAujEcC6fK0JPjT8qSwWyO0HLn4UKG+hGqeJs=
-github.com/vishvananda/netns v0.0.4/go.mod h1:SpkAiCQRtJ6TvvxPnOSyH3BMl6unz3xZlaprSwhNNJM=
+github.com/vbatts/tar-split v0.12.1 h1:CqKoORW7BUWBe7UL/iqTVvkTBOF8UvOMKOIZykxnnbo=
+github.com/vbatts/tar-split v0.12.1/go.mod h1:eF6B6i6ftWQcDqEn3/iGFRFRo8cBIMSJVOpnNdfTMFA=
+github.com/vishvananda/netlink v1.3.1 h1:3AEMt62VKqz90r0tmNhog0r/PpWKmrEShJU0wJW6bV0=
+github.com/vishvananda/netlink v1.3.1/go.mod h1:ARtKouGSTGchR8aMwmkzC0qiNPrrWO5JS/XMVl45+b4=
 github.com/vishvananda/netns v0.0.5 h1:DfiHV+j8bA32MFM7bfEunvT8IAqQ/NzSJHtcmW5zdEY=
 github.com/vishvananda/netns v0.0.5/go.mod h1:SpkAiCQRtJ6TvvxPnOSyH3BMl6unz3xZlaprSwhNNJM=
 github.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=
@@ -470,34 +468,40 @@ go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
 go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
 go.opentelemetry.io/auto/sdk v1.1.0 h1:cH53jehLUN6UFLY71z+NDOiNJqDdPRaXzTel0sJySYA=
 go.opentelemetry.io/auto/sdk v1.1.0/go.mod h1:3wSPjt5PWp2RhlCcmmOial7AvC4DQqZb7a7wCow3W8A=
-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
-go.opentelemetry.io/otel v1.34.0 h1:zRLXxLCgL1WyKsPVrgbSdMN4c0FMkDAskSTQP+0hdUY=
-go.opentelemetry.io/otel v1.34.0/go.mod h1:OWFPOQ+h4G8xpyjgqo4SxJYdDQ/qmRH+wivy7zzx9oI=
-go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.10.0 h1:5dTKu4I5Dn4P2hxyW3l3jTaZx9ACgg0ECos1eAVrheY=
-go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.10.0/go.mod h1:P5HcUI8obLrCCmM3sbVBohZFH34iszk/+CPWuakZWL8=
-go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.34.0 h1:ajl4QczuJVA2TU9W9AGw++86Xga/RKt//16z/yxPgdk=
-go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.34.0/go.mod h1:Vn3/rlOJ3ntf/Q3zAI0V5lDnTbHGaUsNUeF6nZmm7pA=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0 h1:3Q/xZUyC1BBkualc9ROb4G8qkH90LXEIICcs5zv1OYY=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0/go.mod h1:s75jGIWA9OfCMzF0xr+ZgfrB5FEbbV7UuYo32ahUiFI=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.28.0 h1:j9+03ymgYhPKmeXGk5Zu+cIZOlVzd9Zv7QIiyItjFBU=
-go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.28.0/go.mod h1:Y5+XiUG4Emn1hTfciPzGPJaSI+RpDts6BnCIir0SLqk=
-go.opentelemetry.io/otel/exporters/prometheus v0.56.0 h1:GnCIi0QyG0yy2MrJLzVrIM7laaJstj//flf1zEJCG+E=
-go.opentelemetry.io/otel/exporters/prometheus v0.56.0/go.mod h1:JQcVZtbIIPM+7SWBB+T6FK+xunlyidwLp++fN0sUaOk=
-go.opentelemetry.io/otel/log v0.10.0 h1:1CXmspaRITvFcjA4kyVszuG4HjA61fPDxMb7q3BuyF0=
-go.opentelemetry.io/otel/log v0.10.0/go.mod h1:PbVdm9bXKku/gL0oFfUF4wwsQsOPlpo4VEqjvxih+FM=
-go.opentelemetry.io/otel/metric v1.34.0 h1:+eTR3U0MyfWjRDhmFMxe2SsW64QrZ84AOhvqS7Y+PoQ=
-go.opentelemetry.io/otel/metric v1.34.0/go.mod h1:CEDrp0fy2D0MvkXE+dPV7cMi8tWZwX3dmaIhwPOaqHE=
-go.opentelemetry.io/otel/sdk v1.34.0 h1:95zS4k/2GOy069d321O8jWgYsW3MzVV+KuSPKp7Wr1A=
-go.opentelemetry.io/otel/sdk v1.34.0/go.mod h1:0e/pNiaMAqaykJGKbi+tSjWfNNHMTxoC9qANsCzbyxU=
-go.opentelemetry.io/otel/sdk/log v0.10.0 h1:lR4teQGWfeDVGoute6l0Ou+RpFqQ9vaPdrNJlST0bvw=
-go.opentelemetry.io/otel/sdk/log v0.10.0/go.mod h1:A+V1UTWREhWAittaQEG4bYm4gAZa6xnvVu+xKrIRkzo=
-go.opentelemetry.io/otel/sdk/metric v1.34.0 h1:5CeK9ujjbFVL5c1PhLuStg1wxA7vQv7ce1EK0Gyvahk=
-go.opentelemetry.io/otel/sdk/metric v1.34.0/go.mod h1:jQ/r8Ze28zRKoNRdkjCZxfs6YvBTG1+YIqyFVFYec5w=
-go.opentelemetry.io/otel/trace v1.34.0 h1:+ouXS2V8Rd4hp4580a8q23bg0azF2nI8cqLYnC8mh/k=
-go.opentelemetry.io/otel/trace v1.34.0/go.mod h1:Svm7lSjQD7kG7KJ/MUHPVXSDGz2OX4h0M2jHBhmSfRE=
-go.opentelemetry.io/proto/otlp v1.5.0 h1:xJvq7gMzB31/d406fB8U5CBdyQGw4P399D1aQWU/3i4=
-go.opentelemetry.io/proto/otlp v1.5.0/go.mod h1:keN8WnHxOy8PG0rQZjJJ5A2ebUoafqWp0eVQ4yIXvJ4=
+go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.59.0 h1:CV7UdSGJt/Ao6Gp4CXckLxVRRsRgDHoI8XjbL3PDl8s=
+go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.59.0/go.mod h1:FRmFuRJfag1IZ2dPkHnEoSFVgTVPUd2qf5Vi69hLb8I=
+go.opentelemetry.io/contrib/instrumentation/runtime v0.61.0 h1:oIZsTHd0YcrvvUCN2AaQqyOcd685NQ+rFmrajveCIhA=
+go.opentelemetry.io/contrib/instrumentation/runtime v0.61.0/go.mod h1:X4KSPIvxnY/G5c9UOGXtFoL91t1gmlHpDQzeK5Zc/Bw=
+go.opentelemetry.io/otel v1.36.0 h1:UumtzIklRBY6cI/lllNZlALOF5nNIzJVb16APdvgTXg=
+go.opentelemetry.io/otel v1.36.0/go.mod h1:/TcFMXYjyRNh8khOAO9ybYkqaDBb/70aVwkNML4pP8E=
+go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.12.2 h1:06ZeJRe5BnYXceSM9Vya83XXVaNGe3H1QqsvqRANQq8=
+go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.12.2/go.mod h1:DvPtKE63knkDVP88qpatBj81JxN+w1bqfVbsbCbj1WY=
+go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.36.0 h1:zwdo1gS2eH26Rg+CoqVQpEK1h8gvt5qyU5Kk5Bixvow=
+go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.36.0/go.mod h1:rUKCPscaRWWcqGT6HnEmYrK+YNe5+Sw64xgQTOJ5b30=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.35.0 h1:1fTNlAIJZGWLP5FVu0fikVry1IsiUnXjf7QFvoNN3Xw=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.35.0/go.mod h1:zjPK58DtkqQFn+YUMbx0M2XV3QgKU0gS9LeGohREyK4=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.33.0 h1:wpMfgF8E1rkrT1Z6meFh1NDtownE9Ii3n3X2GJYjsaU=
+go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.33.0/go.mod h1:wAy0T/dUbs468uOlkT31xjvqQgEVXv58BRFWEgn5v/0=
+go.opentelemetry.io/otel/exporters/prometheus v0.58.0 h1:CJAxWKFIqdBennqxJyOgnt5LqkeFRT+Mz3Yjz3hL+h8=
+go.opentelemetry.io/otel/exporters/prometheus v0.58.0/go.mod h1:7qo/4CLI+zYSNbv0GMNquzuss2FVZo3OYrGh96n4HNc=
+go.opentelemetry.io/otel/log v0.12.2 h1:yob9JVHn2ZY24byZeaXpTVoPS6l+UrrxmxmPKohXTwc=
+go.opentelemetry.io/otel/log v0.12.2/go.mod h1:ShIItIxSYxufUMt+1H5a2wbckGli3/iCfuEbVZi/98E=
+go.opentelemetry.io/otel/metric v1.36.0 h1:MoWPKVhQvJ+eeXWHFBOPoBOi20jh6Iq2CcCREuTYufE=
+go.opentelemetry.io/otel/metric v1.36.0/go.mod h1:zC7Ks+yeyJt4xig9DEw9kuUFe5C3zLbVjV2PzT6qzbs=
+go.opentelemetry.io/otel/sdk v1.36.0 h1:b6SYIuLRs88ztox4EyrvRti80uXIFy+Sqzoh9kFULbs=
+go.opentelemetry.io/otel/sdk v1.36.0/go.mod h1:+lC+mTgD+MUWfjJubi2vvXWcVxyr9rmlshZni72pXeY=
+go.opentelemetry.io/otel/sdk/log v0.12.2 h1:yNoETvTByVKi7wHvYS6HMcZrN5hFLD7I++1xIZ/k6W0=
+go.opentelemetry.io/otel/sdk/log v0.12.2/go.mod h1:DcpdmUXHJgSqN/dh+XMWa7Vf89u9ap0/AAk/XGLnEzY=
+go.opentelemetry.io/otel/sdk/log/logtest v0.0.0-20250521073539-a85ae98dcedc h1:uqxdywfHqqCl6LmZzI3pUnXT1RGFYyUgxj0AkWPFxi0=
+go.opentelemetry.io/otel/sdk/log/logtest v0.0.0-20250521073539-a85ae98dcedc/go.mod h1:TY/N/FT7dmFrP/r5ym3g0yysP1DefqGpAZr4f82P0dE=
+go.opentelemetry.io/otel/sdk/metric v1.36.0 h1:r0ntwwGosWGaa0CrSt8cuNuTcccMXERFwHX4dThiPis=
+go.opentelemetry.io/otel/sdk/metric v1.36.0/go.mod h1:qTNOhFDfKRwX0yXOqJYegL5WRaW376QbB7P4Pb0qva4=
+go.opentelemetry.io/otel/trace v1.36.0 h1:ahxWNuqZjpdiFAyrIoQ4GIiAIhxAunQR6MUoKrsNd4w=
+go.opentelemetry.io/otel/trace v1.36.0/go.mod h1:gQ+OnDZzrybY4k4seLzPAWNwVBBVlF2szhehOBB/tGA=
+go.opentelemetry.io/proto/otlp v1.6.0 h1:jQjP+AQyTf+Fe7OKj/MfkDrmK4MNVtw2NpXsf9fefDI=
+go.opentelemetry.io/proto/otlp v1.6.0/go.mod h1:cicgGehlFuNdgZkcALOCh3VE6K/u2tAjzlRhDwmVpZc=
+go.uber.org/automaxprocs v1.6.0 h1:O3y2/QNTOdbF+e/dpXNNW7Rx2hZ4sTIPyybbxyNqTUs=
+go.uber.org/automaxprocs v1.6.0/go.mod h1:ifeIMSnPZuznNm6jmdzmU3/bfk01Fe2fotchwEFJ8r8=
 go.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=
 go.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=
 go.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=
@@ -507,10 +511,8 @@ go.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.33.0 h1:IOBPskki6Lysi0lo9qQvbxiQ+FvsCC/YWOecCHAixus=
-golang.org/x/crypto v0.33.0/go.mod h1:bVdXmD7IV/4GdElGPozy6U7lWdRXA4qyRVGJV57uQ5M=
-golang.org/x/crypto v0.35.0 h1:b15kiHdrGCHrP6LvwaQ3c03kgNhhiMgvlhxHQhmg2Xs=
-golang.org/x/crypto v0.35.0/go.mod h1:dy7dXNW32cAb/6/PRuTNsix8T+vJAqvuIy5Bli/x0YQ=
+golang.org/x/crypto v0.38.0 h1:jt+WWG8IZlBnVbomuhg2Mdq0+BBQaHbtqHEFEigjUV8=
+golang.org/x/crypto v0.38.0/go.mod h1:MvrbAqul58NNYPKnOra203SB9vpuZW0e+RRZV+Ggqjw=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20250103183323-7d7fa50e5329 h1:9kj3STMvgqy3YA4VQXBrN7925ICMxD5wzMRcgA30588=
 golang.org/x/exp v0.0.0-20250103183323-7d7fa50e5329/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=
@@ -519,8 +521,8 @@ golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvx
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
-golang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=
-golang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=
+golang.org/x/mod v0.24.0 h1:ZfthKaKaT4NrhGVZHO1/WDTwGES4De8KtWO0SIbNJMU=
+golang.org/x/mod v0.24.0/go.mod h1:IXM97Txy2VM4PJ3gI61r1YEk/gAj6zAHN3AdZt6S9Ww=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
@@ -543,19 +545,19 @@ golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v
 golang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20210928044308-7d9f5e0b762b/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
-golang.org/x/net v0.35.0 h1:T5GQRQb2y08kTAByq9L4/bz8cipCdA8FbRTXewonqY8=
-golang.org/x/net v0.35.0/go.mod h1:EglIi67kWsHKlRzzVMUD93VMSWGFOMSZgxFjparz1Qk=
+golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
+golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
-golang.org/x/oauth2 v0.26.0 h1:afQXWNNaeC4nvZ0Ed9XvCCzXM6UHJG7iCg0W4fPqSBE=
-golang.org/x/oauth2 v0.26.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+golang.org/x/oauth2 v0.30.0 h1:dnDm7JmhM45NNpd8FDDeLhK6FwqbOf4MLCM9zb1BOHI=
+golang.org/x/oauth2 v0.30.0/go.mod h1:B++QgG3ZKulg6sRPGD/mqlHQs5rB3Ml9erfeDY7xKlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.11.0 h1:GGz8+XQP4FvTTrjZPzNKTMFtSXH80RAzG+5ghFPgK9w=
-golang.org/x/sync v0.11.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sync v0.14.0 h1:woo0S4Yywslg6hp4eUFjTVOyKt0RookbpAHG4c1HmhQ=
+golang.org/x/sync v0.14.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -593,20 +595,20 @@ golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.10.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.30.0 h1:QjkSwP/36a20jFYWkSue1YwXzLmsV5Gfq7Eiy72C1uc=
-golang.org/x/sys v0.30.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
+golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.29.0 h1:L6pJp37ocefwRRtYPKSWOWzOtWSxVajvz2ldH/xi3iU=
-golang.org/x/term v0.29.0/go.mod h1:6bl4lRlvVuDgSf3179VpIxBF0o10JUpXWOnI7nErv7s=
+golang.org/x/term v0.32.0 h1:DR4lr0TjUs3epypdhTOkMmuF5CDFJ/8pOnbzMZPQ7bg=
+golang.org/x/term v0.32.0/go.mod h1:uZG1FhGx848Sqfsq4/DlJr3xGGsYMu/L5GW4abiaEPQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.22.0 h1:bofq7m3/HAFvbF51jz3Q9wLg3jkvSPuiZu/pD1XwgtM=
-golang.org/x/text v0.22.0/go.mod h1:YRoo4H8PVmsu+E3Ou7cqLVH8oXWIHVoX0jqUWALQhfY=
-golang.org/x/time v0.7.0 h1:ntUhktv3OPE6TgYxXWv9vKvUSJyIFJlyohwbkEwPrKQ=
-golang.org/x/time v0.7.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
+golang.org/x/text v0.25.0 h1:qVyWApTSYLk/drJRO5mDlNYskwQznZmkpV2c8q9zls4=
+golang.org/x/text v0.25.0/go.mod h1:WEdwpYrmk1qmdHvhkSTNPm3app7v4rsT8F2UD6+VHIA=
+golang.org/x/time v0.11.0 h1:/bpjEDfN9tkoN/ryeYHnv5hcMlc8ncjMcM4XBk5NWV0=
+golang.org/x/time v0.11.0/go.mod h1:CDIdPxbZBQxdj6cxyCIdrNogrJKMJ7pr37NYpMcMDSg=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
@@ -616,8 +618,8 @@ golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtn
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
-golang.org/x/tools v0.28.0 h1:WuB6qZ4RPCQo5aP3WdKZS7i595EdWqWR8vqJTlwTVK8=
-golang.org/x/tools v0.28.0/go.mod h1:dcIOrVd3mfQKTgrDVQHqCPMWy6lnhfhtX3hLXYVLfRw=
+golang.org/x/tools v0.33.0 h1:4qz2S3zmRxbGIhDIAgjxvFutSvH5EfnsYrRBj0UI0bc=
+golang.org/x/tools v0.33.0/go.mod h1:CIJMaWEY88juyUfo7UbgPqbC8rU2OqfAV1h2Qp0oMYI=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -629,19 +631,19 @@ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de h1:F6qOa9AZTYJXOUEr4jDysRDLrm4PHePlge4v4TGAlxY=
-google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de/go.mod h1:VUhTRKeHn9wwcdrk73nvdC9gF178Tzhmt/qyaFcPLSo=
-google.golang.org/genproto/googleapis/api v0.0.0-20250115164207-1a7da9e5054f h1:gap6+3Gk41EItBuyi4XX/bp4oqJ3UwuIMl25yGinuAA=
-google.golang.org/genproto/googleapis/api v0.0.0-20250115164207-1a7da9e5054f/go.mod h1:Ic02D47M+zbarjYYUlK57y316f2MoN0gjAwI3f2S95o=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f h1:OxYkA3wjPsZyBylwymxSHa7ViiW1Sml4ToBrncvFehI=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f/go.mod h1:+2Yz8+CLJbIfL9z73EW45avw8Lmge3xVElCP9zEKi50=
+google.golang.org/genproto v0.0.0-20241118233622-e639e219e697 h1:ToEetK57OidYuqD4Q5w+vfEnPvPpuTwedCNVohYJfNk=
+google.golang.org/genproto v0.0.0-20241118233622-e639e219e697/go.mod h1:JJrvXBWRZaFMxBufik1a4RpFw4HhgVtBBWQeQgUj2cc=
+google.golang.org/genproto/googleapis/api v0.0.0-20250519155744-55703ea1f237 h1:Kog3KlB4xevJlAcbbbzPfRG0+X9fdoGM+UBRKVz6Wr0=
+google.golang.org/genproto/googleapis/api v0.0.0-20250519155744-55703ea1f237/go.mod h1:ezi0AVyMKDWy5xAncvjLWH7UcLBB5n7y2fQ8MzjJcto=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20250519155744-55703ea1f237 h1:cJfm9zPbe1e873mHJzmQ1nwVEeRDU/T1wXDK2kUSU34=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20250519155744-55703ea1f237/go.mod h1:qQ0YXyHHx3XkvlzUtpXDkS29lDSafHMZBAZDc03LQ3A=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
 google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
 google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
-google.golang.org/grpc v1.70.0 h1:pWFv03aZoHzlRKHWicjsZytKAiYCtNS0dHbXnIdq7jQ=
-google.golang.org/grpc v1.70.0/go.mod h1:ofIJqVKDXx/JiXrwr2IG4/zwdH9txy3IlF40RmcJSQw=
+google.golang.org/grpc v1.72.2 h1:TdbGzwb82ty4OusHWepvFWGLgIbNo1/SUynEN0ssqv8=
+google.golang.org/grpc v1.72.2/go.mod h1:wH5Aktxcg25y1I3w7H69nHfXdOG3UiadoBtjh3izSDM=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -651,8 +653,8 @@ google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
-google.golang.org/protobuf v1.36.5 h1:tPhr+woSbjfYvY6/GPufUoYizxw1cF/yFoxJ2fmpwlM=
-google.golang.org/protobuf v1.36.5/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
+google.golang.org/protobuf v1.36.6 h1:z1NpPI8ku2WgiWnf+t9wTPsn6eP1L7ksHUlkfLvd9xY=
+google.golang.org/protobuf v1.36.6/go.mod h1:jduwjTPXsFjZGTmRluh+L6NjiWu7pchiJ2/5YcXBHnY=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
@@ -663,8 +665,6 @@ gopkg.in/evanphx/json-patch.v4 v4.12.0/go.mod h1:p8EYWUEYMpynmqDbY58zCKCFZw8pRWM
 gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
 gopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=
 gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
-gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
-gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
@@ -675,52 +675,54 @@ gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=
-gotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=
-gotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=
+gotest.tools/v3 v3.5.2 h1:7koQfIKdy+I8UTetycgUqXWSDwpgv193Ka+qRsmBY8Q=
+gotest.tools/v3 v3.5.2/go.mod h1:LtdLGcnqToBH83WByAAi/wiwSFCArdFIUV/xxN4pcjA=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
-k8s.io/api v0.32.2 h1:bZrMLEkgizC24G9eViHGOPbW+aRo9duEISRIJKfdJuw=
-k8s.io/api v0.32.2/go.mod h1:hKlhk4x1sJyYnHENsrdCWw31FEmCijNGPJO5WzHiJ6Y=
-k8s.io/apiextensions-apiserver v0.32.2 h1:2YMk285jWMk2188V2AERy5yDwBYrjgWYggscghPCvV4=
-k8s.io/apiextensions-apiserver v0.32.2/go.mod h1:GPwf8sph7YlJT3H6aKUWtd0E+oyShk/YHWQHf/OOgCA=
-k8s.io/apimachinery v0.32.2 h1:yoQBR9ZGkA6Rgmhbp/yuT9/g+4lxtsGYwW6dR6BDPLQ=
-k8s.io/apimachinery v0.32.2/go.mod h1:GpHVgxoKlTxClKcteaeuF1Ul/lDVb74KpZcxcmLDElE=
-k8s.io/cli-runtime v0.32.2 h1:aKQR4foh9qeyckKRkNXUccP9moxzffyndZAvr+IXMks=
-k8s.io/cli-runtime v0.32.2/go.mod h1:a/JpeMztz3xDa7GCyyShcwe55p8pbcCVQxvqZnIwXN8=
-k8s.io/client-go v0.32.2 h1:4dYCD4Nz+9RApM2b/3BtVvBHw54QjMFUl1OLcJG5yOA=
-k8s.io/client-go v0.32.2/go.mod h1:fpZ4oJXclZ3r2nDOv+Ux3XcJutfrwjKTCHz2H3sww94=
-k8s.io/code-generator v0.32.2 h1:CIvyPrLWP7cMgrqval2qYT839YAwCDeSvGfXgWSNpHQ=
-k8s.io/code-generator v0.32.2/go.mod h1:plh7bWk7JztAUkHM4zpbdy0KOMdrhsePcZL2HLWFH7Y=
-k8s.io/component-base v0.32.2 h1:1aUL5Vdmu7qNo4ZsE+569PV5zFatM9hl+lb3dEea2zU=
-k8s.io/component-base v0.32.2/go.mod h1:PXJ61Vx9Lg+P5mS8TLd7bCIr+eMJRQTyXe8KvkrvJq0=
-k8s.io/cri-api v0.32.2 h1:7DuaOHpOcXweZeBUbRdK0iCroxctGp73VwgrA0u7kho=
-k8s.io/cri-api v0.32.2/go.mod h1:DCzMuTh2padoinefWME0G678Mc3QFbLMF2vEweGzBAI=
-k8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9 h1:si3PfKm8dDYxgfbeA6orqrtLkvvIeH8UqffFJDl0bz4=
-k8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9/go.mod h1:EJykeLsmFC60UQbYJezXkEsG2FLrt0GPNkU5iK5GWxU=
+k8s.io/api v0.33.1 h1:tA6Cf3bHnLIrUK4IqEgb2v++/GYUtqiu9sRVk3iBXyw=
+k8s.io/api v0.33.1/go.mod h1:87esjTn9DRSRTD4fWMXamiXxJhpOIREjWOSjsW1kEHw=
+k8s.io/apiextensions-apiserver v0.33.1 h1:N7ccbSlRN6I2QBcXevB73PixX2dQNIW0ZRuguEE91zI=
+k8s.io/apiextensions-apiserver v0.33.1/go.mod h1:uNQ52z1A1Gu75QSa+pFK5bcXc4hq7lpOXbweZgi4dqA=
+k8s.io/apimachinery v0.33.1 h1:mzqXWV8tW9Rw4VeW9rEkqvnxj59k1ezDUl20tFK/oM4=
+k8s.io/apimachinery v0.33.1/go.mod h1:BHW0YOu7n22fFv/JkYOEfkUYNRN0fj0BlvMFWA7b+SM=
+k8s.io/cli-runtime v0.33.1 h1:TvpjEtF71ViFmPeYMj1baZMJR4iWUEplklsUQ7D3quA=
+k8s.io/cli-runtime v0.33.1/go.mod h1:9dz5Q4Uh8io4OWCLiEf/217DXwqNgiTS/IOuza99VZE=
+k8s.io/client-go v0.33.1 h1:ZZV/Ks2g92cyxWkRRnfUDsnhNn28eFpt26aGc8KbXF4=
+k8s.io/client-go v0.33.1/go.mod h1:JAsUrl1ArO7uRVFWfcj6kOomSlCv+JpvIsp6usAGefA=
+k8s.io/code-generator v0.33.1 h1:ZLzIRdMsh3Myfnx9BaooX6iQry29UJjVfVG+BuS+UMw=
+k8s.io/code-generator v0.33.1/go.mod h1:HUKT7Ubp6bOgIbbaPIs9lpd2Q02uqkMCMx9/GjDrWpY=
+k8s.io/component-base v0.33.1 h1:EoJ0xA+wr77T+G8p6T3l4efT2oNwbqBVKR71E0tBIaI=
+k8s.io/component-base v0.33.1/go.mod h1:guT/w/6piyPfTgq7gfvgetyXMIh10zuXA6cRRm3rDuY=
+k8s.io/cri-api v0.33.1 h1:CEvLiHZm/uTTp/5qsesU8/OG1a56RPnwMk4Ae73bUvs=
+k8s.io/cri-api v0.33.1/go.mod h1:OLQvT45OpIA+tv91ZrpuFIGY+Y2Ho23poS7n115Aocs=
+k8s.io/gengo/v2 v2.0.0-20250207200755-1244d31929d7 h1:2OX19X59HxDprNCVrWi6jb7LW1PoqTlYqEq5H2oetog=
+k8s.io/gengo/v2 v2.0.0-20250207200755-1244d31929d7/go.mod h1:EJykeLsmFC60UQbYJezXkEsG2FLrt0GPNkU5iK5GWxU=
 k8s.io/klog/v2 v2.130.1 h1:n9Xl7H1Xvksem4KFG4PYbdQCQxqc/tTUyrgXaOhHSzk=
 k8s.io/klog/v2 v2.130.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=
-k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f h1:GA7//TjRY9yWGy1poLzYYJJ4JRdzg3+O6e8I+e+8T5Y=
-k8s.io/kube-openapi v0.0.0-20241105132330-32ad38e42d3f/go.mod h1:R/HEjbvWI0qdfb8viZUeVZm0X6IZnxAydC7YU42CMw4=
-k8s.io/kubelet v0.32.2 h1:WFTSYdt3BB1aTApDuKNI16x/4MYqqX8WBBBBh3KupDg=
-k8s.io/kubelet v0.32.2/go.mod h1:cC1ms5RS+lu0ckVr6AviCQXHLSPKEBC3D5oaCBdTGkI=
-k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 h1:M3sRQVHv7vB20Xc2ybTt7ODCeFj6JSWYFzOFnYeS6Ro=
-k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=
-oras.land/oras-go/v2 v2.5.0 h1:o8Me9kLY74Vp5uw07QXPiitjsw7qNXi8Twd+19Zf02c=
-oras.land/oras-go/v2 v2.5.0/go.mod h1:z4eisnLP530vwIOUOJeBIj0aGI0L1C3d53atvCBqZHg=
-sigs.k8s.io/controller-runtime v0.20.2 h1:/439OZVxoEc02psi1h4QO3bHzTgu49bb347Xp4gW1pc=
-sigs.k8s.io/controller-runtime v0.20.2/go.mod h1:xg2XB0K5ShQzAgsoujxuKN4LNXR2LfwwHsPj7Iaw+XY=
-sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 h1:/Rv+M11QRah1itp8VhT6HoVx1Ray9eB4DBr+K+/sCJ8=
-sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3/go.mod h1:18nIHnGi6636UCz6m8i4DhaJ65T6EruyzmoQqI2BVDo=
-sigs.k8s.io/kustomize/api v0.18.0 h1:hTzp67k+3NEVInwz5BHyzc9rGxIauoXferXyjv5lWPo=
-sigs.k8s.io/kustomize/api v0.18.0/go.mod h1:f8isXnX+8b+SGLHQ6yO4JG1rdkZlvhaCf/uZbLVMb0U=
-sigs.k8s.io/kustomize/kyaml v0.18.1 h1:WvBo56Wzw3fjS+7vBjN6TeivvpbW9GmRaWZ9CIVmt4E=
-sigs.k8s.io/kustomize/kyaml v0.18.1/go.mod h1:C3L2BFVU1jgcddNBE1TxuVLgS46TjObMwW5FT9FcjYo=
-sigs.k8s.io/release-utils v0.8.1 h1:qSA9p3vZzO6RAq7zvzupCZjR29+n3NK9DSJPe9bSf7w=
-sigs.k8s.io/release-utils v0.8.1/go.mod h1:vrQ3eR1VmudgX4OUwr4pUZEkYLRms9bdbv06mr3kchQ=
-sigs.k8s.io/security-profiles-operator v0.8.4 h1:j00FWU9/NFnGYx7krJqiaHsuXyTmBwWq+luv2vmdguA=
-sigs.k8s.io/security-profiles-operator v0.8.4/go.mod h1:eXHEJ49YPW2gG8E4zWalu9LxO8oLAltBHk11s+fB87s=
-sigs.k8s.io/structured-merge-diff/v4 v4.4.2 h1:MdmvkGuXi/8io6ixD5wud3vOLwc1rj0aNqRlpuvjmwA=
-sigs.k8s.io/structured-merge-diff/v4 v4.4.2/go.mod h1:N8f93tFZh9U6vpxwRArLiikrE5/2tiu1w1AGfACIGE4=
+k8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff h1:/usPimJzUKKu+m+TE36gUyGcf03XZEP0ZIKgKj35LS4=
+k8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff/go.mod h1:5jIi+8yX4RIb8wk3XwBo5Pq2ccx4FP10ohkbSKCZoK8=
+k8s.io/kubelet v0.33.1 h1:x4LCw1/iZVWOKA4RoITnuB8gMHnw31HPB3S0EF0EexE=
+k8s.io/kubelet v0.33.1/go.mod h1:8WpdC9M95VmsqIdGSQrajXooTfT5otEj8pGWOm+KKfQ=
+k8s.io/utils v0.0.0-20250321185631-1f6e0b77f77e h1:KqK5c/ghOm8xkHYhlodbp6i6+r+ChV2vuAuVRdFbLro=
+k8s.io/utils v0.0.0-20250321185631-1f6e0b77f77e/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=
+oras.land/oras-go/v2 v2.6.0 h1:X4ELRsiGkrbeox69+9tzTu492FMUu7zJQW6eJU+I2oc=
+oras.land/oras-go/v2 v2.6.0/go.mod h1:magiQDfG6H1O9APp+rOsvCPcW1GD2MM7vgnKY0Y+u1o=
+sigs.k8s.io/controller-runtime v0.21.0 h1:CYfjpEuicjUecRk+KAeyYh+ouUBn4llGyDYytIGcJS8=
+sigs.k8s.io/controller-runtime v0.21.0/go.mod h1:OSg14+F65eWqIu4DceX7k/+QRAbTTvxeQSNSOQpukWM=
+sigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8 h1:gBQPwqORJ8d8/YNZWEjoZs7npUVDpVXUUOFfW6CgAqE=
+sigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8/go.mod h1:mdzfpAEoE6DHQEN0uh9ZbOCuHbLK5wOm7dK4ctXE9Tg=
+sigs.k8s.io/kustomize/api v0.19.0 h1:F+2HB2mU1MSiR9Hp1NEgoU2q9ItNOaBJl0I4Dlus5SQ=
+sigs.k8s.io/kustomize/api v0.19.0/go.mod h1:/BbwnivGVcBh1r+8m3tH1VNxJmHSk1PzP5fkP6lbL1o=
+sigs.k8s.io/kustomize/kyaml v0.19.0 h1:RFge5qsO1uHhwJsu3ipV7RNolC7Uozc0jUBC/61XSlA=
+sigs.k8s.io/kustomize/kyaml v0.19.0/go.mod h1:FeKD5jEOH+FbZPpqUghBP8mrLjJ3+zD3/rf9NNu1cwY=
+sigs.k8s.io/randfill v0.0.0-20250304075658-069ef1bbf016/go.mod h1:XeLlZ/jmk4i1HRopwe7/aU3H5n1zNUcX6TM94b3QxOY=
+sigs.k8s.io/randfill v1.0.0 h1:JfjMILfT8A6RbawdsK2JXGBR5AQVfd+9TbzrlneTyrU=
+sigs.k8s.io/randfill v1.0.0/go.mod h1:XeLlZ/jmk4i1HRopwe7/aU3H5n1zNUcX6TM94b3QxOY=
+sigs.k8s.io/release-utils v0.11.1 h1:hzvXGpHgHJfLOJB6TRuu14bzWc3XEglHmXHJqwClSZE=
+sigs.k8s.io/release-utils v0.11.1/go.mod h1:ybR2V/uQAOGxYfzYtBenSYeXWkBGNP2qnEiX77ACtpc=
+sigs.k8s.io/security-profiles-operator v0.9.1 h1:psXG9t33xA8nZBEIe+VF4Dy0iF8CnEDXoQmaPLpfrSE=
+sigs.k8s.io/security-profiles-operator v0.9.1/go.mod h1:p2ErLS2eMxazGk3VU17CvZxXth95m7tsTk/bOUexS4k=
+sigs.k8s.io/structured-merge-diff/v4 v4.7.0 h1:qPeWmscJcXP0snki5IYF79Z8xrl8ETFxgMd7wez1XkI=
+sigs.k8s.io/structured-merge-diff/v4 v4.7.0/go.mod h1:dDy58f92j70zLsuZVuUX5Wp9vtxXpaZnkPGWeqDfCps=
 sigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=
 sigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=
diff --git a/include/gadget/bits.bpf.h b/include/gadget/bits.bpf.h
index 4d082da5e..339aa9679 100644
--- a/include/gadget/bits.bpf.h
+++ b/include/gadget/bits.bpf.h
@@ -29,7 +29,7 @@ static __always_inline u64 get_slot_idx(u64 v)
 		return 0;
 
 	u32 hi = v >> 32;
-	return hi ? log2(hi) + 33 : log2(v);
+	return hi ? log2(hi) + 33 : log2(v)+1;
 }
 
 #endif /* __BITS_BPF_H */
diff --git a/include/gadget/filter.h b/include/gadget/filter.h
index 9901aec2c..be5fea580 100644
--- a/include/gadget/filter.h
+++ b/include/gadget/filter.h
@@ -12,8 +12,11 @@
 #include <gadget/macros.h>
 #include <gadget/types.h>
 #include <gadget/mntns_filter.h>
+#ifndef GADGET_TYPE_NETWORKING
+#include <gadget/mntns.h>
+#endif
 
-#define GADGET_INVALID_ID ((uid_t) - 1)
+#define GADGET_INVALID_ID ((gadget_uid) - 1)
 
 const volatile gadget_pid targ_pid = 0;
 GADGET_PARAM(targ_pid);
@@ -78,6 +81,7 @@ gadget_should_discard_data(gadget_mntns_id mntns_id, gadget_pid pid,
 	       gadget_should_discard_comm(comm);
 }
 
+#ifndef GADGET_TYPE_NETWORKING
 // gadget_should_discard_data_current returns true if the gadget should drop
 // this event. This function uses the current task mount namespace, pid, tid,
 // uid, and gid to determine if the event should be dropped. This function is
@@ -119,5 +123,25 @@ static __always_inline bool gadget_should_discard_data_current()
 
 	return false;
 }
+#endif
+
+// gadget_should_discard_data_by_skb returns true if the gadget should skip this
+// event based on the fields of the skb_val struct.
+static __always_inline bool
+gadget_should_discard_data_by_skb(struct sockets_value *skb_val)
+{
+	if (!skb_val) {
+		// drop the packet if any filtering is specified
+		if (gadget_filter_by_mntns || targ_pid != 0 || targ_tid != 0 ||
+		    targ_uid != GADGET_INVALID_ID ||
+		    targ_gid != GADGET_INVALID_ID || targ_comm[0] != '\0')
+			return true;
+		return false;
+	}
+
+	return gadget_should_discard_data(
+		skb_val->mntns, skb_val->pid_tgid >> 32, skb_val->pid_tgid,
+		skb_val->task, skb_val->uid_gid, skb_val->uid_gid >> 32);
+}
 
 #endif
diff --git a/include/gadget/mntns_filter.h b/include/gadget/mntns_filter.h
index 29c6cc091..066a4af38 100644
--- a/include/gadget/mntns_filter.h
+++ b/include/gadget/mntns_filter.h
@@ -3,7 +3,7 @@
 #ifndef MNTNS_FILTER_H
 #define MNTNS_FILTER_H
 
-#include <gadget/mntns.h>
+#include <gadget/types.h>
 
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_core_read.h>
diff --git a/include/gadget/sockets-map.h b/include/gadget/sockets-map.h
index ab59885e8..216bb49ef 100644
--- a/include/gadget/sockets-map.h
+++ b/include/gadget/sockets-map.h
@@ -43,9 +43,6 @@
 #define SE_NEXTHDR_NONE 59 /* No next header */
 #define SE_NEXTHDR_DEST 60 /* Destination options header. */
 
-#define SE_TASK_COMM_LEN 16
-#define SE_PATH_MAX 512
-
 struct sockets_key {
 	__u32 netns;
 	__u16 family;
@@ -55,20 +52,6 @@ struct sockets_key {
 	__u16 port;
 };
 
-struct sockets_value {
-	__u64 mntns;
-	__u64 pid_tgid;
-	__u64 uid_gid;
-	char task[SE_TASK_COMM_LEN];
-	char ptask[SE_TASK_COMM_LEN];
-	__u64 sock;
-	__u64 deletion_timestamp;
-	char cwd[SE_PATH_MAX];
-	char exepath[SE_PATH_MAX];
-	__u32 ppid;
-	char ipv6only;
-};
-
 #define MAX_SOCKETS 16384
 struct {
 	__uint(type, BPF_MAP_TYPE_HASH);
diff --git a/include/gadget/types.h b/include/gadget/types.h
index 6ddba64ab..f39fa14d8 100644
--- a/include/gadget/types.h
+++ b/include/gadget/types.h
@@ -3,11 +3,17 @@
 #ifndef __TYPES_H
 #define __TYPES_H
 
+// The bool definition can come from vmlinux.h or stdbool.h.
+#if !defined(__VMLINUX_H__)
+#include <stdbool.h>
+#endif
+
 // Keep these types aligned with definitions in pkg/operators/ebpf/types/types.go.
 
 // union defining either an IPv4 or IPv6 address
 union gadget_ip_addr_t {
 	__u8 v6[16];
+	unsigned __int128 v6_raw;
 	__u32 v4;
 };
 
@@ -121,4 +127,20 @@ struct gadget_process {
 	struct gadget_parent parent;
 };
 
+#define SE_PATH_MAX 512
+
+struct sockets_value {
+	__u64 mntns;
+	__u64 pid_tgid;
+	__u64 uid_gid;
+	char task[TASK_COMM_LEN];
+	char ptask[TASK_COMM_LEN];
+	__u64 sock;
+	__u64 deletion_timestamp;
+	char cwd[SE_PATH_MAX];
+	char exepath[SE_PATH_MAX];
+	__u32 ppid;
+	char ipv6only;
+};
+
 #endif /* __TYPES_H */
diff --git a/include/gadget/user_stack_map.h b/include/gadget/user_stack_map.h
index da766ec79..2c4313c57 100644
--- a/include/gadget/user_stack_map.h
+++ b/include/gadget/user_stack_map.h
@@ -9,6 +9,10 @@
 #include <bpf/bpf_tracing.h>
 
 #include <gadget/types.h>
+#include <gadget/macros.h>
+
+const volatile bool collect_ustack = false;
+GADGET_PARAM(collect_ustack);
 
 #define USER_MAX_STACK_DEPTH 127
 #define USER_STACK_MAP_MAX_ENTRIES 10000
@@ -117,9 +121,21 @@ gadget_inode_get_mtime(struct inode *inode, __u64 *mtime_sec, __u32 *mtime_nsec)
 	}
 }
 
+/* gadget_get_user_stack gets the user stack into ustack if collect_ustack is
+ * true, or initialize ustack to 0 otherwise.
+ */
 static __always_inline void
-gadget_get_user_stack(struct pt_regs *ctx, struct gadget_user_stack *ustack)
+gadget_get_user_stack(void *ctx, struct gadget_user_stack *ustack)
 {
+	if (!collect_ustack) {
+		ustack->stack_id = 0;
+		ustack->exe_inode = 0;
+		ustack->pid_level0 = 0;
+		ustack->pidns_level0 = 0;
+		ustack->pid_level1 = 0;
+		ustack->pidns_level1 = 0;
+		return;
+	}
 	ustack->stack_id = bpf_get_stackid(
 		ctx, &ig_ustack, BPF_F_FAST_STACK_CMP | BPF_F_USER_STACK);
 
@@ -129,7 +145,10 @@ gadget_get_user_stack(struct pt_regs *ctx, struct gadget_user_stack *ustack)
 
 	struct pid *thread_pid = BPF_CORE_READ(task, thread_pid);
 	unsigned int level = BPF_CORE_READ(thread_pid, level);
-	struct upid *numbers = &thread_pid->numbers;
+	// Cast pointer to "struct upid *" to avoid compilation warning in a way
+	// that works both on Linux < v6.5 and >= v6.5. See:
+	// https://github.com/torvalds/linux/commit/b69f0aeb068980af983d399deafc7477cec8bc04
+	struct upid *numbers = (struct upid *)&thread_pid->numbers;
 
 	ustack->pid_level0 = BPF_CORE_READ(numbers, nr);
 	ustack->pidns_level0 = BPF_CORE_READ(numbers, ns, ns.inum);
@@ -137,6 +156,9 @@ gadget_get_user_stack(struct pt_regs *ctx, struct gadget_user_stack *ustack)
 		numbers += 1;
 		ustack->pid_level1 = BPF_CORE_READ(numbers, nr);
 		ustack->pidns_level1 = BPF_CORE_READ(numbers, ns, ns.inum);
+	} else {
+		ustack->pid_level1 = 0;
+		ustack->pidns_level1 = 0;
 	}
 
 	gadget_inode_get_mtime(inode, &ustack->mtime_sec, &ustack->mtime_nsec);
diff --git a/integration/command.go b/integration/command.go
index 7d47583aa..323392fca 100644
--- a/integration/command.go
+++ b/integration/command.go
@@ -581,7 +581,7 @@ func BusyboxPodRepeatCommand(namespace, cmd string) *Command {
 
 // BusyboxPodCommand returns a Command that creates a pod and runs "cmd" in it.
 func BusyboxPodCommand(namespace, cmd string) *Command {
-	return PodCommand("test-pod", "busybox", namespace, `["/bin/sh", "-c"]`, cmd)
+	return PodCommand("test-pod", "ghcr.io/inspektor-gadget/ci/busybox:latest", namespace, `["/bin/sh", "-c"]`, cmd)
 }
 
 // GenerateTestNamespaceName returns a string which can be used as unique
diff --git a/integration/components/image/image_test.go b/integration/components/image/image_test.go
index c3677adff..f1432eb99 100644
--- a/integration/components/image/image_test.go
+++ b/integration/components/image/image_test.go
@@ -124,7 +124,7 @@ func TestImage(t *testing.T) {
 			cmd:  commonImage.NewPushCmd(),
 			args: []string{"unknown", "--insecure-registries", registryAddr},
 			expectedStderr: []string{
-				"failed to resolve ghcr.io/inspektor-gadget/gadget/unknown:latest: not found",
+				"failed to perform \"Resolve\" on source",
 			},
 		},
 		{
@@ -132,7 +132,7 @@ func TestImage(t *testing.T) {
 			cmd:  commonImage.NewPushCmd(),
 			args: []string{fmt.Sprintf("%s/%s:%s", registryAddr, testRepo, "unknown"), "--insecure-registries", registryAddr},
 			expectedStderr: []string{
-				fmt.Sprintf("%s/%s:%s: not found", registryAddr, testRepo, "unknown"),
+				"failed to perform \"Resolve\" on source",
 			},
 		},
 		{
@@ -184,7 +184,7 @@ func TestImage(t *testing.T) {
 			cmd:  commonImage.NewPullCmd(),
 			args: []string{"unknown", "--insecure-registries", registryAddr},
 			expectedStderr: []string{
-				"failed to resolve ghcr.io/inspektor-gadget/gadget/unknown:latest",
+				"failed to perform \"FetchReference\" on source",
 			},
 		},
 		{
@@ -203,6 +203,24 @@ func TestImage(t *testing.T) {
 				fmt.Sprintf("Successfully exported images to %s", exportPath),
 			},
 		},
+		{
+			name: "remove-registry-image-for-import",
+			cmd:  commonImage.NewRemoveCmd(),
+			args: []string{testRegistryImage},
+			expectedStdout: []string{
+				fmt.Sprintf("Successfully removed %s", testRegistryImage),
+			},
+		},
+		{
+			name:           "validate-remove-for-import",
+			cmd:            commonImage.NewListCmd(),
+			args:           []string{},
+			negateExpected: true,
+			// can't use combined repository here as REPOSITORY column can be truncated
+			expectedStdout: []string{
+				testRegistryImage,
+			},
+		},
 		{
 			name: "import",
 			cmd:  commonImage.NewImportCmd(),
@@ -211,6 +229,15 @@ func TestImage(t *testing.T) {
 				fmt.Sprintf("Successfully imported images:\n  %s", testRegistryImage),
 			},
 		},
+		{
+			name: "validate-import",
+			cmd:  commonImage.NewListCmd(),
+			args: []string{},
+			expectedStdout: []string{
+				registryAddr,
+				testTag,
+			},
+		},
 	}
 
 	for _, tc := range testCases {
diff --git a/integration/components/image/integration_test.go b/integration/components/image/integration_test.go
index 6c8cf1f57..68385e311 100644
--- a/integration/components/image/integration_test.go
+++ b/integration/components/image/integration_test.go
@@ -23,7 +23,7 @@ import (
 
 var (
 	integration      = flag.Bool("integration", false, "run integration tests")
-	testBuilderImage = flag.String("builder-image", "ghcr.io/inspektor-gadget/ebpf-builder:latest", "ebpf builder image")
+	testBuilderImage = flag.String("builder-image", "ghcr.io/inspektor-gadget/gadget-builder:main", "gadget builder image")
 )
 
 func TestMain(m *testing.M) {
diff --git a/integration/ig/non-k8s/Makefile b/integration/ig/non-k8s/Makefile
index e889d7865..53cfe2d55 100644
--- a/integration/ig/non-k8s/Makefile
+++ b/integration/ig/non-k8s/Makefile
@@ -1,4 +1,4 @@
-DNSTESTER_IMAGE ?= "ghcr.io/inspektor-gadget/dnstester:latest"
+DNSTESTER_IMAGE ?= "ghcr.io/inspektor-gadget/dnstester:main"
 CONTAINER_RUNTIME ?= docker
 
 # build
diff --git a/integration/ig/non-k8s/integration_test.go b/integration/ig/non-k8s/integration_test.go
index 4b5e5a6e7..eee190b94 100644
--- a/integration/ig/non-k8s/integration_test.go
+++ b/integration/ig/non-k8s/integration_test.go
@@ -28,7 +28,7 @@ var (
 	containerFactory containers.ContainerFactory
 	// flags
 	integration    = flag.Bool("integration", false, "run integration tests")
-	dnsTesterImage = flag.String("dnstester-image", "ghcr.io/inspektor-gadget/dnstester:latest", "dnstester container image")
+	dnsTesterImage = flag.String("dnstester-image", "ghcr.io/inspektor-gadget/dnstester:main", "dnstester container image")
 	runtime        = flag.String("runtime", "docker", "which runtime to use (docker, containerd)")
 )
 
diff --git a/integration/ig/non-k8s/list_containers_test.go b/integration/ig/non-k8s/list_containers_test.go
index f15adb9e0..d37734614 100644
--- a/integration/ig/non-k8s/list_containers_test.go
+++ b/integration/ig/non-k8s/list_containers_test.go
@@ -43,7 +43,7 @@ func TestFilterByContainerName(t *testing.T) {
 			}
 
 			normalize := func(c *containercollection.Container) {
-				c.OciConfig = nil
+				c.OciConfig = ""
 				c.Bundle = ""
 				c.Mntns = 0
 				c.Netns = 0
@@ -110,7 +110,7 @@ func TestWatchContainers(t *testing.T) {
 			}
 
 			normalize := func(e *containercollection.PubSubEvent) {
-				e.Container.OciConfig = nil
+				e.Container.OciConfig = ""
 				e.Container.Bundle = ""
 				e.Container.Mntns = 0
 				e.Container.Netns = 0
diff --git a/integration/ig/non-k8s/trace_network_test.go b/integration/ig/non-k8s/trace_network_test.go
index 21bce8375..f31e03a6d 100644
--- a/integration/ig/non-k8s/trace_network_test.go
+++ b/integration/ig/non-k8s/trace_network_test.go
@@ -103,7 +103,7 @@ func TestTraceNetwork(t *testing.T) {
 	testSteps := []TestStep{
 		traceNetworkCmd,
 		SleepForSecondsCommand(2), // wait to ensure ig has started
-		containerFactory.NewContainer(cn, "nginx && curl 127.0.0.1", containers.WithContainerImage("docker.io/library/nginx")),
+		containerFactory.NewContainer(cn, "nginx && curl 127.0.0.1", containers.WithContainerImage("ghcr.io/inspektor-gadget/ci/nginx:latest")),
 	}
 
 	RunTestSteps(testSteps, t)
diff --git a/integration/k8s/Makefile b/integration/k8s/Makefile
index a673ab6a1..ffafb0954 100644
--- a/integration/k8s/Makefile
+++ b/integration/k8s/Makefile
@@ -1,9 +1,11 @@
-# Test commands in this Makefile only covers ig. 
+# Test commands in this Makefile only covers ig.
 # Kubectl-gadget test commands are covered in ../../Makefile.
 
 include $(shell pwd)/../../minikube.mk
 
-DNSTESTER_IMAGE ?= "ghcr.io/inspektor-gadget/dnstester:latest"
+GADGET_REPOSITORY ?= "ghcr.io/inspektor-gadget/gadget"
+GADGET_TAG ?= "main"
+DNSTESTER_IMAGE ?= "ghcr.io/inspektor-gadget/dnstester:main"
 GOPROXY ?= $(shell go env GOPROXY)
 
 # make does not allow implicit rules (with '%') to be phony so let's use
@@ -54,4 +56,4 @@ test-%: build build-tests
 	$(MINIKUBE) -p $${MINIKUBE_PROFILE} ssh "sudo ln -sf /var/lib/minikube/binaries/$(KUBERNETES_VERSION)/kubectl /bin/kubectl" && \
 	$(MINIKUBE) -p $${MINIKUBE_PROFILE} ssh "sudo ln -sf /etc/kubernetes/admin.conf /root/.kube/config" && \
 	echo "Running test in minikube with profile $${MINIKUBE_PROFILE} ..." && \
-	$(MINIKUBE) -p $${MINIKUBE_PROFILE} ssh "sudo ig-integration.test -test.v -test.timeout 30m -integration -dnstester-image $(DNSTESTER_IMAGE) -test-component=ig $${INTEGRATION_TESTS_PARAMS}"
+	$(MINIKUBE) -p $${MINIKUBE_PROFILE} ssh "sudo ig-integration.test -test.v -test.timeout 30m -integration -dnstester-image $(DNSTESTER_IMAGE) -gadget-repository $(GADGET_REPOSITORY) -gadget-tag $(GADGET_TAG) -test-component=ig $${INTEGRATION_TESTS_PARAMS}"
diff --git a/integration/k8s/advise_networkpolicy_test.go b/integration/k8s/advise_networkpolicy_test.go
index a8d073767..72f8e28e8 100644
--- a/integration/k8s/advise_networkpolicy_test.go
+++ b/integration/k8s/advise_networkpolicy_test.go
@@ -60,7 +60,7 @@ func TestBuiltinAdviseNetworkpolicy(t *testing.T) {
 			Cmd:  fmt.Sprintf(`$KUBECTL_GADGET advise network-policy monitor -n %s --timeout 5 --output - | tee ./networktrace-client.log`, nsClient),
 			ValidateOutput: func(t *testing.T, output string) {
 				expectedEntry := &networkTypes.Event{
-					Event:     BuildBaseEventK8s(nsClient, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime)),
+					Event:     BuildBaseEventK8s(nsClient, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime)),
 					Comm:      "nc",
 					Uid:       0,
 					Gid:       0,
@@ -113,7 +113,7 @@ func TestBuiltinAdviseNetworkpolicy(t *testing.T) {
 				}
 
 				expectedEntry := &networkTypes.Event{
-					Event: BuildBaseEventK8s(nsServer, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime)),
+					Event: BuildBaseEventK8s(nsServer, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime)),
 					// The socket enricher can find the correct "comm" because it supports dual stack sockets
 					Comm:      "nc",
 					Uid:       0,
diff --git a/integration/k8s/audit_seccomp_test.go b/integration/k8s/audit_seccomp_test.go
index f8571c33e..9a40511ce 100644
--- a/integration/k8s/audit_seccomp_test.go
+++ b/integration/k8s/audit_seccomp_test.go
@@ -116,7 +116,7 @@ spec:
         effect: NoSchedule
       containers:
       - name: installer
-        image: busybox:latest
+        image: ghcr.io/inspektor-gadget/ci/busybox:latest
         securityContext:
           # needed to mount host volumes
           seLinuxOptions:
@@ -172,7 +172,7 @@ spec:
   terminationGracePeriodSeconds: 0
   containers:
   - name: test-pod
-    image: busybox
+    image: ghcr.io/inspektor-gadget/ci/busybox:latest
     command: ["sh"]
     args: ["-c", "while true; do unshare -i; sleep 1; done"]
 EOF
@@ -185,7 +185,7 @@ EOF
 			Cmd:  fmt.Sprintf("$KUBECTL_GADGET audit seccomp -n %s --timeout 15 -o json", ns),
 			ValidateOutput: func(t *testing.T, output string) {
 				expectedEntry := &seccompauditTypes.Event{
-					Event:   BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime)),
+					Event:   BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime)),
 					Syscall: "unshare",
 					Code:    "kill_thread",
 					Comm:    "unshare",
diff --git a/integration/k8s/enrichment_pod_label_test.go b/integration/k8s/enrichment_pod_label_test.go
index 2614567ed..0563953f0 100644
--- a/integration/k8s/enrichment_pod_label_test.go
+++ b/integration/k8s/enrichment_pod_label_test.go
@@ -44,7 +44,7 @@ func TestEnrichmentPodLabelExistingPod(t *testing.T) {
 
 	commands := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand(cn, "busybox", ns, `["sleep", "inf"]`, ""),
+		PodCommand(cn, "ghcr.io/inspektor-gadget/ci/busybox:latest", ns, `["sleep", "inf"]`, ""),
 		WaitUntilPodReadyCommand(ns, pod),
 	}
 	RunTestSteps(commands, t, WithCbBeforeCleanup(PrintLogsFn(ns)))
@@ -79,7 +79,7 @@ func TestEnrichmentPodLabelExistingPod(t *testing.T) {
 					BasicRuntimeMetadata: types.BasicRuntimeMetadata{
 						RuntimeName:        types.String2RuntimeName(containerRuntime),
 						ContainerName:      runtimeContainerName,
-						ContainerImageName: "docker.io/library/busybox:latest",
+						ContainerImageName: "ghcr.io/inspektor-gadget/ci/busybox:latest",
 					},
 				},
 			}
@@ -90,7 +90,7 @@ func TestEnrichmentPodLabelExistingPod(t *testing.T) {
 			}
 
 			normalize := func(c *containercollection.Container) {
-				c.OciConfig = nil
+				c.OciConfig = ""
 				c.Bundle = ""
 				c.Mntns = 0
 				c.Netns = 0
@@ -151,7 +151,7 @@ func TestEnrichmentPodLabelNewPod(t *testing.T) {
 						BasicRuntimeMetadata: types.BasicRuntimeMetadata{
 							RuntimeName:        types.String2RuntimeName(containerRuntime),
 							ContainerName:      cn,
-							ContainerImageName: "docker.io/library/busybox:latest",
+							ContainerImageName: "ghcr.io/inspektor-gadget/ci/busybox:latest",
 						},
 					},
 				},
@@ -163,7 +163,7 @@ func TestEnrichmentPodLabelNewPod(t *testing.T) {
 			}
 
 			normalize := func(e *containercollection.PubSubEvent) {
-				e.Container.OciConfig = nil
+				e.Container.OciConfig = ""
 				e.Container.Bundle = ""
 				e.Container.Mntns = 0
 				e.Container.Netns = 0
@@ -207,7 +207,7 @@ func TestEnrichmentPodLabelNewPod(t *testing.T) {
 		CreateTestNamespaceCommand(ns),
 		listContainersCmd,
 		SleepForSecondsCommand(2), // wait to ensure ig has started
-		PodCommand(pod, "busybox", ns, `["sleep", "inf"]`, ""),
+		PodCommand(pod, "ghcr.io/inspektor-gadget/ci/busybox:latest", ns, `["sleep", "inf"]`, ""),
 		WaitUntilPodReadyCommand(ns, pod),
 		DeleteTestNamespaceCommand(ns),
 	}
diff --git a/integration/k8s/integration_test.go b/integration/k8s/integration_test.go
index f93dc14d0..de2b34793 100644
--- a/integration/k8s/integration_test.go
+++ b/integration/k8s/integration_test.go
@@ -51,7 +51,7 @@ var (
 
 var (
 	integrationTest = flag.Bool("integration", false, "run integration tests")
-	dnsTesterImage  = flag.String("dnstester-image", "ghcr.io/inspektor-gadget/dnstester:latest", "dnstester container image")
+	dnsTesterImage  = flag.String("dnstester-image", "ghcr.io/inspektor-gadget/dnstester:main", "dnstester container image")
 	testComponent   = flag.String("test-component", "", "run tests for specific component")
 	k8sArch         = flag.String("k8s-arch", "amd64", "allows to skip tests that are not supported on a given CPU architecture")
 )
diff --git a/integration/k8s/integration_test_kubectl_gadget.go b/integration/k8s/integration_test_kubectl_gadget.go
index 1245664b7..66beb526c 100644
--- a/integration/k8s/integration_test_kubectl_gadget.go
+++ b/integration/k8s/integration_test_kubectl_gadget.go
@@ -45,7 +45,7 @@ var (
 	k8sDistro = flag.String("k8s-distro", "", "allows to skip tests that are not supported on a given Kubernetes distribution")
 
 	gadgetRepository = flag.String("gadget-repository", "ghcr.io/inspektor-gadget/gadget", "repository where gadget images are stored")
-	gadgetTag        = flag.String("gadget-tag", "latest", "tag used for gadgets's OCI images")
+	gadgetTag        = flag.String("gadget-tag", "main", "tag used for gadgets's OCI images")
 )
 
 func cleanupFunc(cleanupCommands []*integration.Command) {
diff --git a/integration/k8s/list_containers_test.go b/integration/k8s/list_containers_test.go
index 0b859c467..f1fb4c0d1 100644
--- a/integration/k8s/list_containers_test.go
+++ b/integration/k8s/list_containers_test.go
@@ -55,7 +55,7 @@ func newListContainerTestStep(
 					BasicRuntimeMetadata: types.BasicRuntimeMetadata{
 						RuntimeName:        types.String2RuntimeName(runtime),
 						ContainerName:      runtimeContainerName,
-						ContainerImageName: "docker.io/library/busybox:latest",
+						ContainerImageName: "ghcr.io/inspektor-gadget/ci/busybox:latest",
 					},
 				},
 			}
@@ -66,7 +66,7 @@ func newListContainerTestStep(
 			}
 
 			normalize := func(c *containercollection.Container) {
-				c.OciConfig = nil
+				c.OciConfig = ""
 				c.Bundle = ""
 				c.Mntns = 0
 				c.Netns = 0
@@ -113,7 +113,7 @@ func TestListContainers(t *testing.T) {
 
 	commands := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand(cn, "busybox", ns, `["sleep", "inf"]`, ""),
+		PodCommand(cn, "ghcr.io/inspektor-gadget/ci/busybox:latest", ns, `["sleep", "inf"]`, ""),
 		WaitUntilPodReadyCommand(ns, pod),
 	}
 	RunTestSteps(commands, t, WithCbBeforeCleanup(PrintLogsFn(ns)))
@@ -187,7 +187,7 @@ func TestWatchCreatedContainers(t *testing.T) {
 						BasicRuntimeMetadata: types.BasicRuntimeMetadata{
 							RuntimeName:        types.String2RuntimeName(containerRuntime),
 							ContainerName:      cn,
-							ContainerImageName: "docker.io/library/busybox:latest",
+							ContainerImageName: "ghcr.io/inspektor-gadget/ci/busybox:latest",
 						},
 					},
 				},
@@ -199,7 +199,7 @@ func TestWatchCreatedContainers(t *testing.T) {
 			}
 
 			normalize := func(e *containercollection.PubSubEvent) {
-				e.Container.OciConfig = nil
+				e.Container.OciConfig = ""
 				e.Container.Bundle = ""
 				e.Container.Mntns = 0
 				e.Container.Netns = 0
@@ -245,7 +245,7 @@ func TestWatchCreatedContainers(t *testing.T) {
 		CreateTestNamespaceCommand(ns),
 		watchContainersCmd,
 		SleepForSecondsCommand(2), // wait to ensure ig has started
-		PodCommand(pod, "busybox", ns, `["sleep", "inf"]`, ""),
+		PodCommand(pod, "ghcr.io/inspektor-gadget/ci/busybox:latest", ns, `["sleep", "inf"]`, ""),
 		WaitUntilPodReadyCommand(ns, pod),
 		DeleteTestNamespaceCommand(ns),
 	}
@@ -283,7 +283,7 @@ func TestWatchDeletedContainers(t *testing.T) {
 						BasicRuntimeMetadata: types.BasicRuntimeMetadata{
 							RuntimeName:        types.String2RuntimeName(containerRuntime),
 							ContainerName:      cn,
-							ContainerImageName: "docker.io/library/busybox:latest",
+							ContainerImageName: "ghcr.io/inspektor-gadget/ci/busybox:latest",
 						},
 					},
 				},
@@ -295,7 +295,7 @@ func TestWatchDeletedContainers(t *testing.T) {
 			}
 
 			normalize := func(e *containercollection.PubSubEvent) {
-				e.Container.OciConfig = nil
+				e.Container.OciConfig = ""
 				e.Container.Bundle = ""
 				e.Container.Mntns = 0
 				e.Container.Netns = 0
@@ -339,7 +339,7 @@ func TestWatchDeletedContainers(t *testing.T) {
 
 	commands := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand(pod, "busybox", ns, `["sleep", "inf"]`, ""),
+		PodCommand(pod, "ghcr.io/inspektor-gadget/ci/busybox:latest", ns, `["sleep", "inf"]`, ""),
 		WaitUntilPodReadyCommand(ns, pod),
 		watchContainersCmd,
 		&Command{
@@ -382,7 +382,7 @@ func TestPodWithSecurityContext(t *testing.T) {
 						BasicRuntimeMetadata: types.BasicRuntimeMetadata{
 							RuntimeName:        types.String2RuntimeName(containerRuntime),
 							ContainerName:      cn,
-							ContainerImageName: "docker.io/library/busybox:latest",
+							ContainerImageName: "ghcr.io/inspektor-gadget/ci/busybox:latest",
 						},
 					},
 				},
@@ -394,7 +394,7 @@ func TestPodWithSecurityContext(t *testing.T) {
 			}
 
 			normalize := func(e *containercollection.PubSubEvent) {
-				e.Container.OciConfig = nil
+				e.Container.OciConfig = ""
 				e.Container.Bundle = ""
 				e.Container.Mntns = 0
 				e.Container.Netns = 0
@@ -453,7 +453,7 @@ spec:
   terminationGracePeriodSeconds: 0
   containers:
   - name: %s
-    image: busybox
+    image: ghcr.io/inspektor-gadget/ci/busybox:latest
     command: ["sleep", "inf"]
 `, po, ns, po, cn)
 
diff --git a/integration/k8s/profile_cpu_test.go b/integration/k8s/profile_cpu_test.go
index 0a1c5e6a7..7eb974916 100644
--- a/integration/k8s/profile_cpu_test.go
+++ b/integration/k8s/profile_cpu_test.go
@@ -34,12 +34,12 @@ func TestBuiltinProfileCpu(t *testing.T) {
 	case IgTestComponent:
 		expectedEntry.CommonData = BuildCommonData(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 	case InspektorGadgetTestComponent:
-		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 		extraArgs = fmt.Sprintf("-n %s -p test-pod", ns)
 	}
 
diff --git a/integration/k8s/profile_tcprtt_test.go b/integration/k8s/profile_tcprtt_test.go
index 7cd8023c9..29ec11252 100644
--- a/integration/k8s/profile_tcprtt_test.go
+++ b/integration/k8s/profile_tcprtt_test.go
@@ -33,7 +33,7 @@ func TestBuiltinProfileTCPRTT(t *testing.T) {
 
 	startServerCommands := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand(serverPodName, "docker.io/library/nginx:latest", ns, "", ""),
+		PodCommand(serverPodName, "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "", ""),
 		WaitUntilPodReadyCommand(ns, serverPodName),
 	}
 	RunTestSteps(startServerCommands, t, WithCbBeforeCleanup(PrintLogsFn(ns)))
diff --git a/integration/k8s/run_insecure_test.go b/integration/k8s/run_insecure_test.go
index 600807316..0b61f9202 100644
--- a/integration/k8s/run_insecure_test.go
+++ b/integration/k8s/run_insecure_test.go
@@ -32,7 +32,7 @@ func TestRunInsecure(t *testing.T) {
 
 	commandsPreTest := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand("registry", "docker.io/library/registry:2", ns, "", ""),
+		PodCommand("registry", "ghcr.io/inspektor-gadget/ci/registry:2", ns, "", ""),
 		WaitUntilPodReadyCommand(ns, "registry"),
 	}
 
diff --git a/integration/k8s/run_schedcls_test.go b/integration/k8s/run_schedcls_test.go
index 94de0461f..b99b7ccdd 100644
--- a/integration/k8s/run_schedcls_test.go
+++ b/integration/k8s/run_schedcls_test.go
@@ -43,7 +43,7 @@ func TestRunSchedCLS(t *testing.T) {
 
 	commandsPreTest := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand("nginx-pod", "docker.io/library/nginx:latest", ns, "", ""),
+		PodCommand("nginx-pod", "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "", ""),
 		WaitUntilPodReadyCommand(ns, "nginx-pod"),
 	}
 	RunTestSteps(commandsPreTest, t)
@@ -60,7 +60,7 @@ func TestRunSchedCLS(t *testing.T) {
 		runSchedCLSCmd,
 		// Wait until program is attached. TODO: How to avoid hardcoding a delay here?
 		SleepForSecondsCommand(5),
-		JobCommand("wget", "busybox", ns, "sh", "-c", fmt.Sprintf("wget -T 5 %s || true", nginxIP)),
+		JobCommand("wget", "ghcr.io/inspektor-gadget/ci/busybox:latest", ns, "sh", "-c", fmt.Sprintf("wget -T 5 %s || true", nginxIP)),
 		WaitUntilJobCompleteCommand(ns, "wget"),
 		&Command{
 			Name: "ValidateOutput",
diff --git a/integration/k8s/snapshot_process_test.go b/integration/k8s/snapshot_process_test.go
index bceca0d97..29d3798b8 100644
--- a/integration/k8s/snapshot_process_test.go
+++ b/integration/k8s/snapshot_process_test.go
@@ -50,13 +50,13 @@ func TestBuiltinSnapshotProcess(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		nodeName = GetPodNode(t, ns, "test-pod")
 		extraArgs = fmt.Sprintf("-n %s --node %s", ns, nodeName)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 		expectedEntry.K8s.Node = nodeName
 	}
 
diff --git a/integration/k8s/snapshot_socket_test.go b/integration/k8s/snapshot_socket_test.go
index d8a8dd685..c7e62c126 100644
--- a/integration/k8s/snapshot_socket_test.go
+++ b/integration/k8s/snapshot_socket_test.go
@@ -59,7 +59,7 @@ func TestBuiltinSnapshotSocket(t *testing.T) {
 			Cmd:  fmt.Sprintf("$KUBECTL_GADGET snapshot socket -n %s -o json --node %s", ns, nodeName),
 			ValidateOutput: func(t *testing.T, output string) {
 				expectedEntry := &snapshotsocketTypes.Event{
-					Event:    BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime)),
+					Event:    BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime)),
 					Protocol: "TCP",
 					SrcEndpoint: eventtypes.L4Endpoint{
 						L3Endpoint: eventtypes.L3Endpoint{
diff --git a/integration/k8s/top_blockio_test.go b/integration/k8s/top_blockio_test.go
index 6c1348fcb..35f42919d 100644
--- a/integration/k8s/top_blockio_test.go
+++ b/integration/k8s/top_blockio_test.go
@@ -85,12 +85,12 @@ func TestBuiltinTopBlockIO(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s -m %d", containerRuntime, maxRows)
 		expectedEntry.CommonData = BuildCommonData(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	commandsPreTest := []TestStep{
diff --git a/integration/k8s/top_file_test.go b/integration/k8s/top_file_test.go
index 6b93b190f..b421517e1 100644
--- a/integration/k8s/top_file_test.go
+++ b/integration/k8s/top_file_test.go
@@ -70,12 +70,12 @@ func TestBuiltinTopFile(t *testing.T) {
 		extraArgs = fmt.Sprintf("--sort -writes,-wbytes -m %d --runtimes=%s", maxRows, containerRuntime)
 		expectedEntry.CommonData = BuildCommonData(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("--sort \"-writes\" -n %s", ns)
-		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	commandsPreTest := []TestStep{
diff --git a/integration/k8s/top_tcp_test.go b/integration/k8s/top_tcp_test.go
index 4f00f1d6c..cca8cb970 100644
--- a/integration/k8s/top_tcp_test.go
+++ b/integration/k8s/top_tcp_test.go
@@ -53,7 +53,7 @@ func TestBuiltinTopTCP(t *testing.T) {
 
 	commandsPreTest := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand("test-pod", "docker.io/library/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
+		PodCommand("test-pod", "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
 		WaitUntilTestPodReadyCommand(ns),
 	}
 	RunTestSteps(commandsPreTest, t, WithCbBeforeCleanup(PrintLogsFn(ns)))
@@ -89,14 +89,14 @@ func TestBuiltinTopTCP(t *testing.T) {
 		extraArgs = fmt.Sprintf("-m %d --runtimes=%s", maxRows, containerRuntime)
 		expectedEntry.CommonData = BuildCommonData(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-m 100 -n %s", ns)
-		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime))
-		expectedEntry.SrcEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
-		expectedEntry.DstEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.CommonData = BuildCommonDataK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime))
+		expectedEntry.SrcEndpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.DstEndpoint.Kind = eventtypes.EndpointKindRaw
 	}
 
 	t.Run("StartAndStop", func(t *testing.T) {
diff --git a/integration/k8s/trace_bind_test.go b/integration/k8s/trace_bind_test.go
index af78917af..5a8cc215f 100644
--- a/integration/k8s/trace_bind_test.go
+++ b/integration/k8s/trace_bind_test.go
@@ -44,12 +44,12 @@ func TestBuiltinTraceBind(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceBindCmd := &Command{
diff --git a/integration/k8s/trace_capabilities_test.go b/integration/k8s/trace_capabilities_test.go
index 1c4273e20..1d87ea5dd 100644
--- a/integration/k8s/trace_capabilities_test.go
+++ b/integration/k8s/trace_capabilities_test.go
@@ -50,11 +50,11 @@ func TestBuiltinTraceCapabilities(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime))
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceCapabilitiesCmd := &Command{
diff --git a/integration/k8s/trace_dns_test.go b/integration/k8s/trace_dns_test.go
index 6f7c794ac..4a4c02a70 100644
--- a/integration/k8s/trace_dns_test.go
+++ b/integration/k8s/trace_dns_test.go
@@ -63,12 +63,12 @@ func newTraceDnsCmd(t *testing.T, ns string, dnsServerArgs string) *Command {
 		nslookupCmds = append(nslookupCmds, fmt.Sprintf("setuidgid 1000:1111 nslookup -type=a nodomain.fake.test.com. %s", dnsServer))
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	// Start the busybox pod so that we can get the IP address of the pod.
diff --git a/integration/k8s/trace_exec_test.go b/integration/k8s/trace_exec_test.go
index 8ed054d42..25b9ba174 100644
--- a/integration/k8s/trace_exec_test.go
+++ b/integration/k8s/trace_exec_test.go
@@ -42,12 +42,12 @@ func TestBuiltinTraceExec(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceExecCmd := &Command{
@@ -57,37 +57,40 @@ func TestBuiltinTraceExec(t *testing.T) {
 		ValidateOutput: func(t *testing.T, output string) {
 			expectedEntries := []*traceexecTypes.Event{
 				{
-					Event:   expectedEvent,
-					Comm:    "sh",
-					Pcomm:   "", // Not tested, see normalize()
-					Args:    shArgs,
-					Cwd:     "/",
-					ExePath: "/bin/sh",
-					File:    "/bin/sh",
+					Event:         expectedEvent,
+					Comm:          "sh",
+					Pcomm:         "", // Not tested, see normalize()
+					Args:          shArgs,
+					Cwd:           "/",
+					ExePath:       "/bin/sh",
+					ParentExePath: "",
+					File:          "/bin/sh",
 				},
 				{
-					Event:      expectedEvent,
-					Comm:       "sh",
-					Pcomm:      "", // Not tested, see normalize()
-					Args:       innerShArgs,
-					Uid:        1000,
-					Gid:        1111,
-					Cwd:        "/",
-					ExePath:    "/usr/bin/sh",
-					File:       "/usr/bin/sh",
-					UpperLayer: true,
+					Event:         expectedEvent,
+					Comm:          "sh",
+					Pcomm:         "", // Not tested, see normalize()
+					Args:          innerShArgs,
+					Uid:           1000,
+					Gid:           1111,
+					Cwd:           "/",
+					ExePath:       "/usr/bin/sh",
+					ParentExePath: "",
+					File:          "/usr/bin/sh",
+					UpperLayer:    true,
 				},
 				{
-					Event:       expectedEvent,
-					Comm:        "sleep",
-					Pcomm:       "sh",
-					Args:        sleepArgs,
-					Uid:         1000,
-					Gid:         1111,
-					Cwd:         "/",
-					ExePath:     "/bin/sleep",
-					File:        "/bin/sleep",
-					PupperLayer: true,
+					Event:         expectedEvent,
+					Comm:          "sleep",
+					Pcomm:         "sh",
+					Args:          sleepArgs,
+					Uid:           1000,
+					Gid:           1111,
+					Cwd:           "/",
+					ExePath:       "/bin/sleep",
+					ParentExePath: "",
+					File:          "/bin/sleep",
+					PupperLayer:   true,
 				},
 			}
 
@@ -103,6 +106,7 @@ func TestBuiltinTraceExec(t *testing.T) {
 				e.MountNsID = 0
 				e.Username = ""
 				e.Groupname = ""
+				e.ParentExePath = ""
 
 				if e.Comm == "sh" {
 					// Not tested because it varies depending on container runtime:
diff --git a/integration/k8s/trace_fsslower_test.go b/integration/k8s/trace_fsslower_test.go
index 831bbe55d..8719e7a9f 100644
--- a/integration/k8s/trace_fsslower_test.go
+++ b/integration/k8s/trace_fsslower_test.go
@@ -41,12 +41,12 @@ func TestBuiltinTraceFsslower(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceFsslowerCmd := &Command{
diff --git a/integration/k8s/trace_mount_test.go b/integration/k8s/trace_mount_test.go
index c66f87db2..3a96ad20a 100644
--- a/integration/k8s/trace_mount_test.go
+++ b/integration/k8s/trace_mount_test.go
@@ -37,12 +37,12 @@ func TestBuiltinTraceMount(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceMountCmd := &Command{
diff --git a/integration/k8s/trace_network_test.go b/integration/k8s/trace_network_test.go
index 784dbb516..fccee10c8 100644
--- a/integration/k8s/trace_network_test.go
+++ b/integration/k8s/trace_network_test.go
@@ -38,7 +38,7 @@ func TestBuiltinTraceNetwork(t *testing.T) {
 
 	commandsPreTest := []TestStep{
 		CreateTestNamespaceCommand(ns),
-		PodCommand("nginx-pod", "docker.io/library/nginx:latest", ns, "", ""),
+		PodCommand("nginx-pod", "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "", ""),
 		WaitUntilPodReadyCommand(ns, "nginx-pod"),
 	}
 
@@ -94,7 +94,7 @@ func TestBuiltinTraceNetwork(t *testing.T) {
 								},
 							},
 							Runtime: eventtypes.BasicRuntimeMetadata{
-								ContainerImageName: "docker.io/library/nginx:latest",
+								ContainerImageName: "ghcr.io/inspektor-gadget/ci/nginx:latest",
 							},
 						},
 					},
@@ -113,7 +113,7 @@ func TestBuiltinTraceNetwork(t *testing.T) {
 			case IgTestComponent:
 				expectedEntries[0].Event = BuildBaseEvent(ns,
 					WithRuntimeMetadata(containerRuntime),
-					WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+					WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 					WithPodLabels("test-pod", ns, isCrioRuntime),
 				)
 
@@ -121,7 +121,7 @@ func TestBuiltinTraceNetwork(t *testing.T) {
 				expectedEntries[1].Runtime.ContainerName = "nginx-pod"
 				expectedEntries[1].Runtime.RuntimeName = eventtypes.String2RuntimeName(containerRuntime)
 			case InspektorGadgetTestComponent:
-				expectedEntries[0].Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+				expectedEntries[0].Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 				expectedEntries[0].PodIP = testPodIP
 				expectedEntries[0].PodLabels = map[string]string{"run": "test-pod"}
 				expectedEntries[0].DstEndpoint.Namespace = ns
diff --git a/integration/k8s/trace_oomkill_test.go b/integration/k8s/trace_oomkill_test.go
index 1599f81f8..04f8d9824 100644
--- a/integration/k8s/trace_oomkill_test.go
+++ b/integration/k8s/trace_oomkill_test.go
@@ -35,12 +35,12 @@ func TestBuiltinTraceOOMKill(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 		expectedEntry.K8s.ContainerName = "test-pod"
 	}
 
@@ -79,7 +79,7 @@ spec:
   terminationGracePeriodSeconds: 0
   containers:
   - name: test-pod
-    image: busybox
+    image: ghcr.io/inspektor-gadget/ci/busybox:latest
     resources:
       limits:
         memory: "128Mi"
diff --git a/integration/k8s/trace_open_test.go b/integration/k8s/trace_open_test.go
index 82a386a5e..3affc5c0a 100644
--- a/integration/k8s/trace_open_test.go
+++ b/integration/k8s/trace_open_test.go
@@ -35,12 +35,12 @@ func TestBuiltinTraceOpen(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceOpenCmd := &Command{
diff --git a/integration/k8s/trace_signal_test.go b/integration/k8s/trace_signal_test.go
index ddc97519e..8ea92c6ce 100644
--- a/integration/k8s/trace_signal_test.go
+++ b/integration/k8s/trace_signal_test.go
@@ -35,12 +35,12 @@ func TestBuiltinTraceSignal(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceSignalCmd := &Command{
diff --git a/integration/k8s/trace_sni_test.go b/integration/k8s/trace_sni_test.go
index cb1d37f3e..db8cf47f4 100644
--- a/integration/k8s/trace_sni_test.go
+++ b/integration/k8s/trace_sni_test.go
@@ -35,12 +35,12 @@ func TestBuiltinTraceSni(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEvent = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/busybox:latest", isDockerRuntime))
+		expectedEvent = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/busybox:latest", isDockerRuntime))
 	}
 
 	traceSNICmd := &Command{
diff --git a/integration/k8s/trace_tcp_test.go b/integration/k8s/trace_tcp_test.go
index 3336cca25..e691991f9 100644
--- a/integration/k8s/trace_tcp_test.go
+++ b/integration/k8s/trace_tcp_test.go
@@ -53,14 +53,14 @@ func TestBuiltinTraceTCP(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime))
-		expectedEntry.SrcEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
-		expectedEntry.DstEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime))
+		expectedEntry.SrcEndpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.DstEndpoint.Kind = eventtypes.EndpointKindRaw
 	}
 
 	traceTCPCmd := &Command{
@@ -85,7 +85,7 @@ func TestBuiltinTraceTCP(t *testing.T) {
 		CreateTestNamespaceCommand(ns),
 		traceTCPCmd,
 		SleepForSecondsCommand(2), // wait to ensure ig or kubectl-gadget has started
-		PodCommand("test-pod", "docker.io/library/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
+		PodCommand("test-pod", "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
 		WaitUntilTestPodReadyCommand(ns),
 		DeleteTestNamespaceCommand(ns),
 	}
diff --git a/integration/k8s/trace_tcpconnect_test.go b/integration/k8s/trace_tcpconnect_test.go
index 03531a032..495ad4caa 100644
--- a/integration/k8s/trace_tcpconnect_test.go
+++ b/integration/k8s/trace_tcpconnect_test.go
@@ -52,14 +52,14 @@ func TestBuiltinTraceTcpconnect(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime))
-		expectedEntry.SrcEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
-		expectedEntry.DstEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime))
+		expectedEntry.SrcEndpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.DstEndpoint.Kind = eventtypes.EndpointKindRaw
 	}
 
 	traceTcpconnectCmd := &Command{
@@ -84,7 +84,7 @@ func TestBuiltinTraceTcpconnect(t *testing.T) {
 		CreateTestNamespaceCommand(ns),
 		traceTcpconnectCmd,
 		SleepForSecondsCommand(2), // wait to ensure ig or kubectl-gdaget has started
-		PodCommand("test-pod", "docker.io/library/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
+		PodCommand("test-pod", "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
 		WaitUntilTestPodReadyCommand(ns),
 		DeleteTestNamespaceCommand(ns),
 	}
@@ -122,14 +122,14 @@ func TestTraceTcpconnect_latency(t *testing.T) {
 		extraArgs = fmt.Sprintf("--runtimes=%s", containerRuntime)
 		expectedEntry.Event = BuildBaseEvent(ns,
 			WithRuntimeMetadata(containerRuntime),
-			WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime),
+			WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime),
 			WithPodLabels("test-pod", ns, isCrioRuntime),
 		)
 	case InspektorGadgetTestComponent:
 		extraArgs = fmt.Sprintf("-n %s", ns)
-		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("docker.io/library/nginx:latest", isDockerRuntime))
-		expectedEntry.SrcEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
-		expectedEntry.DstEndpoint.L3Endpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.Event = BuildBaseEventK8s(ns, WithContainerImageName("ghcr.io/inspektor-gadget/ci/nginx:latest", isDockerRuntime))
+		expectedEntry.SrcEndpoint.Kind = eventtypes.EndpointKindRaw
+		expectedEntry.DstEndpoint.Kind = eventtypes.EndpointKindRaw
 	}
 
 	traceTcpconnectCmd := &Command{
@@ -158,7 +158,7 @@ func TestTraceTcpconnect_latency(t *testing.T) {
 		traceTcpconnectCmd,
 		SleepForSecondsCommand(2), // wait to ensure ig or kubectl-gadget has started
 		// TODO: can't use setuidgid because it's not available on the nginx image
-		PodCommand("test-pod", "docker.io/library/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
+		PodCommand("test-pod", "ghcr.io/inspektor-gadget/ci/nginx:latest", ns, "[sh, -c]", "nginx && while true; do curl 127.0.0.1; sleep 0.1; done"),
 		WaitUntilTestPodReadyCommand(ns),
 		DeleteTestNamespaceCommand(ns),
 	}
diff --git a/integration/k8s/traceloop_test.go b/integration/k8s/traceloop_test.go
index 826df7346..cdcd10688 100644
--- a/integration/k8s/traceloop_test.go
+++ b/integration/k8s/traceloop_test.go
@@ -42,7 +42,7 @@ func TestBuiltinTraceloop(t *testing.T) {
 		},
 		&Command{
 			Name: "RunTraceloopTestPod",
-			Cmd:  fmt.Sprintf("kubectl run --restart=Never -n %s --image=busybox multiplication -- sh -c 'RANDOM=output ; echo \"3*7*2\" | bc > /tmp/file-$RANDOM ; sleep infinity'", ns),
+			Cmd:  fmt.Sprintf("kubectl run --restart=Never -n %s --image=ghcr.io/inspektor-gadget/ci/busybox:latest multiplication -- sh -c 'RANDOM=output ; echo \"3*7*2\" | bc > /tmp/file-$RANDOM ; sleep infinity'", ns),
 		},
 		&Command{
 			Name: "WaitForTraceloopTestPod",
diff --git a/internal/version/version.go b/internal/version/version.go
index e67cd5dbc..087e41eeb 100644
--- a/internal/version/version.go
+++ b/internal/version/version.go
@@ -17,17 +17,108 @@
 package version
 
 import (
+	"fmt"
+	"os"
+	"path/filepath"
+	"runtime"
+	"runtime/debug"
+	"strings"
+
 	"github.com/blang/semver"
 )
 
-// version is filled out by the Makefile at build
+// When used in the Inspektor Gadget project, version is filled out by the
+// Makefile at build-time using:
+// -ldflags "-X github.com/inspektor-gadget/inspektor-gadget/internal/version.version=${VERSION}"
 var (
 	version       = "v0.0.0"
 	parsedVersion semver.Version
+
+	userAgent = ""
 )
 
 func init() {
+	thirdParty := false
+	if version == "v0.0.0" {
+		// If Inspektor Gadget is used as a library, its version will
+		// be in ReadBuildInfo
+		if info, ok := debug.ReadBuildInfo(); ok {
+			for _, dep := range info.Deps {
+				if dep.Path != "github.com/inspektor-gadget/inspektor-gadget" {
+					continue
+				}
+				thirdParty = true
+				if dep.Replace == nil {
+					version = dep.Version
+				} else {
+					version = dep.Replace.Version
+				}
+				break
+			}
+		}
+	}
+
 	parsedVersion, _ = semver.ParseTolerant(version)
+
+	kubernetesVersion, mainVersion := getVersions()
+	userAgent = buildUserAgent(thirdParty, kubernetesVersion, mainVersion)
+}
+
+func getVersions() (kubernetesVersion string, mainVersion string) {
+	kubernetesVersion = "unknown"
+	mainVersion = "unknown"
+
+	info, ok := debug.ReadBuildInfo()
+	if !ok {
+		return kubernetesVersion, mainVersion
+	}
+
+	mainVersion = info.Main.Version
+	for _, dep := range info.Deps {
+		if dep.Path != "k8s.io/client-go" {
+			continue
+		}
+
+		if dep.Replace == nil {
+			kubernetesVersion = dep.Version
+		} else {
+			kubernetesVersion = dep.Replace.Version
+		}
+		break
+	}
+	// Avoid parenthesis such as "(devel)" when compiled without vcs info
+	mainVersion = strings.Trim(mainVersion, "()")
+
+	return kubernetesVersion, mainVersion
+}
+
+func getCommand() string {
+	command := os.Args[0]
+	if command == "" {
+		command = "unknown"
+	}
+	return filepath.Base(command)
+}
+
+// buildUserAgent builds the user agent similarly to
+// https://github.com/kubernetes/client-go/blob/v0.33.0/rest/config.go#L524
+// but with correct IG versioning. User agent should be in the format:
+// https://www.rfc-editor.org/rfc/rfc9110#name-user-agent
+func buildUserAgent(thirdParty bool, kubernetesVersion string, mainVersion string) string {
+	if thirdParty {
+		// Other software using IG Golang packages
+		return fmt.Sprintf("%s/%s (%s/%s) ig/%s kubernetes/%s",
+			getCommand(), mainVersion,
+			runtime.GOOS, runtime.GOARCH,
+			version,
+			kubernetesVersion)
+	}
+	// Executable from the main inspektor-gadget repository.
+	// No need to give version twice.
+	return fmt.Sprintf("%s/%s (%s/%s) kubernetes/%s",
+		getCommand(), version,
+		runtime.GOOS, runtime.GOARCH,
+		kubernetesVersion)
 }
 
 func Version() semver.Version {
@@ -37,3 +128,7 @@ func Version() semver.Version {
 func VersionString() string {
 	return version
 }
+
+func UserAgent() string {
+	return userAgent
+}
diff --git a/internal/version/version_test.go b/internal/version/version_test.go
new file mode 100644
index 000000000..1a984d3bb
--- /dev/null
+++ b/internal/version/version_test.go
@@ -0,0 +1,40 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//	http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package version_test
+
+import (
+	"regexp"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+
+	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
+)
+
+func TestVersion(t *testing.T) {
+	// Example of version when running unit tests:
+	// v0.0.0
+	v := version.VersionString()
+	assert.NotEqual(t, v, "")
+	assert.NotContains(t, v, "unknown")
+	assert.Regexp(t, regexp.MustCompile(`^v\d+\.\d+\.\d+`), v)
+}
+
+func TestUserAgent(t *testing.T) {
+	// Example of user agent when running unit tests:
+	// version.test/v0.0.0 (linux/amd64) kubernetes/unknown
+	ua := version.UserAgent()
+	assert.NotEqual(t, ua, "")
+	assert.Regexp(t, regexp.MustCompile(`[\w.-]+/v\d+\.\d+\.\d+[\w-]* \(\w+/\w+\) kubernetes/[\w.-]+`), ua)
+}
diff --git a/pkg/bpfstats/bpfstats.go b/pkg/bpfstats/bpfstats.go
index 38428544f..8c7d4e616 100644
--- a/pkg/bpfstats/bpfstats.go
+++ b/pkg/bpfstats/bpfstats.go
@@ -15,15 +15,20 @@
 package bpfstats
 
 import (
+	"bufio"
 	"errors"
 	"fmt"
 	"io"
 	"os"
 	"path/filepath"
+	"strconv"
+	"strings"
 	"sync"
 
 	"github.com/cilium/ebpf"
 	"golang.org/x/sys/unix"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
 )
 
 type BPFStatsMethod int
@@ -120,3 +125,64 @@ func GetMethod() BPFStatsMethod {
 	defer mutex.Unlock()
 	return method
 }
+
+// GetMapsMemUsage returns a map with the memory usage for all maps on the
+// system
+func GetMapsMemUsage() (map[ebpf.MapID]uint64, error) {
+	var err error
+	mapSizes := make(map[ebpf.MapID]uint64)
+
+	curMapID := ebpf.MapID(0)
+	nextMapID := ebpf.MapID(0)
+
+	for {
+		nextMapID, err = ebpf.MapGetNextID(curMapID)
+		if err != nil {
+			if errors.Is(err, os.ErrNotExist) {
+				break
+			}
+			return nil, fmt.Errorf("getting next map ID: %w", err)
+		}
+		if nextMapID <= curMapID {
+			break
+		}
+		curMapID = nextMapID
+		m, err := ebpf.NewMapFromID(curMapID)
+		if err != nil {
+			continue
+		}
+
+		mapSizes[curMapID], err = GetMapMemUsage(m)
+		m.Close()
+		if err != nil {
+			return nil, fmt.Errorf("getting memory usage of map ID (%d): %w", curMapID, err)
+		}
+	}
+
+	return mapSizes, nil
+}
+
+// GetMapMemUsage returns the memory usage of a map
+func GetMapMemUsage(m *ebpf.Map) (uint64, error) {
+	fdInfoPath := filepath.Join(host.HostProcFs, "self", "fdinfo", fmt.Sprint(m.FD()))
+	f, err := os.Open(fdInfoPath)
+	if err != nil {
+		return 0, fmt.Errorf("reading fdinfo: %w", err)
+	}
+	defer f.Close()
+
+	sc := bufio.NewScanner(f)
+	for sc.Scan() {
+		if strings.HasPrefix(sc.Text(), "memlock:\t") {
+			lineSplit := strings.Split(sc.Text(), "\t")
+			if len(lineSplit) == 2 {
+				size, err := strconv.ParseUint(lineSplit[1], 10, 64)
+				if err != nil {
+					return 0, fmt.Errorf("reading memlock: %w", err)
+				}
+				return size, nil
+			}
+		}
+	}
+	return 0, fmt.Errorf("finding memlock in fdinfo")
+}
diff --git a/pkg/columns/columninfo.go b/pkg/columns/columninfo.go
index 3c76291e2..b17de97c5 100644
--- a/pkg/columns/columninfo.go
+++ b/pkg/columns/columninfo.go
@@ -384,18 +384,12 @@ func (ci *Column[T]) HasTag(tag string) bool {
 }
 
 func (ci *Column[T]) HasNoTags() bool {
-	if len(ci.Tags) == 0 {
-		return true
-	}
-	return false
+	return len(ci.Tags) == 0
 }
 
 // IsEmbedded returns true, if the current column is a member of an embedded struct
 func (ci *Column[T]) IsEmbedded() bool {
-	if len(ci.subFieldIndex) == 0 {
-		return false
-	}
-	return true
+	return len(ci.subFieldIndex) != 0
 }
 
 // IsVirtual returns true, if the column has direct reference to a field
diff --git a/pkg/columns/filter.go b/pkg/columns/filter.go
index fa8b4f6f7..874ffdfa9 100644
--- a/pkg/columns/filter.go
+++ b/pkg/columns/filter.go
@@ -45,10 +45,7 @@ func And(filters ...ColumnFilter) ColumnFilter {
 // WithEmbedded checks whether a column matches the embedded criteria
 func WithEmbedded(embedded bool) ColumnFilter {
 	return func(matcher ColumnMatcher) bool {
-		if matcher.IsEmbedded() == embedded {
-			return true
-		}
-		return false
+		return matcher.IsEmbedded() == embedded
 	}
 }
 
diff --git a/pkg/columns/sort/sort.go b/pkg/columns/sort/sort.go
index c8d94b583..2dd02f90e 100644
--- a/pkg/columns/sort/sort.go
+++ b/pkg/columns/sort/sort.go
@@ -130,7 +130,7 @@ func getLessFunc[OT constraints.Ordered, T any](array []*T, column columns.Colum
 		if array[j] == nil {
 			return true
 		}
-		return !(fieldFunc(array[i]) < fieldFunc(array[j])) != order
+		return (fieldFunc(array[i]) >= fieldFunc(array[j])) != order
 	}
 }
 
diff --git a/pkg/config/gadgettracermanagerconfig/config.go b/pkg/config/gadgettracermanagerconfig/config.go
index 03e1e1279..85b1bac1c 100644
--- a/pkg/config/gadgettracermanagerconfig/config.go
+++ b/pkg/config/gadgettracermanagerconfig/config.go
@@ -34,4 +34,6 @@ const (
 	OtelMetrics              = "otel-metrics"
 	OtelMetricsListen        = "otel-metrics-listen"
 	OtelMetricsListenAddress = "otel-metrics-listen-address"
+	EBPFOperator             = "ebpf"
+	GadgetNamespace          = "gadget-namespace"
 )
diff --git a/pkg/container-collection/container-collection.go b/pkg/container-collection/container-collection.go
index fef1bcaa0..6a49abc4b 100644
--- a/pkg/container-collection/container-collection.go
+++ b/pkg/container-collection/container-collection.go
@@ -82,6 +82,10 @@ type ContainerCollection struct {
 
 	// disableContainerRuntimeWarnings is used to disable warnings about container runtimes.
 	disableContainerRuntimeWarnings bool
+
+	// kubeconfigPath is the path to the kubeconfig file, or empty for in-cluster config.
+	// Some options like WithPodInformer will use it.
+	kubeconfigPath string
 }
 
 // ContainerCollectionOption are options to pass to
@@ -345,7 +349,7 @@ func (cc *ContainerCollection) LookupOwnerReferenceByMntns(mntns uint64) *metav1
 	cc.containers.Range(func(key, value interface{}) bool {
 		c := value.(*Container)
 		if mntns == c.Mntns {
-			ownerRef, err = c.GetOwnerReference()
+			ownerRef, err = c.GetOwnerReference(cc.kubeconfigPath)
 			if err != nil {
 				log.Warnf("Failed to get owner reference of %s/%s/%s: %s",
 					c.K8s.Namespace, c.K8s.PodName, c.K8s.ContainerName, err)
diff --git a/pkg/container-collection/containers.go b/pkg/container-collection/containers.go
index 486f1687b..426459d02 100644
--- a/pkg/container-collection/containers.go
+++ b/pkg/container-collection/containers.go
@@ -20,13 +20,12 @@ import (
 	"time"
 
 	"github.com/moby/moby/pkg/stringid"
-	ocispec "github.com/opencontainers/runtime-spec/specs-go"
 	"golang.org/x/sys/unix"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/client-go/dynamic"
-	"k8s.io/client-go/rest"
 
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/columns"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/k8sutil"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
 )
 
@@ -40,7 +39,7 @@ type Container struct {
 
 	// Container's configuration is the config.json from the OCI runtime
 	// spec
-	OciConfig *ocispec.Spec `json:"ociConfig,omitempty"`
+	OciConfig string `json:"ociConfig,omitempty"`
 
 	// Bundle is the directory containing the config.json from the OCI
 	// runtime spec
@@ -61,6 +60,11 @@ type Container struct {
 	CgroupV1 string `json:"cgroupV1,omitempty"`
 	CgroupV2 string `json:"cgroupV2,omitempty"`
 
+	// podLabelsAsString is the same as K8s.PodLabels but in a string representation.
+	// Kept in sync via SetPodLabels() and GetPodLabelsAsString() helpers.
+	// It is used to avoid re-serializing the map[string]string for every event.
+	podLabelsAsString string
+
 	// We keep an open file descriptor of the containers mount and net namespaces to be sure the
 	// kernel doesn't reuse the inode id before we get rid of this container. This logic avoids
 	// a race condition when the ns inode id is reused by a new container and we erroneously
@@ -115,16 +119,15 @@ type ContainerSelector struct {
 // to help users to identify the workflow of the profile. We "lazily
 // enrich" this information because this operation is expensive and this
 // information is only needed in some cases.
-func (c *Container) GetOwnerReference() (*metav1.OwnerReference, error) {
+func (c *Container) GetOwnerReference(kubeconfigPath string) (*metav1.OwnerReference, error) {
 	if c.K8s.ownerReference != nil {
 		return c.K8s.ownerReference, nil
 	}
 
-	kubeconfig, err := rest.InClusterConfig()
+	kubeconfig, err := k8sutil.NewKubeConfig(kubeconfigPath, "container-collection/GetOwnerReference")
 	if err != nil {
 		return nil, fmt.Errorf("getting Kubernetes config: %w", err)
 	}
-
 	dynamicClient, err := dynamic.NewForConfig(kubeconfig)
 	if err != nil {
 		return nil, fmt.Errorf("getting get dynamic Kubernetes client: %w", err)
@@ -237,3 +240,25 @@ func (c *Container) K8sOwnerReference() *types.K8sOwnerReference {
 		Name: c.K8s.ownerReference.Name,
 	}
 }
+
+func (c *Container) K8sPodLabelsAsString() string {
+	return c.podLabelsAsString
+}
+
+func (c *Container) SetPodLabels(podLabels map[string]string) {
+	if len(podLabels) == 0 {
+		// IsEnriched relies on c.K8s.PodLabels == nil to know if it
+		// has been initialized.
+		c.K8s.PodLabels = nil
+		c.podLabelsAsString = ""
+		return
+	}
+
+	kvPairs := make([]string, 0, len(podLabels))
+	c.K8s.PodLabels = make(map[string]string, len(podLabels))
+	for k, v := range podLabels {
+		c.K8s.PodLabels[k] = v
+		kvPairs = append(kvPairs, fmt.Sprintf("%s=%s", k, v))
+	}
+	c.podLabelsAsString = strings.Join(kvPairs, ",")
+}
diff --git a/pkg/container-collection/k8s.go b/pkg/container-collection/k8s.go
index b8de48fa7..b4314b5be 100644
--- a/pkg/container-collection/k8s.go
+++ b/pkg/container-collection/k8s.go
@@ -30,7 +30,6 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/fields"
 	"k8s.io/client-go/kubernetes"
-	"k8s.io/client-go/rest"
 	kubeletconfigv1beta1 "k8s.io/kubelet/config/v1beta1"
 
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/config"
@@ -38,6 +37,7 @@ import (
 	containerutils "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils"
 	runtimeclient "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils/runtime-client"
 	containerutilsTypes "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils/types"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/k8sutil"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
 )
@@ -50,12 +50,8 @@ type K8sClient struct {
 	RuntimeConfig *containerutilsTypes.RuntimeConfig
 }
 
-func NewK8sClient(nodeName string) (*K8sClient, error) {
-	config, err := rest.InClusterConfig()
-	if err != nil {
-		return nil, err
-	}
-	clientset, err := kubernetes.NewForConfig(config)
+func NewK8sClient(nodeName string, kubeconfigPath string, userAgentComment string) (*K8sClient, error) {
+	clientset, err := k8sutil.NewClientset(kubeconfigPath, userAgentComment)
 	if err != nil {
 		return nil, err
 	}
@@ -160,7 +156,7 @@ func (k *K8sClient) GetRunningContainers(pod *v1.Pod) []Container {
 	containers := []Container{}
 
 	labels := map[string]string{}
-	for k, v := range pod.ObjectMeta.Labels {
+	for k, v := range pod.Labels {
 		labels[k] = v
 	}
 
@@ -216,10 +212,12 @@ func (k *K8sClient) GetRunningContainers(pod *v1.Pod) []Container {
 					Namespace:     pod.GetNamespace(),
 					PodName:       pod.GetName(),
 					ContainerName: s.Name,
-					PodLabels:     labels,
 				},
 			},
 		}
+
+		// PodLabels must be set through the SetPodLabels method
+		containerDef.SetPodLabels(pod.Labels)
 		containers = append(containers, containerDef)
 	}
 
diff --git a/pkg/container-collection/ocispec.go b/pkg/container-collection/ocispec.go
new file mode 100644
index 000000000..c69161bf5
--- /dev/null
+++ b/pkg/container-collection/ocispec.go
@@ -0,0 +1,61 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// This file provides lightweight functions to parse the OCI config
+// The oci config is expected to be in the format of
+// https://github.com/opencontainers/runtime-spec/blob/v1.2.1/specs-go/config.go#L18
+
+package containercollection
+
+import (
+	"encoding/json"
+	"errors"
+)
+
+// ociConfigGetSourceMounts returns the source mounts from the oci config
+func ociConfigGetSourceMounts(ociConfig string) (out []string, err error) {
+	if ociConfig == "" {
+		return nil, errors.New("ociConfig is empty")
+	}
+
+	var config struct {
+		Mounts []struct {
+			Source string `json:"source,omitempty"`
+		} `json:"mounts,omitempty"`
+	}
+	err = json.Unmarshal([]byte(ociConfig), &config)
+	if err != nil {
+		return nil, err
+	}
+	for _, m := range config.Mounts {
+		out = append(out, m.Source)
+	}
+	return out, nil
+}
+
+// ociConfigGetAnnotations returns the annotations from the oci config
+func ociConfigGetAnnotations(ociConfig string) (map[string]string, error) {
+	if ociConfig == "" {
+		return nil, errors.New("ociConfig is empty")
+	}
+
+	var config struct {
+		Annotations map[string]string `json:"annotations,omitempty"`
+	}
+	err := json.Unmarshal([]byte(ociConfig), &config)
+	if err != nil {
+		return nil, err
+	}
+	return config.Annotations, nil
+}
diff --git a/pkg/container-collection/operator.go b/pkg/container-collection/operator.go
index 67537cca8..96726c48e 100644
--- a/pkg/container-collection/operator.go
+++ b/pkg/container-collection/operator.go
@@ -54,6 +54,4 @@ func (cc *ContainerCollection) EnrichEventByNetNs(event operators.ContainerInfoF
 	// 	TODO: Non-Kubernetes containers sharing the same network namespace.
 	// 	What should we do here?
 	// }
-
-	return
 }
diff --git a/pkg/container-collection/options.go b/pkg/container-collection/options.go
index 742e54a68..786ae83bd 100644
--- a/pkg/container-collection/options.go
+++ b/pkg/container-collection/options.go
@@ -33,7 +33,6 @@ import (
 	"k8s.io/apimachinery/pkg/runtime/schema"
 	"k8s.io/client-go/dynamic"
 	"k8s.io/client-go/kubernetes"
-	"k8s.io/client-go/rest"
 	"k8s.io/client-go/tools/cache"
 
 	containerhook "github.com/inspektor-gadget/inspektor-gadget/pkg/container-hook"
@@ -43,6 +42,7 @@ import (
 	ociannotations "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils/oci-annotations"
 	runtimeclient "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils/runtime-client"
 	containerutilsTypes "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils/types"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/k8sutil"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
 )
@@ -67,7 +67,7 @@ func enrichContainerWithContainerData(containerData *runtimeclient.ContainerData
 	setIfEmptyStr(&container.K8s.PodUID, containerData.K8s.PodUID)
 	setIfEmptyStr(&container.K8s.ContainerName, containerData.K8s.ContainerName)
 	if container.K8s.PodLabels == nil {
-		container.K8s.PodLabels = containerData.K8s.PodLabels
+		container.SetPodLabels(containerData.K8s.PodLabels)
 	}
 }
 
@@ -98,7 +98,7 @@ func containerRuntimeEnricher(
 				// We couldn't get the labels, but don't drop the container.
 				return true
 			}
-			container.K8s.PodLabels = labels
+			container.SetPodLabels(labels)
 		}
 
 		return true
@@ -267,7 +267,7 @@ func WithFallbackPodInformer(nodeName string) ContainerCollectionOption {
 
 func withPodInformer(nodeName string, fallbackMode bool) ContainerCollectionOption {
 	return func(cc *ContainerCollection) error {
-		k8sClient, err := NewK8sClient(nodeName)
+		k8sClient, err := NewK8sClient(nodeName, cc.kubeconfigPath, "WithPodInformer")
 		if err != nil {
 			return fmt.Errorf("creating Kubernetes client: %w", err)
 		}
@@ -375,7 +375,7 @@ func WithHost() ContainerCollectionOption {
 // already gets initial containers.
 func WithInitialKubernetesContainers(nodeName string) ContainerCollectionOption {
 	return func(cc *ContainerCollection) error {
-		k8sClient, err := NewK8sClient(nodeName)
+		k8sClient, err := NewK8sClient(nodeName, cc.kubeconfigPath, "WithInitialKubernetesContainers")
 		if err != nil {
 			return fmt.Errorf("creating Kubernetes client: %w", err)
 		}
@@ -494,7 +494,7 @@ func getPodByCgroups(clientset *kubernetes.Clientset, nodeName string, container
 	}
 
 	for _, pod := range pods.Items {
-		uid := string(pod.ObjectMeta.UID)
+		uid := string(pod.UID)
 		// check if this container is associated to this pod
 		uidWithUnderscores := strings.ReplaceAll(uid, "-", "_")
 
@@ -512,16 +512,9 @@ func getPodByCgroups(clientset *kubernetes.Clientset, nodeName string, container
 // WithKubernetesEnrichment automatically adds pod metadata
 //
 // ContainerCollection.Initialize(WithKubernetesEnrichment())
-func WithKubernetesEnrichment(nodeName string, kubeconfig *rest.Config) ContainerCollectionOption {
+func WithKubernetesEnrichment(nodeName string) ContainerCollectionOption {
 	return func(cc *ContainerCollection) error {
-		if kubeconfig == nil {
-			var err error
-			kubeconfig, err = rest.InClusterConfig()
-			if err != nil {
-				return fmt.Errorf("getting Kubernetes config: %w", err)
-			}
-		}
-		clientset, err := kubernetes.NewForConfig(kubeconfig)
+		clientset, err := k8sutil.NewClientset(cc.kubeconfigPath, "container-collection/WithKubernetesEnrichment")
 		if err != nil {
 			return fmt.Errorf("getting Kubernetes client: %w", err)
 		}
@@ -549,7 +542,7 @@ func WithKubernetesEnrichment(nodeName string, kubeconfig *rest.Config) Containe
 
 				if container.K8s.ContainerName == "" {
 					var containerName string
-					uid := string(pod.ObjectMeta.UID)
+					uid := string(pod.UID)
 					containerNames := []string{}
 					for _, c := range pod.Spec.Containers {
 						containerNames = append(containerNames, c.Name)
@@ -560,11 +553,18 @@ func WithKubernetesEnrichment(nodeName string, kubeconfig *rest.Config) Containe
 					for _, c := range pod.Spec.EphemeralContainers {
 						containerNames = append(containerNames, c.Name)
 					}
+
+					srcs, err := ociConfigGetSourceMounts(container.OciConfig)
+					if err != nil {
+						log.Warnf("kubernetes enricher: failed to get source mounts for container %s: %s", container.Runtime.ContainerID, err)
+						// We won't get ContainerName but keep going
+					}
+
 				outerLoop:
 					for _, name := range containerNames {
-						for _, m := range container.OciConfig.Mounts {
+						for _, src := range srcs {
 							pattern := fmt.Sprintf("pods/%s/containers/%s/", uid, name)
-							if strings.Contains(m.Source, pattern) {
+							if strings.Contains(src, pattern) {
 								containerName = name
 								break outerLoop
 							}
@@ -573,10 +573,10 @@ func WithKubernetesEnrichment(nodeName string, kubeconfig *rest.Config) Containe
 					container.K8s.ContainerName = containerName
 				}
 
-				container.K8s.Namespace = pod.ObjectMeta.Namespace
-				container.K8s.PodName = pod.ObjectMeta.Name
-				container.K8s.PodUID = string(pod.ObjectMeta.UID)
-				container.K8s.PodLabels = pod.ObjectMeta.Labels
+				container.K8s.Namespace = pod.Namespace
+				container.K8s.PodName = pod.Name
+				container.K8s.PodUID = string(pod.UID)
+				container.SetPodLabels(pod.Labels)
 
 				// drop pause containers
 				if container.K8s.PodName != "" && container.K8s.ContainerName == "" {
@@ -585,7 +585,7 @@ func WithKubernetesEnrichment(nodeName string, kubeconfig *rest.Config) Containe
 			}
 
 			if container.K8s.ownerReference == nil {
-				_, err = container.GetOwnerReference()
+				_, err = container.GetOwnerReference(cc.kubeconfigPath)
 				if err != nil {
 					log.Errorf("kubernetes enricher: failed to get owner reference for container %s: %s", container.Runtime.ContainerID, err)
 					// Don't drop the container. We just have problems getting the owner reference, but still want to trace the container.
@@ -713,7 +713,7 @@ func WithLinuxNamespaceEnrichment() ContainerCollectionOption {
 // metadata from OCI config that WithOCIConfigEnrichment is able to provide.
 // Keep in sync with what WithOCIConfigEnrichment does.
 func isEnrichedWithOCIConfigInfo(container *Container) bool {
-	return container.OciConfig != nil &&
+	return container.OciConfig != "" &&
 		container.Runtime.RuntimeName != "" &&
 		container.Runtime.ContainerImageName != "" &&
 		container.K8s.ContainerName != "" &&
@@ -727,15 +727,21 @@ func isEnrichedWithOCIConfigInfo(container *Container) bool {
 func WithOCIConfigEnrichment() ContainerCollectionOption {
 	return func(cc *ContainerCollection) error {
 		cc.containerEnrichers = append(cc.containerEnrichers, func(container *Container) bool {
-			if container.OciConfig == nil || isEnrichedWithOCIConfigInfo(container) {
+			if container.OciConfig == "" || isEnrichedWithOCIConfigInfo(container) {
+				return true
+			}
+
+			annotations, err := ociConfigGetAnnotations(container.OciConfig)
+			if err != nil {
+				log.Errorf("OCIConfig enricher: failed to get annotations from OCI config (len=%d): %s", len(container.OciConfig), err)
 				return true
 			}
 
-			if cm, ok := container.OciConfig.Annotations["io.container.manager"]; ok && cm == "libpod" {
+			if cm, ok := annotations["io.container.manager"]; ok && cm == "libpod" {
 				container.Runtime.RuntimeName = types.RuntimeNamePodman
 			}
 
-			resolver, err := ociannotations.NewResolverFromAnnotations(container.OciConfig.Annotations)
+			resolver, err := ociannotations.NewResolverFromAnnotations(annotations)
 			// ignore if annotations aren't supported for runtime e.g docker
 			if err != nil {
 				log.Debugf("OCIConfig enricher: failed to initialize annotation resolver: %s", err)
@@ -744,28 +750,28 @@ func WithOCIConfigEnrichment() ContainerCollectionOption {
 
 			// TODO: handle this once we support pod sandboxes via WithContainerRuntimeEnrichment
 			// Issue: https://github.com/inspektor-gadget/inspektor-gadget/issues/1095
-			if ct := resolver.ContainerType(container.OciConfig.Annotations); ct == "sandbox" {
+			if ct := resolver.ContainerType(annotations); ct == "sandbox" {
 				return false
 			}
 
 			// Enrich the container. Keep in sync with isEnrichedWithOCIConfigInfo.
 			container.Runtime.RuntimeName = resolver.Runtime()
-			if name := resolver.ContainerName(container.OciConfig.Annotations); name != "" {
+			if name := resolver.ContainerName(annotations); name != "" {
 				container.K8s.ContainerName = name
 			}
-			if podName := resolver.PodName(container.OciConfig.Annotations); podName != "" {
+			if podName := resolver.PodName(annotations); podName != "" {
 				container.K8s.PodName = podName
 			}
-			if podNamespace := resolver.PodNamespace(container.OciConfig.Annotations); podNamespace != "" {
+			if podNamespace := resolver.PodNamespace(annotations); podNamespace != "" {
 				container.K8s.Namespace = podNamespace
 			}
-			if podUID := resolver.PodUID(container.OciConfig.Annotations); podUID != "" {
+			if podUID := resolver.PodUID(annotations); podUID != "" {
 				container.K8s.PodUID = podUID
 			}
-			if imageName := resolver.ContainerImageName(container.OciConfig.Annotations); imageName != "" {
+			if imageName := resolver.ContainerImageName(annotations); imageName != "" {
 				container.Runtime.ContainerImageName = imageName
 			}
-			if podSandboxId := resolver.PodSandboxId(container.OciConfig.Annotations); podSandboxId != "" {
+			if podSandboxId := resolver.PodSandboxId(annotations); podSandboxId != "" {
 				container.SandboxId = podSandboxId
 			}
 
@@ -901,3 +907,12 @@ func WithProcEnrichment() ContainerCollectionOption {
 		return nil
 	}
 }
+
+// WithKubeconfigPath sets the kubeconfig path for the Kubernetes client.
+// Some options like WithPodInformer or WithKubernetesEnrichment will use it.
+func WithKubeconfigPath(kubeconfigPath string) ContainerCollectionOption {
+	return func(cc *ContainerCollection) error {
+		cc.kubeconfigPath = kubeconfigPath
+		return nil
+	}
+}
diff --git a/pkg/container-collection/podinformer.go b/pkg/container-collection/podinformer.go
index 67baaac1e..c249ffa15 100644
--- a/pkg/container-collection/podinformer.go
+++ b/pkg/container-collection/podinformer.go
@@ -36,6 +36,8 @@ import (
 	"k8s.io/client-go/util/workqueue"
 
 	_ "k8s.io/client-go/plugin/pkg/client/auth"
+
+	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
 )
 
 type PodInformer struct {
@@ -54,6 +56,7 @@ func NewPodInformer(node string) (*PodInformer, error) {
 	if err != nil {
 		return nil, err
 	}
+	config.UserAgent = version.UserAgent() + " (container-collection/NewPodInformer)"
 	clientset, err := kubernetes.NewForConfig(config)
 	if err != nil {
 		return nil, err
diff --git a/pkg/container-hook/runtime-finder/finder.go b/pkg/container-hook/runtime-finder/finder.go
index 004396318..960fa90fe 100644
--- a/pkg/container-hook/runtime-finder/finder.go
+++ b/pkg/container-hook/runtime-finder/finder.go
@@ -40,9 +40,12 @@ var RuntimePaths = []string{
 	"/usr/lib/cri-o-runc/sbin/runc",
 	"/run/torcx/unpack/docker/bin/runc", // Used in Flatcar Container Linux
 	"/usr/bin/crun",
-	"/var/lib/rancher/k3s/data/current/bin/runc", // Used in k3s
-	"/var/lib/rancher/rke2/bin/runc",             // Used in RKE2
-	"/usr/libexec/crio/runc",                     // Used in kubeadm on Debian, upstream crio
+	"/var/lib/rancher/k3s/data/current/bin/runc",            // Used in k3s
+	"/var/lib/rancher/rke2/bin/runc",                        // Used in RKE2
+	"/usr/libexec/crio/runc",                                // Used in kubeadm on Debian, upstream crio
+	"/var/lib/k0s/bin/runc",                                 // Used in k0s
+	"/aarch64-bottlerocket-linux-gnu/sys-root/usr/bin/runc", // Used in Bottlerocket OS
+	"/x86_64-bottlerocket-linux-gnu/sys-root/usr/bin/runc",  // Used in Bottlerocket OS
 }
 
 // Notify marks the runtime path given as argument if it exists.
diff --git a/pkg/container-hook/tracer.go b/pkg/container-hook/tracer.go
index 33c0ed09e..3f98c9bc1 100644
--- a/pkg/container-hook/tracer.go
+++ b/pkg/container-hook/tracer.go
@@ -32,7 +32,6 @@
 package containerhook
 
 import (
-	"encoding/json"
 	"errors"
 	"fmt"
 	"io"
@@ -48,7 +47,6 @@ import (
 
 	"github.com/cilium/ebpf"
 	"github.com/cilium/ebpf/link"
-	ocispec "github.com/opencontainers/runtime-spec/specs-go"
 	"github.com/s3rj1k/go-fanotify/fanotify"
 	log "github.com/sirupsen/logrus"
 	"golang.org/x/sys/unix"
@@ -108,7 +106,7 @@ type ContainerEvent struct {
 
 	// Container's configuration is the config.json from the OCI runtime
 	// spec
-	ContainerConfig *ocispec.Spec
+	ContainerConfig string
 
 	// Bundle is the directory containing the config.json from the OCI
 	// runtime spec
@@ -570,12 +568,6 @@ func (n *ContainerNotifier) watchPidFileIterate() error {
 		log.Errorf("fanotify: could not read config.json (%q): %s", pc.configJSONPath, err)
 		return nil
 	}
-	containerConfig := &ocispec.Spec{}
-	err = json.Unmarshal(bundleConfigJSON, containerConfig)
-	if err != nil {
-		log.Errorf("fanotify: could not unmarshal config.json (%q): %s", pc.configJSONPath, err)
-		return nil
-	}
 
 	err = n.AddWatchContainerTermination(pc.id, containerPID)
 	if err != nil {
@@ -596,7 +588,7 @@ func (n *ContainerNotifier) watchPidFileIterate() error {
 		Type:            EventTypeAddContainer,
 		ContainerID:     pc.id,
 		ContainerPID:    uint32(containerPID),
-		ContainerConfig: containerConfig,
+		ContainerConfig: string(bundleConfigJSON),
 		Bundle:          pc.bundleDir,
 		ContainerName:   containerName,
 	})
diff --git a/pkg/container-hook/tracer_test.go b/pkg/container-hook/tracer_test.go
index c5c766449..8c92f467f 100644
--- a/pkg/container-hook/tracer_test.go
+++ b/pkg/container-hook/tracer_test.go
@@ -78,7 +78,7 @@ func TestContainerHookEvent(t *testing.T) {
 				// normalize
 				event.ContainerName = ""
 				event.ContainerPID = 0
-				event.ContainerConfig = nil
+				event.ContainerConfig = ""
 				event.Bundle = ""
 
 				events = append(events, event)
diff --git a/pkg/container-utils/containerutils.go b/pkg/container-utils/containerutils.go
index e2c89452b..158291eff 100644
--- a/pkg/container-utils/containerutils.go
+++ b/pkg/container-utils/containerutils.go
@@ -143,7 +143,7 @@ func GetIfacePeers(pid int) ([]*net.Interface, error) {
 				continue
 			}
 
-			if veth.LinkAttrs.Flags&net.FlagUp == 0 {
+			if veth.Flags&net.FlagUp == 0 {
 				continue
 			}
 
diff --git a/pkg/container-utils/cri/cri.go b/pkg/container-utils/cri/cri.go
index f300dedb0..59ed6c603 100644
--- a/pkg/container-utils/cri/cri.go
+++ b/pkg/container-utils/cri/cri.go
@@ -441,7 +441,7 @@ func buildContainerData(runtimeName types.RuntimeName, container CRIContainer, p
 	runtimeclient.EnrichWithK8sMetadata(containerData, container.GetLabels())
 
 	// Initial labels are stored in the pod sandbox
-	containerData.K8s.BasicK8sMetadata.PodLabels = getFilteredPodLabels(podSandbox)
+	containerData.K8s.PodLabels = getFilteredPodLabels(podSandbox)
 
 	// CRI-O does not use the same container name of Kubernetes as containerd.
 	// Instead, it uses a composed name as Docker does, but such name is not
diff --git a/pkg/container-utils/docker/docker.go b/pkg/container-utils/docker/docker.go
index b5b148786..333898d82 100644
--- a/pkg/container-utils/docker/docker.go
+++ b/pkg/container-utils/docker/docker.go
@@ -22,7 +22,6 @@ import (
 	"time"
 
 	securejoin "github.com/cyphar/filepath-securejoin"
-	dockertypes "github.com/docker/docker/api/types"
 	"github.com/docker/docker/api/types/container"
 	dockerfilters "github.com/docker/docker/api/types/filters"
 	"github.com/docker/docker/client"
@@ -87,7 +86,7 @@ func NewDockerClient(socketPath string, protocol string) (runtimeclient.Containe
 	}, nil
 }
 
-func listContainers(c *DockerClient, filter *dockerfilters.Args) ([]dockertypes.Container, error) {
+func listContainers(c *DockerClient, filter *dockerfilters.Args) ([]container.Summary, error) {
 	opts := container.ListOptions{
 		// We need to request for all containers (also non-running) because
 		// when we are enriching a container that is being created, it is
@@ -108,7 +107,7 @@ func listContainers(c *DockerClient, filter *dockerfilters.Args) ([]dockertypes.
 	// considered as normal containers and EnrichByNetNs will incorrectly think
 	// that they are using a given network namespace. See issue
 	// https://github.com/inspektor-gadget/inspektor-gadget/issues/1095.
-	noPauseContainers := []dockertypes.Container{}
+	noPauseContainers := []container.Summary{}
 	for _, c := range containers {
 		if c.Labels["io.kubernetes.docker.type"] == "podsandbox" {
 			continue
@@ -240,7 +239,7 @@ func (c *DockerClient) Close() error {
 // The digest is usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated.
 // Note: This function only works for already running containers and not for containers that are being created.
 func (c *DockerClient) getContainerImageDigest(imageId string) string {
-	imageInspect, _, err := c.client.ImageInspectWithRaw(context.Background(), imageId)
+	imageInspect, err := c.client.ImageInspect(context.Background(), imageId)
 	if err != nil {
 		log.Warnf("Failed to get image digest for image %s: %s", imageId, err)
 		return ""
@@ -277,7 +276,7 @@ func containerStatusStateToRuntimeClientState(containerState string) (runtimeCli
 	return
 }
 
-func DockerContainerToContainerData(container *dockertypes.Container) *runtimeclient.ContainerData {
+func DockerContainerToContainerData(container *container.Summary) *runtimeclient.ContainerData {
 	imageDigest := ""
 	return buildContainerData(
 		container.ID,
diff --git a/pkg/container-utils/runtime-client/runtimeclient_test.go b/pkg/container-utils/runtime-client/runtimeclient_test.go
index afdabb160..51105575d 100644
--- a/pkg/container-utils/runtime-client/runtimeclient_test.go
+++ b/pkg/container-utils/runtime-client/runtimeclient_test.go
@@ -31,7 +31,7 @@ import (
 
 const (
 	containerNamePrefix = "test-container"
-	containerImageName  = "docker.io/library/alpine:latest"
+	containerImageName  = "ghcr.io/inspektor-gadget/ci/busybox:latest"
 	numContainers       = 2
 )
 
diff --git a/pkg/container-utils/testdata/crio_bad_escaped.input b/pkg/container-utils/testdata/crio_bad_escaped.input
index f7dfaecb4..af739843f 100644
--- a/pkg/container-utils/testdata/crio_bad_escaped.input
+++ b/pkg/container-utils/testdata/crio_bad_escaped.input
@@ -1 +1 @@
-{"ociVersion":"1.0.1-dev","id":"92646e8e819a27d43a9435cd195dc1f38a0c5ff897b4ca660fcbfbfe7502b47a","status":"creating","pid":210223,"bundle":"/run/containers/storage/overlay-containers/92646e8e819a27d43a9435cd195dc1f38a0c5ff897b4ca660fcbfbfe7502b47a/userdata","annotations":{"io.kubernetes.container.hash":"124d6e34","io.kubernetes.container.name":"nginx","io.kubernetes.container.restartCount":"0","io.kubernetes.container.terminationMessagePath":"/dev/termination-log","io.kubernetes.container.terminationMessagePolicy":"File","io.kubernetes.cri-o.Annotations":"{"io.kubernetes.container.hash":"124d6e34","io.kubernetes.container.restartCount":"0","io.kubernetes.container.terminationMessagePath":"/dev/termination-log","io.kubernetes.container.terminationMessagePolicy":"File","io.kubernetes.pod.terminationGracePeriod":"30"}","io.kubernetes.cri-o.ContainerID":"92646e8e819a27d43a9435cd195dc1f38a0c5ff897b4ca660fcbfbfe7502b47a","io.kubernetes.cri-o.ContainerType":"container","io.kubernetes.cri-o.Created":"2020-05-08T20:32:21.26753518Z","io.kubernetes.cri-o.IP":"10.128.0.238","io.kubernetes.cri-o.Image":"docker.io/library/nginx@sha256:cccef6d6bdea671c394956e24b0d0c44cd82dbe83f543a47fdc790fadea48422","io.kubernetes.cri-o.ImageName":"docker.io/library/nginx:latest","io.kubernetes.cri-o.ImageRef":"docker.io/library/nginx@sha256:cccef6d6bdea671c394956e24b0d0c44cd82dbe83f543a47fdc790fadea48422","io.kubernetes.cri-o.Labels":"{"io.kubernetes.container.name":"nginx","io.kubernetes.pod.name":"nginx-1-qw5cd","io.kubernetes.pod.namespace":"default","io.kubernetes.pod.uid":"fe8c39b8-916a-11ea-90b0-0242ac11001d"}","io.kubernetes.cri-o.LogPath":"/var/log/pods/default_nginx-1-qw5cd_fe8c39b8-916a-11ea-90b0-0242ac11001d/nginx/0.log","io.kubernetes.cri-o.Metadata":"{"name":"nginx"}","io.kubernetes.cri-o.MountPoint":"/var/lib/containers/storage/overlay/5fe9149b060ae77936a1b503e0326a96d9ac3e9b7b59d02cf3abb49e421a014a/merged","io.kubernetes.cri-o.Name":"k8s_nginx_nginx-1-qw5cd_default_fe8c39b8-916a-11ea-90b0-0242ac11001d_0","io.kubernetes.cri-o.ResolvPath":"/var/run/containers/storage/overlay-containers/c3aa2abc0a6a8c50752b57f51a07e4a2517d980255edb7ff718b17898d8429bf/userdata/resolv.conf","io.kubernetes.cri-o.SandboxID":"c3aa2abc0a6a8c50752b57f51a07e4a2517d980255edb7ff718b17898d8429bf","io.kubernetes.cri-o.SandboxName":"k8s_POD_nginx-1-qw5cd_default_fe8c39b8-916a-11ea-90b0-0242ac11001d_0","io.kubernetes.cri-o.SeccompProfilePath":"","io.kubernetes.cri-o.Stdin":"false","io.kubernetes.cri-o.StdinOnce":"false","io.kubernetes.cri-o.TTY":"false","io.kubernetes.cri-o.Volumes":"[{"container_path":"/etc/hosts","host_path":"/var/lib/kubelet/pods/fe8c39b8-916a-11ea-90b0-0242ac11001d/etc-hosts","readonly":false},{"container_path":"/dev/termination-log","host_path":"/var/lib/kubelet/pods/fe8c39b8-916a-11ea-90b0-0242ac11001d/containers/nginx/2b38c787","readonly":false},{"container_path":"/var/run/secrets/kubernetes.io/serviceaccount","host_path":"/var/lib/kubelet/pods/fe8c39b8-916a-11ea-90b0-0242ac11001d/volumes/kubernetes.io~secret/default-token-d4rcl","readonly":true}]","io.kubernetes.pod.name":"nginx-1-qw5cd","io.kubernetes.pod.namespace":"default","io.kubernetes.pod.terminationGracePeriod":"30","io.kubernetes.pod.uid":"fe8c39b8-916a-11ea-90b0-0242ac11001d","org.opencontainers.image.stopSignal":"SIGTERM"}}
+{"ociVersion":"1.0.1-dev","id":"92646e8e819a27d43a9435cd195dc1f38a0c5ff897b4ca660fcbfbfe7502b47a","status":"creating","pid":210223,"bundle":"/run/containers/storage/overlay-containers/92646e8e819a27d43a9435cd195dc1f38a0c5ff897b4ca660fcbfbfe7502b47a/userdata","annotations":{"io.kubernetes.container.hash":"124d6e34","io.kubernetes.container.name":"nginx","io.kubernetes.container.restartCount":"0","io.kubernetes.container.terminationMessagePath":"/dev/termination-log","io.kubernetes.container.terminationMessagePolicy":"File","io.kubernetes.cri-o.Annotations":"{"io.kubernetes.container.hash":"124d6e34","io.kubernetes.container.restartCount":"0","io.kubernetes.container.terminationMessagePath":"/dev/termination-log","io.kubernetes.container.terminationMessagePolicy":"File","io.kubernetes.pod.terminationGracePeriod":"30"}","io.kubernetes.cri-o.ContainerID":"92646e8e819a27d43a9435cd195dc1f38a0c5ff897b4ca660fcbfbfe7502b47a","io.kubernetes.cri-o.ContainerType":"container","io.kubernetes.cri-o.Created":"2020-05-08T20:32:21.26753518Z","io.kubernetes.cri-o.IP":"10.128.0.238","io.kubernetes.cri-o.Image":"ghcr.io/inspektor-gadget/ci/nginx:latest@sha256:cccef6d6bdea671c394956e24b0d0c44cd82dbe83f543a47fdc790fadea48422","io.kubernetes.cri-o.ImageName":"ghcr.io/inspektor-gadget/ci/nginx:latest","io.kubernetes.cri-o.ImageRef":"ghcr.io/inspektor-gadget/ci/nginx:latest@sha256:cccef6d6bdea671c394956e24b0d0c44cd82dbe83f543a47fdc790fadea48422","io.kubernetes.cri-o.Labels":"{"io.kubernetes.container.name":"nginx","io.kubernetes.pod.name":"nginx-1-qw5cd","io.kubernetes.pod.namespace":"default","io.kubernetes.pod.uid":"fe8c39b8-916a-11ea-90b0-0242ac11001d"}","io.kubernetes.cri-o.LogPath":"/var/log/pods/default_nginx-1-qw5cd_fe8c39b8-916a-11ea-90b0-0242ac11001d/nginx/0.log","io.kubernetes.cri-o.Metadata":"{"name":"nginx"}","io.kubernetes.cri-o.MountPoint":"/var/lib/containers/storage/overlay/5fe9149b060ae77936a1b503e0326a96d9ac3e9b7b59d02cf3abb49e421a014a/merged","io.kubernetes.cri-o.Name":"k8s_nginx_nginx-1-qw5cd_default_fe8c39b8-916a-11ea-90b0-0242ac11001d_0","io.kubernetes.cri-o.ResolvPath":"/var/run/containers/storage/overlay-containers/c3aa2abc0a6a8c50752b57f51a07e4a2517d980255edb7ff718b17898d8429bf/userdata/resolv.conf","io.kubernetes.cri-o.SandboxID":"c3aa2abc0a6a8c50752b57f51a07e4a2517d980255edb7ff718b17898d8429bf","io.kubernetes.cri-o.SandboxName":"k8s_POD_nginx-1-qw5cd_default_fe8c39b8-916a-11ea-90b0-0242ac11001d_0","io.kubernetes.cri-o.SeccompProfilePath":"","io.kubernetes.cri-o.Stdin":"false","io.kubernetes.cri-o.StdinOnce":"false","io.kubernetes.cri-o.TTY":"false","io.kubernetes.cri-o.Volumes":"[{"container_path":"/etc/hosts","host_path":"/var/lib/kubelet/pods/fe8c39b8-916a-11ea-90b0-0242ac11001d/etc-hosts","readonly":false},{"container_path":"/dev/termination-log","host_path":"/var/lib/kubelet/pods/fe8c39b8-916a-11ea-90b0-0242ac11001d/containers/nginx/2b38c787","readonly":false},{"container_path":"/var/run/secrets/kubernetes.io/serviceaccount","host_path":"/var/lib/kubelet/pods/fe8c39b8-916a-11ea-90b0-0242ac11001d/volumes/kubernetes.io~secret/default-token-d4rcl","readonly":true}]","io.kubernetes.pod.name":"nginx-1-qw5cd","io.kubernetes.pod.namespace":"default","io.kubernetes.pod.terminationGracePeriod":"30","io.kubernetes.pod.uid":"fe8c39b8-916a-11ea-90b0-0242ac11001d","org.opencontainers.image.stopSignal":"SIGTERM"}}
diff --git a/pkg/container-utils/testutils/docker.go b/pkg/container-utils/testutils/docker.go
index 3d6a67809..88bfc3762 100644
--- a/pkg/container-utils/testutils/docker.go
+++ b/pkg/container-utils/testutils/docker.go
@@ -158,7 +158,7 @@ func (d *DockerContainer) Run(t *testing.T) {
 		}
 		buf := new(bytes.Buffer)
 		buf.ReadFrom(out)
-		t.Logf("Container %q output:\n%s", d.name, string(buf.Bytes()))
+		t.Logf("Container %q output:\n%s", d.name, buf.String())
 	}
 
 	if d.options.removal {
diff --git a/pkg/container-utils/testutils/options.go b/pkg/container-utils/testutils/options.go
index 9e56d95d5..3565e21df 100644
--- a/pkg/container-utils/testutils/options.go
+++ b/pkg/container-utils/testutils/options.go
@@ -21,7 +21,7 @@ import (
 )
 
 const (
-	DefaultContainerImage    = "docker.io/library/busybox"
+	DefaultContainerImage    = "ghcr.io/inspektor-gadget/ci/busybox"
 	DefaultContainerImageTag = "latest"
 )
 
diff --git a/pkg/controllers/trace_controller.go b/pkg/controllers/trace_controller.go
index f1c54625d..726648495 100644
--- a/pkg/controllers/trace_controller.go
+++ b/pkg/controllers/trace_controller.go
@@ -102,10 +102,10 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 	err := r.Client.Get(ctx, req.NamespacedName, trace)
 	if err != nil {
 		if k8serrors.IsNotFound(err) {
-			log.Infof("Trace %q has been deleted", req.NamespacedName.String())
+			log.Infof("Trace %q has been deleted", req.String())
 			return ctrl.Result{}, nil
 		}
-		log.Errorf("Failed to get Trace %q: %s", req.NamespacedName.String(), err)
+		log.Errorf("Failed to get Trace %q: %s", req.String(), err)
 		return ctrl.Result{}, err
 	}
 
@@ -121,12 +121,12 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 
 	// Verify if the Trace is under deletion. Notice we must do it before
 	// checking the Trace specs to avoid blocking the deletion.
-	if !trace.ObjectMeta.DeletionTimestamp.IsZero() {
+	if !trace.DeletionTimestamp.IsZero() {
 		if controllerutil.ContainsFinalizer(trace, GadgetFinalizer) {
 			// Inform the factory (if valid gadget) that the trace is being deleted
 			factory, ok := r.TraceFactories[trace.Spec.Gadget]
 			if ok {
-				factory.Delete(req.NamespacedName.String())
+				factory.Delete(req.String())
 			}
 
 			if r.TracerManager != nil {
@@ -156,13 +156,13 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 	// the Reconcile() from being called again and again by the controller.
 	factory, ok := r.TraceFactories[trace.Spec.Gadget]
 	if !ok {
-		setTraceOpError(ctx, r.Client, req.NamespacedName.String(),
+		setTraceOpError(ctx, r.Client, req.String(),
 			trace, fmt.Sprintf("Unknown gadget %q", trace.Spec.Gadget))
 
 		return ctrl.Result{}, nil
 	}
 	if trace.Spec.RunMode != gadgetv1alpha1.RunModeManual {
-		setTraceOpError(ctx, r.Client, req.NamespacedName.String(),
+		setTraceOpError(ctx, r.Client, req.String(),
 			trace, fmt.Sprintf("Unsupported RunMode %q for gadget %q",
 				trace.Spec.RunMode, trace.Spec.Gadget))
 
@@ -170,7 +170,7 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 	}
 	outputModes := factory.OutputModesSupported()
 	if _, ok := outputModes[trace.Spec.OutputMode]; !ok {
-		setTraceOpError(ctx, r.Client, req.NamespacedName.String(),
+		setTraceOpError(ctx, r.Client, req.String(),
 			trace, fmt.Sprintf("Unsupported OutputMode %q for gadget %q",
 				trace.Spec.OutputMode, trace.Spec.Gadget))
 
@@ -198,20 +198,20 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 	}
 
 	// Lookup annotations
-	if trace.ObjectMeta.Annotations == nil {
+	if trace.Annotations == nil {
 		log.Info("No annotations. Nothing to do.")
 		return ctrl.Result{}, nil
 	}
 
 	// For now, only support control via the GADGET_OPERATION
 	var op string
-	if op, ok = trace.ObjectMeta.Annotations[GadgetOperation]; !ok {
+	if op, ok = trace.Annotations[GadgetOperation]; !ok {
 		log.Info("No operation annotation. Nothing to do.")
 		return ctrl.Result{}, nil
 	}
 
 	params := make(map[string]string)
-	for k, v := range trace.ObjectMeta.Annotations {
+	for k, v := range trace.Annotations {
 		if !strings.HasPrefix(k, GadgetOperation+"-") {
 			continue
 		}
@@ -238,7 +238,7 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 	// Check operation is supported for this specific gadget
 	gadgetOperation, ok := factory.Operations()[gadgetv1alpha1.Operation(op)]
 	if !ok {
-		setTraceOpError(ctx, r.Client, req.NamespacedName.String(),
+		setTraceOpError(ctx, r.Client, req.String(),
 			trace, fmt.Sprintf("Unsupported operation %q for gadget %q",
 				op, trace.Spec.Gadget))
 
@@ -250,13 +250,13 @@ func (r *TraceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl
 	trace.Status.OperationError = ""
 	trace.Status.OperationWarning = ""
 	patch := client.MergeFrom(traceBeforeOperation)
-	gadgetOperation.Operation(req.NamespacedName.String(), trace)
+	gadgetOperation.Operation(req.String(), trace)
 
 	if apiequality.Semantic.DeepEqual(traceBeforeOperation.Status, trace.Status) {
 		log.Info("Gadget completed operation without changing the trace status")
 	} else {
 		log.Infof("Gadget completed operation. Trace status will be updated accordingly")
-		updateTraceStatus(ctx, r.Client, req.NamespacedName.String(), trace, patch)
+		updateTraceStatus(ctx, r.Client, req.String(), trace, patch)
 	}
 
 	return ctrl.Result{}, nil
diff --git a/pkg/controllers/trace_controller_test.go b/pkg/controllers/trace_controller_test.go
index 1a820b982..6973e7729 100644
--- a/pkg/controllers/trace_controller_test.go
+++ b/pkg/controllers/trace_controller_test.go
@@ -75,8 +75,8 @@ func (f *FakeFactory) Operations() map[gadgetv1alpha1.Operation]gadgets.TraceOpe
 func (f *FakeFactory) Magic(trace *gadgetv1alpha1.Trace) {
 	f.mu.Lock()
 	key := fmt.Sprintf("operation/%s/%s/%s/",
-		trace.ObjectMeta.Namespace,
-		trace.ObjectMeta.Name,
+		trace.Namespace,
+		trace.Name,
 		"magic",
 	)
 	f.calls[key] = struct{}{}
diff --git a/pkg/datasource/columns.go b/pkg/datasource/columns.go
index 066121ce2..be8ef7aa2 100644
--- a/pkg/datasource/columns.go
+++ b/pkg/datasource/columns.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -152,6 +152,11 @@ func (ds *dataSource) Columns() (*columns.Columns[DataTuple], error) {
 				}
 			case metadatav1.ColumnsAliasAnnotation:
 				attributes.Alias = v
+			case metadatav1.ColumnsPrecisionAnnotation:
+				attributes.Precision, err = strconv.Atoi(v)
+				if err != nil {
+					return nil, fmt.Errorf("reading precision for column %q: %w", f.Name, err)
+				}
 			}
 		}
 
diff --git a/pkg/datasource/compat/wrapper.go b/pkg/datasource/compat/wrapper.go
index b68274ff4..b6d2801ec 100644
--- a/pkg/datasource/compat/wrapper.go
+++ b/pkg/datasource/compat/wrapper.go
@@ -16,7 +16,6 @@ package compat
 
 import (
 	"fmt"
-	"strings"
 
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/environment"
@@ -374,18 +373,19 @@ func (ev *EventWrapper) SetPodMetadata(container types.Container) {
 				ev.hostNetworkAccessor.PutInt8(ev.Data, 1)
 			}
 		}
-		if ev.ownerKindAccessor.IsRequested() {
-			ev.ownerKindAccessor.PutString(ev.Data, container.K8sOwnerReference().Kind)
-		}
-		if ev.ownerNameAccessor.IsRequested() {
-			ev.ownerNameAccessor.PutString(ev.Data, container.K8sOwnerReference().Name)
+		ownerKindRequest := ev.ownerKindAccessor.IsRequested()
+		ownerNameRequest := ev.ownerNameAccessor.IsRequested()
+		if ownerKindRequest || ownerNameRequest {
+			owner := container.K8sOwnerReference()
+			if ownerKindRequest {
+				ev.ownerKindAccessor.PutString(ev.Data, owner.Kind)
+			}
+			if ownerNameRequest {
+				ev.ownerNameAccessor.PutString(ev.Data, owner.Name)
+			}
 		}
 		if ev.podLabelsAccessor.IsRequested() {
-			kvPairs := make([]string, 0, len(k8s.PodLabels))
-			for k, v := range k8s.PodLabels {
-				kvPairs = append(kvPairs, fmt.Sprintf("%s=%s", k, v))
-			}
-			ev.podLabelsAccessor.PutString(ev.Data, strings.Join(kvPairs, ","))
+			ev.podLabelsAccessor.PutString(ev.Data, container.K8sPodLabelsAsString())
 		}
 	}
 	rt := container.RuntimeMetadata()
diff --git a/pkg/datasource/helpers.go b/pkg/datasource/helpers.go
index d6e4588b8..ee5aba79e 100644
--- a/pkg/datasource/helpers.go
+++ b/pkg/datasource/helpers.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -82,12 +82,16 @@ func AsFloat64(f FieldAccessor) (func(Data) float64, error) {
 // and b) it is too costly when done in here. Instead, on error, the default values will be returned.
 func GetKeyValueFunc[S ~string, T any](
 	f FieldAccessor,
+	nameOverride string,
 	int64Fn func(int64) T,
 	float64Fn func(float64) T,
 	stringFn func(string) T,
 ) (func(Data) (S, T), error) {
 	emptyVal := *new(T)
 	name := f.Name()
+	if nameOverride != "" {
+		name = nameOverride
+	}
 	switch f.Type() {
 	default:
 		return nil, fmt.Errorf("unsupported field type for key: %s", f.Type())
diff --git a/pkg/gadget-collection/gadgets/advise/seccomp/gadget.go b/pkg/gadget-collection/gadgets/advise/seccomp/gadget.go
index 6b2f94c93..86d9b426b 100644
--- a/pkg/gadget-collection/gadgets/advise/seccomp/gadget.go
+++ b/pkg/gadget-collection/gadgets/advise/seccomp/gadget.go
@@ -184,23 +184,23 @@ func seccompProfileAddLabelsAndAnnotations(
 	containerName string,
 	ownerReference *metav1.OwnerReference,
 ) {
-	traceName := fmt.Sprintf("%s/%s", trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
-	r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/trace"] = traceName
-	r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/node"] = trace.Spec.Node
-	r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/pod"] = podName
-	r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/container"] = containerName
+	traceName := fmt.Sprintf("%s/%s", trace.Namespace, trace.Name)
+	r.Annotations["seccomp.gadget.kinvolk.io/trace"] = traceName
+	r.Annotations["seccomp.gadget.kinvolk.io/node"] = trace.Spec.Node
+	r.Annotations["seccomp.gadget.kinvolk.io/pod"] = podName
+	r.Annotations["seccomp.gadget.kinvolk.io/container"] = containerName
 	if ownerReference != nil {
-		r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/ownerReference-APIVersion"] = ownerReference.APIVersion
-		r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/ownerReference-Kind"] = ownerReference.Kind
-		r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/ownerReference-Name"] = ownerReference.Name
-		r.ObjectMeta.Annotations["seccomp.gadget.kinvolk.io/ownerReference-UID"] = string(ownerReference.UID)
+		r.Annotations["seccomp.gadget.kinvolk.io/ownerReference-APIVersion"] = ownerReference.APIVersion
+		r.Annotations["seccomp.gadget.kinvolk.io/ownerReference-Kind"] = ownerReference.Kind
+		r.Annotations["seccomp.gadget.kinvolk.io/ownerReference-Name"] = ownerReference.Name
+		r.Annotations["seccomp.gadget.kinvolk.io/ownerReference-UID"] = string(ownerReference.UID)
 	}
 
 	// Copy labels from the trace into the SeccompProfile. This will allow
 	// the CLI to add a label on the trace and gather its output
-	if trace.ObjectMeta.Labels != nil {
-		for key, value := range trace.ObjectMeta.Labels {
-			r.ObjectMeta.Labels[key] = value
+	if trace.Labels != nil {
+		for key, value := range trace.Labels {
+			r.Labels[key] = value
 		}
 	}
 }
@@ -301,7 +301,7 @@ func getSeccompProfileNsName(
 func generateSeccompPolicy(client client.Client, trace *gadgetv1alpha1.Trace, syscallNames []string, podname, containername, fullPodName string, ownerReference *metav1.OwnerReference) (*seccompprofile.SeccompProfile, error) {
 	profileName, err := getSeccompProfileNsName(
 		client,
-		trace.ObjectMeta.Namespace,
+		trace.Namespace,
 		trace.Spec.Output,
 		podname,
 	)
@@ -329,7 +329,7 @@ func (t *Trace) containerTerminated(trace *gadgetv1alpha1.Trace, event container
 		return
 	}
 
-	traceName := fmt.Sprintf("%s/%s", trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := fmt.Sprintf("%s/%s", trace.Namespace, trace.Name)
 
 	// Get the list of syscallNames from the BPF hash map
 	syscallNames, err := traceSingleton.tracer.Peek(event.Container.Mntns)
@@ -370,7 +370,7 @@ func (t *Trace) containerTerminated(trace *gadgetv1alpha1.Trace, event container
 			return
 		}
 		t.helpers.PublishEvent(
-			gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name),
+			gadgets.TraceName(trace.Namespace, trace.Name),
 			fmt.Sprintf("%s\n---\n", string(yamlOutput)),
 		)
 		t.policyGenerated = true
@@ -378,7 +378,8 @@ func (t *Trace) containerTerminated(trace *gadgetv1alpha1.Trace, event container
 }
 
 func getContainerOwnerReference(c *containercollection.Container) *metav1.OwnerReference {
-	ownerRef, err := c.GetOwnerReference()
+	// Builtin advise-seccomp gadget won't support custom kubeconfig
+	ownerRef, err := c.GetOwnerReference("")
 	if err != nil {
 		log.Warnf("Failed to get owner reference of %s/%s/%s: %s",
 			c.K8s.Namespace, c.K8s.PodName, c.K8s.ContainerName, err)
@@ -416,7 +417,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 	// containers to be sure this field is set when the
 	// container terminates.
 	containers := t.helpers.Subscribe(
-		genPubSubKey(trace.ObjectMeta.Namespace+"/"+trace.ObjectMeta.Name),
+		genPubSubKey(trace.Namespace+"/"+trace.Name),
 		*gadgets.ContainerSelectorFromContainerFilter(trace.Spec.Filter),
 		func(event containercollection.PubSubEvent) {
 			switch event.Type {
@@ -568,7 +569,7 @@ func (t *Trace) Stop(trace *gadgetv1alpha1.Trace) {
 	traceSingleton.mu.Lock()
 	defer traceSingleton.mu.Unlock()
 
-	t.helpers.Unsubscribe(genPubSubKey(trace.ObjectMeta.Namespace + "/" + trace.ObjectMeta.Name))
+	t.helpers.Unsubscribe(genPubSubKey(trace.Namespace + "/" + trace.Name))
 
 	traceSingleton.users--
 	if traceSingleton.users == 0 {
diff --git a/pkg/gadget-collection/gadgets/audit/seccomp/gadget.go b/pkg/gadget-collection/gadgets/audit/seccomp/gadget.go
index 7aaf8d814..6b37656e3 100644
--- a/pkg/gadget-collection/gadgets/audit/seccomp/gadget.go
+++ b/pkg/gadget-collection/gadgets/audit/seccomp/gadget.go
@@ -97,7 +97,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 	eventCallback := func(event *types.Event) {
 		event.K8s.Node = trace.Spec.Node
 
diff --git a/pkg/gadget-collection/gadgets/profile/cpu/gadget.go b/pkg/gadget-collection/gadgets/profile/cpu/gadget.go
index d3e59e604..8ab93314d 100644
--- a/pkg/gadget-collection/gadgets/profile/cpu/gadget.go
+++ b/pkg/gadget-collection/gadgets/profile/cpu/gadget.go
@@ -87,7 +87,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	mountNsMap, err := t.helpers.TracerMountNsMap(traceName)
 	if err != nil {
diff --git a/pkg/gadget-collection/gadgets/snapshot/process/gadget.go b/pkg/gadget-collection/gadgets/snapshot/process/gadget.go
index c2d5e2f9d..e8ef7d9d7 100644
--- a/pkg/gadget-collection/gadgets/snapshot/process/gadget.go
+++ b/pkg/gadget-collection/gadgets/snapshot/process/gadget.go
@@ -67,7 +67,7 @@ func (f *TraceFactory) Operations() map[gadgetv1alpha1.Operation]gadgets.TraceOp
 }
 
 func (t *Trace) Collect(trace *gadgetv1alpha1.Trace) {
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 	mountNsMap, err := t.helpers.TracerMountNsMap(traceName)
 	if err != nil {
 		trace.Status.OperationError = fmt.Sprintf("failed to find tracer's mount ns map: %s", err)
diff --git a/pkg/gadget-collection/gadgets/top/block-io/gadget.go b/pkg/gadget-collection/gadgets/top/block-io/gadget.go
index dc25a2ee6..eeb1e58ed 100644
--- a/pkg/gadget-collection/gadgets/top/block-io/gadget.go
+++ b/pkg/gadget-collection/gadgets/top/block-io/gadget.go
@@ -105,7 +105,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	maxRows := top.MaxRowsDefault
 	intervalSeconds := top.IntervalDefault
diff --git a/pkg/gadget-collection/gadgets/top/ebpf/gadget.go b/pkg/gadget-collection/gadgets/top/ebpf/gadget.go
index 9b534d546..855862799 100644
--- a/pkg/gadget-collection/gadgets/top/ebpf/gadget.go
+++ b/pkg/gadget-collection/gadgets/top/ebpf/gadget.go
@@ -109,7 +109,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	t.traceName = gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	t.traceName = gadgets.TraceName(trace.Namespace, trace.Name)
 	t.node = trace.Spec.Node
 
 	maxRows := top.MaxRowsDefault
diff --git a/pkg/gadget-collection/gadgets/top/file/gadget.go b/pkg/gadget-collection/gadgets/top/file/gadget.go
index 2f41c1339..ba227f5a7 100644
--- a/pkg/gadget-collection/gadgets/top/file/gadget.go
+++ b/pkg/gadget-collection/gadgets/top/file/gadget.go
@@ -107,7 +107,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	maxRows := top.MaxRowsDefault
 	intervalSeconds := top.IntervalDefault
diff --git a/pkg/gadget-collection/gadgets/top/tcp/gadget.go b/pkg/gadget-collection/gadgets/top/tcp/gadget.go
index e9d71a61c..34d107179 100644
--- a/pkg/gadget-collection/gadgets/top/tcp/gadget.go
+++ b/pkg/gadget-collection/gadgets/top/tcp/gadget.go
@@ -108,7 +108,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	maxRows := top.MaxRowsDefault
 	intervalSeconds := top.IntervalDefault
diff --git a/pkg/gadget-collection/gadgets/trace/bind/gadget.go b/pkg/gadget-collection/gadgets/trace/bind/gadget.go
index 57c3b7190..7a9c8d842 100644
--- a/pkg/gadget-collection/gadgets/trace/bind/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/bind/gadget.go
@@ -94,7 +94,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/capabilities/gadget.go b/pkg/gadget-collection/gadgets/trace/capabilities/gadget.go
index 4bf33a278..6bf0aed87 100644
--- a/pkg/gadget-collection/gadgets/trace/capabilities/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/capabilities/gadget.go
@@ -116,7 +116,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		}
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/dns/gadget.go b/pkg/gadget-collection/gadgets/trace/dns/gadget.go
index a01669a7d..43839ee8a 100644
--- a/pkg/gadget-collection/gadgets/trace/dns/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/dns/gadget.go
@@ -93,7 +93,7 @@ func (f *TraceFactory) Operations() map[gadgetv1alpha1.Operation]gadgets.TraceOp
 }
 
 func (t *Trace) publishEvent(trace *gadgetv1alpha1.Trace, event *dnsTypes.Event) {
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 	t.helpers.PublishEvent(
 		traceName,
 		eventtypes.EventString(event),
diff --git a/pkg/gadget-collection/gadgets/trace/exec/gadget.go b/pkg/gadget-collection/gadgets/trace/exec/gadget.go
index 7dd34f1ff..01763da47 100644
--- a/pkg/gadget-collection/gadgets/trace/exec/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/exec/gadget.go
@@ -92,7 +92,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/fsslower/gadget.go b/pkg/gadget-collection/gadgets/trace/fsslower/gadget.go
index 8a5f9cea0..3a840a782 100644
--- a/pkg/gadget-collection/gadgets/trace/fsslower/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/fsslower/gadget.go
@@ -100,7 +100,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/mount/gadget.go b/pkg/gadget-collection/gadgets/trace/mount/gadget.go
index 9fe742e4c..231b6ed8b 100644
--- a/pkg/gadget-collection/gadgets/trace/mount/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/mount/gadget.go
@@ -93,7 +93,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/network/gadget.go b/pkg/gadget-collection/gadgets/trace/network/gadget.go
index 03fbb420e..0459aa8e6 100644
--- a/pkg/gadget-collection/gadgets/trace/network/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/network/gadget.go
@@ -100,7 +100,7 @@ func (t *Trace) publishEvent(
 	trace *gadgetv1alpha1.Trace,
 	event *netTypes.Event,
 ) {
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 	t.helpers.PublishEvent(
 		traceName,
 		eventtypes.EventString(event),
@@ -148,7 +148,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		// Enrich event but only with the fields required for the advise network-policy gadget.
 		event.K8s.Node = trace.Spec.Node
 		if t.helpers != nil {
-			t.helpers.EnrichByNetNs(&event.CommonData, event.WithNetNsID.NetNsID)
+			t.helpers.EnrichByNetNs(&event.CommonData, event.NetNsID)
 		}
 
 		// Use KubeIPResolver and KubeNameResolver to enrich event based on Namespace/Pod and IP.
diff --git a/pkg/gadget-collection/gadgets/trace/oomkill/gadget.go b/pkg/gadget-collection/gadgets/trace/oomkill/gadget.go
index e0c2e83d4..efde8b831 100644
--- a/pkg/gadget-collection/gadgets/trace/oomkill/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/oomkill/gadget.go
@@ -90,7 +90,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/open/gadget.go b/pkg/gadget-collection/gadgets/trace/open/gadget.go
index 6659cfe30..f60907ab2 100644
--- a/pkg/gadget-collection/gadgets/trace/open/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/open/gadget.go
@@ -92,7 +92,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/signal/gadget.go b/pkg/gadget-collection/gadgets/trace/signal/gadget.go
index dc4d295e1..29c1c8abb 100644
--- a/pkg/gadget-collection/gadgets/trace/signal/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/signal/gadget.go
@@ -100,7 +100,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/sni/gadget.go b/pkg/gadget-collection/gadgets/trace/sni/gadget.go
index a9bff0c7d..f613dc651 100644
--- a/pkg/gadget-collection/gadgets/trace/sni/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/sni/gadget.go
@@ -93,7 +93,7 @@ func (f *TraceFactory) Operations() map[gadgetv1alpha1.Operation]gadgets.TraceOp
 }
 
 func (t *Trace) publishEvent(trace *gadgetv1alpha1.Trace, event *sniTypes.Event) {
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 	t.helpers.PublishEvent(
 		traceName,
 		eventtypes.EventString(event),
diff --git a/pkg/gadget-collection/gadgets/trace/tcp/gadget.go b/pkg/gadget-collection/gadgets/trace/tcp/gadget.go
index 4cc6c9e70..cee065659 100644
--- a/pkg/gadget-collection/gadgets/trace/tcp/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/tcp/gadget.go
@@ -92,7 +92,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/trace/tcpconnect/gadget.go b/pkg/gadget-collection/gadgets/trace/tcpconnect/gadget.go
index 4cbecb1de..c75b85700 100644
--- a/pkg/gadget-collection/gadgets/trace/tcpconnect/gadget.go
+++ b/pkg/gadget-collection/gadgets/trace/tcpconnect/gadget.go
@@ -92,7 +92,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 
 	eventCallback := func(event *types.Event) {
 		r, err := json.Marshal(event)
diff --git a/pkg/gadget-collection/gadgets/traceloop/gadget.go b/pkg/gadget-collection/gadgets/traceloop/gadget.go
index 8e0406a49..9d21956a8 100644
--- a/pkg/gadget-collection/gadgets/traceloop/gadget.go
+++ b/pkg/gadget-collection/gadgets/traceloop/gadget.go
@@ -309,7 +309,7 @@ func (t *Trace) Start(trace *gadgetv1alpha1.Trace) {
 	traceUnique.Unlock()
 
 	existingContainers := t.helpers.Subscribe(
-		genPubSubKey(trace.ObjectMeta.Namespace+"/"+trace.ObjectMeta.Name),
+		genPubSubKey(trace.Namespace+"/"+trace.Name),
 		*gadgets.ContainerSelectorFromContainerFilter(trace.Spec.Filter),
 		containerEventCallback,
 	)
@@ -368,7 +368,7 @@ func (t *Trace) Collect(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	traceName := gadgets.TraceName(trace.ObjectMeta.Namespace, trace.ObjectMeta.Name)
+	traceName := gadgets.TraceName(trace.Namespace, trace.Name)
 	r, err := json.Marshal(events)
 	if err != nil {
 		log.Warnf("Gadget %s: error marshaling event: %s", trace.Spec.Gadget, err)
@@ -496,7 +496,7 @@ func (t *Trace) Stop(trace *gadgetv1alpha1.Trace) {
 		return
 	}
 
-	t.helpers.Unsubscribe(genPubSubKey(trace.ObjectMeta.Namespace + "/" + trace.ObjectMeta.Name))
+	t.helpers.Unsubscribe(genPubSubKey(trace.Namespace + "/" + trace.Name))
 
 	traceUnique.Lock()
 	traceUnique.users--
diff --git a/pkg/gadget-context/context_test.go b/pkg/gadget-context/context_test.go
new file mode 100644
index 000000000..64652e976
--- /dev/null
+++ b/pkg/gadget-context/context_test.go
@@ -0,0 +1,85 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package gadgetcontext
+
+import (
+	"context"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/simple"
+)
+
+// newSimpleOperator takes a name, a priority and a pointer to a string that the operator writes its name
+// to during instantiation
+func newSimpleOperator(name string, priority int, write *string, cancel func()) operators.DataOperator {
+	return simple.New(name, simple.WithPriority(priority),
+		simple.OnInit(func(gadgetCtx operators.GadgetContext) error {
+			*write += name
+			return nil
+		}),
+		simple.OnStart(func(gadgetCtx operators.GadgetContext) error {
+			cancel()
+			return nil
+		}),
+	)
+}
+
+func TestOperatorOrder(t *testing.T) {
+	type operatorConfig struct {
+		name     string
+		priority int
+	}
+	type testCase struct {
+		name          string
+		operators     []operatorConfig
+		expectedOrder string
+	}
+	testCases := []testCase{
+		{
+			name: "distinct priority",
+			operators: []operatorConfig{
+				{name: "b", priority: 1},
+				{name: "a", priority: 0},
+			},
+			expectedOrder: "ab",
+		},
+		{
+			name: "same priority",
+			operators: []operatorConfig{
+				{name: "b", priority: 0},
+				{name: "a", priority: 0},
+				{name: "c", priority: 0},
+			},
+			expectedOrder: "abc",
+		},
+	}
+	for _, tc := range testCases {
+		out := ""
+		t.Run("", func(t *testing.T) {
+			ctx, cancel := context.WithCancel(context.Background())
+			var ops []operators.DataOperator
+			for _, op := range tc.operators {
+				ops = append(ops, newSimpleOperator(op.name, op.priority, &out, cancel))
+			}
+			err := New(ctx, "", WithDataOperators(ops...)).Run(nil)
+			require.NoError(t, err)
+			assert.Equal(t, tc.expectedOrder, out)
+		})
+	}
+}
diff --git a/pkg/gadget-context/gadget-context.go b/pkg/gadget-context/gadget-context.go
index e5a9c51c3..e212b36ad 100644
--- a/pkg/gadget-context/gadget-context.go
+++ b/pkg/gadget-context/gadget-context.go
@@ -25,6 +25,8 @@ import (
 	"fmt"
 	"maps"
 	"slices"
+	"sort"
+	"strings"
 	"sync"
 	"time"
 
@@ -47,6 +49,7 @@ type GadgetContext struct {
 	ctx                      context.Context
 	cancel                   context.CancelFunc
 	id                       string
+	name                     string
 	gadget                   gadgets.GadgetDesc
 	gadgetParams             *params.Params
 	args                     []string
@@ -61,11 +64,13 @@ type GadgetContext struct {
 	timeout                  time.Duration
 
 	// useInstance, if set, will try to work with existing gadget instances on the server
-	useInstance bool
+	useInstance      bool
+	requestExtraInfo bool
 
 	lock             sync.Mutex
 	dataSources      map[string]datasource.DataSource
 	dataOperators    []operators.DataOperator
+	localOperators   []operators.DataOperatorInstance
 	vars             map[string]any
 	params           []*api.Param
 	prepareCallbacks []func()
@@ -104,6 +109,7 @@ func NewBuiltIn(
 		operators:                operators.GetOperatorsForGadget(gadget),
 		operatorsParamCollection: operatorsParamCollection,
 		timeout:                  timeout,
+		requestExtraInfo:         false,
 
 		dataSources: make(map[string]datasource.DataSource),
 		vars:        make(map[string]any),
@@ -137,6 +143,14 @@ func (c *GadgetContext) ID() string {
 	return c.id
 }
 
+func (c *GadgetContext) ExtraInfo() bool {
+	return c.requestExtraInfo
+}
+
+func (c *GadgetContext) Name() string {
+	return c.name
+}
+
 func (c *GadgetContext) Context() context.Context {
 	return c.ctx
 }
@@ -273,16 +287,14 @@ func (c *GadgetContext) Params() []*api.Param {
 }
 
 func (c *GadgetContext) SetParams(params []*api.Param) {
-	for _, p := range params {
-		c.params = append(c.params, p)
-	}
+	c.params = append(c.params, params...)
 }
 
 func (c *GadgetContext) SetMetadata(m []byte) {
 	c.metadata = m
 }
 
-func (c *GadgetContext) SerializeGadgetInfo() (*api.GadgetInfo, error) {
+func (c *GadgetContext) SerializeGadgetInfo(extraInfo bool) (*api.GadgetInfo, error) {
 	gi := &api.GadgetInfo{
 		Name:      "",
 		Id:        c.id,
@@ -305,11 +317,28 @@ func (c *GadgetContext) SerializeGadgetInfo() (*api.GadgetInfo, error) {
 		}
 		gi.DataSources = append(gi.DataSources, di)
 	}
+	sort.Slice(gi.DataSources, func(i, j int) bool {
+		return gi.DataSources[i].Name < gi.DataSources[j].Name
+	})
 
+	if c.ExtraInfo() && extraInfo {
+		gi.ExtraInfo = &api.ExtraInfo{
+			Data: make(map[string]*api.GadgetInspectAddendum),
+		}
+
+		for k, v := range c.GetVars() {
+			if !strings.HasPrefix(k, "extraInfo.") {
+				continue
+			}
+			for k, v := range v.(*api.ExtraInfo).Data {
+				gi.ExtraInfo.Data[strings.TrimPrefix(k, "extraInfo.")] = v
+			}
+		}
+	}
 	return gi, nil
 }
 
-func (c *GadgetContext) LoadGadgetInfo(info *api.GadgetInfo, paramValues api.ParamValues, run bool) error {
+func (c *GadgetContext) LoadGadgetInfo(info *api.GadgetInfo, paramValues api.ParamValues, run bool, extraInfo *api.ExtraInfo) error {
 	c.lock.Lock()
 	if c.loaded {
 		// TODO: verify that info matches what we previously loaded
@@ -350,30 +379,45 @@ func (c *GadgetContext) LoadGadgetInfo(info *api.GadgetInfo, paramValues api.Par
 		c.SetVar("config", v)
 	}
 
-	// After loading gadget info, start local operators as well
-	localOperators, err := c.initAndPrepareOperators(paramValues)
+	var err error
+	// After loading gadget info, get local operators params as well
+	c.localOperators, err = c.initAndPrepareOperators(paramValues)
 	if err != nil {
 		return fmt.Errorf("initializing local operators: %w", err)
 	}
 
 	if run {
-		if err := c.start(localOperators); err != nil {
+		if err := c.start(c.localOperators); err != nil {
 			return fmt.Errorf("starting local operators: %w", err)
 		}
-
 		c.Logger().Debugf("running...")
-
-		go func() {
-			// TODO: Client shouldn't need to wait for the timeout. It should be
-			// managed only on the server side.
-			WaitForTimeoutOrDone(c)
-			c.stop(localOperators)
-		}()
 	}
 
+	if c.ExtraInfo() && extraInfo != nil {
+		for k, v := range extraInfo.Data {
+			// k is in the form of "wasm.upcalls", "ebpf.sections", etc.
+			prefix := strings.Split(k, ".")[0]
+			ei, ok := c.GetVar("extraInfo." + prefix)
+			if !ok {
+				ei = &api.ExtraInfo{
+					Data: make(map[string]*api.GadgetInspectAddendum),
+				}
+				c.SetVar("extraInfo."+prefix, ei)
+			}
+			ei.(*api.ExtraInfo).Data[k] = v
+		}
+	}
 	return nil
 }
 
+func (c *GadgetContext) StopLocalOperators() {
+	if c.localOperators == nil {
+		return
+	}
+	c.stop(c.localOperators)
+	c.localOperators = nil
+}
+
 func (c *GadgetContext) OrasTarget() oras.ReadOnlyTarget {
 	return c.orasTarget
 }
diff --git a/pkg/gadget-context/options.go b/pkg/gadget-context/options.go
index 27cefac0c..5e83ed545 100644
--- a/pkg/gadget-context/options.go
+++ b/pkg/gadget-context/options.go
@@ -69,3 +69,21 @@ func WithUseInstance(val bool) Option {
 		gadgetCtx.useInstance = val
 	}
 }
+
+func IncludeExtraInfo(val bool) Option {
+	return func(gadgetCtx *GadgetContext) {
+		gadgetCtx.requestExtraInfo = val
+	}
+}
+
+func WithID(id string) Option {
+	return func(gadgetCtx *GadgetContext) {
+		gadgetCtx.id = id
+	}
+}
+
+func WithName(name string) Option {
+	return func(gadgetCtx *GadgetContext) {
+		gadgetCtx.name = name
+	}
+}
diff --git a/pkg/gadget-context/run.go b/pkg/gadget-context/run.go
index b36e1a5f2..c4c31325a 100644
--- a/pkg/gadget-context/run.go
+++ b/pkg/gadget-context/run.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -15,11 +15,16 @@
 package gadgetcontext
 
 import (
+	"context"
 	"fmt"
 	"sort"
 
+	"go.opentelemetry.io/otel/attribute"
+	"go.opentelemetry.io/otel/metric"
+
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
 	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/metrics"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 )
 
@@ -28,9 +33,12 @@ func (c *GadgetContext) initAndPrepareOperators(paramValues api.ParamValues) ([]
 
 	ops := c.DataOperators()
 
-	// Sort dataOperators based on their priority
+	// Sort dataOperators based on their priority and name
 	sort.Slice(ops, func(i, j int) bool {
-		return ops[i].Priority() < ops[j].Priority()
+		if ops[i].Priority() != ops[j].Priority() {
+			return ops[i].Priority() < ops[j].Priority()
+		}
+		return ops[i].Name() < ops[j].Name()
 	})
 
 	for _, op := range ops {
@@ -117,6 +125,18 @@ func (c *GadgetContext) start(dataOperatorInstances []operators.DataOperatorInst
 
 func (c *GadgetContext) stop(dataOperatorInstances []operators.DataOperatorInstance) {
 	// Stop/DeInit in reverse order
+	for i := len(dataOperatorInstances) - 1; i >= 0; i-- {
+		opInst := dataOperatorInstances[i]
+		preStop, ok := opInst.(operators.PreStop)
+		if !ok {
+			continue
+		}
+		c.Logger().Debugf("pre-stopping op %q", opInst.Name())
+		err := preStop.PreStop(c)
+		if err != nil {
+			c.Logger().Errorf("pre-stopping operator %q: %v", opInst.Name(), err)
+		}
+	}
 	for i := len(dataOperatorInstances) - 1; i >= 0; i-- {
 		opInst := dataOperatorInstances[i]
 		c.Logger().Debugf("stopping op %q", opInst.Name())
@@ -125,7 +145,6 @@ func (c *GadgetContext) stop(dataOperatorInstances []operators.DataOperatorInsta
 			c.Logger().Errorf("stopping operator %q: %v", opInst.Name(), err)
 		}
 	}
-	// Stop/DeInit in reverse order
 	for i := len(dataOperatorInstances) - 1; i >= 0; i-- {
 		opInst := dataOperatorInstances[i]
 		postStop, ok := opInst.(operators.PostStop)
@@ -148,6 +167,13 @@ func (c *GadgetContext) PrepareGadgetInfo(paramValues api.ParamValues) error {
 func (c *GadgetContext) Run(paramValues api.ParamValues) error {
 	defer c.cancel()
 
+	metricAttribs := attribute.NewSet(
+		attribute.KeyValue{Key: "gadget_image", Value: attribute.StringValue(c.imageName)},
+	)
+
+	udCtrRunningGadgets.Add(context.Background(), 1, metric.WithAttributeSet(metricAttribs))
+	defer udCtrRunningGadgets.Add(context.Background(), -1, metric.WithAttributeSet(metricAttribs))
+
 	dataOperatorInstances, err := c.initAndPrepareOperators(paramValues)
 	if err != nil {
 		return fmt.Errorf("initializing and preparing operators: %w", err)
@@ -164,3 +190,8 @@ func (c *GadgetContext) Run(paramValues api.ParamValues) error {
 
 	return nil
 }
+
+var udCtrRunningGadgets, _ = metrics.Int64UpDownCounter("ig_gadgets_running",
+	metric.WithDescription("Number of running gadgets"),
+	metric.WithUnit("{instance}"),
+)
diff --git a/pkg/gadget-service/api/api.pb.go b/pkg/gadget-service/api/api.pb.go
index 920cfdf01..69be25253 100644
--- a/pkg/gadget-service/api/api.pb.go
+++ b/pkg/gadget-service/api/api.pb.go
@@ -14,8 +14,8 @@
 
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.28.0
-// 	protoc        v3.17.3
+// 	protoc-gen-go v1.36.5
+// 	protoc        v5.28.3
 // source: api/api.proto
 
 package api
@@ -25,6 +25,7 @@ import (
 	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
 	reflect "reflect"
 	sync "sync"
+	unsafe "unsafe"
 )
 
 const (
@@ -120,10 +121,7 @@ func (Kind) EnumDescriptor() ([]byte, []int) {
 }
 
 type BuiltInGadgetRunRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
+	state protoimpl.MessageState `protogen:"open.v1"`
 	// name of the gadget as returned by gadgetDesc.Name()
 	GadgetName string `protobuf:"bytes,1,opt,name=gadgetName,proto3" json:"gadgetName,omitempty"`
 	// category of the gadget as returned by gadgetDesc.Category()
@@ -131,7 +129,7 @@ type BuiltInGadgetRunRequest struct {
 	// params is a combined map of all params a gadget could need (including those
 	// of runtime and operators, which need specific prefixes, see implementation in
 	// pkg/runtime/grpc)
-	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
+	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
 	// args are all parameters which were not specified with a flag
 	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
 	// a list of nodes the gadget should run on; if not specified, it should run
@@ -145,16 +143,16 @@ type BuiltInGadgetRunRequest struct {
 	LogLevel uint32 `protobuf:"varint,12,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
 	// time that a gadget should run; use 0, if the gadget should run until it's being
 	// stopped or done; time is in nanoseconds and directly converted to time.Duration
-	Timeout int64 `protobuf:"varint,13,opt,name=timeout,proto3" json:"timeout,omitempty"`
+	Timeout       int64 `protobuf:"varint,13,opt,name=timeout,proto3" json:"timeout,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *BuiltInGadgetRunRequest) Reset() {
 	*x = BuiltInGadgetRunRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[0]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[0]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *BuiltInGadgetRunRequest) String() string {
@@ -165,7 +163,7 @@ func (*BuiltInGadgetRunRequest) ProtoMessage() {}
 
 func (x *BuiltInGadgetRunRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[0]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -237,15 +235,12 @@ func (x *BuiltInGadgetRunRequest) GetTimeout() int64 {
 }
 
 type GadgetRunRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	ImageName string `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
+	state     protoimpl.MessageState `protogen:"open.v1"`
+	ImageName string                 `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
 	// paramValues is a combined map of all params a gadget could need (including those
 	// of runtime and operators, which need specific prefixes, see implementation in
 	// pkg/runtime/grpc)
-	ParamValues map[string]string `protobuf:"bytes,2,rep,name=paramValues,proto3" json:"paramValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
+	ParamValues map[string]string `protobuf:"bytes,2,rep,name=paramValues,proto3" json:"paramValues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
 	// args are all parameters which were not specified with a flag
 	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
 	// used to inform the server about the expected protocol version
@@ -254,16 +249,16 @@ type GadgetRunRequest struct {
 	LogLevel uint32 `protobuf:"varint,12,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
 	// time that a gadget should run; use 0, if the gadget should run until it's being
 	// stopped or done; time is in nanoseconds and directly converted to time.Duration
-	Timeout int64 `protobuf:"varint,13,opt,name=timeout,proto3" json:"timeout,omitempty"`
+	Timeout       int64 `protobuf:"varint,13,opt,name=timeout,proto3" json:"timeout,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetRunRequest) Reset() {
 	*x = GadgetRunRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[1]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[1]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetRunRequest) String() string {
@@ -274,7 +269,7 @@ func (*GadgetRunRequest) ProtoMessage() {}
 
 func (x *GadgetRunRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[1]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -332,23 +327,20 @@ func (x *GadgetRunRequest) GetTimeout() int64 {
 }
 
 type GadgetAttachRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
+	state protoimpl.MessageState `protogen:"open.v1"`
 	// id of the gadget to attach to
 	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
 	// used to inform the server about the expected protocol version
-	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
+	Version       uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetAttachRequest) Reset() {
 	*x = GadgetAttachRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[2]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[2]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetAttachRequest) String() string {
@@ -359,7 +351,7 @@ func (*GadgetAttachRequest) ProtoMessage() {}
 
 func (x *GadgetAttachRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[2]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -389,18 +381,16 @@ func (x *GadgetAttachRequest) GetVersion() uint32 {
 }
 
 type BuiltInGadgetStopRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
 	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *BuiltInGadgetStopRequest) Reset() {
 	*x = BuiltInGadgetStopRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[3]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[3]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *BuiltInGadgetStopRequest) String() string {
@@ -411,7 +401,7 @@ func (*BuiltInGadgetStopRequest) ProtoMessage() {}
 
 func (x *BuiltInGadgetStopRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[3]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -427,24 +417,21 @@ func (*BuiltInGadgetStopRequest) Descriptor() ([]byte, []int) {
 }
 
 type GadgetEvent struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
+	state protoimpl.MessageState `protogen:"open.v1"`
 	// Types are specified in consts.go. Upper 16 bits are used for log severity levels
-	Type         uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
-	Seq          uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
-	Payload      []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
-	DataSourceID uint32 `protobuf:"varint,4,opt,name=dataSourceID,proto3" json:"dataSourceID,omitempty"`
+	Type          uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
+	Seq           uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
+	Payload       []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
+	DataSourceID  uint32 `protobuf:"varint,4,opt,name=dataSourceID,proto3" json:"dataSourceID,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetEvent) Reset() {
 	*x = GadgetEvent{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[4]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[4]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetEvent) String() string {
@@ -455,7 +442,7 @@ func (*GadgetEvent) ProtoMessage() {}
 
 func (x *GadgetEvent) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[4]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -499,23 +486,21 @@ func (x *GadgetEvent) GetDataSourceID() uint32 {
 }
 
 type BuiltInGadgetControlRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	// Types that are assignable to Event:
+	state protoimpl.MessageState `protogen:"open.v1"`
+	// Types that are valid to be assigned to Event:
+	//
 	//	*BuiltInGadgetControlRequest_RunRequest
 	//	*BuiltInGadgetControlRequest_StopRequest
-	Event isBuiltInGadgetControlRequest_Event `protobuf_oneof:"Event"`
+	Event         isBuiltInGadgetControlRequest_Event `protobuf_oneof:"Event"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *BuiltInGadgetControlRequest) Reset() {
 	*x = BuiltInGadgetControlRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[5]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[5]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *BuiltInGadgetControlRequest) String() string {
@@ -526,7 +511,7 @@ func (*BuiltInGadgetControlRequest) ProtoMessage() {}
 
 func (x *BuiltInGadgetControlRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[5]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -541,23 +526,27 @@ func (*BuiltInGadgetControlRequest) Descriptor() ([]byte, []int) {
 	return file_api_api_proto_rawDescGZIP(), []int{5}
 }
 
-func (m *BuiltInGadgetControlRequest) GetEvent() isBuiltInGadgetControlRequest_Event {
-	if m != nil {
-		return m.Event
+func (x *BuiltInGadgetControlRequest) GetEvent() isBuiltInGadgetControlRequest_Event {
+	if x != nil {
+		return x.Event
 	}
 	return nil
 }
 
 func (x *BuiltInGadgetControlRequest) GetRunRequest() *BuiltInGadgetRunRequest {
-	if x, ok := x.GetEvent().(*BuiltInGadgetControlRequest_RunRequest); ok {
-		return x.RunRequest
+	if x != nil {
+		if x, ok := x.Event.(*BuiltInGadgetControlRequest_RunRequest); ok {
+			return x.RunRequest
+		}
 	}
 	return nil
 }
 
 func (x *BuiltInGadgetControlRequest) GetStopRequest() *BuiltInGadgetStopRequest {
-	if x, ok := x.GetEvent().(*BuiltInGadgetControlRequest_StopRequest); ok {
-		return x.StopRequest
+	if x != nil {
+		if x, ok := x.Event.(*BuiltInGadgetControlRequest_StopRequest); ok {
+			return x.StopRequest
+		}
 	}
 	return nil
 }
@@ -579,18 +568,16 @@ func (*BuiltInGadgetControlRequest_RunRequest) isBuiltInGadgetControlRequest_Eve
 func (*BuiltInGadgetControlRequest_StopRequest) isBuiltInGadgetControlRequest_Event() {}
 
 type GadgetStopRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
 	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetStopRequest) Reset() {
 	*x = GadgetStopRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[6]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[6]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetStopRequest) String() string {
@@ -601,7 +588,7 @@ func (*GadgetStopRequest) ProtoMessage() {}
 
 func (x *GadgetStopRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[6]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -617,24 +604,22 @@ func (*GadgetStopRequest) Descriptor() ([]byte, []int) {
 }
 
 type GadgetControlRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	// Types that are assignable to Event:
+	state protoimpl.MessageState `protogen:"open.v1"`
+	// Types that are valid to be assigned to Event:
+	//
 	//	*GadgetControlRequest_RunRequest
 	//	*GadgetControlRequest_StopRequest
 	//	*GadgetControlRequest_AttachRequest
-	Event isGadgetControlRequest_Event `protobuf_oneof:"Event"`
+	Event         isGadgetControlRequest_Event `protobuf_oneof:"Event"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetControlRequest) Reset() {
 	*x = GadgetControlRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[7]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[7]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetControlRequest) String() string {
@@ -645,7 +630,7 @@ func (*GadgetControlRequest) ProtoMessage() {}
 
 func (x *GadgetControlRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[7]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -660,30 +645,36 @@ func (*GadgetControlRequest) Descriptor() ([]byte, []int) {
 	return file_api_api_proto_rawDescGZIP(), []int{7}
 }
 
-func (m *GadgetControlRequest) GetEvent() isGadgetControlRequest_Event {
-	if m != nil {
-		return m.Event
+func (x *GadgetControlRequest) GetEvent() isGadgetControlRequest_Event {
+	if x != nil {
+		return x.Event
 	}
 	return nil
 }
 
 func (x *GadgetControlRequest) GetRunRequest() *GadgetRunRequest {
-	if x, ok := x.GetEvent().(*GadgetControlRequest_RunRequest); ok {
-		return x.RunRequest
+	if x != nil {
+		if x, ok := x.Event.(*GadgetControlRequest_RunRequest); ok {
+			return x.RunRequest
+		}
 	}
 	return nil
 }
 
 func (x *GadgetControlRequest) GetStopRequest() *GadgetStopRequest {
-	if x, ok := x.GetEvent().(*GadgetControlRequest_StopRequest); ok {
-		return x.StopRequest
+	if x != nil {
+		if x, ok := x.Event.(*GadgetControlRequest_StopRequest); ok {
+			return x.StopRequest
+		}
 	}
 	return nil
 }
 
 func (x *GadgetControlRequest) GetAttachRequest() *GadgetAttachRequest {
-	if x, ok := x.GetEvent().(*GadgetControlRequest_AttachRequest); ok {
-		return x.AttachRequest
+	if x != nil {
+		if x, ok := x.Event.(*GadgetControlRequest_AttachRequest); ok {
+			return x.AttachRequest
+		}
 	}
 	return nil
 }
@@ -711,20 +702,17 @@ func (*GadgetControlRequest_StopRequest) isGadgetControlRequest_Event() {}
 func (*GadgetControlRequest_AttachRequest) isGadgetControlRequest_Event() {}
 
 type InfoRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *InfoRequest) Reset() {
 	*x = InfoRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[8]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[8]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *InfoRequest) String() string {
@@ -735,7 +723,7 @@ func (*InfoRequest) ProtoMessage() {}
 
 func (x *InfoRequest) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[8]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -758,23 +746,20 @@ func (x *InfoRequest) GetVersion() string {
 }
 
 type InfoResponse struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
+	Catalog       []byte                 `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
+	Experimental  bool                   `protobuf:"varint,3,opt,name=experimental,proto3" json:"experimental,omitempty"`
+	ServerVersion string                 `protobuf:"bytes,4,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Version       string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
-	Catalog       []byte `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
-	Experimental  bool   `protobuf:"varint,3,opt,name=experimental,proto3" json:"experimental,omitempty"`
-	ServerVersion string `protobuf:"bytes,4,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *InfoResponse) Reset() {
 	*x = InfoResponse{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[9]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[9]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *InfoResponse) String() string {
@@ -785,7 +770,7 @@ func (*InfoResponse) ProtoMessage() {}
 
 func (x *InfoResponse) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[9]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -829,20 +814,17 @@ func (x *InfoResponse) GetServerVersion() string {
 }
 
 type DataElement struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Payload       [][]byte               `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Payload [][]byte `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *DataElement) Reset() {
 	*x = DataElement{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[10]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[10]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *DataElement) String() string {
@@ -853,7 +835,7 @@ func (*DataElement) ProtoMessage() {}
 
 func (x *DataElement) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[10]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -876,22 +858,19 @@ func (x *DataElement) GetPayload() [][]byte {
 }
 
 type GadgetData struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Node          string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
+	Seq           uint32                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
+	Data          *DataElement           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Node string       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
-	Seq  uint32       `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
-	Data *DataElement `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetData) Reset() {
 	*x = GadgetData{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[11]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[11]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetData) String() string {
@@ -902,7 +881,7 @@ func (*GadgetData) ProtoMessage() {}
 
 func (x *GadgetData) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[11]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -939,22 +918,19 @@ func (x *GadgetData) GetData() *DataElement {
 }
 
 type GadgetDataArray struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Node          string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
+	Seq           uint32                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
+	DataArray     []*DataElement         `protobuf:"bytes,3,rep,name=dataArray,proto3" json:"dataArray,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Node      string         `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
-	Seq       uint32         `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
-	DataArray []*DataElement `protobuf:"bytes,3,rep,name=dataArray,proto3" json:"dataArray,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetDataArray) Reset() {
 	*x = GadgetDataArray{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[12]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[12]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetDataArray) String() string {
@@ -965,7 +941,7 @@ func (*GadgetDataArray) ProtoMessage() {}
 
 func (x *GadgetDataArray) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[12]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1002,30 +978,27 @@ func (x *GadgetDataArray) GetDataArray() []*DataElement {
 }
 
 type Param struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	Key            string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
-	Description    string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
-	DefaultValue   string   `protobuf:"bytes,3,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
-	TypeHint       string   `protobuf:"bytes,4,opt,name=typeHint,proto3" json:"typeHint,omitempty"`
-	Title          string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
-	Alias          string   `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
-	Tags           []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
-	ValueHint      string   `protobuf:"bytes,8,opt,name=valueHint,proto3" json:"valueHint,omitempty"`
-	PossibleValues []string `protobuf:"bytes,9,rep,name=possibleValues,proto3" json:"possibleValues,omitempty"`
-	IsMandatory    bool     `protobuf:"varint,10,opt,name=isMandatory,proto3" json:"isMandatory,omitempty"`
-	Prefix         string   `protobuf:"bytes,11,opt,name=prefix,proto3" json:"prefix,omitempty"`
+	state          protoimpl.MessageState `protogen:"open.v1"`
+	Key            string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
+	Description    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
+	DefaultValue   string                 `protobuf:"bytes,3,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
+	TypeHint       string                 `protobuf:"bytes,4,opt,name=typeHint,proto3" json:"typeHint,omitempty"`
+	Title          string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
+	Alias          string                 `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
+	Tags           []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
+	ValueHint      string                 `protobuf:"bytes,8,opt,name=valueHint,proto3" json:"valueHint,omitempty"`
+	PossibleValues []string               `protobuf:"bytes,9,rep,name=possibleValues,proto3" json:"possibleValues,omitempty"`
+	IsMandatory    bool                   `protobuf:"varint,10,opt,name=isMandatory,proto3" json:"isMandatory,omitempty"`
+	Prefix         string                 `protobuf:"bytes,11,opt,name=prefix,proto3" json:"prefix,omitempty"`
+	unknownFields  protoimpl.UnknownFields
+	sizeCache      protoimpl.SizeCache
 }
 
 func (x *Param) Reset() {
 	*x = Param{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[13]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[13]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *Param) String() string {
@@ -1036,7 +1009,7 @@ func (*Param) ProtoMessage() {}
 
 func (x *Param) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[13]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1129,26 +1102,24 @@ func (x *Param) GetPrefix() string {
 }
 
 type GadgetInfo struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
+	ImageName     string                 `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
+	DataSources   []*DataSource          `protobuf:"bytes,4,rep,name=dataSources,proto3" json:"dataSources,omitempty"`
+	Annotations   map[string]string      `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
+	Metadata      []byte                 `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
+	Params        []*Param               `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty"`
+	Id            string                 `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
+	ExtraInfo     *ExtraInfo             `protobuf:"bytes,9,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
-	ImageName   string            `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
-	DataSources []*DataSource     `protobuf:"bytes,4,rep,name=dataSources,proto3" json:"dataSources,omitempty"`
-	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
-	Metadata    []byte            `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
-	Params      []*Param          `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty"`
-	Id          string            `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetInfo) Reset() {
 	*x = GadgetInfo{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[14]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[14]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetInfo) String() string {
@@ -1159,7 +1130,7 @@ func (*GadgetInfo) ProtoMessage() {}
 
 func (x *GadgetInfo) ProtoReflect() protoreflect.Message {
 	mi := &file_api_api_proto_msgTypes[14]
-	if protoimpl.UnsafeEnabled && x != nil {
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1223,27 +1194,129 @@ func (x *GadgetInfo) GetId() string {
 	return ""
 }
 
-type DataSource struct {
-	state         protoimpl.MessageState
+func (x *GadgetInfo) GetExtraInfo() *ExtraInfo {
+	if x != nil {
+		return x.ExtraInfo
+	}
+	return nil
+}
+
+type ExtraInfo struct {
+	state protoimpl.MessageState `protogen:"open.v1"`
+	// key can be "wasm.upcalls", "ebpf.sections", etc
+	Data          map[string]*GadgetInspectAddendum `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
+	unknownFields protoimpl.UnknownFields
 	sizeCache     protoimpl.SizeCache
+}
+
+func (x *ExtraInfo) Reset() {
+	*x = ExtraInfo{}
+	mi := &file_api_api_proto_msgTypes[15]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
+}
+
+func (x *ExtraInfo) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*ExtraInfo) ProtoMessage() {}
+
+func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
+	mi := &file_api_api_proto_msgTypes[15]
+	if x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
+func (*ExtraInfo) Descriptor() ([]byte, []int) {
+	return file_api_api_proto_rawDescGZIP(), []int{15}
+}
+
+func (x *ExtraInfo) GetData() map[string]*GadgetInspectAddendum {
+	if x != nil {
+		return x.Data
+	}
+	return nil
+}
+
+type GadgetInspectAddendum struct {
+	state protoimpl.MessageState `protogen:"open.v1"`
+	// contentType could be application/json, text/plain, text/mermaid, text/markdown...
+	ContentType   string `protobuf:"bytes,1,opt,name=contentType,proto3" json:"contentType,omitempty"`
+	Content       []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
 	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
+}
 
-	Id          uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
-	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
-	Type        uint32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
-	Fields      []*Field          `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
-	Tags        []string          `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
-	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
-	Flags       uint32            `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
+func (x *GadgetInspectAddendum) Reset() {
+	*x = GadgetInspectAddendum{}
+	mi := &file_api_api_proto_msgTypes[16]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
-func (x *DataSource) Reset() {
-	*x = DataSource{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[15]
+func (x *GadgetInspectAddendum) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*GadgetInspectAddendum) ProtoMessage() {}
+
+func (x *GadgetInspectAddendum) ProtoReflect() protoreflect.Message {
+	mi := &file_api_api_proto_msgTypes[16]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use GadgetInspectAddendum.ProtoReflect.Descriptor instead.
+func (*GadgetInspectAddendum) Descriptor() ([]byte, []int) {
+	return file_api_api_proto_rawDescGZIP(), []int{16}
+}
+
+func (x *GadgetInspectAddendum) GetContentType() string {
+	if x != nil {
+		return x.ContentType
 	}
+	return ""
+}
+
+func (x *GadgetInspectAddendum) GetContent() []byte {
+	if x != nil {
+		return x.Content
+	}
+	return nil
+}
+
+type DataSource struct {
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
+	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
+	Type          uint32                 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
+	Fields        []*Field               `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
+	Tags          []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
+	Annotations   map[string]string      `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
+	Flags         uint32                 `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
+}
+
+func (x *DataSource) Reset() {
+	*x = DataSource{}
+	mi := &file_api_api_proto_msgTypes[17]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *DataSource) String() string {
@@ -1253,8 +1326,8 @@ func (x *DataSource) String() string {
 func (*DataSource) ProtoMessage() {}
 
 func (x *DataSource) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[15]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[17]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1266,7 +1339,7 @@ func (x *DataSource) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
 func (*DataSource) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{15}
+	return file_api_api_proto_rawDescGZIP(), []int{17}
 }
 
 func (x *DataSource) GetId() uint32 {
@@ -1319,10 +1392,7 @@ func (x *DataSource) GetFlags() uint32 {
 }
 
 type Field struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
+	state protoimpl.MessageState `protogen:"open.v1"`
 	// name contains the plain field name
 	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
 	// fullName contains a fully qualified field name
@@ -1352,23 +1422,23 @@ type Field struct {
 	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
 	// annotations are additional information that can be used
 	// by operators or third party consumers
-	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
+	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
 	// parent holds the index of the field that is considered
 	// this fields' parent; only true if the corresponding flag
 	// is set in flags
 	Parent uint32 `protobuf:"varint,11,opt,name=parent,proto3" json:"parent,omitempty"`
 	// order determines the default position of this field when
 	// ordering multiple fields
-	Order int32 `protobuf:"varint,12,opt,name=order,proto3" json:"order,omitempty"`
+	Order         int32 `protobuf:"varint,12,opt,name=order,proto3" json:"order,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *Field) Reset() {
 	*x = Field{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[16]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[18]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *Field) String() string {
@@ -1378,8 +1448,8 @@ func (x *Field) String() string {
 func (*Field) ProtoMessage() {}
 
 func (x *Field) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[16]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[18]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1391,7 +1461,7 @@ func (x *Field) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use Field.ProtoReflect.Descriptor instead.
 func (*Field) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{16}
+	return file_api_api_proto_rawDescGZIP(), []int{18}
 }
 
 func (x *Field) GetName() string {
@@ -1479,25 +1549,24 @@ func (x *Field) GetOrder() int32 {
 }
 
 type GetGadgetInfoRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
+	state protoimpl.MessageState `protogen:"open.v1"`
 	// params are the gadget's parameters
-	ParamValues map[string]string `protobuf:"bytes,1,rep,name=paramValues,proto3" json:"paramValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
+	ParamValues map[string]string `protobuf:"bytes,1,rep,name=paramValues,proto3" json:"paramValues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
 	ImageName   string            `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
 	// can be used to inform about the expected version of GadgetInfo
 	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
 	Flags   uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
+	// can be used to include more info for debugging (e.g., in ig image inspect)
+	RequestExtraInfo bool `protobuf:"varint,5,opt,name=requestExtraInfo,proto3" json:"requestExtraInfo,omitempty"`
+	unknownFields    protoimpl.UnknownFields
+	sizeCache        protoimpl.SizeCache
 }
 
 func (x *GetGadgetInfoRequest) Reset() {
 	*x = GetGadgetInfoRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[17]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[19]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GetGadgetInfoRequest) String() string {
@@ -1507,8 +1576,8 @@ func (x *GetGadgetInfoRequest) String() string {
 func (*GetGadgetInfoRequest) ProtoMessage() {}
 
 func (x *GetGadgetInfoRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[17]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[19]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1520,7 +1589,7 @@ func (x *GetGadgetInfoRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use GetGadgetInfoRequest.ProtoReflect.Descriptor instead.
 func (*GetGadgetInfoRequest) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{17}
+	return file_api_api_proto_rawDescGZIP(), []int{19}
 }
 
 func (x *GetGadgetInfoRequest) GetParamValues() map[string]string {
@@ -1551,21 +1620,25 @@ func (x *GetGadgetInfoRequest) GetFlags() uint32 {
 	return 0
 }
 
+func (x *GetGadgetInfoRequest) GetRequestExtraInfo() bool {
+	if x != nil {
+		return x.RequestExtraInfo
+	}
+	return false
+}
+
 type GetGadgetInfoResponse struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	GadgetInfo    *GadgetInfo            `protobuf:"bytes,1,opt,name=gadgetInfo,proto3" json:"gadgetInfo,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	GadgetInfo *GadgetInfo `protobuf:"bytes,1,opt,name=gadgetInfo,proto3" json:"gadgetInfo,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GetGadgetInfoResponse) Reset() {
 	*x = GetGadgetInfoResponse{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[18]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[20]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GetGadgetInfoResponse) String() string {
@@ -1575,8 +1648,8 @@ func (x *GetGadgetInfoResponse) String() string {
 func (*GetGadgetInfoResponse) ProtoMessage() {}
 
 func (x *GetGadgetInfoResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[18]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[20]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1588,7 +1661,7 @@ func (x *GetGadgetInfoResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use GetGadgetInfoResponse.ProtoReflect.Descriptor instead.
 func (*GetGadgetInfoResponse) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{18}
+	return file_api_api_proto_rawDescGZIP(), []int{20}
 }
 
 func (x *GetGadgetInfoResponse) GetGadgetInfo() *GadgetInfo {
@@ -1599,21 +1672,18 @@ func (x *GetGadgetInfoResponse) GetGadgetInfo() *GadgetInfo {
 }
 
 type CreateGadgetInstanceRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	GadgetInstance    *GadgetInstance `protobuf:"bytes,1,opt,name=gadgetInstance,proto3" json:"gadgetInstance,omitempty"`
-	EventBufferLength int32           `protobuf:"varint,2,opt,name=eventBufferLength,proto3" json:"eventBufferLength,omitempty"`
+	state             protoimpl.MessageState `protogen:"open.v1"`
+	GadgetInstance    *GadgetInstance        `protobuf:"bytes,1,opt,name=gadgetInstance,proto3" json:"gadgetInstance,omitempty"`
+	EventBufferLength int32                  `protobuf:"varint,2,opt,name=eventBufferLength,proto3" json:"eventBufferLength,omitempty"`
+	unknownFields     protoimpl.UnknownFields
+	sizeCache         protoimpl.SizeCache
 }
 
 func (x *CreateGadgetInstanceRequest) Reset() {
 	*x = CreateGadgetInstanceRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[19]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[21]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *CreateGadgetInstanceRequest) String() string {
@@ -1623,8 +1693,8 @@ func (x *CreateGadgetInstanceRequest) String() string {
 func (*CreateGadgetInstanceRequest) ProtoMessage() {}
 
 func (x *CreateGadgetInstanceRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[19]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[21]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1636,7 +1706,7 @@ func (x *CreateGadgetInstanceRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateGadgetInstanceRequest.ProtoReflect.Descriptor instead.
 func (*CreateGadgetInstanceRequest) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{19}
+	return file_api_api_proto_rawDescGZIP(), []int{21}
 }
 
 func (x *CreateGadgetInstanceRequest) GetGadgetInstance() *GadgetInstance {
@@ -1654,21 +1724,18 @@ func (x *CreateGadgetInstanceRequest) GetEventBufferLength() int32 {
 }
 
 type CreateGadgetInstanceResponse struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	Result         int32           `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
-	GadgetInstance *GadgetInstance `protobuf:"bytes,2,opt,name=gadgetInstance,proto3" json:"gadgetInstance,omitempty"`
+	state          protoimpl.MessageState `protogen:"open.v1"`
+	Result         int32                  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
+	GadgetInstance *GadgetInstance        `protobuf:"bytes,2,opt,name=gadgetInstance,proto3" json:"gadgetInstance,omitempty"`
+	unknownFields  protoimpl.UnknownFields
+	sizeCache      protoimpl.SizeCache
 }
 
 func (x *CreateGadgetInstanceResponse) Reset() {
 	*x = CreateGadgetInstanceResponse{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[20]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[22]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *CreateGadgetInstanceResponse) String() string {
@@ -1678,8 +1745,8 @@ func (x *CreateGadgetInstanceResponse) String() string {
 func (*CreateGadgetInstanceResponse) ProtoMessage() {}
 
 func (x *CreateGadgetInstanceResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[20]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[22]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1691,7 +1758,7 @@ func (x *CreateGadgetInstanceResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateGadgetInstanceResponse.ProtoReflect.Descriptor instead.
 func (*CreateGadgetInstanceResponse) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{20}
+	return file_api_api_proto_rawDescGZIP(), []int{22}
 }
 
 func (x *CreateGadgetInstanceResponse) GetResult() int32 {
@@ -1709,18 +1776,16 @@ func (x *CreateGadgetInstanceResponse) GetGadgetInstance() *GadgetInstance {
 }
 
 type ListGadgetInstancesRequest struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
 	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *ListGadgetInstancesRequest) Reset() {
 	*x = ListGadgetInstancesRequest{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[21]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[23]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *ListGadgetInstancesRequest) String() string {
@@ -1730,8 +1795,8 @@ func (x *ListGadgetInstancesRequest) String() string {
 func (*ListGadgetInstancesRequest) ProtoMessage() {}
 
 func (x *ListGadgetInstancesRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[21]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[23]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1743,14 +1808,11 @@ func (x *ListGadgetInstancesRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use ListGadgetInstancesRequest.ProtoReflect.Descriptor instead.
 func (*ListGadgetInstancesRequest) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{21}
+	return file_api_api_proto_rawDescGZIP(), []int{23}
 }
 
 type GadgetInstance struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
+	state protoimpl.MessageState `protogen:"open.v1"`
 	// id is the unique ID of the instance; this can be set by the client but overridden from the server, depending on the
 	// environment; must contain only hex characters in lowercase
 	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
@@ -1762,16 +1824,16 @@ type GadgetInstance struct {
 	// name is a (non-unique) string assigned to a gadget, set by the client
 	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
 	// nodes is a list of nodes the gadget should run on; if empty, all nodes will run the gadget
-	Nodes []string `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
+	Nodes         []string `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
+	unknownFields protoimpl.UnknownFields
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetInstance) Reset() {
 	*x = GadgetInstance{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[22]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[24]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetInstance) String() string {
@@ -1781,8 +1843,8 @@ func (x *GadgetInstance) String() string {
 func (*GadgetInstance) ProtoMessage() {}
 
 func (x *GadgetInstance) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[22]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[24]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1794,7 +1856,7 @@ func (x *GadgetInstance) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use GadgetInstance.ProtoReflect.Descriptor instead.
 func (*GadgetInstance) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{22}
+	return file_api_api_proto_rawDescGZIP(), []int{24}
 }
 
 func (x *GadgetInstance) GetId() string {
@@ -1840,20 +1902,17 @@ func (x *GadgetInstance) GetNodes() []string {
 }
 
 type ListGadgetInstanceResponse struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
-	unknownFields protoimpl.UnknownFields
-
-	GadgetInstances []*GadgetInstance `protobuf:"bytes,1,rep,name=gadgetInstances,proto3" json:"gadgetInstances,omitempty"`
+	state           protoimpl.MessageState `protogen:"open.v1"`
+	GadgetInstances []*GadgetInstance      `protobuf:"bytes,1,rep,name=gadgetInstances,proto3" json:"gadgetInstances,omitempty"`
+	unknownFields   protoimpl.UnknownFields
+	sizeCache       protoimpl.SizeCache
 }
 
 func (x *ListGadgetInstanceResponse) Reset() {
 	*x = ListGadgetInstanceResponse{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[23]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[25]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *ListGadgetInstanceResponse) String() string {
@@ -1863,8 +1922,8 @@ func (x *ListGadgetInstanceResponse) String() string {
 func (*ListGadgetInstanceResponse) ProtoMessage() {}
 
 func (x *ListGadgetInstanceResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[23]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[25]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1876,7 +1935,7 @@ func (x *ListGadgetInstanceResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use ListGadgetInstanceResponse.ProtoReflect.Descriptor instead.
 func (*ListGadgetInstanceResponse) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{23}
+	return file_api_api_proto_rawDescGZIP(), []int{25}
 }
 
 func (x *ListGadgetInstanceResponse) GetGadgetInstances() []*GadgetInstance {
@@ -1887,20 +1946,17 @@ func (x *ListGadgetInstanceResponse) GetGadgetInstances() []*GadgetInstance {
 }
 
 type GadgetInstanceId struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *GadgetInstanceId) Reset() {
 	*x = GadgetInstanceId{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[24]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[26]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *GadgetInstanceId) String() string {
@@ -1910,8 +1966,8 @@ func (x *GadgetInstanceId) String() string {
 func (*GadgetInstanceId) ProtoMessage() {}
 
 func (x *GadgetInstanceId) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[24]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[26]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1923,7 +1979,7 @@ func (x *GadgetInstanceId) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use GadgetInstanceId.ProtoReflect.Descriptor instead.
 func (*GadgetInstanceId) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{24}
+	return file_api_api_proto_rawDescGZIP(), []int{26}
 }
 
 func (x *GadgetInstanceId) GetId() string {
@@ -1934,21 +1990,18 @@ func (x *GadgetInstanceId) GetId() string {
 }
 
 type StatusResponse struct {
-	state         protoimpl.MessageState
-	sizeCache     protoimpl.SizeCache
+	state         protoimpl.MessageState `protogen:"open.v1"`
+	Result        int32                  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
+	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
 	unknownFields protoimpl.UnknownFields
-
-	Result  int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
-	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
+	sizeCache     protoimpl.SizeCache
 }
 
 func (x *StatusResponse) Reset() {
 	*x = StatusResponse{}
-	if protoimpl.UnsafeEnabled {
-		mi := &file_api_api_proto_msgTypes[25]
-		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
-		ms.StoreMessageInfo(mi)
-	}
+	mi := &file_api_api_proto_msgTypes[27]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
 }
 
 func (x *StatusResponse) String() string {
@@ -1958,8 +2011,8 @@ func (x *StatusResponse) String() string {
 func (*StatusResponse) ProtoMessage() {}
 
 func (x *StatusResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_api_api_proto_msgTypes[25]
-	if protoimpl.UnsafeEnabled && x != nil {
+	mi := &file_api_api_proto_msgTypes[27]
+	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
 			ms.StoreMessageInfo(mi)
@@ -1971,7 +2024,7 @@ func (x *StatusResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
 func (*StatusResponse) Descriptor() ([]byte, []int) {
-	return file_api_api_proto_rawDescGZIP(), []int{25}
+	return file_api_api_proto_rawDescGZIP(), []int{27}
 }
 
 func (x *StatusResponse) GetResult() int32 {
@@ -1990,7 +2043,7 @@ func (x *StatusResponse) GetMessage() string {
 
 var File_api_api_proto protoreflect.FileDescriptor
 
-var file_api_api_proto_rawDesc = []byte{
+var file_api_api_proto_rawDesc = string([]byte{
 	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
 	0x03, 0x61, 0x70, 0x69, 0x22, 0xd6, 0x02, 0x0a, 0x17, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e,
 	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
@@ -2116,7 +2169,7 @@ var file_api_api_proto_rawDesc = []byte{
 	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18,
 	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
 	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01,
-	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xc5, 0x02, 0x0a, 0x0a, 0x47,
+	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xf3, 0x02, 0x0a, 0x0a, 0x47,
 	0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
 	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
 	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
@@ -2133,65 +2186,85 @@ var file_api_api_proto_rawDesc = []byte{
 	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
 	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
 	0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
-	0x69, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
-	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
-	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
-	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
-	0x38, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
-	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
-	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
-	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
-	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x65,
-	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
-	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
-	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
-	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
-	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
-	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
-	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
-	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07,
-	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
-	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
-	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
-	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
-	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x03, 0x0a, 0x05,
-	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
-	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
-	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
-	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
-	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x70,
-	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
-	0x0d, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
-	0x12, 0x0a, 0x04, 0x6f, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f,
-	0x66, 0x66, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
-	0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
-	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a,
-	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x61, 0x70,
-	0x69, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
-	0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
-	0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
-	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c,
-	0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
-	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
-	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
-	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
-	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x3e, 0x0a,
-	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
-	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
-	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
-	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01,
-	0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56,
-	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
-	0x69, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
-	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61,
-	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
-	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61,
-	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
-	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
-	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
-	0x67, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
+	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18,
+	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x72,
+	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
+	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
+	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
+	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
+	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
+	0x22, 0x8e, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c,
+	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
+	0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x61, 0x74,
+	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x09,
+	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
+	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
+	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
+	0x2e, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x64,
+	0x64, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
+	0x01, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65,
+	0x63, 0x74, 0x41, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
+	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
+	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
+	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
+	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53,
+	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
+	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
+	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
+	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
+	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
+	0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
+	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
+	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
+	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
+	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
+	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
+	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
+	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a,
+	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
+	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
+	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
+	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
+	0x8f, 0x03, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
+	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
+	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
+	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
+	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
+	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
+	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
+	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
+	0x0d, 0x52, 0x04, 0x6f, 0x66, 0x66, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
+	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
+	0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
+	0x73, 0x12, 0x1d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
+	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
+	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
+	0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
+	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
+	0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
+	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
+	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
+	0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
+	0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
+	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
+	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
+	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
+	0x01, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49,
+	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61,
+	0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
+	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49,
+	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
+	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x72,
+	0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
+	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
+	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
+	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
+	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
+	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
+	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
+	0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
+	0x66, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
 	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
 	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
 	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
@@ -2300,23 +2373,23 @@ var file_api_api_proto_rawDesc = []byte{
 	0x2d, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x64, 0x67,
 	0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
 	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
-}
+})
 
 var (
 	file_api_api_proto_rawDescOnce sync.Once
-	file_api_api_proto_rawDescData = file_api_api_proto_rawDesc
+	file_api_api_proto_rawDescData []byte
 )
 
 func file_api_api_proto_rawDescGZIP() []byte {
 	file_api_api_proto_rawDescOnce.Do(func() {
-		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_rawDescData)
+		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_api_proto_rawDesc), len(file_api_api_proto_rawDesc)))
 	})
 	return file_api_api_proto_rawDescData
 }
 
 var file_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
-var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
-var file_api_api_proto_goTypes = []interface{}{
+var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
+var file_api_api_proto_goTypes = []any{
 	(Kind)(0),                            // 0: api.Kind
 	(*BuiltInGadgetRunRequest)(nil),      // 1: api.BuiltInGadgetRunRequest
 	(*GadgetRunRequest)(nil),             // 2: api.GadgetRunRequest
@@ -2333,27 +2406,30 @@ var file_api_api_proto_goTypes = []interface{}{
 	(*GadgetDataArray)(nil),              // 13: api.GadgetDataArray
 	(*Param)(nil),                        // 14: api.Param
 	(*GadgetInfo)(nil),                   // 15: api.GadgetInfo
-	(*DataSource)(nil),                   // 16: api.DataSource
-	(*Field)(nil),                        // 17: api.Field
-	(*GetGadgetInfoRequest)(nil),         // 18: api.GetGadgetInfoRequest
-	(*GetGadgetInfoResponse)(nil),        // 19: api.GetGadgetInfoResponse
-	(*CreateGadgetInstanceRequest)(nil),  // 20: api.CreateGadgetInstanceRequest
-	(*CreateGadgetInstanceResponse)(nil), // 21: api.CreateGadgetInstanceResponse
-	(*ListGadgetInstancesRequest)(nil),   // 22: api.ListGadgetInstancesRequest
-	(*GadgetInstance)(nil),               // 23: api.GadgetInstance
-	(*ListGadgetInstanceResponse)(nil),   // 24: api.ListGadgetInstanceResponse
-	(*GadgetInstanceId)(nil),             // 25: api.GadgetInstanceId
-	(*StatusResponse)(nil),               // 26: api.StatusResponse
-	nil,                                  // 27: api.BuiltInGadgetRunRequest.ParamsEntry
-	nil,                                  // 28: api.GadgetRunRequest.ParamValuesEntry
-	nil,                                  // 29: api.GadgetInfo.AnnotationsEntry
-	nil,                                  // 30: api.DataSource.AnnotationsEntry
-	nil,                                  // 31: api.Field.AnnotationsEntry
-	nil,                                  // 32: api.GetGadgetInfoRequest.ParamValuesEntry
+	(*ExtraInfo)(nil),                    // 16: api.ExtraInfo
+	(*GadgetInspectAddendum)(nil),        // 17: api.GadgetInspectAddendum
+	(*DataSource)(nil),                   // 18: api.DataSource
+	(*Field)(nil),                        // 19: api.Field
+	(*GetGadgetInfoRequest)(nil),         // 20: api.GetGadgetInfoRequest
+	(*GetGadgetInfoResponse)(nil),        // 21: api.GetGadgetInfoResponse
+	(*CreateGadgetInstanceRequest)(nil),  // 22: api.CreateGadgetInstanceRequest
+	(*CreateGadgetInstanceResponse)(nil), // 23: api.CreateGadgetInstanceResponse
+	(*ListGadgetInstancesRequest)(nil),   // 24: api.ListGadgetInstancesRequest
+	(*GadgetInstance)(nil),               // 25: api.GadgetInstance
+	(*ListGadgetInstanceResponse)(nil),   // 26: api.ListGadgetInstanceResponse
+	(*GadgetInstanceId)(nil),             // 27: api.GadgetInstanceId
+	(*StatusResponse)(nil),               // 28: api.StatusResponse
+	nil,                                  // 29: api.BuiltInGadgetRunRequest.ParamsEntry
+	nil,                                  // 30: api.GadgetRunRequest.ParamValuesEntry
+	nil,                                  // 31: api.GadgetInfo.AnnotationsEntry
+	nil,                                  // 32: api.ExtraInfo.DataEntry
+	nil,                                  // 33: api.DataSource.AnnotationsEntry
+	nil,                                  // 34: api.Field.AnnotationsEntry
+	nil,                                  // 35: api.GetGadgetInfoRequest.ParamValuesEntry
 }
 var file_api_api_proto_depIdxs = []int32{
-	27, // 0: api.BuiltInGadgetRunRequest.params:type_name -> api.BuiltInGadgetRunRequest.ParamsEntry
-	28, // 1: api.GadgetRunRequest.paramValues:type_name -> api.GadgetRunRequest.ParamValuesEntry
+	29, // 0: api.BuiltInGadgetRunRequest.params:type_name -> api.BuiltInGadgetRunRequest.ParamsEntry
+	30, // 1: api.GadgetRunRequest.paramValues:type_name -> api.GadgetRunRequest.ParamValuesEntry
 	1,  // 2: api.BuiltInGadgetControlRequest.runRequest:type_name -> api.BuiltInGadgetRunRequest
 	4,  // 3: api.BuiltInGadgetControlRequest.stopRequest:type_name -> api.BuiltInGadgetStopRequest
 	2,  // 4: api.GadgetControlRequest.runRequest:type_name -> api.GadgetRunRequest
@@ -2361,40 +2437,43 @@ var file_api_api_proto_depIdxs = []int32{
 	3,  // 6: api.GadgetControlRequest.attachRequest:type_name -> api.GadgetAttachRequest
 	11, // 7: api.GadgetData.data:type_name -> api.DataElement
 	11, // 8: api.GadgetDataArray.dataArray:type_name -> api.DataElement
-	16, // 9: api.GadgetInfo.dataSources:type_name -> api.DataSource
-	29, // 10: api.GadgetInfo.annotations:type_name -> api.GadgetInfo.AnnotationsEntry
+	18, // 9: api.GadgetInfo.dataSources:type_name -> api.DataSource
+	31, // 10: api.GadgetInfo.annotations:type_name -> api.GadgetInfo.AnnotationsEntry
 	14, // 11: api.GadgetInfo.params:type_name -> api.Param
-	17, // 12: api.DataSource.fields:type_name -> api.Field
-	30, // 13: api.DataSource.annotations:type_name -> api.DataSource.AnnotationsEntry
-	0,  // 14: api.Field.kind:type_name -> api.Kind
-	31, // 15: api.Field.annotations:type_name -> api.Field.AnnotationsEntry
-	32, // 16: api.GetGadgetInfoRequest.paramValues:type_name -> api.GetGadgetInfoRequest.ParamValuesEntry
-	15, // 17: api.GetGadgetInfoResponse.gadgetInfo:type_name -> api.GadgetInfo
-	23, // 18: api.CreateGadgetInstanceRequest.gadgetInstance:type_name -> api.GadgetInstance
-	23, // 19: api.CreateGadgetInstanceResponse.gadgetInstance:type_name -> api.GadgetInstance
-	2,  // 20: api.GadgetInstance.gadgetConfig:type_name -> api.GadgetRunRequest
-	23, // 21: api.ListGadgetInstanceResponse.gadgetInstances:type_name -> api.GadgetInstance
-	9,  // 22: api.BuiltInGadgetManager.GetInfo:input_type -> api.InfoRequest
-	6,  // 23: api.BuiltInGadgetManager.RunBuiltInGadget:input_type -> api.BuiltInGadgetControlRequest
-	18, // 24: api.GadgetManager.GetGadgetInfo:input_type -> api.GetGadgetInfoRequest
-	8,  // 25: api.GadgetManager.RunGadget:input_type -> api.GadgetControlRequest
-	20, // 26: api.GadgetInstanceManager.CreateGadgetInstance:input_type -> api.CreateGadgetInstanceRequest
-	22, // 27: api.GadgetInstanceManager.ListGadgetInstances:input_type -> api.ListGadgetInstancesRequest
-	25, // 28: api.GadgetInstanceManager.GetGadgetInstance:input_type -> api.GadgetInstanceId
-	25, // 29: api.GadgetInstanceManager.RemoveGadgetInstance:input_type -> api.GadgetInstanceId
-	10, // 30: api.BuiltInGadgetManager.GetInfo:output_type -> api.InfoResponse
-	5,  // 31: api.BuiltInGadgetManager.RunBuiltInGadget:output_type -> api.GadgetEvent
-	19, // 32: api.GadgetManager.GetGadgetInfo:output_type -> api.GetGadgetInfoResponse
-	5,  // 33: api.GadgetManager.RunGadget:output_type -> api.GadgetEvent
-	21, // 34: api.GadgetInstanceManager.CreateGadgetInstance:output_type -> api.CreateGadgetInstanceResponse
-	24, // 35: api.GadgetInstanceManager.ListGadgetInstances:output_type -> api.ListGadgetInstanceResponse
-	23, // 36: api.GadgetInstanceManager.GetGadgetInstance:output_type -> api.GadgetInstance
-	26, // 37: api.GadgetInstanceManager.RemoveGadgetInstance:output_type -> api.StatusResponse
-	30, // [30:38] is the sub-list for method output_type
-	22, // [22:30] is the sub-list for method input_type
-	22, // [22:22] is the sub-list for extension type_name
-	22, // [22:22] is the sub-list for extension extendee
-	0,  // [0:22] is the sub-list for field type_name
+	16, // 12: api.GadgetInfo.extraInfo:type_name -> api.ExtraInfo
+	32, // 13: api.ExtraInfo.data:type_name -> api.ExtraInfo.DataEntry
+	19, // 14: api.DataSource.fields:type_name -> api.Field
+	33, // 15: api.DataSource.annotations:type_name -> api.DataSource.AnnotationsEntry
+	0,  // 16: api.Field.kind:type_name -> api.Kind
+	34, // 17: api.Field.annotations:type_name -> api.Field.AnnotationsEntry
+	35, // 18: api.GetGadgetInfoRequest.paramValues:type_name -> api.GetGadgetInfoRequest.ParamValuesEntry
+	15, // 19: api.GetGadgetInfoResponse.gadgetInfo:type_name -> api.GadgetInfo
+	25, // 20: api.CreateGadgetInstanceRequest.gadgetInstance:type_name -> api.GadgetInstance
+	25, // 21: api.CreateGadgetInstanceResponse.gadgetInstance:type_name -> api.GadgetInstance
+	2,  // 22: api.GadgetInstance.gadgetConfig:type_name -> api.GadgetRunRequest
+	25, // 23: api.ListGadgetInstanceResponse.gadgetInstances:type_name -> api.GadgetInstance
+	17, // 24: api.ExtraInfo.DataEntry.value:type_name -> api.GadgetInspectAddendum
+	9,  // 25: api.BuiltInGadgetManager.GetInfo:input_type -> api.InfoRequest
+	6,  // 26: api.BuiltInGadgetManager.RunBuiltInGadget:input_type -> api.BuiltInGadgetControlRequest
+	20, // 27: api.GadgetManager.GetGadgetInfo:input_type -> api.GetGadgetInfoRequest
+	8,  // 28: api.GadgetManager.RunGadget:input_type -> api.GadgetControlRequest
+	22, // 29: api.GadgetInstanceManager.CreateGadgetInstance:input_type -> api.CreateGadgetInstanceRequest
+	24, // 30: api.GadgetInstanceManager.ListGadgetInstances:input_type -> api.ListGadgetInstancesRequest
+	27, // 31: api.GadgetInstanceManager.GetGadgetInstance:input_type -> api.GadgetInstanceId
+	27, // 32: api.GadgetInstanceManager.RemoveGadgetInstance:input_type -> api.GadgetInstanceId
+	10, // 33: api.BuiltInGadgetManager.GetInfo:output_type -> api.InfoResponse
+	5,  // 34: api.BuiltInGadgetManager.RunBuiltInGadget:output_type -> api.GadgetEvent
+	21, // 35: api.GadgetManager.GetGadgetInfo:output_type -> api.GetGadgetInfoResponse
+	5,  // 36: api.GadgetManager.RunGadget:output_type -> api.GadgetEvent
+	23, // 37: api.GadgetInstanceManager.CreateGadgetInstance:output_type -> api.CreateGadgetInstanceResponse
+	26, // 38: api.GadgetInstanceManager.ListGadgetInstances:output_type -> api.ListGadgetInstanceResponse
+	25, // 39: api.GadgetInstanceManager.GetGadgetInstance:output_type -> api.GadgetInstance
+	28, // 40: api.GadgetInstanceManager.RemoveGadgetInstance:output_type -> api.StatusResponse
+	33, // [33:41] is the sub-list for method output_type
+	25, // [25:33] is the sub-list for method input_type
+	25, // [25:25] is the sub-list for extension type_name
+	25, // [25:25] is the sub-list for extension extendee
+	0,  // [0:25] is the sub-list for field type_name
 }
 
 func init() { file_api_api_proto_init() }
@@ -2402,325 +2481,11 @@ func file_api_api_proto_init() {
 	if File_api_api_proto != nil {
 		return
 	}
-	if !protoimpl.UnsafeEnabled {
-		file_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*BuiltInGadgetRunRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetRunRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetAttachRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*BuiltInGadgetStopRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetEvent); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*BuiltInGadgetControlRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetStopRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetControlRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*InfoRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*InfoResponse); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*DataElement); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetData); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetDataArray); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*Param); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetInfo); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*DataSource); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*Field); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GetGadgetInfoRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GetGadgetInfoResponse); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*CreateGadgetInstanceRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*CreateGadgetInstanceResponse); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*ListGadgetInstancesRequest); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetInstance); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*ListGadgetInstanceResponse); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*GadgetInstanceId); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-		file_api_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
-			switch v := v.(*StatusResponse); i {
-			case 0:
-				return &v.state
-			case 1:
-				return &v.sizeCache
-			case 2:
-				return &v.unknownFields
-			default:
-				return nil
-			}
-		}
-	}
-	file_api_api_proto_msgTypes[5].OneofWrappers = []interface{}{
+	file_api_api_proto_msgTypes[5].OneofWrappers = []any{
 		(*BuiltInGadgetControlRequest_RunRequest)(nil),
 		(*BuiltInGadgetControlRequest_StopRequest)(nil),
 	}
-	file_api_api_proto_msgTypes[7].OneofWrappers = []interface{}{
+	file_api_api_proto_msgTypes[7].OneofWrappers = []any{
 		(*GadgetControlRequest_RunRequest)(nil),
 		(*GadgetControlRequest_StopRequest)(nil),
 		(*GadgetControlRequest_AttachRequest)(nil),
@@ -2729,9 +2494,9 @@ func file_api_api_proto_init() {
 	out := protoimpl.TypeBuilder{
 		File: protoimpl.DescBuilder{
 			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
-			RawDescriptor: file_api_api_proto_rawDesc,
+			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_api_proto_rawDesc), len(file_api_api_proto_rawDesc)),
 			NumEnums:      1,
-			NumMessages:   32,
+			NumMessages:   35,
 			NumExtensions: 0,
 			NumServices:   3,
 		},
@@ -2741,7 +2506,6 @@ func file_api_api_proto_init() {
 		MessageInfos:      file_api_api_proto_msgTypes,
 	}.Build()
 	File_api_api_proto = out.File
-	file_api_api_proto_rawDesc = nil
 	file_api_api_proto_goTypes = nil
 	file_api_api_proto_depIdxs = nil
 }
diff --git a/pkg/gadget-service/api/api.proto b/pkg/gadget-service/api/api.proto
index 7781dbba7..13ba3c56c 100644
--- a/pkg/gadget-service/api/api.proto
+++ b/pkg/gadget-service/api/api.proto
@@ -158,6 +158,18 @@ message GadgetInfo {
   bytes metadata = 6;
   repeated Param params = 7;
   string id = 8;
+  ExtraInfo extraInfo = 9;
+}
+
+message ExtraInfo {
+  // key can be "wasm.upcalls", "ebpf.sections", etc
+  map<string, GadgetInspectAddendum> data = 1;
+}
+
+message GadgetInspectAddendum {
+  // contentType could be application/json, text/plain, text/mermaid, text/markdown...
+  string contentType = 1;
+  bytes content = 2;
 }
 
 message DataSource {
@@ -249,6 +261,9 @@ message GetGadgetInfoRequest {
   uint32 version = 3;
 
   uint32 flags = 4;
+
+  // can be used to include more info for debugging (e.g., in ig image inspect)
+  bool requestExtraInfo = 5;
 }
 
 message GetGadgetInfoResponse {
diff --git a/pkg/gadget-service/api/api_grpc.pb.go b/pkg/gadget-service/api/api_grpc.pb.go
index 85c94ca40..57d80ed00 100644
--- a/pkg/gadget-service/api/api_grpc.pb.go
+++ b/pkg/gadget-service/api/api_grpc.pb.go
@@ -1,7 +1,21 @@
+// Copyright 2019-2023 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.2.0
-// - protoc             v3.17.3
+// - protoc-gen-go-grpc v1.5.1
+// - protoc             v5.28.3
 // source: api/api.proto
 
 package api
@@ -15,15 +29,20 @@ import (
 
 // This is a compile-time assertion to ensure that this generated file
 // is compatible with the grpc package it is being compiled against.
-// Requires gRPC-Go v1.32.0 or later.
-const _ = grpc.SupportPackageIsVersion7
+// Requires gRPC-Go v1.64.0 or later.
+const _ = grpc.SupportPackageIsVersion9
+
+const (
+	BuiltInGadgetManager_GetInfo_FullMethodName          = "/api.BuiltInGadgetManager/GetInfo"
+	BuiltInGadgetManager_RunBuiltInGadget_FullMethodName = "/api.BuiltInGadgetManager/RunBuiltInGadget"
+)
 
 // BuiltInGadgetManagerClient is the client API for BuiltInGadgetManager service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
 type BuiltInGadgetManagerClient interface {
 	GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
-	RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (BuiltInGadgetManager_RunBuiltInGadgetClient, error)
+	RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuiltInGadgetControlRequest, GadgetEvent], error)
 }
 
 type builtInGadgetManagerClient struct {
@@ -35,65 +54,52 @@ func NewBuiltInGadgetManagerClient(cc grpc.ClientConnInterface) BuiltInGadgetMan
 }
 
 func (c *builtInGadgetManagerClient) GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(InfoResponse)
-	err := c.cc.Invoke(ctx, "/api.BuiltInGadgetManager/GetInfo", in, out, opts...)
+	err := c.cc.Invoke(ctx, BuiltInGadgetManager_GetInfo_FullMethodName, in, out, cOpts...)
 	if err != nil {
 		return nil, err
 	}
 	return out, nil
 }
 
-func (c *builtInGadgetManagerClient) RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (BuiltInGadgetManager_RunBuiltInGadgetClient, error) {
-	stream, err := c.cc.NewStream(ctx, &BuiltInGadgetManager_ServiceDesc.Streams[0], "/api.BuiltInGadgetManager/RunBuiltInGadget", opts...)
+func (c *builtInGadgetManagerClient) RunBuiltInGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuiltInGadgetControlRequest, GadgetEvent], error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
+	stream, err := c.cc.NewStream(ctx, &BuiltInGadgetManager_ServiceDesc.Streams[0], BuiltInGadgetManager_RunBuiltInGadget_FullMethodName, cOpts...)
 	if err != nil {
 		return nil, err
 	}
-	x := &builtInGadgetManagerRunBuiltInGadgetClient{stream}
+	x := &grpc.GenericClientStream[BuiltInGadgetControlRequest, GadgetEvent]{ClientStream: stream}
 	return x, nil
 }
 
-type BuiltInGadgetManager_RunBuiltInGadgetClient interface {
-	Send(*BuiltInGadgetControlRequest) error
-	Recv() (*GadgetEvent, error)
-	grpc.ClientStream
-}
-
-type builtInGadgetManagerRunBuiltInGadgetClient struct {
-	grpc.ClientStream
-}
-
-func (x *builtInGadgetManagerRunBuiltInGadgetClient) Send(m *BuiltInGadgetControlRequest) error {
-	return x.ClientStream.SendMsg(m)
-}
-
-func (x *builtInGadgetManagerRunBuiltInGadgetClient) Recv() (*GadgetEvent, error) {
-	m := new(GadgetEvent)
-	if err := x.ClientStream.RecvMsg(m); err != nil {
-		return nil, err
-	}
-	return m, nil
-}
+// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
+type BuiltInGadgetManager_RunBuiltInGadgetClient = grpc.BidiStreamingClient[BuiltInGadgetControlRequest, GadgetEvent]
 
 // BuiltInGadgetManagerServer is the server API for BuiltInGadgetManager service.
 // All implementations must embed UnimplementedBuiltInGadgetManagerServer
-// for forward compatibility
+// for forward compatibility.
 type BuiltInGadgetManagerServer interface {
 	GetInfo(context.Context, *InfoRequest) (*InfoResponse, error)
-	RunBuiltInGadget(BuiltInGadgetManager_RunBuiltInGadgetServer) error
+	RunBuiltInGadget(grpc.BidiStreamingServer[BuiltInGadgetControlRequest, GadgetEvent]) error
 	mustEmbedUnimplementedBuiltInGadgetManagerServer()
 }
 
-// UnimplementedBuiltInGadgetManagerServer must be embedded to have forward compatible implementations.
-type UnimplementedBuiltInGadgetManagerServer struct {
-}
+// UnimplementedBuiltInGadgetManagerServer must be embedded to have
+// forward compatible implementations.
+//
+// NOTE: this should be embedded by value instead of pointer to avoid a nil
+// pointer dereference when methods are called.
+type UnimplementedBuiltInGadgetManagerServer struct{}
 
 func (UnimplementedBuiltInGadgetManagerServer) GetInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
 }
-func (UnimplementedBuiltInGadgetManagerServer) RunBuiltInGadget(BuiltInGadgetManager_RunBuiltInGadgetServer) error {
+func (UnimplementedBuiltInGadgetManagerServer) RunBuiltInGadget(grpc.BidiStreamingServer[BuiltInGadgetControlRequest, GadgetEvent]) error {
 	return status.Errorf(codes.Unimplemented, "method RunBuiltInGadget not implemented")
 }
 func (UnimplementedBuiltInGadgetManagerServer) mustEmbedUnimplementedBuiltInGadgetManagerServer() {}
+func (UnimplementedBuiltInGadgetManagerServer) testEmbeddedByValue()                              {}
 
 // UnsafeBuiltInGadgetManagerServer may be embedded to opt out of forward compatibility for this service.
 // Use of this interface is not recommended, as added methods to BuiltInGadgetManagerServer will
@@ -103,6 +109,13 @@ type UnsafeBuiltInGadgetManagerServer interface {
 }
 
 func RegisterBuiltInGadgetManagerServer(s grpc.ServiceRegistrar, srv BuiltInGadgetManagerServer) {
+	// If the following call pancis, it indicates UnimplementedBuiltInGadgetManagerServer was
+	// embedded by pointer and is nil.  This will cause panics if an
+	// unimplemented method is ever invoked, so we test this at initialization
+	// time to prevent it from happening at runtime later due to I/O.
+	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
+		t.testEmbeddedByValue()
+	}
 	s.RegisterService(&BuiltInGadgetManager_ServiceDesc, srv)
 }
 
@@ -116,7 +129,7 @@ func _BuiltInGadgetManager_GetInfo_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: "/api.BuiltInGadgetManager/GetInfo",
+		FullMethod: BuiltInGadgetManager_GetInfo_FullMethodName,
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(BuiltInGadgetManagerServer).GetInfo(ctx, req.(*InfoRequest))
@@ -125,30 +138,11 @@ func _BuiltInGadgetManager_GetInfo_Handler(srv interface{}, ctx context.Context,
 }
 
 func _BuiltInGadgetManager_RunBuiltInGadget_Handler(srv interface{}, stream grpc.ServerStream) error {
-	return srv.(BuiltInGadgetManagerServer).RunBuiltInGadget(&builtInGadgetManagerRunBuiltInGadgetServer{stream})
-}
-
-type BuiltInGadgetManager_RunBuiltInGadgetServer interface {
-	Send(*GadgetEvent) error
-	Recv() (*BuiltInGadgetControlRequest, error)
-	grpc.ServerStream
-}
-
-type builtInGadgetManagerRunBuiltInGadgetServer struct {
-	grpc.ServerStream
+	return srv.(BuiltInGadgetManagerServer).RunBuiltInGadget(&grpc.GenericServerStream[BuiltInGadgetControlRequest, GadgetEvent]{ServerStream: stream})
 }
 
-func (x *builtInGadgetManagerRunBuiltInGadgetServer) Send(m *GadgetEvent) error {
-	return x.ServerStream.SendMsg(m)
-}
-
-func (x *builtInGadgetManagerRunBuiltInGadgetServer) Recv() (*BuiltInGadgetControlRequest, error) {
-	m := new(BuiltInGadgetControlRequest)
-	if err := x.ServerStream.RecvMsg(m); err != nil {
-		return nil, err
-	}
-	return m, nil
-}
+// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
+type BuiltInGadgetManager_RunBuiltInGadgetServer = grpc.BidiStreamingServer[BuiltInGadgetControlRequest, GadgetEvent]
 
 // BuiltInGadgetManager_ServiceDesc is the grpc.ServiceDesc for BuiltInGadgetManager service.
 // It's only intended for direct use with grpc.RegisterService,
@@ -173,12 +167,17 @@ var BuiltInGadgetManager_ServiceDesc = grpc.ServiceDesc{
 	Metadata: "api/api.proto",
 }
 
+const (
+	GadgetManager_GetGadgetInfo_FullMethodName = "/api.GadgetManager/GetGadgetInfo"
+	GadgetManager_RunGadget_FullMethodName     = "/api.GadgetManager/RunGadget"
+)
+
 // GadgetManagerClient is the client API for GadgetManager service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
 type GadgetManagerClient interface {
 	GetGadgetInfo(ctx context.Context, in *GetGadgetInfoRequest, opts ...grpc.CallOption) (*GetGadgetInfoResponse, error)
-	RunGadget(ctx context.Context, opts ...grpc.CallOption) (GadgetManager_RunGadgetClient, error)
+	RunGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GadgetControlRequest, GadgetEvent], error)
 }
 
 type gadgetManagerClient struct {
@@ -190,65 +189,52 @@ func NewGadgetManagerClient(cc grpc.ClientConnInterface) GadgetManagerClient {
 }
 
 func (c *gadgetManagerClient) GetGadgetInfo(ctx context.Context, in *GetGadgetInfoRequest, opts ...grpc.CallOption) (*GetGadgetInfoResponse, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(GetGadgetInfoResponse)
-	err := c.cc.Invoke(ctx, "/api.GadgetManager/GetGadgetInfo", in, out, opts...)
+	err := c.cc.Invoke(ctx, GadgetManager_GetGadgetInfo_FullMethodName, in, out, cOpts...)
 	if err != nil {
 		return nil, err
 	}
 	return out, nil
 }
 
-func (c *gadgetManagerClient) RunGadget(ctx context.Context, opts ...grpc.CallOption) (GadgetManager_RunGadgetClient, error) {
-	stream, err := c.cc.NewStream(ctx, &GadgetManager_ServiceDesc.Streams[0], "/api.GadgetManager/RunGadget", opts...)
+func (c *gadgetManagerClient) RunGadget(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GadgetControlRequest, GadgetEvent], error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
+	stream, err := c.cc.NewStream(ctx, &GadgetManager_ServiceDesc.Streams[0], GadgetManager_RunGadget_FullMethodName, cOpts...)
 	if err != nil {
 		return nil, err
 	}
-	x := &gadgetManagerRunGadgetClient{stream}
+	x := &grpc.GenericClientStream[GadgetControlRequest, GadgetEvent]{ClientStream: stream}
 	return x, nil
 }
 
-type GadgetManager_RunGadgetClient interface {
-	Send(*GadgetControlRequest) error
-	Recv() (*GadgetEvent, error)
-	grpc.ClientStream
-}
-
-type gadgetManagerRunGadgetClient struct {
-	grpc.ClientStream
-}
-
-func (x *gadgetManagerRunGadgetClient) Send(m *GadgetControlRequest) error {
-	return x.ClientStream.SendMsg(m)
-}
-
-func (x *gadgetManagerRunGadgetClient) Recv() (*GadgetEvent, error) {
-	m := new(GadgetEvent)
-	if err := x.ClientStream.RecvMsg(m); err != nil {
-		return nil, err
-	}
-	return m, nil
-}
+// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
+type GadgetManager_RunGadgetClient = grpc.BidiStreamingClient[GadgetControlRequest, GadgetEvent]
 
 // GadgetManagerServer is the server API for GadgetManager service.
 // All implementations must embed UnimplementedGadgetManagerServer
-// for forward compatibility
+// for forward compatibility.
 type GadgetManagerServer interface {
 	GetGadgetInfo(context.Context, *GetGadgetInfoRequest) (*GetGadgetInfoResponse, error)
-	RunGadget(GadgetManager_RunGadgetServer) error
+	RunGadget(grpc.BidiStreamingServer[GadgetControlRequest, GadgetEvent]) error
 	mustEmbedUnimplementedGadgetManagerServer()
 }
 
-// UnimplementedGadgetManagerServer must be embedded to have forward compatible implementations.
-type UnimplementedGadgetManagerServer struct {
-}
+// UnimplementedGadgetManagerServer must be embedded to have
+// forward compatible implementations.
+//
+// NOTE: this should be embedded by value instead of pointer to avoid a nil
+// pointer dereference when methods are called.
+type UnimplementedGadgetManagerServer struct{}
 
 func (UnimplementedGadgetManagerServer) GetGadgetInfo(context.Context, *GetGadgetInfoRequest) (*GetGadgetInfoResponse, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method GetGadgetInfo not implemented")
 }
-func (UnimplementedGadgetManagerServer) RunGadget(GadgetManager_RunGadgetServer) error {
+func (UnimplementedGadgetManagerServer) RunGadget(grpc.BidiStreamingServer[GadgetControlRequest, GadgetEvent]) error {
 	return status.Errorf(codes.Unimplemented, "method RunGadget not implemented")
 }
 func (UnimplementedGadgetManagerServer) mustEmbedUnimplementedGadgetManagerServer() {}
+func (UnimplementedGadgetManagerServer) testEmbeddedByValue()                       {}
 
 // UnsafeGadgetManagerServer may be embedded to opt out of forward compatibility for this service.
 // Use of this interface is not recommended, as added methods to GadgetManagerServer will
@@ -258,6 +244,13 @@ type UnsafeGadgetManagerServer interface {
 }
 
 func RegisterGadgetManagerServer(s grpc.ServiceRegistrar, srv GadgetManagerServer) {
+	// If the following call pancis, it indicates UnimplementedGadgetManagerServer was
+	// embedded by pointer and is nil.  This will cause panics if an
+	// unimplemented method is ever invoked, so we test this at initialization
+	// time to prevent it from happening at runtime later due to I/O.
+	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
+		t.testEmbeddedByValue()
+	}
 	s.RegisterService(&GadgetManager_ServiceDesc, srv)
 }
 
@@ -271,7 +264,7 @@ func _GadgetManager_GetGadgetInfo_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: "/api.GadgetManager/GetGadgetInfo",
+		FullMethod: GadgetManager_GetGadgetInfo_FullMethodName,
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(GadgetManagerServer).GetGadgetInfo(ctx, req.(*GetGadgetInfoRequest))
@@ -280,30 +273,11 @@ func _GadgetManager_GetGadgetInfo_Handler(srv interface{}, ctx context.Context,
 }
 
 func _GadgetManager_RunGadget_Handler(srv interface{}, stream grpc.ServerStream) error {
-	return srv.(GadgetManagerServer).RunGadget(&gadgetManagerRunGadgetServer{stream})
+	return srv.(GadgetManagerServer).RunGadget(&grpc.GenericServerStream[GadgetControlRequest, GadgetEvent]{ServerStream: stream})
 }
 
-type GadgetManager_RunGadgetServer interface {
-	Send(*GadgetEvent) error
-	Recv() (*GadgetControlRequest, error)
-	grpc.ServerStream
-}
-
-type gadgetManagerRunGadgetServer struct {
-	grpc.ServerStream
-}
-
-func (x *gadgetManagerRunGadgetServer) Send(m *GadgetEvent) error {
-	return x.ServerStream.SendMsg(m)
-}
-
-func (x *gadgetManagerRunGadgetServer) Recv() (*GadgetControlRequest, error) {
-	m := new(GadgetControlRequest)
-	if err := x.ServerStream.RecvMsg(m); err != nil {
-		return nil, err
-	}
-	return m, nil
-}
+// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
+type GadgetManager_RunGadgetServer = grpc.BidiStreamingServer[GadgetControlRequest, GadgetEvent]
 
 // GadgetManager_ServiceDesc is the grpc.ServiceDesc for GadgetManager service.
 // It's only intended for direct use with grpc.RegisterService,
@@ -328,6 +302,13 @@ var GadgetManager_ServiceDesc = grpc.ServiceDesc{
 	Metadata: "api/api.proto",
 }
 
+const (
+	GadgetInstanceManager_CreateGadgetInstance_FullMethodName = "/api.GadgetInstanceManager/CreateGadgetInstance"
+	GadgetInstanceManager_ListGadgetInstances_FullMethodName  = "/api.GadgetInstanceManager/ListGadgetInstances"
+	GadgetInstanceManager_GetGadgetInstance_FullMethodName    = "/api.GadgetInstanceManager/GetGadgetInstance"
+	GadgetInstanceManager_RemoveGadgetInstance_FullMethodName = "/api.GadgetInstanceManager/RemoveGadgetInstance"
+)
+
 // GadgetInstanceManagerClient is the client API for GadgetInstanceManager service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -347,8 +328,9 @@ func NewGadgetInstanceManagerClient(cc grpc.ClientConnInterface) GadgetInstanceM
 }
 
 func (c *gadgetInstanceManagerClient) CreateGadgetInstance(ctx context.Context, in *CreateGadgetInstanceRequest, opts ...grpc.CallOption) (*CreateGadgetInstanceResponse, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(CreateGadgetInstanceResponse)
-	err := c.cc.Invoke(ctx, "/api.GadgetInstanceManager/CreateGadgetInstance", in, out, opts...)
+	err := c.cc.Invoke(ctx, GadgetInstanceManager_CreateGadgetInstance_FullMethodName, in, out, cOpts...)
 	if err != nil {
 		return nil, err
 	}
@@ -356,8 +338,9 @@ func (c *gadgetInstanceManagerClient) CreateGadgetInstance(ctx context.Context,
 }
 
 func (c *gadgetInstanceManagerClient) ListGadgetInstances(ctx context.Context, in *ListGadgetInstancesRequest, opts ...grpc.CallOption) (*ListGadgetInstanceResponse, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(ListGadgetInstanceResponse)
-	err := c.cc.Invoke(ctx, "/api.GadgetInstanceManager/ListGadgetInstances", in, out, opts...)
+	err := c.cc.Invoke(ctx, GadgetInstanceManager_ListGadgetInstances_FullMethodName, in, out, cOpts...)
 	if err != nil {
 		return nil, err
 	}
@@ -365,8 +348,9 @@ func (c *gadgetInstanceManagerClient) ListGadgetInstances(ctx context.Context, i
 }
 
 func (c *gadgetInstanceManagerClient) GetGadgetInstance(ctx context.Context, in *GadgetInstanceId, opts ...grpc.CallOption) (*GadgetInstance, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(GadgetInstance)
-	err := c.cc.Invoke(ctx, "/api.GadgetInstanceManager/GetGadgetInstance", in, out, opts...)
+	err := c.cc.Invoke(ctx, GadgetInstanceManager_GetGadgetInstance_FullMethodName, in, out, cOpts...)
 	if err != nil {
 		return nil, err
 	}
@@ -374,8 +358,9 @@ func (c *gadgetInstanceManagerClient) GetGadgetInstance(ctx context.Context, in
 }
 
 func (c *gadgetInstanceManagerClient) RemoveGadgetInstance(ctx context.Context, in *GadgetInstanceId, opts ...grpc.CallOption) (*StatusResponse, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(StatusResponse)
-	err := c.cc.Invoke(ctx, "/api.GadgetInstanceManager/RemoveGadgetInstance", in, out, opts...)
+	err := c.cc.Invoke(ctx, GadgetInstanceManager_RemoveGadgetInstance_FullMethodName, in, out, cOpts...)
 	if err != nil {
 		return nil, err
 	}
@@ -384,7 +369,7 @@ func (c *gadgetInstanceManagerClient) RemoveGadgetInstance(ctx context.Context,
 
 // GadgetInstanceManagerServer is the server API for GadgetInstanceManager service.
 // All implementations must embed UnimplementedGadgetInstanceManagerServer
-// for forward compatibility
+// for forward compatibility.
 type GadgetInstanceManagerServer interface {
 	CreateGadgetInstance(context.Context, *CreateGadgetInstanceRequest) (*CreateGadgetInstanceResponse, error)
 	ListGadgetInstances(context.Context, *ListGadgetInstancesRequest) (*ListGadgetInstanceResponse, error)
@@ -393,9 +378,12 @@ type GadgetInstanceManagerServer interface {
 	mustEmbedUnimplementedGadgetInstanceManagerServer()
 }
 
-// UnimplementedGadgetInstanceManagerServer must be embedded to have forward compatible implementations.
-type UnimplementedGadgetInstanceManagerServer struct {
-}
+// UnimplementedGadgetInstanceManagerServer must be embedded to have
+// forward compatible implementations.
+//
+// NOTE: this should be embedded by value instead of pointer to avoid a nil
+// pointer dereference when methods are called.
+type UnimplementedGadgetInstanceManagerServer struct{}
 
 func (UnimplementedGadgetInstanceManagerServer) CreateGadgetInstance(context.Context, *CreateGadgetInstanceRequest) (*CreateGadgetInstanceResponse, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method CreateGadgetInstance not implemented")
@@ -410,6 +398,7 @@ func (UnimplementedGadgetInstanceManagerServer) RemoveGadgetInstance(context.Con
 	return nil, status.Errorf(codes.Unimplemented, "method RemoveGadgetInstance not implemented")
 }
 func (UnimplementedGadgetInstanceManagerServer) mustEmbedUnimplementedGadgetInstanceManagerServer() {}
+func (UnimplementedGadgetInstanceManagerServer) testEmbeddedByValue()                               {}
 
 // UnsafeGadgetInstanceManagerServer may be embedded to opt out of forward compatibility for this service.
 // Use of this interface is not recommended, as added methods to GadgetInstanceManagerServer will
@@ -419,6 +408,13 @@ type UnsafeGadgetInstanceManagerServer interface {
 }
 
 func RegisterGadgetInstanceManagerServer(s grpc.ServiceRegistrar, srv GadgetInstanceManagerServer) {
+	// If the following call pancis, it indicates UnimplementedGadgetInstanceManagerServer was
+	// embedded by pointer and is nil.  This will cause panics if an
+	// unimplemented method is ever invoked, so we test this at initialization
+	// time to prevent it from happening at runtime later due to I/O.
+	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
+		t.testEmbeddedByValue()
+	}
 	s.RegisterService(&GadgetInstanceManager_ServiceDesc, srv)
 }
 
@@ -432,7 +428,7 @@ func _GadgetInstanceManager_CreateGadgetInstance_Handler(srv interface{}, ctx co
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: "/api.GadgetInstanceManager/CreateGadgetInstance",
+		FullMethod: GadgetInstanceManager_CreateGadgetInstance_FullMethodName,
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(GadgetInstanceManagerServer).CreateGadgetInstance(ctx, req.(*CreateGadgetInstanceRequest))
@@ -450,7 +446,7 @@ func _GadgetInstanceManager_ListGadgetInstances_Handler(srv interface{}, ctx con
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: "/api.GadgetInstanceManager/ListGadgetInstances",
+		FullMethod: GadgetInstanceManager_ListGadgetInstances_FullMethodName,
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(GadgetInstanceManagerServer).ListGadgetInstances(ctx, req.(*ListGadgetInstancesRequest))
@@ -468,7 +464,7 @@ func _GadgetInstanceManager_GetGadgetInstance_Handler(srv interface{}, ctx conte
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: "/api.GadgetInstanceManager/GetGadgetInstance",
+		FullMethod: GadgetInstanceManager_GetGadgetInstance_FullMethodName,
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(GadgetInstanceManagerServer).GetGadgetInstance(ctx, req.(*GadgetInstanceId))
@@ -486,7 +482,7 @@ func _GadgetInstanceManager_RemoveGadgetInstance_Handler(srv interface{}, ctx co
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: "/api.GadgetInstanceManager/RemoveGadgetInstance",
+		FullMethod: GadgetInstanceManager_RemoveGadgetInstance_FullMethodName,
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(GadgetInstanceManagerServer).RemoveGadgetInstance(ctx, req.(*GadgetInstanceId))
diff --git a/pkg/gadget-service/api/helpers.go b/pkg/gadget-service/api/helpers.go
index 9a1c322bc..356ff4537 100644
--- a/pkg/gadget-service/api/helpers.go
+++ b/pkg/gadget-service/api/helpers.go
@@ -1,4 +1,4 @@
-// Copyright 2023-2024 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -97,26 +97,30 @@ func (pv ParamValues) ExtractPrefixedValues(prefix string) ParamValues {
 
 func SplitStringWithEscape(s string, sep rune) []string {
 	var result []string
-	var part string
+	var b strings.Builder
 	var escape bool
 	for _, c := range s {
 		if escape {
 			escape = false
-			part += string(c)
+			if c != sep && c != '\\' {
+				// Leave escape char alone if not a sep or backslash
+				b.WriteByte('\\')
+			}
+			b.WriteRune(c)
 			continue
 		}
 		switch c {
 		case '\\':
 			escape = true
 		case sep:
-			result = append(result, part)
-			part = ""
+			result = append(result, b.String())
+			b.Reset()
 		default:
-			part += string(c)
+			b.WriteRune(c)
 		}
 	}
-	if part != "" {
-		result = append(result, part)
+	if b.Len() > 0 {
+		result = append(result, b.String())
 	}
 	return result
 }
diff --git a/pkg/gadget-service/instance-manager/instance.go b/pkg/gadget-service/instance-manager/instance.go
index e52cb53c0..59e8957b3 100644
--- a/pkg/gadget-service/instance-manager/instance.go
+++ b/pkg/gadget-service/instance-manager/instance.go
@@ -137,7 +137,7 @@ func (p *GadgetInstance) Run(
 	svc := simple.New("svc",
 		simple.WithPriority(50000),
 		simple.OnInit(func(gadgetCtx operators.GadgetContext) error {
-			gi, err := gadgetCtx.SerializeGadgetInfo()
+			gi, err := gadgetCtx.SerializeGadgetInfo(false)
 			if err != nil {
 				return fmt.Errorf("serializing gadget info: %w", err)
 			}
@@ -205,6 +205,8 @@ func (p *GadgetInstance) Run(
 		gadgetcontext.WithLogger(logger),
 		gadgetcontext.WithDataOperators(ops...),
 		gadgetcontext.WithAsRemoteCall(true),
+		gadgetcontext.WithName(p.name),
+		gadgetcontext.WithID(p.id),
 	)
 
 	runtimeParams := runtime.ParamDescs().ToParams()
diff --git a/pkg/gadget-service/service-oci.go b/pkg/gadget-service/service-oci.go
index c1d4b64b4..e807b44e9 100644
--- a/pkg/gadget-service/service-oci.go
+++ b/pkg/gadget-service/service-oci.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -21,6 +21,8 @@ import (
 	"sync"
 	"time"
 
+	"go.opentelemetry.io/otel/attribute"
+	"go.opentelemetry.io/otel/metric"
 	"google.golang.org/grpc/credentials"
 	"google.golang.org/grpc/peer"
 	"google.golang.org/protobuf/proto"
@@ -49,6 +51,11 @@ func (s *Service) GetOperatorMap() map[operators.DataOperator]*params.Params {
 }
 
 func (s *Service) GetGadgetInfo(ctx context.Context, req *api.GetGadgetInfoRequest) (*api.GetGadgetInfoResponse, error) {
+	metricAttribs := attribute.NewSet(
+		attribute.KeyValue{Key: "gadget_image", Value: attribute.StringValue(req.ImageName)},
+	)
+	defer s.ctrGetGadgetInfo.Add(context.Background(), 1, metric.WithAttributeSet(metricAttribs))
+
 	if req.Version != api.VersionGadgetInfo {
 		return nil, fmt.Errorf("expected version to be %d, got %d", api.VersionGadgetInfo, req.Version)
 	}
@@ -90,6 +97,7 @@ func (s *Service) GetGadgetInfo(ctx context.Context, req *api.GetGadgetInfoReque
 		req.ImageName,
 		gadgetcontext.WithDataOperators(ops...),
 		gadgetcontext.WithAsRemoteCall(true),
+		gadgetcontext.IncludeExtraInfo(req.RequestExtraInfo),
 	)
 
 	gi, err := s.runtime.GetGadgetInfo(gadgetCtx, s.runtime.ParamDescs().ToParams(), req.ParamValues)
@@ -113,6 +121,8 @@ func (s *Service) RunGadget(runGadget api.GadgetManager_RunGadgetServer) error {
 		if s.instanceMgr == nil {
 			return errors.New("instance manager not initialized")
 		}
+
+		s.ctrAttachGadget.Add(context.Background(), 1)
 		return s.instanceMgr.AttachToGadgetInstance(attachRequest.Id, runGadget)
 	}
 
@@ -121,6 +131,11 @@ func (s *Service) RunGadget(runGadget api.GadgetManager_RunGadgetServer) error {
 		return fmt.Errorf("expected first control message to be gadget run request")
 	}
 
+	metricAttribs := attribute.NewSet(
+		attribute.KeyValue{Key: "gadget_image", Value: attribute.StringValue(ociRequest.ImageName)},
+	)
+	defer s.ctrRunGadget.Add(context.Background(), 1, metric.WithAttributeSet(metricAttribs))
+
 	p, ok := peer.FromContext(runGadget.Context())
 	if ok && p.AuthInfo != nil {
 		tlsInfo, ok := p.AuthInfo.(credentials.TLSInfo)
@@ -203,7 +218,7 @@ func (s *Service) RunGadget(runGadget api.GadgetManager_RunGadgetServer) error {
 			seq := uint32(0)
 			var seqLock sync.Mutex
 
-			gi, err := gadgetCtx.SerializeGadgetInfo()
+			gi, err := gadgetCtx.SerializeGadgetInfo(false)
 			if err != nil {
 				return fmt.Errorf("serializing gadget info: %w", err)
 			}
diff --git a/pkg/gadget-service/service.go b/pkg/gadget-service/service.go
index 8a89a7374..6de98152f 100644
--- a/pkg/gadget-service/service.go
+++ b/pkg/gadget-service/service.go
@@ -1,4 +1,4 @@
-// Copyright 2023-2024 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@ import (
 	"time"
 
 	"github.com/google/uuid"
+	"go.opentelemetry.io/otel/metric"
 	"google.golang.org/grpc"
 
 	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
@@ -40,6 +41,7 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/store"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/metrics"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/runtime"
@@ -74,6 +76,11 @@ type Service struct {
 
 	// operators stores all global parameters for DataOperators (non-legacy)
 	operators map[operators.DataOperator]*params.Params
+
+	// metrics (only covering image-based gadgets)
+	ctrGetGadgetInfo metric.Int64Counter
+	ctrRunGadget     metric.Int64Counter
+	ctrAttachGadget  metric.Int64Counter
 }
 
 func NewService(defaultLogger logger.Logger) *Service {
@@ -81,11 +88,27 @@ func NewService(defaultLogger logger.Logger) *Service {
 	for _, op := range operators.GetDataOperators() {
 		ops[op] = apihelpers.ToParamDescs(op.GlobalParams()).ToParams()
 	}
-	return &Service{
+
+	svc := &Service{
 		servers:   map[*grpc.Server]struct{}{},
 		logger:    defaultLogger,
 		operators: ops,
 	}
+
+	svc.ctrGetGadgetInfo, _ = metrics.Int64Counter("ig_grpc_get_gadget_info",
+		metric.WithUnit("{instance}"),
+		metric.WithDescription("Number of GetGadgetInfo() gRPC requests"),
+	)
+	svc.ctrRunGadget, _ = metrics.Int64Counter("ig_grpc_run_gadget",
+		metric.WithUnit("{request}"),
+		metric.WithDescription("Number of RunGadget()/Run gRPC requests"),
+	)
+	svc.ctrAttachGadget, _ = metrics.Int64Counter("ig_grpc_attach_gadget",
+		metric.WithUnit("{request}"),
+		metric.WithDescription("Number of RunGadget()/Attach gRPC requests"),
+	)
+
+	return svc
 }
 
 func (s *Service) SetEventBufferLength(val uint64) {
diff --git a/pkg/gadget-service/store/k8s-configmap-store/configmapstore.go b/pkg/gadget-service/store/k8s-configmap-store/configmapstore.go
index d2649a06d..68996dcb4 100644
--- a/pkg/gadget-service/store/k8s-configmap-store/configmapstore.go
+++ b/pkg/gadget-service/store/k8s-configmap-store/configmapstore.go
@@ -16,6 +16,7 @@ package k8sconfigmapstore
 
 import (
 	"context"
+	"errors"
 	"fmt"
 	"os"
 	"slices"
@@ -30,19 +31,17 @@ import (
 	"k8s.io/apimachinery/pkg/util/runtime"
 	"k8s.io/apimachinery/pkg/util/wait"
 	"k8s.io/client-go/kubernetes"
-	"k8s.io/client-go/rest"
 	"k8s.io/client-go/tools/cache"
 	"k8s.io/client-go/util/workqueue"
 
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
 	instancemanager "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/instance-manager"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/k8sutil"
 )
 
 const (
 	GadgetInstance = "gadget-instance"
 
-	gadgetNamespace = "gadget"
-
 	gadgetImage    = "gadgetImage"
 	gadgetLogLevel = "gadgetLogLevel"
 	gadgetNodes    = "gadgetNodes"
@@ -52,18 +51,24 @@ const (
 
 type Store struct {
 	api.UnimplementedGadgetInstanceManagerServer
-	nodeName    string
-	store       cache.Store
-	queue       workqueue.TypedRateLimitingInterface[string]
-	informer    cache.Controller
-	clientset   *kubernetes.Clientset
-	instanceMgr *instancemanager.Manager
+	nodeName        string
+	store           cache.Store
+	queue           workqueue.TypedRateLimitingInterface[string]
+	informer        cache.Controller
+	clientset       *kubernetes.Clientset
+	instanceMgr     *instancemanager.Manager
+	gadgetNamespace string
 }
 
-func New(mgr *instancemanager.Manager) (*Store, error) {
+func New(mgr *instancemanager.Manager, namespace string) (*Store, error) {
+	nodeName := os.Getenv("NODE_NAME")
+	if nodeName == "" {
+		return nil, errors.New("NODE_NAME environment variable is not set, cannot use config map store")
+	}
 	s := &Store{
-		instanceMgr: mgr,
-		nodeName:    os.Getenv("NODE_NAME"),
+		instanceMgr:     mgr,
+		nodeName:        nodeName,
+		gadgetNamespace: namespace,
 	}
 	err := s.init()
 	if err != nil {
@@ -74,11 +79,7 @@ func New(mgr *instancemanager.Manager) (*Store, error) {
 
 func (s *Store) init() error {
 	log.Infof("initializing ConfigMap store for node %q", s.nodeName)
-	config, err := rest.InClusterConfig()
-	if err != nil {
-		return err
-	}
-	clientset, err := kubernetes.NewForConfig(config)
+	clientset, err := k8sutil.NewClientset("", "k8s-configmap-store/init")
 	if err != nil {
 		return err
 	}
@@ -87,7 +88,7 @@ func (s *Store) init() error {
 
 	selector := labels.SelectorFromSet(map[string]string{"type": GadgetInstance}).String()
 
-	configMapListWatcher := cache.NewFilteredListWatchFromClient(clientset.CoreV1().RESTClient(), "configmaps", gadgetNamespace, func(options *v1.ListOptions) {
+	configMapListWatcher := cache.NewFilteredListWatchFromClient(clientset.CoreV1().RESTClient(), "configmaps", s.gadgetNamespace, func(options *v1.ListOptions) {
 		options.LabelSelector = selector
 	})
 
@@ -253,7 +254,7 @@ func (s *Store) CreateGadgetInstance(ctx context.Context, req *api.CreateGadgetI
 		},
 		ObjectMeta: v1.ObjectMeta{
 			Name:      req.GadgetInstance.Id,
-			Namespace: gadgetNamespace,
+			Namespace: s.gadgetNamespace,
 			Labels: map[string]string{
 				"type": GadgetInstance,
 				"name": req.GadgetInstance.Name,
@@ -271,7 +272,7 @@ func (s *Store) CreateGadgetInstance(ctx context.Context, req *api.CreateGadgetI
 		BinaryData: nil,
 	}
 
-	_, err = s.clientset.CoreV1().ConfigMaps(gadgetNamespace).Create(ctx, cmap, v1.CreateOptions{})
+	_, err = s.clientset.CoreV1().ConfigMaps(s.gadgetNamespace).Create(ctx, cmap, v1.CreateOptions{})
 	if err != nil {
 		return nil, err
 	}
@@ -298,7 +299,7 @@ func (s *Store) ListGadgetInstances(ctx context.Context, request *api.ListGadget
 
 // RemoveGadgetInstance removes the corresponding config map of the given gadget instance from the cluster
 func (s *Store) RemoveGadgetInstance(ctx context.Context, id *api.GadgetInstanceId) (*api.StatusResponse, error) {
-	err := s.clientset.CoreV1().ConfigMaps(gadgetNamespace).Delete(ctx, id.Id, v1.DeleteOptions{})
+	err := s.clientset.CoreV1().ConfigMaps(s.gadgetNamespace).Delete(ctx, id.Id, v1.DeleteOptions{})
 	if err != nil {
 		return &api.StatusResponse{
 			Result:  1,
@@ -313,7 +314,7 @@ func (s *Store) RemoveGadgetInstance(ctx context.Context, id *api.GadgetInstance
 
 // GetGadgetInstance returns the configuration of the given gadget instance
 func (s *Store) GetGadgetInstance(ctx context.Context, req *api.GadgetInstanceId) (*api.GadgetInstance, error) {
-	configMap, ok, err := s.store.GetByKey(gadgetNamespace + "/" + req.Id)
+	configMap, ok, err := s.store.GetByKey(s.gadgetNamespace + "/" + req.Id)
 	if err != nil {
 		return nil, err
 	}
diff --git a/pkg/gadgets/advise/networkpolicy/advisor/advisor.go b/pkg/gadgets/advise/networkpolicy/advisor/advisor.go
index d660bb71c..69a33e74a 100644
--- a/pkg/gadgets/advise/networkpolicy/advisor/advisor.go
+++ b/pkg/gadgets/advise/networkpolicy/advisor/advisor.go
@@ -148,11 +148,12 @@ func (a *NetworkPolicyAdvisor) localPodKey(e types.Event) (ret string) {
 }
 
 func (a *NetworkPolicyAdvisor) networkPeerKey(e types.Event) (ret string) {
-	if e.DstEndpoint.Kind == eventtypes.EndpointKindPod {
+	switch e.DstEndpoint.Kind {
+	case eventtypes.EndpointKindPod:
 		ret = string(e.DstEndpoint.Kind) + ":" + e.DstEndpoint.Namespace + ":" + a.labelKeyString(e.DstEndpoint.PodLabels)
-	} else if e.DstEndpoint.Kind == eventtypes.EndpointKindService {
+	case eventtypes.EndpointKindService:
 		ret = string(e.DstEndpoint.Kind) + ":" + e.DstEndpoint.Namespace + ":" + a.labelKeyString(e.DstEndpoint.PodLabels)
-	} else if e.DstEndpoint.Kind == eventtypes.EndpointKindRaw {
+	case eventtypes.EndpointKindRaw:
 		ret = string(e.DstEndpoint.Kind) + ":" + e.DstEndpoint.Addr
 	}
 	return fmt.Sprintf("%s:%d", ret, e.Port)
@@ -167,7 +168,8 @@ func (a *NetworkPolicyAdvisor) eventToRule(e types.Event) (ports []networkingv1.
 			Protocol: &protocol,
 		},
 	}
-	if e.DstEndpoint.Kind == eventtypes.EndpointKindPod {
+	switch e.DstEndpoint.Kind {
+	case eventtypes.EndpointKindPod:
 		peers = []networkingv1.NetworkPolicyPeer{
 			{
 				PodSelector: &metav1.LabelSelector{MatchLabels: a.labelFilter(e.DstEndpoint.PodLabels)},
@@ -184,7 +186,7 @@ func (a *NetworkPolicyAdvisor) eventToRule(e types.Event) (ports []networkingv1.
 				},
 			}
 		}
-	} else if e.DstEndpoint.Kind == eventtypes.EndpointKindService {
+	case eventtypes.EndpointKindService:
 		peers = []networkingv1.NetworkPolicyPeer{
 			{
 				PodSelector: &metav1.LabelSelector{MatchLabels: e.DstEndpoint.PodLabels},
@@ -201,7 +203,7 @@ func (a *NetworkPolicyAdvisor) eventToRule(e types.Event) (ports []networkingv1.
 				},
 			}
 		}
-	} else if e.DstEndpoint.Kind == eventtypes.EndpointKindRaw {
+	case eventtypes.EndpointKindRaw:
 		if e.DstEndpoint.Addr == "127.0.0.1" {
 			// No need to generate a network policy for localhost
 			peers = []networkingv1.NetworkPolicyPeer{}
@@ -214,7 +216,7 @@ func (a *NetworkPolicyAdvisor) eventToRule(e types.Event) (ports []networkingv1.
 				},
 			}
 		}
-	} else {
+	default:
 		panic("unknown event")
 	}
 	return
@@ -296,11 +298,7 @@ func (a *NetworkPolicyAdvisor) GeneratePolicies() {
 		}
 
 		key := a.localPodKey(e)
-		if _, ok := eventsBySource[key]; ok {
-			eventsBySource[key] = append(eventsBySource[key], e)
-		} else {
-			eventsBySource[key] = []types.Event{e}
-		}
+		eventsBySource[key] = append(eventsBySource[key], e)
 	}
 
 	for _, events := range eventsBySource {
diff --git a/pkg/gadgets/audit/seccomp/tracer/auditseccomp_arm64_bpfel.o b/pkg/gadgets/audit/seccomp/tracer/auditseccomp_arm64_bpfel.o
index 4aca8767f..f9bdc39d9 100644
Binary files a/pkg/gadgets/audit/seccomp/tracer/auditseccomp_arm64_bpfel.o and b/pkg/gadgets/audit/seccomp/tracer/auditseccomp_arm64_bpfel.o differ
diff --git a/pkg/gadgets/audit/seccomp/tracer/auditseccomp_x86_bpfel.o b/pkg/gadgets/audit/seccomp/tracer/auditseccomp_x86_bpfel.o
index 07af75f20..e159db80f 100644
Binary files a/pkg/gadgets/audit/seccomp/tracer/auditseccomp_x86_bpfel.o and b/pkg/gadgets/audit/seccomp/tracer/auditseccomp_x86_bpfel.o differ
diff --git a/pkg/gadgets/audit/seccomp/tracer/bpf/audit-seccomp.bpf.c b/pkg/gadgets/audit/seccomp/tracer/bpf/audit-seccomp.bpf.c
index f1a33bb56..6cb9eef3a 100644
--- a/pkg/gadgets/audit/seccomp/tracer/bpf/audit-seccomp.bpf.c
+++ b/pkg/gadgets/audit/seccomp/tracer/bpf/audit-seccomp.bpf.c
@@ -10,6 +10,7 @@
 #include <bpf/bpf_tracing.h>
 
 #include "audit-seccomp.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 /* The stack is limited, so use a map to build the event */
diff --git a/pkg/gadgets/helpers_all.go b/pkg/gadgets/helpers_all.go
index 8e26a6231..7889f7c71 100644
--- a/pkg/gadgets/helpers_all.go
+++ b/pkg/gadgets/helpers_all.go
@@ -17,6 +17,7 @@
 package gadgets
 
 import (
+	"bytes"
 	"fmt"
 	"syscall"
 )
@@ -35,12 +36,15 @@ func ProtoString(proto int) string {
 }
 
 func FromCString(in []byte) string {
-	for i := 0; i < len(in); i++ {
-		if in[i] == 0 {
-			return string(in[:i])
-		}
+	idx := bytes.IndexByte(in, 0)
+	switch {
+	case idx == -1:
+		return string(in)
+	case idx < len(in):
+		return string(in[:idx])
+	default:
+		return string(in)
 	}
-	return string(in)
 }
 
 func FromCStringN(in []byte, length int) string {
@@ -49,10 +53,14 @@ func FromCStringN(in []byte, length int) string {
 		l = length
 	}
 
-	for i := 0; i < l; i++ {
-		if in[i] == 0 {
-			return string(in[:i])
-		}
+	buf := in[:l]
+	idx := bytes.IndexByte(buf, 0)
+	switch {
+	case idx == -1:
+		return string(in)
+	case idx < l:
+		return string(in[:idx])
+	default:
+		return string(in)
 	}
-	return string(in[:l])
 }
diff --git a/pkg/gadgets/profile/cpu/tracer/bpf/profile.bpf.c b/pkg/gadgets/profile/cpu/tracer/bpf/profile.bpf.c
index cdf6b2a20..08915ced9 100644
--- a/pkg/gadgets/profile/cpu/tracer/bpf/profile.bpf.c
+++ b/pkg/gadgets/profile/cpu/tracer/bpf/profile.bpf.c
@@ -6,6 +6,7 @@
 #include <bpf/bpf_tracing.h>
 #include "profile.h"
 #include <gadget/maps.bpf.h>
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 const volatile bool kernel_stacks_only = false;
diff --git a/pkg/gadgets/profile/cpu/tracer/profile_arm64_bpfel.o b/pkg/gadgets/profile/cpu/tracer/profile_arm64_bpfel.o
index 6a60790e2..df6616414 100644
Binary files a/pkg/gadgets/profile/cpu/tracer/profile_arm64_bpfel.o and b/pkg/gadgets/profile/cpu/tracer/profile_arm64_bpfel.o differ
diff --git a/pkg/gadgets/profile/cpu/tracer/profile_x86_bpfel.o b/pkg/gadgets/profile/cpu/tracer/profile_x86_bpfel.o
index b26c41b1d..9a605c37d 100644
Binary files a/pkg/gadgets/profile/cpu/tracer/profile_x86_bpfel.o and b/pkg/gadgets/profile/cpu/tracer/profile_x86_bpfel.o differ
diff --git a/pkg/gadgets/profile/cpu/tracer/tracer.go b/pkg/gadgets/profile/cpu/tracer/tracer.go
index 0c48f28bb..daf0ded75 100644
--- a/pkg/gadgets/profile/cpu/tracer/tracer.go
+++ b/pkg/gadgets/profile/cpu/tracer/tracer.go
@@ -82,11 +82,11 @@ type keyCount struct {
 
 func (t *Tracer) readCountsMap() ([]keyCount, error) {
 	var prev *profileKeyT = nil
-	counts := t.objs.profileMaps.Counts
+	counts := t.objs.Counts
 	keysCounts := []keyCount{}
 	key := profileKeyT{}
 
-	if t.objs.profileMaps.Counts == nil {
+	if t.objs.Counts == nil {
 		return nil, fmt.Errorf("counts map was not created at moment of stop")
 	}
 
@@ -230,7 +230,7 @@ func (t *Tracer) collectResult() ([]byte, error) {
 
 	reports := make([]types.Report, len(keysCounts))
 	for i, keyVal := range keysCounts {
-		report, err := getReport(t, kAllSyms, t.objs.profileMaps.Stackmap, keyVal)
+		report, err := getReport(t, kAllSyms, t.objs.Stackmap, keyVal)
 		if err != nil {
 			return nil, err
 		}
@@ -341,7 +341,7 @@ func (t *TracerWrap) SetEventHandler(handler any) {
 
 func (t *TracerWrap) SetEventEnricher(enricher func(ev any) error) {
 	t.enricherFunc = enricher
-	t.Tracer.enricher = t
+	t.enricher = t
 }
 
 func (t *TracerWrap) EnrichByMntNs(event *eventtypes.CommonData, mountnsid uint64) {
@@ -353,7 +353,7 @@ func (t *TracerWrap) EnrichByMntNs(event *eventtypes.CommonData, mountnsid uint6
 }
 
 func (t *TracerWrap) SetMountNsMap(mountNsMap *ebpf.Map) {
-	t.Tracer.config.MountnsMap = mountNsMap
+	t.config.MountnsMap = mountNsMap
 }
 
 func (g *GadgetDesc) NewInstance() (gadgets.Gadget, error) {
diff --git a/pkg/gadgets/profile/tcprtt/tracer/gadget.go b/pkg/gadgets/profile/tcprtt/tracer/gadget.go
index 0ca7a9e02..d2e5f6bab 100644
--- a/pkg/gadgets/profile/tcprtt/tracer/gadget.go
+++ b/pkg/gadgets/profile/tcprtt/tracer/gadget.go
@@ -168,7 +168,7 @@ func (g *GadgetDesc) OutputFormats() (gadgets.OutputFormats, string) {
 					if h.Average > 0 {
 						sb.WriteString(fmt.Sprintf(" [AVG %f]", h.Average))
 					}
-					sb.WriteString(fmt.Sprintf("\n%s\n", h.Histogram.String()))
+					sb.WriteString(fmt.Sprintf("\n%s\n", h.String()))
 				}
 				return []byte(sb.String()), nil
 			},
diff --git a/pkg/gadgets/run/types/metadata.go b/pkg/gadgets/run/types/metadata.go
index 310a95478..eb77056ce 100644
--- a/pkg/gadgets/run/types/metadata.go
+++ b/pkg/gadgets/run/types/metadata.go
@@ -45,10 +45,6 @@ const (
 func Validate(m *metadatav1.GadgetMetadata, spec *ebpf.CollectionSpec) error {
 	var errs []error
 
-	if m.Name == "" {
-		errs = append(errs, errors.New("gadget name is required"))
-	}
-
 	errs = append(errs, validateEbpfParams(m, spec))
 
 	return errors.Join(errs...)
@@ -479,7 +475,13 @@ func checkParamVar(spec *ebpf.CollectionSpec, name string) error {
 	if btfVar.Linkage != btf.GlobalVar {
 		return fmt.Errorf("%q is not a global variable", name)
 	}
-	btfConst, ok := btfVar.Type.(*btf.Const)
+	typ := btfVar.Type
+	if btfArr, ok := typ.(*btf.Array); ok {
+		// Example of valid array of constants:
+		// const volatile gadget_comm targ_comm[TASK_COMM_LEN] = {};
+		typ = btfArr.Type
+	}
+	btfConst, ok := typ.(*btf.Const)
 	if !ok {
 		return fmt.Errorf("%q is not const", name)
 	}
diff --git a/pkg/gadgets/run/types/metadata_test.go b/pkg/gadgets/run/types/metadata_test.go
index 5df3dd9bc..bf26d4462 100644
--- a/pkg/gadgets/run/types/metadata_test.go
+++ b/pkg/gadgets/run/types/metadata_test.go
@@ -32,11 +32,6 @@ func TestValidate(t *testing.T) {
 	}
 
 	tests := map[string]testCase{
-		"missing_name": {
-			objectPath:        "../../../../testdata/validate_metadata1.o",
-			metadata:          &metadatav1.GadgetMetadata{},
-			expectedErrString: "gadget name is required",
-		},
 		"param_nonexistent": {
 			objectPath: "../../../../testdata/validate_metadata1.o",
 			metadata: &metadatav1.GadgetMetadata{
diff --git a/pkg/gadgets/snapshot/process/tracer/bpf/process-collector.bpf.c b/pkg/gadgets/snapshot/process/tracer/bpf/process-collector.bpf.c
index ed789c98c..d9c43da85 100644
--- a/pkg/gadgets/snapshot/process/tracer/bpf/process-collector.bpf.c
+++ b/pkg/gadgets/snapshot/process/tracer/bpf/process-collector.bpf.c
@@ -12,6 +12,7 @@
 #include <vmlinux.h>
 #include <bpf/bpf_helpers.h>
 
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 const volatile bool show_threads = false;
diff --git a/pkg/gadgets/snapshot/process/tracer/processcollector_bpfel.o b/pkg/gadgets/snapshot/process/tracer/processcollector_bpfel.o
index 257d81e99..0c5e188fb 100644
Binary files a/pkg/gadgets/snapshot/process/tracer/processcollector_bpfel.o and b/pkg/gadgets/snapshot/process/tracer/processcollector_bpfel.o differ
diff --git a/pkg/gadgets/snapshot/process/tracer/tracer.go b/pkg/gadgets/snapshot/process/tracer/tracer.go
index 101f59311..567bb88c2 100644
--- a/pkg/gadgets/snapshot/process/tracer/tracer.go
+++ b/pkg/gadgets/snapshot/process/tracer/tracer.go
@@ -160,7 +160,7 @@ func getTidEvent(config *Config, enricher gadgets.DataEnricherByMntNs, pid, tid
 	}
 
 	if enricher != nil {
-		enricher.EnrichByMntNs(&event.CommonData, event.WithMountNsID.MountNsID)
+		enricher.EnrichByMntNs(&event.CommonData, event.MountNsID)
 	}
 
 	return event, nil
diff --git a/pkg/gadgets/top/block-io/tracer/biotop_arm64_bpfel.o b/pkg/gadgets/top/block-io/tracer/biotop_arm64_bpfel.o
index 568b4606d..1a44e5e31 100644
Binary files a/pkg/gadgets/top/block-io/tracer/biotop_arm64_bpfel.o and b/pkg/gadgets/top/block-io/tracer/biotop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/top/block-io/tracer/biotop_x86_bpfel.o b/pkg/gadgets/top/block-io/tracer/biotop_x86_bpfel.o
index 67cd7c8b4..906ca8f3a 100644
Binary files a/pkg/gadgets/top/block-io/tracer/biotop_x86_bpfel.o and b/pkg/gadgets/top/block-io/tracer/biotop_x86_bpfel.o differ
diff --git a/pkg/gadgets/top/block-io/tracer/bpf/biotop.bpf.c b/pkg/gadgets/top/block-io/tracer/bpf/biotop.bpf.c
index 77d6cb75d..a078c0f46 100644
--- a/pkg/gadgets/top/block-io/tracer/bpf/biotop.bpf.c
+++ b/pkg/gadgets/top/block-io/tracer/bpf/biotop.bpf.c
@@ -8,6 +8,7 @@
 #include "biotop.h"
 #include <gadget/maps.bpf.h>
 #include <gadget/core_fixes.bpf.h>
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 struct {
diff --git a/pkg/gadgets/top/ebpf/piditer/piditer_arm64_bpfel.go b/pkg/gadgets/top/ebpf/piditer/piditer_arm64_bpfel.go
deleted file mode 100644
index a69e9d449..000000000
--- a/pkg/gadgets/top/ebpf/piditer/piditer_arm64_bpfel.go
+++ /dev/null
@@ -1,139 +0,0 @@
-// Code generated by bpf2go; DO NOT EDIT.
-//go:build arm64
-
-package piditer
-
-import (
-	"bytes"
-	_ "embed"
-	"fmt"
-	"io"
-
-	"github.com/cilium/ebpf"
-)
-
-type piditerPidIterEntry struct {
-	Id   uint32
-	Pid  uint32
-	Comm [16]uint8
-}
-
-// loadPiditer returns the embedded CollectionSpec for piditer.
-func loadPiditer() (*ebpf.CollectionSpec, error) {
-	reader := bytes.NewReader(_PiditerBytes)
-	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
-	if err != nil {
-		return nil, fmt.Errorf("can't load piditer: %w", err)
-	}
-
-	return spec, err
-}
-
-// loadPiditerObjects loads piditer and converts it into a struct.
-//
-// The following types are suitable as obj argument:
-//
-//	*piditerObjects
-//	*piditerPrograms
-//	*piditerMaps
-//
-// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
-func loadPiditerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
-	spec, err := loadPiditer()
-	if err != nil {
-		return err
-	}
-
-	return spec.LoadAndAssign(obj, opts)
-}
-
-// piditerSpecs contains maps and programs before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerSpecs struct {
-	piditerProgramSpecs
-	piditerMapSpecs
-	piditerVariableSpecs
-}
-
-// piditerProgramSpecs contains programs before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerProgramSpecs struct {
-	IgTopEbpfIt *ebpf.ProgramSpec `ebpf:"ig_top_ebpf_it"`
-}
-
-// piditerMapSpecs contains maps before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerMapSpecs struct {
-}
-
-// piditerVariableSpecs contains global variables before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerVariableSpecs struct {
-	BpfProgFopsAddr *ebpf.VariableSpec `ebpf:"bpf_prog_fops_addr"`
-	Unused          *ebpf.VariableSpec `ebpf:"unused"`
-}
-
-// piditerObjects contains all objects after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerObjects struct {
-	piditerPrograms
-	piditerMaps
-	piditerVariables
-}
-
-func (o *piditerObjects) Close() error {
-	return _PiditerClose(
-		&o.piditerPrograms,
-		&o.piditerMaps,
-	)
-}
-
-// piditerMaps contains all maps after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerMaps struct {
-}
-
-func (m *piditerMaps) Close() error {
-	return _PiditerClose()
-}
-
-// piditerVariables contains all global variables after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerVariables struct {
-	BpfProgFopsAddr *ebpf.Variable `ebpf:"bpf_prog_fops_addr"`
-	Unused          *ebpf.Variable `ebpf:"unused"`
-}
-
-// piditerPrograms contains all programs after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerPrograms struct {
-	IgTopEbpfIt *ebpf.Program `ebpf:"ig_top_ebpf_it"`
-}
-
-func (p *piditerPrograms) Close() error {
-	return _PiditerClose(
-		p.IgTopEbpfIt,
-	)
-}
-
-func _PiditerClose(closers ...io.Closer) error {
-	for _, closer := range closers {
-		if err := closer.Close(); err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-// Do not access this directly.
-//
-//go:embed piditer_arm64_bpfel.o
-var _PiditerBytes []byte
diff --git a/pkg/gadgets/top/ebpf/piditer/piditer_x86_bpfel.go b/pkg/gadgets/top/ebpf/piditer/piditer_x86_bpfel.go
deleted file mode 100644
index f4d1c2f49..000000000
--- a/pkg/gadgets/top/ebpf/piditer/piditer_x86_bpfel.go
+++ /dev/null
@@ -1,139 +0,0 @@
-// Code generated by bpf2go; DO NOT EDIT.
-//go:build 386 || amd64
-
-package piditer
-
-import (
-	"bytes"
-	_ "embed"
-	"fmt"
-	"io"
-
-	"github.com/cilium/ebpf"
-)
-
-type piditerPidIterEntry struct {
-	Id   uint32
-	Pid  uint32
-	Comm [16]uint8
-}
-
-// loadPiditer returns the embedded CollectionSpec for piditer.
-func loadPiditer() (*ebpf.CollectionSpec, error) {
-	reader := bytes.NewReader(_PiditerBytes)
-	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
-	if err != nil {
-		return nil, fmt.Errorf("can't load piditer: %w", err)
-	}
-
-	return spec, err
-}
-
-// loadPiditerObjects loads piditer and converts it into a struct.
-//
-// The following types are suitable as obj argument:
-//
-//	*piditerObjects
-//	*piditerPrograms
-//	*piditerMaps
-//
-// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
-func loadPiditerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
-	spec, err := loadPiditer()
-	if err != nil {
-		return err
-	}
-
-	return spec.LoadAndAssign(obj, opts)
-}
-
-// piditerSpecs contains maps and programs before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerSpecs struct {
-	piditerProgramSpecs
-	piditerMapSpecs
-	piditerVariableSpecs
-}
-
-// piditerProgramSpecs contains programs before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerProgramSpecs struct {
-	IgTopEbpfIt *ebpf.ProgramSpec `ebpf:"ig_top_ebpf_it"`
-}
-
-// piditerMapSpecs contains maps before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerMapSpecs struct {
-}
-
-// piditerVariableSpecs contains global variables before they are loaded into the kernel.
-//
-// It can be passed ebpf.CollectionSpec.Assign.
-type piditerVariableSpecs struct {
-	BpfProgFopsAddr *ebpf.VariableSpec `ebpf:"bpf_prog_fops_addr"`
-	Unused          *ebpf.VariableSpec `ebpf:"unused"`
-}
-
-// piditerObjects contains all objects after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerObjects struct {
-	piditerPrograms
-	piditerMaps
-	piditerVariables
-}
-
-func (o *piditerObjects) Close() error {
-	return _PiditerClose(
-		&o.piditerPrograms,
-		&o.piditerMaps,
-	)
-}
-
-// piditerMaps contains all maps after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerMaps struct {
-}
-
-func (m *piditerMaps) Close() error {
-	return _PiditerClose()
-}
-
-// piditerVariables contains all global variables after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerVariables struct {
-	BpfProgFopsAddr *ebpf.Variable `ebpf:"bpf_prog_fops_addr"`
-	Unused          *ebpf.Variable `ebpf:"unused"`
-}
-
-// piditerPrograms contains all programs after they have been loaded into the kernel.
-//
-// It can be passed to loadPiditerObjects or ebpf.CollectionSpec.LoadAndAssign.
-type piditerPrograms struct {
-	IgTopEbpfIt *ebpf.Program `ebpf:"ig_top_ebpf_it"`
-}
-
-func (p *piditerPrograms) Close() error {
-	return _PiditerClose(
-		p.IgTopEbpfIt,
-	)
-}
-
-func _PiditerClose(closers ...io.Closer) error {
-	for _, closer := range closers {
-		if err := closer.Close(); err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-// Do not access this directly.
-//
-//go:embed piditer_x86_bpfel.o
-var _PiditerBytes []byte
diff --git a/pkg/gadgets/top/ebpf/tracer/tracer.go b/pkg/gadgets/top/ebpf/tracer/tracer.go
index 5b5b6c80d..55ae60766 100644
--- a/pkg/gadgets/top/ebpf/tracer/tracer.go
+++ b/pkg/gadgets/top/ebpf/tracer/tracer.go
@@ -17,15 +17,10 @@
 package tracer
 
 import (
-	"bufio"
 	"context"
 	"errors"
 	"fmt"
-	"math"
 	"os"
-	"path/filepath"
-	"strconv"
-	"strings"
 	"time"
 
 	"github.com/cilium/ebpf"
@@ -35,9 +30,8 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/columns"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/top"
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/top/ebpf/piditer"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/top/ebpf/types"
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap"
 )
 
 type Config struct {
@@ -58,8 +52,7 @@ type Tracer struct {
 	eventCallback func(*top.Event[types.Stats])
 	done          chan bool
 
-	iter                *piditer.PidIter
-	useFallbackIterator bool
+	processMap *processmap.ProcessMap
 
 	startStats map[string]programStats
 	prevStats  map[string]programStats
@@ -101,16 +94,9 @@ func (t *Tracer) install() error {
 		return err
 	}
 
-	t.useFallbackIterator = false
-
-	// To resolve pids, we will first try to iterate using a bpf
-	// program. If that doesn't work, we will fall back to scanning
-	// all used fds in all processes /proc/$pid/fdinfo/$fd.
-	iter, err := piditer.NewTracer()
+	t.processMap, err = processmap.NewProcessMap()
 	if err != nil {
-		t.useFallbackIterator = true
-	} else {
-		t.iter = iter
+		return fmt.Errorf("creating pidmap: %w", err)
 	}
 
 	return nil
@@ -125,156 +111,33 @@ func (t *Tracer) Stop() {
 func (t *Tracer) close() {
 	close(t.done)
 
-	if t.iter != nil {
-		t.iter.Close()
+	if t.processMap != nil {
+		t.processMap.Close()
 	}
 
 	bpfstats.DisableBPFStats()
 }
 
-func getPidMapFromPids(pids []*piditer.PidIterEntry) map[uint32][]*types.Process {
-	pidmap := make(map[uint32][]*types.Process)
-	for _, e := range pids {
-		if _, ok := pidmap[e.ProgID]; !ok {
-			pidmap[e.ProgID] = make([]*types.Process, 0, 1)
-		}
-		pidmap[e.ProgID] = append(pidmap[e.ProgID], &types.Process{
-			Pid:  e.Pid,
-			Comm: e.Comm,
-		})
-	}
-	return pidmap
-}
-
-func getProgIDFromFile(fn string) (uint32, error) {
-	f, err := os.Open(fn)
-	if err != nil {
-		return 0, err
-	}
-	defer f.Close()
-
-	sc := bufio.NewScanner(f)
-	for sc.Scan() {
-		if strings.HasPrefix(sc.Text(), "prog_id:") {
-			progID, _ := strconv.ParseUint(strings.TrimSpace(strings.Split(sc.Text(), ":")[1]), 10, 32)
-			return uint32(progID), nil
-		}
-	}
-	return 0, os.ErrNotExist
-}
-
-func getPidMapFromProcFs() (map[uint32][]*types.Process, error) {
-	processes, err := os.ReadDir(host.HostProcFs)
-	if err != nil {
-		return nil, err
-	}
-	pidmap := make(map[uint32][]*types.Process)
-	for _, p := range processes {
-		if !p.IsDir() {
-			continue
-		}
-		_, err := strconv.Atoi(p.Name())
-		if err != nil {
-			continue
-		}
-		fdescs, err := os.ReadDir(filepath.Join(host.HostProcFs, p.Name(), "fdinfo"))
-		if err != nil {
-			continue
-		}
-		for _, fd := range fdescs {
-			if progID, err := getProgIDFromFile(filepath.Join(host.HostProcFs, p.Name(), "fdinfo", fd.Name())); err == nil {
-				pid, err := strconv.ParseUint(p.Name(), 10, 32)
-				if err != nil {
-					return nil, err
-				}
-				if pid > math.MaxInt32 {
-					return nil, fmt.Errorf("PID (%d) exceeds math.MaxInt32 (%d)", pid, math.MaxInt32)
-				}
-				if _, ok := pidmap[progID]; !ok {
-					pidmap[progID] = make([]*types.Process, 0, 1)
-				}
-				comm := host.GetProcComm(int(pid))
-				pidmap[progID] = append(pidmap[progID], &types.Process{
-					Pid:  uint32(pid),
-					Comm: strings.TrimSpace(string(comm)),
-				})
-			}
-		}
-	}
-	return pidmap, nil
-}
-
-func getMemoryUsage(m *ebpf.Map) (uint64, error) {
-	fdInfoPath := filepath.Join(host.HostProcFs, "self", "fdinfo", fmt.Sprint(m.FD()))
-	f, err := os.Open(fdInfoPath)
-	if err != nil {
-		return 0, fmt.Errorf("reading fdinfo: %w", err)
-	}
-	defer f.Close()
-
-	sc := bufio.NewScanner(f)
-	for sc.Scan() {
-		if strings.HasPrefix(sc.Text(), "memlock:\t") {
-			lineSplit := strings.Split(sc.Text(), "\t")
-			if len(lineSplit) == 2 {
-				size, err := strconv.ParseUint(lineSplit[1], 10, 64)
-				if err != nil {
-					return 0, fmt.Errorf("reading memlock: %w", err)
-				}
-				return size, nil
-			}
-		}
-	}
-	return 0, fmt.Errorf("finding memlock in fdinfo")
-}
-
 func (t *Tracer) nextStats() ([]*types.Stats, error) {
 	stats := make([]*types.Stats, 0)
 
 	var err error
 	var prog *ebpf.Program
-	var mapData *ebpf.Map
-	var pids []*piditer.PidIterEntry
 	curID := ebpf.ProgramID(0)
 	nextID := ebpf.ProgramID(0)
 
-	curMapID := ebpf.MapID(0)
-	nextMapID := ebpf.MapID(0)
-
 	curStats := make(map[string]programStats)
 
-	mapSizes := make(map[ebpf.MapID]uint64)
+	mapSizes, err := bpfstats.GetMapsMemUsage()
+	if err != nil {
+		return nil, fmt.Errorf("getting map memory usage: %w", err)
+	}
 
 	numOnlineCPUs, err := numcpus.GetOnline()
 	if err != nil {
 		return nil, fmt.Errorf("getting number of online cpu: %w", err)
 	}
 
-	// Get memory usage by maps
-	for {
-		nextMapID, err = ebpf.MapGetNextID(curMapID)
-		if err != nil {
-			if errors.Is(err, os.ErrNotExist) {
-				break
-			}
-			return nil, fmt.Errorf("getting next map ID: %w", err)
-		}
-		if nextMapID <= curMapID {
-			break
-		}
-		curMapID = nextMapID
-		mapData, err = ebpf.NewMapFromID(curMapID)
-		if err != nil {
-			continue
-		}
-
-		mapSizes[curMapID], err = getMemoryUsage(mapData)
-		mapData.Close()
-		if err != nil {
-			return nil, fmt.Errorf("getting memory usage of map ID (%d): %w", curMapID, err)
-		}
-	}
-
 	for {
 		nextID, err = ebpf.ProgramGetNextID(curID)
 		if err != nil {
@@ -368,20 +231,9 @@ func (t *Tracer) nextStats() ([]*types.Stats, error) {
 
 	t.prevStats = curStats
 
-	var processMap map[uint32][]*types.Process
-
-	if !t.useFallbackIterator {
-		pids, err = t.iter.DumpPids()
-		if err != nil {
-			return nil, fmt.Errorf("getting pids for programs using iterator: %w", err)
-		}
-		processMap = getPidMapFromPids(pids)
-	} else {
-		// Fallback...
-		processMap, err = getPidMapFromProcFs()
-		if err != nil {
-			return nil, fmt.Errorf("getting pids for programs using fallback method: %w", err)
-		}
+	processMap, err := t.processMap.Fetch()
+	if err != nil {
+		return nil, fmt.Errorf("getting pidmap: %w", err)
 	}
 
 	for i := range stats {
diff --git a/pkg/gadgets/top/ebpf/types/types.go b/pkg/gadgets/top/ebpf/types/types.go
index a0a89a5e5..94c87041c 100644
--- a/pkg/gadgets/top/ebpf/types/types.go
+++ b/pkg/gadgets/top/ebpf/types/types.go
@@ -24,31 +24,27 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/columns"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/columns/ellipsis"
 	eventtypes "github.com/inspektor-gadget/inspektor-gadget/pkg/types"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap/types"
 )
 
 var SortByDefault = []string{"-runtime", "-runcount"}
 
-type Process struct {
-	Pid  uint32 `json:"pid,omitempty"`
-	Comm string `json:"comm,omitempty"`
-}
-
 type Stats struct {
 	eventtypes.CommonData
-	ProgramID          uint32     `json:"progid" column:"progid"`
-	Type               string     `json:"type,omitempty" column:"type"`
-	Name               string     `json:"name,omitempty" column:"name"`
-	Processes          []*Process `json:"processes,omitempty"`
-	CurrentRuntime     int64      `json:"currentRuntime,omitempty" column:"runtime,order:1001,align:right"`
-	CurrentRunCount    uint64     `json:"currentRunCount,omitempty" column:"runcount,order:1002,width:10"`
-	CumulativeRuntime  int64      `json:"cumulRuntime,omitempty" column:"cumulruntime,order:1003,hide"`
-	CumulativeRunCount uint64     `json:"cumulRunCount,omitempty" column:"cumulruncount,order:1004,hide"`
-	TotalRuntime       int64      `json:"totalRuntime,omitempty" column:"totalruntime,order:1005,align:right,hide"`
-	TotalRunCount      uint64     `json:"totalRunCount,omitempty" column:"totalRunCount,order:1006,align:right,hide"`
-	MapMemory          uint64     `json:"mapMemory,omitempty" column:"mapmemory,order:1007,align:right"`
-	MapCount           uint32     `json:"mapCount,omitempty" column:"mapcount,order:1008"`
-	TotalCpuUsage      float64    `json:"totalCpuUsage,omitempty" column:"totalcpu,order:1009,align:right,hide,precision:4"`
-	PerCpuUsage        float64    `json:"perCpuUsage,omitempty" column:"percpu,order:1010,align:right,hide,precision:4"`
+	ProgramID          uint32          `json:"progid" column:"progid"`
+	Type               string          `json:"type,omitempty" column:"type"`
+	Name               string          `json:"name,omitempty" column:"name"`
+	Processes          []types.Process `json:"processes,omitempty"`
+	CurrentRuntime     int64           `json:"currentRuntime,omitempty" column:"runtime,order:1001,align:right"`
+	CurrentRunCount    uint64          `json:"currentRunCount,omitempty" column:"runcount,order:1002,width:10"`
+	CumulativeRuntime  int64           `json:"cumulRuntime,omitempty" column:"cumulruntime,order:1003,hide"`
+	CumulativeRunCount uint64          `json:"cumulRunCount,omitempty" column:"cumulruncount,order:1004,hide"`
+	TotalRuntime       int64           `json:"totalRuntime,omitempty" column:"totalruntime,order:1005,align:right,hide"`
+	TotalRunCount      uint64          `json:"totalRunCount,omitempty" column:"totalRunCount,order:1006,align:right,hide"`
+	MapMemory          uint64          `json:"mapMemory,omitempty" column:"mapmemory,order:1007,align:right"`
+	MapCount           uint32          `json:"mapCount,omitempty" column:"mapcount,order:1008"`
+	TotalCpuUsage      float64         `json:"totalCpuUsage,omitempty" column:"totalcpu,order:1009,align:right,hide,precision:4"`
+	PerCpuUsage        float64         `json:"perCpuUsage,omitempty" column:"percpu,order:1010,align:right,hide,precision:4"`
 }
 
 func GetColumns() *columns.Columns[Stats] {
diff --git a/pkg/gadgets/top/file/tracer/bpf/filetop.bpf.c b/pkg/gadgets/top/file/tracer/bpf/filetop.bpf.c
index e176e12e1..8a8c3bb06 100644
--- a/pkg/gadgets/top/file/tracer/bpf/filetop.bpf.c
+++ b/pkg/gadgets/top/file/tracer/bpf/filetop.bpf.c
@@ -6,6 +6,7 @@
 #include <bpf/bpf_tracing.h>
 #include "filetop.h"
 #include "stat.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 #define MAX_ENTRIES 10240
diff --git a/pkg/gadgets/top/file/tracer/filetop_arm64_bpfel.o b/pkg/gadgets/top/file/tracer/filetop_arm64_bpfel.o
index 219b16d44..5f52d4a12 100644
Binary files a/pkg/gadgets/top/file/tracer/filetop_arm64_bpfel.o and b/pkg/gadgets/top/file/tracer/filetop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/top/file/tracer/filetop_x86_bpfel.o b/pkg/gadgets/top/file/tracer/filetop_x86_bpfel.o
index 9ff589e44..2fe67f34a 100644
Binary files a/pkg/gadgets/top/file/tracer/filetop_x86_bpfel.o and b/pkg/gadgets/top/file/tracer/filetop_x86_bpfel.o differ
diff --git a/pkg/gadgets/top/tcp/tracer/bpf/tcptop.bpf.c b/pkg/gadgets/top/tcp/tracer/bpf/tcptop.bpf.c
index 52a79ae92..a12fb5d9a 100644
--- a/pkg/gadgets/top/tcp/tracer/bpf/tcptop.bpf.c
+++ b/pkg/gadgets/top/tcp/tracer/bpf/tcptop.bpf.c
@@ -7,6 +7,7 @@
 #include <bpf/bpf_endian.h>
 
 #include "tcptop.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 /* Taken from kernel include/linux/socket.h. */
diff --git a/pkg/gadgets/top/tcp/tracer/tcptop_arm64_bpfel.o b/pkg/gadgets/top/tcp/tracer/tcptop_arm64_bpfel.o
index 756788eb0..60369d581 100644
Binary files a/pkg/gadgets/top/tcp/tracer/tcptop_arm64_bpfel.o and b/pkg/gadgets/top/tcp/tracer/tcptop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/top/tcp/tracer/tcptop_x86_bpfel.o b/pkg/gadgets/top/tcp/tracer/tcptop_x86_bpfel.o
index dd959b01c..c350ae115 100644
Binary files a/pkg/gadgets/top/tcp/tracer/tcptop_x86_bpfel.o and b/pkg/gadgets/top/tcp/tracer/tcptop_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/bind/tracer/bindsnoop_arm64_bpfel.o b/pkg/gadgets/trace/bind/tracer/bindsnoop_arm64_bpfel.o
index 6de186334..89c8af926 100644
Binary files a/pkg/gadgets/trace/bind/tracer/bindsnoop_arm64_bpfel.o and b/pkg/gadgets/trace/bind/tracer/bindsnoop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/bind/tracer/bindsnoop_x86_bpfel.o b/pkg/gadgets/trace/bind/tracer/bindsnoop_x86_bpfel.o
index 1b5ea4d37..528af7c61 100644
Binary files a/pkg/gadgets/trace/bind/tracer/bindsnoop_x86_bpfel.o and b/pkg/gadgets/trace/bind/tracer/bindsnoop_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/bind/tracer/bpf/bindsnoop.bpf.c b/pkg/gadgets/trace/bind/tracer/bpf/bindsnoop.bpf.c
index ae68ab24d..07eba3618 100644
--- a/pkg/gadgets/trace/bind/tracer/bpf/bindsnoop.bpf.c
+++ b/pkg/gadgets/trace/bind/tracer/bpf/bindsnoop.bpf.c
@@ -6,6 +6,7 @@
 #include <bpf/bpf_tracing.h>
 #include <bpf/bpf_endian.h>
 #include "bindsnoop.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 #define MAX_ENTRIES 10240
diff --git a/pkg/gadgets/trace/bind/tracer/tracer.go b/pkg/gadgets/trace/bind/tracer/tracer.go
index 33690eb0b..1c24e9b8b 100644
--- a/pkg/gadgets/trace/bind/tracer/tracer.go
+++ b/pkg/gadgets/trace/bind/tracer/tracer.go
@@ -140,12 +140,12 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching ipv6 kprobe: %w", err)
 	}
 
-	t.reader, err = perf.NewReader(t.objs.bindsnoopMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	t.reader, err = perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 
-	if err := gadgets.FreezeMaps(t.objs.bindsnoopMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/bind/tracer/tracer_test.go b/pkg/gadgets/trace/bind/tracer/tracer_test.go
index 375b2f99a..3a8f75439 100644
--- a/pkg/gadgets/trace/bind/tracer/tracer_test.go
+++ b/pkg/gadgets/trace/bind/tracer/tracer_test.go
@@ -575,11 +575,11 @@ func TestBindTracerMultipleMntNsIDsFilter(t *testing.T) {
 		return expectedEvents[i].mntNsID < expectedEvents[j].mntNsID
 	})
 	sort.Slice(events, func(i, j int) bool {
-		return events[i].WithMountNsID.MountNsID < events[j].WithMountNsID.MountNsID
+		return events[i].MountNsID < events[j].MountNsID
 	})
 
 	for i := 0; i < n-1; i++ {
-		utilstest.Equal(t, expectedEvents[i].mntNsID, events[i].WithMountNsID.MountNsID,
+		utilstest.Equal(t, expectedEvents[i].mntNsID, events[i].MountNsID,
 			"Captured event has bad MountNsID")
 
 		utilstest.Equal(t, expectedEvents[i].port, events[i].Port,
diff --git a/pkg/gadgets/trace/capabilities/tracer/bpf/capable.bpf.c b/pkg/gadgets/trace/capabilities/tracer/bpf/capable.bpf.c
index de0b1e175..1306575d3 100644
--- a/pkg/gadgets/trace/capabilities/tracer/bpf/capable.bpf.c
+++ b/pkg/gadgets/trace/capabilities/tracer/bpf/capable.bpf.c
@@ -10,6 +10,7 @@
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_tracing.h>
 #include "capable.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 // include/linux/security.h
diff --git a/pkg/gadgets/trace/capabilities/tracer/capabilities_arm64_bpfel.o b/pkg/gadgets/trace/capabilities/tracer/capabilities_arm64_bpfel.o
index 655cc318a..fcc9c3bb2 100644
Binary files a/pkg/gadgets/trace/capabilities/tracer/capabilities_arm64_bpfel.o and b/pkg/gadgets/trace/capabilities/tracer/capabilities_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/capabilities/tracer/capabilities_x86_bpfel.o b/pkg/gadgets/trace/capabilities/tracer/capabilities_x86_bpfel.o
index 5a6ae1aed..72d36be7e 100644
Binary files a/pkg/gadgets/trace/capabilities/tracer/capabilities_x86_bpfel.o and b/pkg/gadgets/trace/capabilities/tracer/capabilities_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/capabilities/tracer/tracer.go b/pkg/gadgets/trace/capabilities/tracer/tracer.go
index 67b75e585..4b842df72 100644
--- a/pkg/gadgets/trace/capabilities/tracer/tracer.go
+++ b/pkg/gadgets/trace/capabilities/tracer/tracer.go
@@ -197,13 +197,13 @@ func (t *Tracer) install() error {
 	}
 	t.capExitLink = kretprobe
 
-	reader, err := perf.NewReader(t.objs.capabilitiesMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.capabilitiesMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/capabilities/tracer/tracer_test.go b/pkg/gadgets/trace/capabilities/tracer/tracer_test.go
index 65f465577..d5330cf9b 100644
--- a/pkg/gadgets/trace/capabilities/tracer/tracer_test.go
+++ b/pkg/gadgets/trace/capabilities/tracer/tracer_test.go
@@ -407,11 +407,11 @@ func TestCapabilitiesTracerMultipleMntNsIDsFilter(t *testing.T) {
 		return expectedEvents[i].mntNsID < expectedEvents[j].mntNsID
 	})
 	sort.Slice(events, func(i, j int) bool {
-		return events[i].WithMountNsID.MountNsID < events[j].WithMountNsID.MountNsID
+		return events[i].MountNsID < events[j].MountNsID
 	})
 
 	for i := 0; i < n-1; i++ {
-		utilstest.Equal(t, expectedEvents[i].mntNsID, events[i].WithMountNsID.MountNsID,
+		utilstest.Equal(t, expectedEvents[i].mntNsID, events[i].MountNsID,
 			"Captured event has bad MountNsID")
 
 		utilstest.Equal(t, "NET_BIND_SERVICE", events[i].CapName,
diff --git a/pkg/gadgets/trace/dns/tracer/bpf/dns.c b/pkg/gadgets/trace/dns/tracer/bpf/dns.c
index f3c2ceff6..7aeae5179 100644
--- a/pkg/gadgets/trace/dns/tracer/bpf/dns.c
+++ b/pkg/gadgets/trace/dns/tracer/bpf/dns.c
@@ -9,11 +9,11 @@
 #include <linux/tcp.h>
 #include <linux/types.h>
 #include <linux/udp.h>
-#include <sys/socket.h>
 #include <stdbool.h>
 
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_endian.h>
+#include <bpf/bpf_core_read.h>
 
 #define GADGET_TYPE_NETWORKING
 #include <gadget/sockets-map.h>
@@ -35,6 +35,9 @@ unsigned long long load_word(const void *skb,
 #define PACKET_OUTGOING 0x4
 #endif
 
+#define AF_INET 2 /* Internet IP Protocol */
+#define AF_INET6 10 /* IP version 6 */
+
 #ifndef NEXTHDR_HOP
 #define NEXTHDR_HOP 0 /* Hop-by-hop option header. */
 #define NEXTHDR_TCP 6 /* TCP segment. */
@@ -276,11 +279,34 @@ int ig_trace_dns(struct __sk_buff *skb)
 		event->uid = (__u32)skb_val->uid_gid;
 		event->gid = (__u32)(skb_val->uid_gid >> 32);
 #ifdef WITH_LONG_PATHS
-		bpf_probe_read_kernel_str(&event->cwd, sizeof(event->cwd),
-					  skb_val->cwd);
-		bpf_probe_read_kernel_str(&event->exepath,
-					  sizeof(event->exepath),
-					  skb_val->exepath);
+		if (bpf_core_enum_value_exists(
+			    enum bpf_func_id, BPF_FUNC_probe_read_kernel_str)) {
+			bpf_probe_read_kernel_str(
+				&event->cwd, sizeof(event->cwd), skb_val->cwd);
+			bpf_probe_read_kernel_str(&event->exepath,
+						  sizeof(event->exepath),
+						  skb_val->exepath);
+		} else {
+			if (sizeof(skb_val->cwd) <= sizeof(event->cwd)) {
+				int cwd_len = sizeof(skb_val->cwd);
+				if (bpf_skb_load_bytes(
+					    skb, (unsigned long)skb_val->cwd,
+					    event->cwd, cwd_len) < 0) {
+					return 0;
+				}
+			}
+
+			if (sizeof(skb_val->exepath) <=
+			    sizeof(event->exepath)) {
+				int exepath_len = sizeof(skb_val->exepath);
+				if (bpf_skb_load_bytes(
+					    skb,
+					    (unsigned long)skb_val->exepath,
+					    event->exepath, exepath_len) < 0) {
+					return 0;
+				}
+			}
+		}
 #endif
 	} else {
 		event->mount_ns_id = 0;
diff --git a/pkg/gadgets/trace/dns/tracer/dns_bpfel.o b/pkg/gadgets/trace/dns/tracer/dns_bpfel.o
index 0c409cd22..0cd375d88 100644
Binary files a/pkg/gadgets/trace/dns/tracer/dns_bpfel.o and b/pkg/gadgets/trace/dns/tracer/dns_bpfel.o differ
diff --git a/pkg/gadgets/trace/dns/tracer/dnswithlongpaths_bpfel.o b/pkg/gadgets/trace/dns/tracer/dnswithlongpaths_bpfel.o
index 6e45a30bf..f2d73b977 100644
Binary files a/pkg/gadgets/trace/dns/tracer/dnswithlongpaths_bpfel.o and b/pkg/gadgets/trace/dns/tracer/dnswithlongpaths_bpfel.o differ
diff --git a/pkg/gadgets/trace/dns/tracer/tracer.go b/pkg/gadgets/trace/dns/tracer/tracer.go
index 85dcfaa20..bf909caee 100644
--- a/pkg/gadgets/trace/dns/tracer/tracer.go
+++ b/pkg/gadgets/trace/dns/tracer/tracer.go
@@ -260,7 +260,7 @@ func (t *Tracer) run(ctx context.Context, logger logger.Logger) error {
 	// Start a background thread to garbage collect queries without responses
 	// from the queries map (used to calculate DNS latency).
 	// The goroutine terminates when t.ctx is done.
-	queryMap := t.Tracer.GetMap(BPFQueryMapName)
+	queryMap := t.GetMap(BPFQueryMapName)
 	if queryMap == nil {
 		t.Close()
 		return fmt.Errorf("got nil retrieving DNS query map")
diff --git a/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.bpf.c b/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.bpf.c
index 14a6cf0bd..db955a284 100644
--- a/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.bpf.c
+++ b/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.bpf.c
@@ -6,6 +6,7 @@
 #include <bpf/bpf_tracing.h>
 #endif /* __TARGET_ARCH_arm64 */
 
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 #ifdef WITH_LONG_PATHS
 #include <gadget/filesystem.h>
@@ -223,6 +224,12 @@ int ig_sched_exec(struct trace_event_raw_sched_process_exec *ctx)
 	exe_file = BPF_CORE_READ(task, mm, exe_file);
 	exepath = get_path_str(&exe_file->f_path);
 	bpf_probe_read_kernel_str(event->exepath, GADGET_PATH_MAX, exepath);
+
+	struct file *parent_exe_file =
+		BPF_CORE_READ(task, real_parent, mm, exe_file);
+	char *parent_exepath = get_path_str(&parent_exe_file->f_path);
+	bpf_probe_read_kernel_str(event->parent_exepath, GADGET_PATH_MAX,
+				  parent_exepath);
 #endif
 
 	size_t len = EVENT_SIZE(event);
diff --git a/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.h b/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.h
index 15ce33787..7b3088f1a 100644
--- a/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.h
+++ b/pkg/gadgets/trace/exec/tracer/bpf/execsnoop.h
@@ -34,6 +34,7 @@ struct event {
 	__u8 cwd[GADGET_PATH_MAX];
 	__u8 exepath[GADGET_PATH_MAX];
 	__u8 file[GADGET_PATH_MAX];
+	__u8 parent_exepath[GADGET_PATH_MAX];
 #endif
 	__u8 args[FULL_MAX_ARGS_ARR];
 };
diff --git a/pkg/gadgets/trace/exec/tracer/execsnoop_arm64_bpfel.o b/pkg/gadgets/trace/exec/tracer/execsnoop_arm64_bpfel.o
index 7d10da07b..2841155e4 100644
Binary files a/pkg/gadgets/trace/exec/tracer/execsnoop_arm64_bpfel.o and b/pkg/gadgets/trace/exec/tracer/execsnoop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/exec/tracer/execsnoop_x86_bpfel.o b/pkg/gadgets/trace/exec/tracer/execsnoop_x86_bpfel.o
index 0be807dc9..84fd328db 100644
Binary files a/pkg/gadgets/trace/exec/tracer/execsnoop_x86_bpfel.o and b/pkg/gadgets/trace/exec/tracer/execsnoop_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.go b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.go
index 789e4e5a2..43c21dc8c 100644
--- a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.go
+++ b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.go
@@ -15,28 +15,29 @@ import (
 type execsnoopWithLongPathsBufT struct{ Buf [32768]uint8 }
 
 type execsnoopWithLongPathsEvent struct {
-	MntnsId     uint64
-	Timestamp   uint64
-	Pid         uint32
-	Tid         uint32
-	Ptid        uint32
-	Ppid        uint32
-	Uid         uint32
-	Gid         uint32
-	Loginuid    uint32
-	Sessionid   uint32
-	Retval      int32
-	ArgsCount   int32
-	UpperLayer  bool
-	PupperLayer bool
-	_           [2]byte
-	ArgsSize    uint32
-	Comm        [16]uint8
-	Pcomm       [16]uint8
-	Cwd         [512]uint8
-	Exepath     [512]uint8
-	File        [512]uint8
-	Args        [5120]uint8
+	MntnsId       uint64
+	Timestamp     uint64
+	Pid           uint32
+	Tid           uint32
+	Ptid          uint32
+	Ppid          uint32
+	Uid           uint32
+	Gid           uint32
+	Loginuid      uint32
+	Sessionid     uint32
+	Retval        int32
+	ArgsCount     int32
+	UpperLayer    bool
+	PupperLayer   bool
+	_             [2]byte
+	ArgsSize      uint32
+	Comm          [16]uint8
+	Pcomm         [16]uint8
+	Cwd           [512]uint8
+	Exepath       [512]uint8
+	File          [512]uint8
+	ParentExepath [512]uint8
+	Args          [5120]uint8
 }
 
 // loadExecsnoopWithLongPaths returns the embedded CollectionSpec for execsnoopWithLongPaths.
diff --git a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.o b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.o
index 8c5d54d41..a9c3cf477 100644
Binary files a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.o and b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.go b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.go
index bc278bd92..d8fcd53a1 100644
--- a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.go
+++ b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.go
@@ -15,28 +15,29 @@ import (
 type execsnoopWithLongPathsBufT struct{ Buf [32768]uint8 }
 
 type execsnoopWithLongPathsEvent struct {
-	MntnsId     uint64
-	Timestamp   uint64
-	Pid         uint32
-	Tid         uint32
-	Ptid        uint32
-	Ppid        uint32
-	Uid         uint32
-	Gid         uint32
-	Loginuid    uint32
-	Sessionid   uint32
-	Retval      int32
-	ArgsCount   int32
-	UpperLayer  bool
-	PupperLayer bool
-	_           [2]byte
-	ArgsSize    uint32
-	Comm        [16]uint8
-	Pcomm       [16]uint8
-	Cwd         [512]uint8
-	Exepath     [512]uint8
-	File        [512]uint8
-	Args        [5120]uint8
+	MntnsId       uint64
+	Timestamp     uint64
+	Pid           uint32
+	Tid           uint32
+	Ptid          uint32
+	Ppid          uint32
+	Uid           uint32
+	Gid           uint32
+	Loginuid      uint32
+	Sessionid     uint32
+	Retval        int32
+	ArgsCount     int32
+	UpperLayer    bool
+	PupperLayer   bool
+	_             [2]byte
+	ArgsSize      uint32
+	Comm          [16]uint8
+	Pcomm         [16]uint8
+	Cwd           [512]uint8
+	Exepath       [512]uint8
+	File          [512]uint8
+	ParentExepath [512]uint8
+	Args          [5120]uint8
 }
 
 // loadExecsnoopWithLongPaths returns the embedded CollectionSpec for execsnoopWithLongPaths.
diff --git a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.o b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.o
index 723033d0c..f4a3c1676 100644
Binary files a/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.o and b/pkg/gadgets/trace/exec/tracer/execsnoopwithlongpaths_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/exec/tracer/tracer.go b/pkg/gadgets/trace/exec/tracer/tracer.go
index 3853ebd3a..dac9a685e 100644
--- a/pkg/gadgets/trace/exec/tracer/tracer.go
+++ b/pkg/gadgets/trace/exec/tracer/tracer.go
@@ -59,27 +59,28 @@ type execsnoopEventAbbrev struct {
 
 // needs to be kept in sync with execsnoopWithLongPathsEvent from execsnoopwithlongpaths_bpfel.go without the Args field
 type execsnoopWithLongPathsEventAbbrev struct {
-	MntnsId     uint64
-	Timestamp   uint64
-	Pid         uint32
-	Tid         uint32
-	Ptid        uint32
-	Ppid        uint32
-	Uid         uint32
-	Gid         uint32
-	Loginuid    uint32
-	Sessionid   uint32
-	Retval      int32
-	ArgsCount   int32
-	UpperLayer  bool
-	PupperLayer bool
-	_           [2]byte
-	ArgsSize    uint32
-	Comm        [16]uint8
-	Pcomm       [16]uint8
-	Cwd         [512]uint8
-	Exepath     [512]uint8
-	File        [512]uint8
+	MntnsId       uint64
+	Timestamp     uint64
+	Pid           uint32
+	Tid           uint32
+	Ptid          uint32
+	Ppid          uint32
+	Uid           uint32
+	Gid           uint32
+	Loginuid      uint32
+	Sessionid     uint32
+	Retval        int32
+	ArgsCount     int32
+	UpperLayer    bool
+	PupperLayer   bool
+	_             [2]byte
+	ArgsSize      uint32
+	Comm          [16]uint8
+	Pcomm         [16]uint8
+	Cwd           [512]uint8
+	Exepath       [512]uint8
+	File          [512]uint8
+	ParentExePath [512]uint8
 }
 
 type Config struct {
@@ -192,13 +193,13 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching kprobe security_bprm_check: %w", err)
 	}
 
-	reader, err := perf.NewReader(t.objs.execsnoopMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.execsnoopMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
@@ -259,6 +260,7 @@ func (t *Tracer) run() {
 			event.Cwd = gadgets.FromCString(bpfEventWithLongPaths.Cwd[:])
 			event.ExePath = gadgets.FromCString(bpfEventWithLongPaths.Exepath[:])
 			event.File = gadgets.FromCString(bpfEventWithLongPaths.File[:])
+			event.ParentExePath = gadgets.FromCString(bpfEventWithLongPaths.ParentExePath[:])
 			args = record.RawSample[unsafe.Offsetof(execsnoopWithLongPathsEvent{}.Args):]
 		}
 
diff --git a/pkg/gadgets/trace/exec/tracer/tracer_test.go b/pkg/gadgets/trace/exec/tracer/tracer_test.go
index 781fe4021..64d2bee59 100644
--- a/pkg/gadgets/trace/exec/tracer/tracer_test.go
+++ b/pkg/gadgets/trace/exec/tracer/tracer_test.go
@@ -239,6 +239,9 @@ func TestExecTracer(t *testing.T) {
 				// Depending on the Linux distribution, /bin can be a symlink to /usr/bin
 				exepath := strings.TrimPrefix(events[0].ExePath, "/usr")
 				require.Equal(t, exepath, "/bin/cat", "Event has bad exe path")
+				executable, err := os.Executable()
+				require.NoError(t, err, "Failed to get current executable")
+				require.Equal(t, executable, events[0].ParentExePath)
 			},
 		},
 		"event_failed": {
@@ -416,11 +419,11 @@ func TestExecTracerMultipleMntNsIDsFilter(t *testing.T) {
 		return expectedEvents[i].mntNsID < expectedEvents[j].mntNsID
 	})
 	sort.Slice(events, func(i, j int) bool {
-		return events[i].WithMountNsID.MountNsID < events[j].WithMountNsID.MountNsID
+		return events[i].MountNsID < events[j].MountNsID
 	})
 
 	for i := 0; i < n-1; i++ {
-		require.Equal(t, expectedEvents[i].mntNsID, events[i].WithMountNsID.MountNsID,
+		require.Equal(t, expectedEvents[i].mntNsID, events[i].MountNsID,
 			"Captured event has bad MountNsID")
 
 		require.Equal(t, uint32(expectedEvents[i].catPid), events[i].Pid,
diff --git a/pkg/gadgets/trace/exec/types/types.go b/pkg/gadgets/trace/exec/types/types.go
index ca4b1e193..77354351f 100644
--- a/pkg/gadgets/trace/exec/types/types.go
+++ b/pkg/gadgets/trace/exec/types/types.go
@@ -25,25 +25,26 @@ type Event struct {
 	eventtypes.Event
 	eventtypes.WithMountNsID
 
-	Pid         uint32   `json:"pid,omitempty" column:"pid,template:pid"`
-	Tid         uint32   `json:"tid,omitempty" column:"tid,template:pid"`
-	Ppid        uint32   `json:"ppid,omitempty" column:"ppid,template:pid"`
-	Ptid        uint32   `json:"ptid,omitempty" column:"ptid,template:pid"`
-	Comm        string   `json:"comm,omitempty" column:"comm,template:comm"`
-	Pcomm       string   `json:"pcomm,omitempty" column:"pcomm,template:comm"`
-	Retval      int      `json:"ret,omitempty" column:"ret,width:3,fixed"`
-	Args        []string `json:"args,omitempty" column:"args,width:40"`
-	Uid         uint32   `json:"uid" column:"uid,template:uid,hide"`
-	Username    string   `json:"user,omitempty" column:"user,hide"`
-	Gid         uint32   `json:"gid" column:"gid,template:gid,hide"`
-	Groupname   string   `json:"group,omitempty" column:"group,hide"`
-	UpperLayer  bool     `json:"upperlayer" column:"upperlayer,width:10,fixed,hide"`
-	PupperLayer bool     `json:"pupperlayer" column:"pupperlayer,width:11,fixed,hide"`
-	LoginUid    uint32   `json:"loginuid" column:"loginuid,template:uid,hide"`
-	SessionId   uint32   `json:"sessionid" column:"sessionid,minWidth:10,hide"`
-	Cwd         string   `json:"cwd,omitempty" column:"cwd,width:40" columnTags:"param:paths"`
-	ExePath     string   `json:"exepath,omitempty" column:"exepath,width:40" columnTags:"param:paths"`
-	File        string   `json:"file,omitempty" column:"file,width:40" columnTags:"param:paths"`
+	Pid           uint32   `json:"pid,omitempty" column:"pid,template:pid"`
+	Tid           uint32   `json:"tid,omitempty" column:"tid,template:pid"`
+	Ppid          uint32   `json:"ppid,omitempty" column:"ppid,template:pid"`
+	Ptid          uint32   `json:"ptid,omitempty" column:"ptid,template:pid"`
+	Comm          string   `json:"comm,omitempty" column:"comm,template:comm"`
+	Pcomm         string   `json:"pcomm,omitempty" column:"pcomm,template:comm"`
+	Retval        int      `json:"ret,omitempty" column:"ret,width:3,fixed"`
+	Args          []string `json:"args,omitempty" column:"args,width:40"`
+	Uid           uint32   `json:"uid" column:"uid,template:uid,hide"`
+	Username      string   `json:"user,omitempty" column:"user,hide"`
+	Gid           uint32   `json:"gid" column:"gid,template:gid,hide"`
+	Groupname     string   `json:"group,omitempty" column:"group,hide"`
+	UpperLayer    bool     `json:"upperlayer" column:"upperlayer,width:10,fixed,hide"`
+	PupperLayer   bool     `json:"pupperlayer" column:"pupperlayer,width:11,fixed,hide"`
+	LoginUid      uint32   `json:"loginuid" column:"loginuid,template:uid,hide"`
+	SessionId     uint32   `json:"sessionid" column:"sessionid,minWidth:10,hide"`
+	Cwd           string   `json:"cwd,omitempty" column:"cwd,width:40" columnTags:"param:paths"`
+	ExePath       string   `json:"exepath,omitempty" column:"exepath,width:40" columnTags:"param:paths"`
+	File          string   `json:"file,omitempty" column:"file,width:40" columnTags:"param:paths"`
+	ParentExePath string   `json:"parent_exepath,omitempty" column:"parent_exepath,width:40" columnTags:"param:paths"`
 }
 
 func (e *Event) GetUid() uint32 {
diff --git a/pkg/gadgets/trace/fsslower/tracer/bpf/fsslower.bpf.c b/pkg/gadgets/trace/fsslower/tracer/bpf/fsslower.bpf.c
index 288b36115..7c77b4d9c 100644
--- a/pkg/gadgets/trace/fsslower/tracer/bpf/fsslower.bpf.c
+++ b/pkg/gadgets/trace/fsslower/tracer/bpf/fsslower.bpf.c
@@ -5,6 +5,7 @@
 #include <bpf/bpf_core_read.h>
 #include <bpf/bpf_tracing.h>
 #include "fsslower.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 #define MAX_ENTRIES 8192
diff --git a/pkg/gadgets/trace/fsslower/tracer/fsslower_arm64_bpfel.o b/pkg/gadgets/trace/fsslower/tracer/fsslower_arm64_bpfel.o
index e4a7c080b..6bb431c99 100644
Binary files a/pkg/gadgets/trace/fsslower/tracer/fsslower_arm64_bpfel.o and b/pkg/gadgets/trace/fsslower/tracer/fsslower_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/fsslower/tracer/fsslower_x86_bpfel.o b/pkg/gadgets/trace/fsslower/tracer/fsslower_x86_bpfel.o
index 0b5bed1b2..115c65520 100644
Binary files a/pkg/gadgets/trace/fsslower/tracer/fsslower_x86_bpfel.o and b/pkg/gadgets/trace/fsslower/tracer/fsslower_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/fsslower/tracer/tracer.go b/pkg/gadgets/trace/fsslower/tracer/tracer.go
index ebf797096..95b92dbd5 100644
--- a/pkg/gadgets/trace/fsslower/tracer/tracer.go
+++ b/pkg/gadgets/trace/fsslower/tracer/tracer.go
@@ -235,12 +235,12 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching kretprobe: %w", err)
 	}
 
-	t.reader, err = perf.NewReader(t.objs.fsslowerMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	t.reader, err = perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 
-	if err := gadgets.FreezeMaps(t.objs.fsslowerMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/mount/tracer/bpf/mountsnoop.bpf.c b/pkg/gadgets/trace/mount/tracer/bpf/mountsnoop.bpf.c
index d8a497c80..9355a0a4f 100644
--- a/pkg/gadgets/trace/mount/tracer/bpf/mountsnoop.bpf.c
+++ b/pkg/gadgets/trace/mount/tracer/bpf/mountsnoop.bpf.c
@@ -4,6 +4,7 @@
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_core_read.h>
 #include "mountsnoop.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 #define MAX_ENTRIES 10240
diff --git a/pkg/gadgets/trace/mount/tracer/mountsnoop_bpfel.o b/pkg/gadgets/trace/mount/tracer/mountsnoop_bpfel.o
index dbd9dfe9c..12137ae77 100644
Binary files a/pkg/gadgets/trace/mount/tracer/mountsnoop_bpfel.o and b/pkg/gadgets/trace/mount/tracer/mountsnoop_bpfel.o differ
diff --git a/pkg/gadgets/trace/mount/tracer/tracer.go b/pkg/gadgets/trace/mount/tracer/tracer.go
index 48dcb1617..cff6fc985 100644
--- a/pkg/gadgets/trace/mount/tracer/tracer.go
+++ b/pkg/gadgets/trace/mount/tracer/tracer.go
@@ -120,12 +120,12 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching tracepoint: %w", err)
 	}
 
-	t.reader, err = perf.NewReader(t.objs.mountsnoopMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	t.reader, err = perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 
-	if err := gadgets.FreezeMaps(t.objs.mountsnoopMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/network/tracer/network_bpfel.o b/pkg/gadgets/trace/network/tracer/network_bpfel.o
index 69a762b10..c53a8670f 100644
Binary files a/pkg/gadgets/trace/network/tracer/network_bpfel.o and b/pkg/gadgets/trace/network/tracer/network_bpfel.o differ
diff --git a/pkg/gadgets/trace/oomkill/tracer/bpf/oomkill.bpf.c b/pkg/gadgets/trace/oomkill/tracer/bpf/oomkill.bpf.c
index 1e6036702..684d686d3 100644
--- a/pkg/gadgets/trace/oomkill/tracer/bpf/oomkill.bpf.c
+++ b/pkg/gadgets/trace/oomkill/tracer/bpf/oomkill.bpf.c
@@ -7,6 +7,7 @@
 #include <bpf/bpf_tracing.h>
 
 #include "oomkill.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 // we need this to make sure the compiler doesn't remove our struct
diff --git a/pkg/gadgets/trace/oomkill/tracer/oomkill_arm64_bpfel.o b/pkg/gadgets/trace/oomkill/tracer/oomkill_arm64_bpfel.o
index 10ea5acc7..e7b060672 100644
Binary files a/pkg/gadgets/trace/oomkill/tracer/oomkill_arm64_bpfel.o and b/pkg/gadgets/trace/oomkill/tracer/oomkill_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/oomkill/tracer/oomkill_x86_bpfel.o b/pkg/gadgets/trace/oomkill/tracer/oomkill_x86_bpfel.o
index e0da578c7..ad1301d4a 100644
Binary files a/pkg/gadgets/trace/oomkill/tracer/oomkill_x86_bpfel.o and b/pkg/gadgets/trace/oomkill/tracer/oomkill_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/oomkill/tracer/tracer.go b/pkg/gadgets/trace/oomkill/tracer/tracer.go
index a6071708c..e756bf9c9 100644
--- a/pkg/gadgets/trace/oomkill/tracer/tracer.go
+++ b/pkg/gadgets/trace/oomkill/tracer/tracer.go
@@ -96,13 +96,13 @@ func (t *Tracer) install() error {
 	}
 	t.oomLink = kprobe
 
-	reader, err := perf.NewReader(t.objs.oomkillMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.oomkillMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/open/tracer/bpf/opensnoop.bpf.c b/pkg/gadgets/trace/open/tracer/bpf/opensnoop.bpf.c
index 9aad9b3d7..05a0b5652 100644
--- a/pkg/gadgets/trace/open/tracer/bpf/opensnoop.bpf.c
+++ b/pkg/gadgets/trace/open/tracer/bpf/opensnoop.bpf.c
@@ -4,6 +4,7 @@
 #include <vmlinux.h>
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_core_read.h>
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 #include <gadget/filesystem.h>
 #include "opensnoop.h"
diff --git a/pkg/gadgets/trace/open/tracer/opensnoop_bpfel.o b/pkg/gadgets/trace/open/tracer/opensnoop_bpfel.o
index 769ba3fc4..183de2a71 100644
Binary files a/pkg/gadgets/trace/open/tracer/opensnoop_bpfel.o and b/pkg/gadgets/trace/open/tracer/opensnoop_bpfel.o differ
diff --git a/pkg/gadgets/trace/open/tracer/tracer.go b/pkg/gadgets/trace/open/tracer/tracer.go
index d6048d650..3f88c21b6 100644
--- a/pkg/gadgets/trace/open/tracer/tracer.go
+++ b/pkg/gadgets/trace/open/tracer/tracer.go
@@ -184,13 +184,13 @@ func (t *Tracer) install() error {
 	}
 	t.openAtExitLink = openAtExit
 
-	reader, err := perf.NewReader(t.objs.opensnoopMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.opensnoopMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/open/tracer/tracer_test.go b/pkg/gadgets/trace/open/tracer/tracer_test.go
index 33b49ff92..99c5058d0 100644
--- a/pkg/gadgets/trace/open/tracer/tracer_test.go
+++ b/pkg/gadgets/trace/open/tracer/tracer_test.go
@@ -580,11 +580,11 @@ func TestOpenTracerMultipleMntNsIDsFilter(t *testing.T) {
 		return expectedEvents[i].mntNsID < expectedEvents[j].mntNsID
 	})
 	sort.Slice(events, func(i, j int) bool {
-		return events[i].WithMountNsID.MountNsID < events[j].WithMountNsID.MountNsID
+		return events[i].MountNsID < events[j].MountNsID
 	})
 
 	for i := 0; i < n-1; i++ {
-		utilstest.Equal(t, expectedEvents[i].mntNsID, events[i].WithMountNsID.MountNsID,
+		utilstest.Equal(t, expectedEvents[i].mntNsID, events[i].MountNsID,
 			"Captured event has bad MountNsID")
 
 		utilstest.Equal(t, expectedEvents[i].fd, events[i].Fd,
diff --git a/pkg/gadgets/trace/signal/tracer/bpf/sigsnoop.bpf.c b/pkg/gadgets/trace/signal/tracer/bpf/sigsnoop.bpf.c
index a989c341b..bde86fefa 100644
--- a/pkg/gadgets/trace/signal/tracer/bpf/sigsnoop.bpf.c
+++ b/pkg/gadgets/trace/signal/tracer/bpf/sigsnoop.bpf.c
@@ -4,6 +4,7 @@
 #include <bpf/bpf_core_read.h>
 #include <bpf/bpf_helpers.h>
 #include "sigsnoop.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 #define MAX_ENTRIES 10240
diff --git a/pkg/gadgets/trace/signal/tracer/sigsnoop_bpfel.o b/pkg/gadgets/trace/signal/tracer/sigsnoop_bpfel.o
index 269dd6a22..62a156061 100644
Binary files a/pkg/gadgets/trace/signal/tracer/sigsnoop_bpfel.o and b/pkg/gadgets/trace/signal/tracer/sigsnoop_bpfel.o differ
diff --git a/pkg/gadgets/trace/signal/tracer/tracer.go b/pkg/gadgets/trace/signal/tracer/tracer.go
index 79b0d0f1e..6896b69d8 100644
--- a/pkg/gadgets/trace/signal/tracer/tracer.go
+++ b/pkg/gadgets/trace/signal/tracer/tracer.go
@@ -170,12 +170,12 @@ func (t *Tracer) install() error {
 		}
 	}
 
-	t.reader, err = perf.NewReader(t.objs.sigsnoopMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	t.reader, err = perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 
-	if err := gadgets.FreezeMaps(t.objs.sigsnoopMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/sni/tracer/snisnoop_bpfel.o b/pkg/gadgets/trace/sni/tracer/snisnoop_bpfel.o
index 76dac3f31..001b55310 100644
Binary files a/pkg/gadgets/trace/sni/tracer/snisnoop_bpfel.o and b/pkg/gadgets/trace/sni/tracer/snisnoop_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcp/tracer/bpf/tcptracer.bpf.c b/pkg/gadgets/trace/tcp/tracer/bpf/tcptracer.bpf.c
index e02c4ad1f..69787723e 100644
--- a/pkg/gadgets/trace/tcp/tracer/bpf/tcptracer.bpf.c
+++ b/pkg/gadgets/trace/tcp/tracer/bpf/tcptracer.bpf.c
@@ -10,6 +10,7 @@
 #include <bpf/bpf_tracing.h>
 #include <bpf/bpf_endian.h>
 #include "tcptracer.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 const volatile uid_t filter_uid = -1;
diff --git a/pkg/gadgets/trace/tcp/tracer/tcptracer_arm64_bpfel.o b/pkg/gadgets/trace/tcp/tracer/tcptracer_arm64_bpfel.o
index 9d57412d9..f76058c6f 100644
Binary files a/pkg/gadgets/trace/tcp/tracer/tcptracer_arm64_bpfel.o and b/pkg/gadgets/trace/tcp/tracer/tcptracer_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcp/tracer/tcptracer_x86_bpfel.o b/pkg/gadgets/trace/tcp/tracer/tcptracer_x86_bpfel.o
index a062b437d..29ff365f9 100644
Binary files a/pkg/gadgets/trace/tcp/tracer/tcptracer_x86_bpfel.o and b/pkg/gadgets/trace/tcp/tracer/tcptracer_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcp/tracer/tracer.go b/pkg/gadgets/trace/tcp/tracer/tracer.go
index d020cae96..af0c3f622 100644
--- a/pkg/gadgets/trace/tcp/tracer/tracer.go
+++ b/pkg/gadgets/trace/tcp/tracer/tracer.go
@@ -143,13 +143,13 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching kprobe: %w", err)
 	}
 
-	reader, err := perf.NewReader(t.objs.tcptracerMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.tcptracerMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/tcpconnect/tracer/bpf/tcpconnect.bpf.c b/pkg/gadgets/trace/tcpconnect/tracer/bpf/tcpconnect.bpf.c
index bc5b512e5..3135971b3 100644
--- a/pkg/gadgets/trace/tcpconnect/tracer/bpf/tcpconnect.bpf.c
+++ b/pkg/gadgets/trace/tcpconnect/tracer/bpf/tcpconnect.bpf.c
@@ -10,6 +10,7 @@
 
 #include <gadget/maps.bpf.h>
 #include "tcpconnect.h"
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 
 const volatile int filter_ports[MAX_PORTS];
diff --git a/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_arm64_bpfel.o b/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_arm64_bpfel.o
index cf93d385c..225eea7eb 100644
Binary files a/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_arm64_bpfel.o and b/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_x86_bpfel.o b/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_x86_bpfel.o
index d11697d61..da9d3f56e 100644
Binary files a/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_x86_bpfel.o and b/pkg/gadgets/trace/tcpconnect/tracer/tcpconnect_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcpconnect/tracer/tracer.go b/pkg/gadgets/trace/tcpconnect/tracer/tracer.go
index a039baf0f..1e1da2b69 100644
--- a/pkg/gadgets/trace/tcpconnect/tracer/tracer.go
+++ b/pkg/gadgets/trace/tcpconnect/tracer/tracer.go
@@ -140,13 +140,13 @@ func (t *Tracer) install() error {
 		}
 	}
 
-	reader, err := perf.NewReader(t.objs.tcpconnectMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.tcpconnectMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_arm64_bpfel.o b/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_arm64_bpfel.o
index 921d0e2c9..ef7088855 100644
Binary files a/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_arm64_bpfel.o and b/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_x86_bpfel.o b/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_x86_bpfel.o
index 918efa477..82ad7ee82 100644
Binary files a/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_x86_bpfel.o and b/pkg/gadgets/trace/tcpdrop/tracer/tcpdrop_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcpdrop/tracer/tracer.go b/pkg/gadgets/trace/tcpdrop/tracer/tracer.go
index 26ac551ed..1c072f682 100644
--- a/pkg/gadgets/trace/tcpdrop/tracer/tracer.go
+++ b/pkg/gadgets/trace/tcpdrop/tracer/tracer.go
@@ -142,13 +142,13 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching tracepoint kfree_skb: %w", err)
 	}
 
-	reader, err := perf.NewReader(t.objs.tcpdropMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.tcpdropMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_arm64_bpfel.o b/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_arm64_bpfel.o
index fe627b65a..fff2cc375 100644
Binary files a/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_arm64_bpfel.o and b/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_arm64_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_x86_bpfel.o b/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_x86_bpfel.o
index 6e478bc66..248d3d6c3 100644
Binary files a/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_x86_bpfel.o and b/pkg/gadgets/trace/tcpretrans/tracer/tcpretrans_x86_bpfel.o differ
diff --git a/pkg/gadgets/trace/tcpretrans/tracer/tracer.go b/pkg/gadgets/trace/tcpretrans/tracer/tracer.go
index 1a49d9b1c..b5f360112 100644
--- a/pkg/gadgets/trace/tcpretrans/tracer/tracer.go
+++ b/pkg/gadgets/trace/tcpretrans/tracer/tracer.go
@@ -121,13 +121,13 @@ func (t *Tracer) install() error {
 		return fmt.Errorf("attaching kprobe tcp_send_loss_probe: %w", err)
 	}
 
-	reader, err := perf.NewReader(t.objs.tcpretransMaps.Events, gadgets.PerfBufferPages*os.Getpagesize())
+	reader, err := perf.NewReader(t.objs.Events, gadgets.PerfBufferPages*os.Getpagesize())
 	if err != nil {
 		return fmt.Errorf("creating perf ring buffer: %w", err)
 	}
 	t.reader = reader
 
-	if err := gadgets.FreezeMaps(t.objs.tcpretransMaps.Events); err != nil {
+	if err := gadgets.FreezeMaps(t.objs.Events); err != nil {
 		return err
 	}
 
diff --git a/pkg/gadgets/traceloop/tracer/bpf/traceloop.bpf.c b/pkg/gadgets/traceloop/tracer/bpf/traceloop.bpf.c
index 66cc9b415..6edebfb41 100644
--- a/pkg/gadgets/traceloop/tracer/bpf/traceloop.bpf.c
+++ b/pkg/gadgets/traceloop/tracer/bpf/traceloop.bpf.c
@@ -3,6 +3,7 @@
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_core_read.h>
 #include <bpf/bpf_tracing.h>
+#include <gadget/mntns.h>
 #include <gadget/mntns_filter.h>
 #include "traceloop.h"
 
diff --git a/pkg/gadgets/traceloop/tracer/traceloop_arm64_bpfel.o b/pkg/gadgets/traceloop/tracer/traceloop_arm64_bpfel.o
index 4d68df6bd..e18cd0d1e 100644
Binary files a/pkg/gadgets/traceloop/tracer/traceloop_arm64_bpfel.o and b/pkg/gadgets/traceloop/tracer/traceloop_arm64_bpfel.o differ
diff --git a/pkg/gadgets/traceloop/tracer/traceloop_x86_bpfel.o b/pkg/gadgets/traceloop/tracer/traceloop_x86_bpfel.o
index 86d36a2a7..46fd22fbe 100644
Binary files a/pkg/gadgets/traceloop/tracer/traceloop_x86_bpfel.o and b/pkg/gadgets/traceloop/tracer/traceloop_x86_bpfel.o differ
diff --git a/pkg/gadgets/traceloop/types/types.go b/pkg/gadgets/traceloop/types/types.go
index 06e9c2ec8..230b7cdbc 100644
--- a/pkg/gadgets/traceloop/types/types.go
+++ b/pkg/gadgets/traceloop/types/types.go
@@ -48,25 +48,29 @@ type TraceloopInfo struct {
 	ContainerID   string `json:"containerID,omitempty" column:"containerID,minWidth:12,ellipsis:none"`
 }
 
+func toString(parameters []SyscallParam) string {
+	var sb strings.Builder
+
+	for idx, p := range parameters {
+		value := p.Value
+		if p.Content != nil {
+			value = *p.Content
+		}
+		sb.WriteString(fmt.Sprintf("%s=%s", p.Name, value))
+
+		if idx < len(parameters)-1 {
+			sb.WriteString(", ")
+		}
+	}
+
+	return sb.String()
+}
+
 func GetColumns() *columns.Columns[Event] {
 	cols := columns.MustCreateColumns[Event]()
 
 	cols.SetExtractor("params", func(event *Event) any {
-		var sb strings.Builder
-
-		for idx, p := range event.Parameters {
-			value := p.Value
-			if p.Content != nil {
-				value = *p.Content
-			}
-			sb.WriteString(fmt.Sprintf("%s=%s", p.Name, value))
-
-			if idx < len(event.Parameters)-1 {
-				sb.WriteString(", ")
-			}
-		}
-
-		return sb.String()
+		return toString(event.Parameters)
 	})
 
 	// We hide these fields to gain some places for the parameters.
diff --git a/pkg/gadgettracermanager/gadgettracermanager.go b/pkg/gadgettracermanager/gadgettracermanager.go
index 091473c96..0625f77ef 100644
--- a/pkg/gadgettracermanager/gadgettracermanager.go
+++ b/pkg/gadgettracermanager/gadgettracermanager.go
@@ -26,8 +26,6 @@ import (
 	"github.com/cilium/ebpf/rlimit"
 	log "github.com/sirupsen/logrus"
 
-	ocispec "github.com/opencontainers/runtime-spec/specs-go"
-
 	containercollection "github.com/inspektor-gadget/inspektor-gadget/pkg/container-collection"
 	containerhook "github.com/inspektor-gadget/inspektor-gadget/pkg/container-hook"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
@@ -157,7 +155,7 @@ func (g *GadgetTracerManager) AddContainer(_ context.Context, containerDefinitio
 	if containerDefinition.Id == "" {
 		return nil, fmt.Errorf("container id not set")
 	}
-	if g.ContainerCollection.GetContainer(containerDefinition.Id) != nil {
+	if g.GetContainer(containerDefinition.Id) != nil {
 		return nil, fmt.Errorf("container with id %s already exists", containerDefinition.Id)
 	}
 
@@ -175,6 +173,7 @@ func (g *GadgetTracerManager) AddContainer(_ context.Context, containerDefinitio
 				ContainerName: containerDefinition.Name,
 			},
 		},
+		OciConfig: containerDefinition.OciConfig,
 	}
 	if containerDefinition.LabelsSet {
 		container.K8s.PodLabels = make(map[string]string)
@@ -182,14 +181,6 @@ func (g *GadgetTracerManager) AddContainer(_ context.Context, containerDefinitio
 			container.K8s.PodLabels[l.Key] = l.Value
 		}
 	}
-	if containerDefinition.OciConfig != "" {
-		containerConfig := &ocispec.Spec{}
-		err := json.Unmarshal([]byte(containerDefinition.OciConfig), containerConfig)
-		if err != nil {
-			return nil, fmt.Errorf("unmarshaling container config: %w", err)
-		}
-		container.OciConfig = containerConfig
-	}
 
 	g.ContainerCollection.AddContainer(&container)
 
@@ -204,7 +195,7 @@ func (g *GadgetTracerManager) RemoveContainer(_ context.Context, containerDefini
 		return nil, fmt.Errorf("container Id not set")
 	}
 
-	c := g.ContainerCollection.GetContainer(containerDefinition.Id)
+	c := g.GetContainer(containerDefinition.Id)
 	if c == nil {
 		return nil, fmt.Errorf("unknown container %q", containerDefinition.Id)
 	}
@@ -267,7 +258,7 @@ func NewServer(conf *Conf) (*GadgetTracerManager, error) {
 		opts = append(opts, containercollection.WithOCIConfigEnrichment())
 		opts = append(opts, containercollection.WithCgroupEnrichment())
 		opts = append(opts, containercollection.WithLinuxNamespaceEnrichment())
-		opts = append(opts, containercollection.WithKubernetesEnrichment(g.nodeName, nil))
+		opts = append(opts, containercollection.WithKubernetesEnrichment(g.nodeName))
 		opts = append(opts, containercollection.WithTracerCollection(g.tracerCollection))
 		opts = append(opts, containercollection.WithProcEnrichment())
 	}
@@ -308,7 +299,7 @@ func NewServer(conf *Conf) (*GadgetTracerManager, error) {
 		opts = append(opts, containercollection.WithFallbackPodInformer(g.nodeName))
 	}
 
-	err = g.ContainerCollection.Initialize(opts...)
+	err = g.Initialize(opts...)
 	if err != nil {
 		return nil, err
 	}
diff --git a/pkg/ig-manager/ig-manager.go b/pkg/ig-manager/ig-manager.go
index 3a9f30646..08f2f659a 100644
--- a/pkg/ig-manager/ig-manager.go
+++ b/pkg/ig-manager/ig-manager.go
@@ -50,7 +50,7 @@ func (l *IGManager) ContainersMap() *ebpf.Map {
 
 func (l *IGManager) Dump() string {
 	out := "List of containers:\n"
-	l.ContainerCollection.ContainerRange(func(c *containercollection.Container) {
+	l.ContainerRange(func(c *containercollection.Container) {
 		out += fmt.Sprintf("%+v\n", c)
 	})
 	return out
@@ -109,7 +109,7 @@ func NewManager(runtimes []*containerutilsTypes.RuntimeConfig, additionalOpts []
 		opts = append(warnings, opts...)
 	}
 
-	err = l.ContainerCollection.Initialize(opts...)
+	err = l.Initialize(opts...)
 	if err != nil {
 		return nil, err
 	}
diff --git a/pkg/k8sutil/client.go b/pkg/k8sutil/client.go
index 24d7b4f54..48fc130ef 100644
--- a/pkg/k8sutil/client.go
+++ b/pkg/k8sutil/client.go
@@ -24,14 +24,19 @@ import (
 	"k8s.io/client-go/rest"
 	"k8s.io/client-go/tools/clientcmd"
 	"k8s.io/client-go/util/homedir"
+
+	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
 )
 
-func NewKubeConfig(kubeconfigPath string) (*rest.Config, error) {
+func NewKubeConfig(kubeconfigPath, userAgentComment string) (*rest.Config, error) {
 	var config *rest.Config
 	var err error
 	if kubeconfigPath != "" {
 		// kubeconfig is set explicitly (-kubeconfig flag or $KUBECONFIG variable)
 		config, err = clientcmd.BuildConfigFromFlags("", kubeconfigPath)
+		if err != nil {
+			return nil, err
+		}
 	} else {
 		// kubeconfig from a pod Service Account token
 		config, err = rest.InClusterConfig()
@@ -39,14 +44,22 @@ func NewKubeConfig(kubeconfigPath string) (*rest.Config, error) {
 			// kubeconfig from $HOME/.kube/config
 			if home := homedir.HomeDir(); home != "" {
 				config, err = clientcmd.BuildConfigFromFlags("", filepath.Join(home, ".kube", "config"))
+				if err != nil {
+					return nil, err
+				}
 			}
 		}
 	}
+	config.UserAgent = version.UserAgent()
+	if userAgentComment != "" {
+		config.UserAgent += " (" + userAgentComment + ")"
+	}
+
 	return config, err
 }
 
-func NewClientset(kubeconfigPath string) (*kubernetes.Clientset, error) {
-	config, err := NewKubeConfig(kubeconfigPath)
+func NewClientset(kubeconfigPath, userAgentComment string) (*kubernetes.Clientset, error) {
+	config, err := NewKubeConfig(kubeconfigPath, userAgentComment)
 	if err != nil {
 		return nil, err
 	}
@@ -61,8 +74,8 @@ func NewClientset(kubeconfigPath string) (*kubernetes.Clientset, error) {
 
 // NewClientsetWithProtobuf creates a client to talk to the Kubernetes API
 // server using protobuf encoding.
-func NewClientsetWithProtobuf(kubeconfigPath string) (*kubernetes.Clientset, error) {
-	config, err := NewKubeConfig(kubeconfigPath)
+func NewClientsetWithProtobuf(kubeconfigPath, userAgentComment string) (*kubernetes.Clientset, error) {
+	config, err := NewKubeConfig(kubeconfigPath, userAgentComment)
 	if err != nil {
 		return nil, err
 	}
diff --git a/pkg/kallsyms/kallsyms_test.go b/pkg/kallsyms/kallsyms_test.go
index 5635d5a04..e386170ea 100644
--- a/pkg/kallsyms/kallsyms_test.go
+++ b/pkg/kallsyms/kallsyms_test.go
@@ -189,7 +189,7 @@ func TestRealKAllSymsParsing(t *testing.T) {
 		},
 		{
 			name:           "symbol_from_veth_kmod",
-			symbol:         "veth_init",
+			symbol:         "veth_open",
 			expectedKmod:   "veth",
 			expectedExists: true,
 		},
diff --git a/pkg/metadata/v1/annotations.go b/pkg/metadata/v1/annotations.go
index 2f66ffd0d..03ee0a4a4 100644
--- a/pkg/metadata/v1/annotations.go
+++ b/pkg/metadata/v1/annotations.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -24,9 +24,12 @@ const (
 	ColumnsFixedAnnotation     = "columns.fixed"
 	ColumnsHexAnnotation       = "columns.hex"
 	ColumnsAliasAnnotation     = "columns.alias"
+	ColumnsPrecisionAnnotation = "columns.precision"
 
 	DescriptionAnnotation = "description"
 	TemplateAnnotation    = "template"
+
+	ValueOneOfAnnotation = "value.one-of"
 )
 
 var AnnotationsTemplates = map[string]map[string]string{
@@ -132,12 +135,17 @@ var AnnotationsTemplates = map[string]map[string]string{
 		ColumnsMaxWidthAnnotation: "52",
 	},
 	"syscall": {
+		DescriptionAnnotation:     "Syscall",
 		ColumnsWidthAnnotation:    "18",
 		ColumnsMaxWidthAnnotation: "28",
 	},
 	"errorString": {
 		ColumnsWidthAnnotation: "12",
 	},
+	"user_stack": {
+		DescriptionAnnotation:   "User stack trace",
+		ColumnsHiddenAnnotation: "true",
+	},
 }
 
 func ApplyAnnotationsTemplate(templateAnn string, dst map[string]string) bool {
diff --git a/pkg/metrics/metrics.go b/pkg/metrics/metrics.go
new file mode 100644
index 000000000..13cbdb61f
--- /dev/null
+++ b/pkg/metrics/metrics.go
@@ -0,0 +1,512 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Package metrics provides a singleton metrics provider that can be used
+// throughout the application to register metrics.
+//
+// This package implements a proxy for the OpenTelemetry metric.Meter interface
+// that forwards operations to one or more registered metric.MeterProvider instances.
+// It allows registering and unregistering providers at runtime, and ensures that
+// all metrics are properly registered with new providers and removed when providers
+// are unregistered.
+//
+// The package supports all standard OpenTelemetry metric types:
+// - Int64Counter and Float64Counter
+// - Int64Histogram and Float64Histogram
+// - Int64Gauge and Float64Gauge
+// - Int64UpDownCounter and Float64UpDownCounter
+//
+// Usage:
+//
+//	import sdkmetric "go.opentelemetry.io/otel/sdk/metric"
+//	...
+//
+//	// Register a provider
+//	provider := sdkmetric.NewMeterProvider(...)
+//	err := metrics.RegisterProvider(provider)
+//	if err != nil {
+//	    // Handle error
+//	}
+//
+//	// Create a counter
+//	counter, err := metrics.Int64Counter("my_counter")
+//	if err != nil {
+//	    // Handle error
+//	}
+//
+//	// Add a value to the counter
+//	counter.Add(ctx, 1)
+//
+//	// Unregister a provider when done
+//	metrics.UnregisterProvider(provider)
+package metrics
+
+import (
+	"context"
+	"errors"
+	"fmt"
+	"sync"
+
+	"go.opentelemetry.io/otel/metric"
+
+	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
+)
+
+// Proxy is a singleton that provides access to metrics and forwards
+// operations to all registered meter providers. It implements the OpenTelemetry
+// metric.Meter interface by proxying operations to the underlying providers.
+//
+// The Proxy maintains a registry of all metrics that have been created, so that
+// when a new provider is registered, all existing metrics can be registered with
+// the new provider. When a provider is unregistered, all metrics associated with
+// that provider are removed.
+//
+// Thread safety is ensured by using a read-write mutex for all operations.
+type Proxy struct {
+	mu sync.RWMutex
+
+	// providers is a map of registered metric.MeterProvider instances to their meters
+	providers map[metric.MeterProvider]metric.Meter
+
+	// registeredMetrics tracks all metrics that have been created, so they can be
+	// registered with new providers
+	registeredMetrics []metricRegistration
+
+	// Track all created metric wrappers so we can remove provider references when
+	// a provider is unregistered
+	int64Counters         []*int64Counter
+	float64Counters       []*float64Counter
+	int64Histograms       []*int64Histogram
+	float64Histograms     []*float64Histogram
+	int64Gauges           []*int64Gauge
+	float64Gauges         []*float64Gauge
+	int64UpDownCounters   []*int64UpDownCounter
+	float64UpDownCounters []*float64UpDownCounter
+}
+
+// metricRegistration represents a metric that has been registered
+type metricRegistration struct {
+	creator func(provider metric.MeterProvider, meter metric.Meter) error
+}
+
+// global is the singleton instance of Proxy
+var global = sync.OnceValue(func() *Proxy {
+	return &Proxy{
+		providers:             make(map[metric.MeterProvider]metric.Meter),
+		registeredMetrics:     make([]metricRegistration, 0),
+		int64Counters:         make([]*int64Counter, 0),
+		float64Counters:       make([]*float64Counter, 0),
+		int64Histograms:       make([]*int64Histogram, 0),
+		float64Histograms:     make([]*float64Histogram, 0),
+		int64Gauges:           make([]*int64Gauge, 0),
+		float64Gauges:         make([]*float64Gauge, 0),
+		int64UpDownCounters:   make([]*int64UpDownCounter, 0),
+		float64UpDownCounters: make([]*float64UpDownCounter, 0),
+	}
+})
+
+// RegisterProvider registers a new provider with the global instance
+func RegisterProvider(provider metric.MeterProvider) error {
+	return global().RegisterProvider(provider)
+}
+
+// UnregisterProvider unregisters a provider from the global instance
+func UnregisterProvider(provider metric.MeterProvider) {
+	global().UnregisterProvider(provider)
+}
+
+// Int64Counter registers a new counter on the global instance
+func Int64Counter(name string, options ...metric.Int64CounterOption) (metric.Int64Counter, error) {
+	return global().Int64Counter(name, options...)
+}
+
+// Float64Counter registers a new counter on the global instance
+func Float64Counter(name string, options ...metric.Float64CounterOption) (metric.Float64Counter, error) {
+	return global().Float64Counter(name, options...)
+}
+
+// Int64Histogram registers a new histogram on the global instance
+func Int64Histogram(name string, options ...metric.Int64HistogramOption) (metric.Int64Histogram, error) {
+	return global().Int64Histogram(name, options...)
+}
+
+// Float64Histogram registers a new histogram on the global instance
+func Float64Histogram(name string, options ...metric.Float64HistogramOption) (metric.Float64Histogram, error) {
+	return global().Float64Histogram(name, options...)
+}
+
+// Int64Gauge registers a new gauge on the global instance
+func Int64Gauge(name string, options ...metric.Int64GaugeOption) (metric.Int64Gauge, error) {
+	return global().Int64Gauge(name, options...)
+}
+
+// Float64Gauge registers a new gauge on the global instance
+func Float64Gauge(name string, options ...metric.Float64GaugeOption) (metric.Float64Gauge, error) {
+	return global().Float64Gauge(name, options...)
+}
+
+// Int64UpDownCounter registers a new updown counter on the global instance
+func Int64UpDownCounter(name string, options ...metric.Int64UpDownCounterOption) (metric.Int64UpDownCounter, error) {
+	return global().Int64UpDownCounter(name, options...)
+}
+
+// Float64UpDownCounter registers a new updown counter on the global instance
+func Float64UpDownCounter(name string, options ...metric.Float64UpDownCounterOption) (metric.Float64UpDownCounter, error) {
+	return global().Float64UpDownCounter(name, options...)
+}
+
+// RegisterProvider registers a new metric.MeterProvider with the given name
+func (r *Proxy) RegisterProvider(provider metric.MeterProvider) error {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	var err error
+
+	if _, ok := r.providers[provider]; ok {
+		return fmt.Errorf("metric provider already registered")
+	}
+
+	meter := provider.Meter("inspektor-gadget", metric.WithInstrumentationVersion(version.Version().String()))
+
+	r.providers[provider] = meter
+
+	// Register all existing metrics with the new provider
+	for _, reg := range r.registeredMetrics {
+		err = errors.Join(err, reg.creator(provider, meter))
+	}
+
+	return err
+}
+
+// UnregisterProvider removes a metric.MeterProvider with the given name
+// and removes all meters/metrics associated with it
+func (r *Proxy) UnregisterProvider(provider metric.MeterProvider) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Remove the provider from the map
+	delete(r.providers, provider)
+
+	// Remove all metrics associated with this provider
+	for _, counter := range r.int64Counters {
+		delete(counter.counters, provider)
+	}
+	for _, counter := range r.float64Counters {
+		delete(counter.counters, provider)
+	}
+	for _, histogram := range r.int64Histograms {
+		delete(histogram.histograms, provider)
+	}
+	for _, histogram := range r.float64Histograms {
+		delete(histogram.histograms, provider)
+	}
+	for _, gauge := range r.int64Gauges {
+		delete(gauge.gauges, provider)
+	}
+	for _, gauge := range r.float64Gauges {
+		delete(gauge.gauges, provider)
+	}
+	for _, counter := range r.int64UpDownCounters {
+		delete(counter.counters, provider)
+	}
+	for _, counter := range r.float64UpDownCounters {
+		delete(counter.counters, provider)
+	}
+}
+
+func (r *Proxy) registerMetrics(creator func(provider metric.MeterProvider, meter metric.Meter) error) error {
+	reg := metricRegistration{
+		creator: creator,
+	}
+	r.registeredMetrics = append(r.registeredMetrics, reg)
+
+	var err error
+	for provider, meter := range r.providers {
+		err = errors.Join(err, reg.creator(provider, meter))
+	}
+	return err
+}
+
+// Int64Counter creates a new Int64Counter and registers it with all providers
+func (r *Proxy) Int64Counter(name string, options ...metric.Int64CounterOption) (metric.Int64Counter, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a counter that forwards to all providers
+	counter := &int64Counter{
+		p:        r,
+		counters: make(map[metric.MeterProvider]metric.Int64Counter),
+	}
+
+	// Add the counter to the list of counters
+	r.int64Counters = append(r.int64Counters, counter)
+	return counter, r.registerMetrics(metricCreator(name, metric.Meter.Int64Counter, counter.counters, options...))
+}
+
+// Float64Counter creates a new float64Counter and registers it with all providers
+func (r *Proxy) Float64Counter(name string, options ...metric.Float64CounterOption) (metric.Float64Counter, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a counter that forwards to all providers
+	counter := &float64Counter{
+		p:        r,
+		counters: make(map[metric.MeterProvider]metric.Float64Counter),
+	}
+
+	// Add the counter to the list of counters
+	r.float64Counters = append(r.float64Counters, counter)
+
+	return counter, r.registerMetrics(metricCreator(name, metric.Meter.Float64Counter, counter.counters, options...))
+}
+
+// Int64Histogram creates a new int64Histogram and registers it with all providers
+func (r *Proxy) Int64Histogram(name string, options ...metric.Int64HistogramOption) (metric.Int64Histogram, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a histogram that forwards to all providers
+	histogram := &int64Histogram{
+		p:          r,
+		histograms: make(map[metric.MeterProvider]metric.Int64Histogram),
+	}
+
+	// Add the histogram to the list of histograms
+	r.int64Histograms = append(r.int64Histograms, histogram)
+	return histogram, r.registerMetrics(metricCreator(name, metric.Meter.Int64Histogram, histogram.histograms, options...))
+}
+
+// Float64Histogram creates a new float64Histogram and registers it with all providers
+func (r *Proxy) Float64Histogram(name string, options ...metric.Float64HistogramOption) (metric.Float64Histogram, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a histogram that forwards to all providers
+	histogram := &float64Histogram{
+		p:          r,
+		histograms: make(map[metric.MeterProvider]metric.Float64Histogram),
+	}
+
+	// Add the histogram to the list of histograms
+	r.float64Histograms = append(r.float64Histograms, histogram)
+	return histogram, r.registerMetrics(metricCreator(name, metric.Meter.Float64Histogram, histogram.histograms, options...))
+}
+
+// Int64Gauge creates a new Int64Gauge and registers it with all providers
+func (r *Proxy) Int64Gauge(name string, options ...metric.Int64GaugeOption) (metric.Int64Gauge, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a gauge that forwards to all providers
+	gauge := &int64Gauge{
+		p:      r,
+		gauges: make(map[metric.MeterProvider]metric.Int64Gauge),
+	}
+
+	// Add the gauge to the list of gauges
+	r.int64Gauges = append(r.int64Gauges, gauge)
+	return gauge, r.registerMetrics(metricCreator(name, metric.Meter.Int64Gauge, gauge.gauges, options...))
+}
+
+// Float64Gauge creates a new Float64Gauge and registers it with all providers
+func (r *Proxy) Float64Gauge(name string, options ...metric.Float64GaugeOption) (metric.Float64Gauge, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a gauge that forwards to all providers
+	gauge := &float64Gauge{
+		p:      r,
+		gauges: make(map[metric.MeterProvider]metric.Float64Gauge),
+	}
+
+	// Add the gauge to the list of gauges
+	r.float64Gauges = append(r.float64Gauges, gauge)
+	return gauge, r.registerMetrics(metricCreator(name, metric.Meter.Float64Gauge, gauge.gauges, options...))
+}
+
+// Int64UpDownCounter creates a new Int64UpDownCounter and registers it with all providers
+func (r *Proxy) Int64UpDownCounter(name string, options ...metric.Int64UpDownCounterOption) (metric.Int64UpDownCounter, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a counter that forwards to all providers
+	counter := &int64UpDownCounter{
+		p:        r,
+		counters: make(map[metric.MeterProvider]metric.Int64UpDownCounter),
+	}
+
+	// Add the counter to the list of counters
+	r.int64UpDownCounters = append(r.int64UpDownCounters, counter)
+	return counter, r.registerMetrics(metricCreator(name, metric.Meter.Int64UpDownCounter, counter.counters, options...))
+}
+
+// Float64UpDownCounter creates a new Float64UpDownCounter and registers it with all providers
+func (r *Proxy) Float64UpDownCounter(name string, options ...metric.Float64UpDownCounterOption) (metric.Float64UpDownCounter, error) {
+	r.mu.Lock()
+	defer r.mu.Unlock()
+
+	// Create a counter that forwards to all providers
+	counter := &float64UpDownCounter{
+		p:        r,
+		counters: make(map[metric.MeterProvider]metric.Float64UpDownCounter),
+	}
+
+	// Add the counter to the list of counters
+	r.float64UpDownCounters = append(r.float64UpDownCounters, counter)
+	return counter, r.registerMetrics(metricCreator(name, metric.Meter.Float64UpDownCounter, counter.counters, options...))
+}
+
+// int64Counter forwards Add calls to all underlying counters
+type int64Counter struct {
+	metric.Int64Counter
+	p        *Proxy
+	counters map[metric.MeterProvider]metric.Int64Counter
+}
+
+// Add adds the given value to all underlying counters
+func (c *int64Counter) Add(ctx context.Context, value int64, options ...metric.AddOption) {
+	c.p.mu.RLock()
+	defer c.p.mu.RUnlock()
+	for _, counter := range c.counters {
+		counter.Add(ctx, value, options...)
+	}
+}
+
+// float64Counter forwards Add calls to all underlying counters
+type float64Counter struct {
+	metric.Float64Counter
+	p        *Proxy
+	counters map[metric.MeterProvider]metric.Float64Counter
+}
+
+// Add adds the given value to all underlying counters
+func (c *float64Counter) Add(ctx context.Context, value float64, options ...metric.AddOption) {
+	c.p.mu.RLock()
+	defer c.p.mu.RUnlock()
+	for _, counter := range c.counters {
+		counter.Add(ctx, value, options...)
+	}
+}
+
+// int64Histogram forwards Record calls to all underlying histograms
+type int64Histogram struct {
+	metric.Int64Histogram
+	p          *Proxy
+	histograms map[metric.MeterProvider]metric.Int64Histogram
+}
+
+// Record records the given value to all underlying histograms
+func (h *int64Histogram) Record(ctx context.Context, value int64, options ...metric.RecordOption) {
+	h.p.mu.RLock()
+	defer h.p.mu.RUnlock()
+	for _, histogram := range h.histograms {
+		histogram.Record(ctx, value, options...)
+	}
+}
+
+// float64Histogram forwards Record calls to all underlying histograms
+type float64Histogram struct {
+	metric.Float64Histogram
+	p          *Proxy
+	histograms map[metric.MeterProvider]metric.Float64Histogram
+}
+
+// Record records the given value to all underlying histograms
+func (h *float64Histogram) Record(ctx context.Context, value float64, options ...metric.RecordOption) {
+	h.p.mu.RLock()
+	defer h.p.mu.RUnlock()
+	for _, histogram := range h.histograms {
+		histogram.Record(ctx, value, options...)
+	}
+}
+
+// int64Gauge forwards operations to all underlying gauges
+type int64Gauge struct {
+	metric.Int64Gauge
+	p      *Proxy
+	gauges map[metric.MeterProvider]metric.Int64Gauge
+}
+
+// Add adds the given value to all underlying gauges
+func (g *int64Gauge) Add(ctx context.Context, value int64, options ...metric.RecordOption) {
+	g.p.mu.RLock()
+	defer g.p.mu.RUnlock()
+	for _, gauge := range g.gauges {
+		gauge.Record(ctx, value, options...)
+	}
+}
+
+// float64Gauge forwards operations to all underlying gauges
+type float64Gauge struct {
+	metric.Float64Gauge
+	p      *Proxy
+	gauges map[metric.MeterProvider]metric.Float64Gauge
+}
+
+// Add adds the given value to all underlying gauges
+func (g *float64Gauge) Add(ctx context.Context, value float64, options ...metric.RecordOption) {
+	g.p.mu.RLock()
+	defer g.p.mu.RUnlock()
+	for _, gauge := range g.gauges {
+		gauge.Record(ctx, value, options...)
+	}
+}
+
+// int64UpDownCounter forwards Add calls to all underlying updown counters
+type int64UpDownCounter struct {
+	metric.Int64UpDownCounter
+	p        *Proxy
+	counters map[metric.MeterProvider]metric.Int64UpDownCounter
+}
+
+// Add adds the given value to all underlying updown counters
+func (c *int64UpDownCounter) Add(ctx context.Context, value int64, options ...metric.AddOption) {
+	c.p.mu.RLock()
+	defer c.p.mu.RUnlock()
+	for _, counter := range c.counters {
+		counter.Add(ctx, value, options...)
+	}
+}
+
+// float64UpDownCounter forwards Add calls to all underlying updown counters
+type float64UpDownCounter struct {
+	metric.Float64UpDownCounter
+	p        *Proxy
+	counters map[metric.MeterProvider]metric.Float64UpDownCounter
+}
+
+// Add adds the given value to all underlying updown counters
+func (c *float64UpDownCounter) Add(ctx context.Context, value float64, options ...metric.AddOption) {
+	c.p.mu.RLock()
+	defer c.p.mu.RUnlock()
+	for _, counter := range c.counters {
+		counter.Add(ctx, value, options...)
+	}
+}
+
+func metricCreator[T any, U any](
+	name string,
+	inst func(metric.Meter, string, ...U) (T, error),
+	registry map[metric.MeterProvider]T,
+	options ...U,
+) func(provider metric.MeterProvider, meter metric.Meter) error {
+	return func(provider metric.MeterProvider, meter metric.Meter) error {
+		m, err := inst(meter, name, options...)
+		if err != nil {
+			return err
+		}
+		registry[provider] = m
+		return nil
+	}
+}
diff --git a/pkg/metrics/metrics_test.go b/pkg/metrics/metrics_test.go
new file mode 100644
index 000000000..6c0c533a5
--- /dev/null
+++ b/pkg/metrics/metrics_test.go
@@ -0,0 +1,289 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package metrics
+
+import (
+	"context"
+	"testing"
+
+	"github.com/stretchr/testify/require"
+	"go.opentelemetry.io/otel/metric/noop"
+)
+
+// TestProxy tests the Proxy functionality
+func TestProxy(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create a counter
+	counter, err := proxy.Int64Counter("test_counter")
+	require.NoError(t, err)
+	require.NotNil(t, counter)
+
+	// Add a value to the counter (should not panic even with no providers)
+	counter.Add(context.Background(), 1)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err, "Failed to register provider")
+
+	// Create another counter
+	counter2, err := proxy.Int64Counter("test_counter2")
+	require.NoError(t, err)
+	require.NotNil(t, counter2)
+
+	// Add a value to the counter
+	counter2.Add(context.Background(), 2)
+
+	// Check that the counter has metrics for the provider
+	c2 := counter2.(*int64Counter)
+	require.Len(t, c2.counters, 1)
+
+	// Try to register the same provider again (should fail)
+	err = proxy.RegisterProvider(provider)
+	require.Error(t, err, "Expected error when registering the same provider twice")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the counter no longer has metrics for the provider
+	require.Len(t, c2.counters, 0)
+
+	// Add a value to the counter (should not panic)
+	counter2.Add(context.Background(), 3)
+}
+
+// TestHistogram tests the histogram functionality
+func TestHistogram(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create a histogram
+	histogram, err := proxy.Int64Histogram("test_histogram")
+	require.NoError(t, err)
+	require.NotNil(t, histogram)
+
+	// Record a value to the histogram (should not panic even with no providers)
+	histogram.Record(context.Background(), 1)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err)
+
+	// Create another histogram
+	histogram2, err := proxy.Int64Histogram("test_histogram2")
+	require.NoError(t, err)
+	require.NotNil(t, histogram2)
+
+	// Record a value to the histogram
+	histogram2.Record(context.Background(), 2)
+
+	// Check that the histogram has metrics for the provider
+	h2 := histogram2.(*int64Histogram)
+	require.Len(t, h2.histograms, 1, "Expected histogram2 to have 1 histogram")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the histogram no longer has metrics for the provider
+	require.Len(t, h2.histograms, 0, "Expected histogram2 to have 0 histograms after unregistering provider")
+
+	// Record a value to the histogram (should not panic)
+	histogram2.Record(context.Background(), 3)
+}
+
+// TestInt64Counter tests the Int64Counter functionality
+func TestInt64Counter(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create a counter
+	counter, err := proxy.Int64Counter("test_int64_counter")
+	require.NoError(t, err)
+	require.NotNil(t, counter)
+
+	// Add a value to the counter (should not panic even with no providers)
+	counter.Add(context.Background(), 1)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err)
+
+	// Create another counter
+	counter2, err := proxy.Int64Counter("test_int64_counter2")
+	require.NoError(t, err)
+	require.NotNil(t, counter2)
+
+	// Add a value to the counter
+	counter2.Add(context.Background(), 2)
+
+	// Check that the counter has metrics for the provider
+	c2 := counter2.(*int64Counter)
+	require.Len(t, c2.counters, 1, "Expected counter2 to have 1 counter")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the counter no longer has metrics for the provider
+	require.Len(t, c2.counters, 0)
+
+	// Add a value to the counter (should not panic)
+	counter2.Add(context.Background(), 3)
+}
+
+// TestFloat64Counter tests the Float64Counter functionality
+func TestFloat64Counter(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create a counter
+	counter, err := proxy.Float64Counter("test_float64_counter")
+	require.NoError(t, err)
+	require.NotNil(t, counter)
+
+	// Add a value to the counter (should not panic even with no providers)
+	counter.Add(context.Background(), 1.5)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err)
+
+	// Create another counter
+	counter2, err := proxy.Float64Counter("test_float64_counter2")
+	require.NoError(t, err)
+	require.NotNil(t, counter2)
+
+	// Add a value to the counter
+	counter2.Add(context.Background(), 2.5)
+
+	// Check that the counter has metrics for the provider
+	c2 := counter2.(*float64Counter)
+	require.Len(t, c2.counters, 1, "Expected counter2 to have 1 counter")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the counter no longer has metrics for the provider
+	require.Len(t, c2.counters, 0)
+
+	// Add a value to the counter (should not panic)
+	counter2.Add(context.Background(), 3.5)
+}
+
+// TestInt64Gauge tests the Int64Gauge functionality
+func TestInt64Gauge(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create a gauge
+	gauge, err := proxy.Int64Gauge("test_int64_gauge")
+	require.NoError(t, err)
+	require.NotNil(t, gauge)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err)
+
+	// Create another gauge
+	gauge2, err := proxy.Int64Gauge("test_int64_gauge2")
+	require.NoError(t, err)
+	require.NotNil(t, gauge2)
+
+	// Check that the gauge has metrics for the provider
+	g2 := gauge2.(*int64Gauge)
+	require.Len(t, g2.gauges, 1, "Expected gauge2 to have 1 gauge")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the gauge no longer has metrics for the provider
+	require.Len(t, g2.gauges, 0, "Expected gauge2 to have 0 gauges after unregistering provider")
+}
+
+// TestFloat64Gauge tests the Float64Gauge functionality
+func TestFloat64Gauge(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create a gauge
+	gauge, err := proxy.Float64Gauge("test_float64_gauge")
+	require.NoError(t, err)
+	require.NotNil(t, gauge)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err)
+
+	// Create another gauge
+	gauge2, err := proxy.Float64Gauge("test_float64_gauge2")
+	require.NoError(t, err)
+	require.NotNil(t, gauge2)
+
+	// Check that the gauge has metrics for the provider
+	g2 := gauge2.(*float64Gauge)
+	require.Len(t, g2.gauges, 1, "Expected gauge2 to have 1 gauge")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the gauge no longer has metrics for the provider
+	require.Len(t, g2.gauges, 0, "Expected gauge2 to have 0 gauges after unregistering provider")
+}
+
+// TestUpDownCounter tests the updown counter functionality
+func TestUpDownCounter(t *testing.T) {
+	// Get the proxy
+	proxy := global()
+
+	// Create an updown counter
+	counter, err := proxy.Int64UpDownCounter("test_updown_counter")
+	require.NoError(t, err)
+	require.NotNil(t, counter)
+
+	// Add a value to the counter (should not panic even with no providers)
+	counter.Add(context.Background(), 1)
+
+	// Register a provider
+	provider := noop.NewMeterProvider()
+	err = proxy.RegisterProvider(provider)
+	require.NoError(t, err)
+
+	// Create another updown counter
+	counter2, err := proxy.Int64UpDownCounter("test_updown_counter2")
+	require.NoError(t, err)
+	require.NotNil(t, counter2)
+
+	// Add a value to the counter
+	counter2.Add(context.Background(), 2)
+
+	// Check that the counter has metrics for the provider
+	c2 := counter2.(*int64UpDownCounter)
+	require.Len(t, c2.counters, 1, "Expected counter2 to have 1 counter")
+
+	// Unregister the provider
+	proxy.UnregisterProvider(provider)
+
+	// Check that the counter no longer has metrics for the provider
+	require.Len(t, c2.counters, 0)
+
+	// Add a value to the counter (should not panic)
+	counter2.Add(context.Background(), 3)
+}
diff --git a/pkg/oci/build_metadata.go b/pkg/oci/build_metadata.go
index 07c0d9ec0..0117cb6e2 100644
--- a/pkg/oci/build_metadata.go
+++ b/pkg/oci/build_metadata.go
@@ -77,10 +77,7 @@ func validateMetadataFile(ctx context.Context, opts *BuildGadgetImageOpts) error
 	}
 
 	spec, err := getAnySpec(opts)
-	if err != nil {
-		if errors.Is(err, os.ErrNotExist) {
-			return nil
-		}
+	if err != nil && !errors.Is(err, os.ErrNotExist) {
 		return fmt.Errorf("loading spec: %w", err)
 	}
 
diff --git a/pkg/oci/oci.go b/pkg/oci/oci.go
index f9e610fbb..0868096d1 100644
--- a/pkg/oci/oci.go
+++ b/pkg/oci/oci.go
@@ -1,4 +1,4 @@
-// Copyright 2023-2024 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -400,6 +400,10 @@ func ImportGadgetImages(ctx context.Context, srcFile string) ([]string, error) {
 		return nil
 	})
 
+	if err := ociStore.saveIndexWithLock(); err != nil {
+		return nil, err
+	}
+
 	return ret, err
 }
 
@@ -432,7 +436,7 @@ func tarFolderToFile(src, filePath string, headerTime time.Time) error {
 		header.ChangeTime = headerTime
 
 		// update the name to correctly reflect the desired destination when untaring
-		header.Name = strings.TrimPrefix(strings.Replace(file, src, "", -1), string(filepath.Separator))
+		header.Name = strings.TrimPrefix(strings.ReplaceAll(file, src, ""), string(filepath.Separator))
 
 		if err := tw.WriteHeader(header); err != nil {
 			return err
diff --git a/pkg/operators/cli/clioperator.go b/pkg/operators/cli/clioperator.go
index 1cbf8ee02..c410fbb75 100644
--- a/pkg/operators/cli/clioperator.go
+++ b/pkg/operators/cli/clioperator.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@ package clioperator
 
 import (
 	"fmt"
+	"io"
 	"os"
 	"slices"
 	"sort"
@@ -123,12 +124,9 @@ func getNamesFromFields(fields []*api.Field) []string {
 func (o *cliOperatorInstance) ExtraParams(gadgetCtx operators.GadgetContext) api.Params {
 	dataSources := gadgetCtx.GetDataSources()
 
-	nameDS := false
+	nameDS := len(dataSources) > 1
 
 	// if we have multiple DataSources, we need to prefix the list of fields with the DataSource's name
-	if len(dataSources) > 1 {
-		nameDS = true
-	}
 
 	fieldsDefaultValues := make([]string, 0, len(dataSources))
 	fieldsDescriptions := make([]string, 0, len(dataSources)+1)
@@ -180,6 +178,9 @@ func (o *cliOperatorInstance) ExtraParams(gadgetCtx operators.GadgetContext) api
 			if desc, ok := f.Annotations[metadatav1.DescriptionAnnotation]; ok {
 				fmt.Fprintf(&sb, "      %s\n", desc)
 			}
+			if oneOf, ok := f.Annotations[metadatav1.ValueOneOfAnnotation]; ok {
+				fmt.Fprintf(&sb, "      One of: %s\n", oneOf)
+			}
 		}
 		fieldsDescriptions = append(fieldsDescriptions, sb.String())
 
@@ -334,11 +335,7 @@ func (o *cliOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error
 			}
 			ds.Subscribe(func(ds datasource.DataSource, data datasource.Data) error {
 				before()
-				for _, f := range ds.Accessors(false) {
-					if s, err := f.String(data); err == nil {
-						fmt.Print(s)
-					}
-				}
+				defaultDataFn(ds, data, os.Stdout)
 				return nil
 			}, Priority)
 		case ModeNone:
@@ -391,6 +388,7 @@ func (o *cliOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error
 					handler(datasource.NewDataTuple(ds, data))
 					return nil
 				}, Priority)
+
 			case datasource.TypeArray:
 				// print the header before only for gadgets that will clean the
 				// screen later on, otherwise it could be printed multiple
@@ -440,13 +438,7 @@ func (o *cliOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error
 				// For the time being, this uses a slow approach to marshal to YAML, by first
 				// converting to JSON and then to YAML. This should get a dedicated formatter sooner or later.
 				ds.Subscribe(func(ds datasource.DataSource, data datasource.Data) error {
-					yml, err := yaml.JSONToYAML(jsonFormatter.Marshal(data))
-					if err != nil {
-						return fmt.Errorf("serializing yaml: %w", err)
-					}
-					fmt.Println("---")
-					fmt.Print(string(yml))
-					return nil
+					return yamlDataFn(ds, data, jsonFormatter, os.Stdout)
 				}, Priority)
 				continue
 			}
@@ -454,20 +446,47 @@ func (o *cliOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error
 			switch ds.Type() {
 			case datasource.TypeSingle:
 				ds.Subscribe(func(ds datasource.DataSource, data datasource.Data) error {
-					fmt.Println(string(jsonFormatter.Marshal(data)))
+					jsonSingleDataFn(ds, data, jsonFormatter, os.Stdout)
 					return nil
 				}, Priority)
 			case datasource.TypeArray:
 				ds.SubscribeArray(func(ds datasource.DataSource, dataArray datasource.DataArray) error {
-					fmt.Println(string(jsonFormatter.MarshalArray(dataArray)))
+					jsonArrayDataFn(ds, dataArray, jsonFormatter, os.Stdout)
 					return nil
 				}, Priority)
 			}
 		}
+
 	}
 	return nil
 }
 
+func defaultDataFn(ds datasource.DataSource, data datasource.Data, w io.Writer) {
+	for _, f := range ds.Accessors(false) {
+		if s, err := f.String(data); err == nil {
+			fmt.Fprint(w, s)
+		}
+	}
+}
+
+func yamlDataFn(ds datasource.DataSource, data datasource.Data, jsonFormatter *json.Formatter, w io.Writer) error {
+	yml, err := yaml.JSONToYAML(jsonFormatter.Marshal(data))
+	if err != nil {
+		return fmt.Errorf("serializing yaml: %w", err)
+	}
+	fmt.Fprintln(w, "---")
+	fmt.Fprint(w, string(yml))
+	return nil
+}
+
+func jsonSingleDataFn(ds datasource.DataSource, data datasource.Data, jsonFormatter *json.Formatter, w io.Writer) {
+	fmt.Fprintln(w, string(jsonFormatter.Marshal(data)))
+}
+
+func jsonArrayDataFn(ds datasource.DataSource, dataArray datasource.DataArray, jsonFormatter *json.Formatter, w io.Writer) {
+	fmt.Fprintln(w, string(jsonFormatter.MarshalArray(dataArray)))
+}
+
 func (o *cliOperatorInstance) Start(gadgetCtx operators.GadgetContext) error {
 	return nil
 }
diff --git a/pkg/operators/cli/clioperator_test.go b/pkg/operators/cli/clioperator_test.go
new file mode 100644
index 000000000..76865fbf0
--- /dev/null
+++ b/pkg/operators/cli/clioperator_test.go
@@ -0,0 +1,484 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package clioperator
+
+import (
+	"bytes"
+	"fmt"
+	"strings"
+	"testing"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource/formatters/json"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+)
+
+func TestCliOperators(t *testing.T) {
+	type testCase struct {
+		name            string
+		inputVals       []string
+		expectedDefault string
+		expectedYaml    string
+		expectedJson    string
+	}
+	testCases := []testCase{
+		{
+			name:            "Single field with value",
+			inputVals:       []string{"hello"},
+			expectedDefault: "hello",
+			expectedYaml: `---
+			test0: hello
+			`,
+			expectedJson: `{
+			"test0":"hello"
+			}`,
+		},
+		{
+			name:            "Multiple fields with values",
+			inputVals:       []string{"foo", "bar", "baz"},
+			expectedDefault: "foobarbaz",
+			expectedYaml: `---
+			test0: foo
+			test1: bar
+			test2: baz
+			`,
+			expectedJson: `{
+			"test0":"foo",
+			"test1":"bar",
+			"test2":"baz"
+			}`,
+		},
+		{
+			name:            "Empty value in field",
+			inputVals:       []string{"value1", "", "value2"},
+			expectedDefault: "value1value2",
+			expectedYaml: `---
+			test0: value1
+			test1: ""
+			test2: value2
+			`,
+			expectedJson: `{
+			"test0":"value1",
+			"test1":"",
+			"test2":"value2"
+			}`,
+		},
+		{
+			name:            "All fields empty",
+			inputVals:       []string{"", "", ""},
+			expectedDefault: "",
+			expectedYaml: `---
+			test0: ""
+			test1: ""
+			test2: ""
+			`,
+			expectedJson: `{
+				"test0":"",
+				"test1":"",
+				"test2":""
+			}`,
+		},
+		{
+			name:            "Numbers",
+			inputVals:       []string{"123", "456", "789"},
+			expectedDefault: "123456789",
+			expectedYaml: `---
+			test0: "123"
+			test1: "456"
+			test2: "789"
+			`,
+			expectedJson: `{
+				"test0":"123",
+				"test1":"456",
+				"test2":"789"
+			}`,
+		},
+	}
+
+	for _, tc := range testCases {
+		for _, mode := range []string{"default", "yaml", "json"} {
+			t.Run(tc.name+mode, func(t *testing.T) {
+				ds, _ := datasource.New(datasource.TypeSingle, "test")
+				var fas []datasource.FieldAccessor
+				for i := range tc.inputVals {
+					fa, err := ds.AddField(fmt.Sprintf("test%d", i), api.Kind_String)
+					require.NoError(t, err)
+					require.NotNil(t, fa)
+					fas = append(fas, fa)
+				}
+				data, _ := ds.NewPacketSingle()
+
+				for i, fa := range fas {
+					require.Greater(t, len(tc.inputVals), i)
+					err := fa.PutString(data, tc.inputVals[i])
+					require.NoError(t, err)
+				}
+				var buf bytes.Buffer
+				switch mode {
+				case "default":
+					defaultDataFn(ds, data, &buf)
+					assert.Equal(t, tc.expectedDefault, buf.String())
+				case "yaml":
+					jsonFormatter, _ := json.New(ds,
+						json.WithShowAll(true),
+						json.WithArray(true),
+					)
+					yamlDataFn(ds, data, jsonFormatter, &buf)
+					assert.Equal(t, strings.ReplaceAll(tc.expectedYaml, "\t", ""), buf.String())
+				case "json":
+					jsonFormatter, _ := json.New(ds,
+						json.WithShowAll(true),
+					)
+					jsonSingleDataFn(ds, data, jsonFormatter, &buf)
+					assert.Equal(t, removeNewLineAndTabs(tc.expectedJson), buf.String())
+
+				default:
+					t.Errorf("Unknown mode: %s", mode)
+				}
+			})
+		}
+	}
+}
+
+func TestNestedValues(t *testing.T) {
+	type testCase struct {
+		name         string
+		nestedValues [][]string
+		expectedJson string
+		expectedYaml string
+	}
+
+	testCases := []testCase{
+		{
+			name: "Single field with nested values",
+			nestedValues: [][]string{
+				{"value1", "value2"},
+			},
+			expectedJson: `{
+				"test0":{
+					"nested0":"value1",
+					"nested1":"value2"
+				}
+			}
+			`,
+			expectedYaml: `---
+			test0:
+			  nested0: value1
+			  nested1: value2
+			`,
+		},
+		{
+			name: "Multiple fields with varying nested values",
+			nestedValues: [][]string{
+				{"first1", "first2"},
+				{"second1", "second2", "second3"},
+			},
+			expectedJson: `{
+				"test0":{
+					"nested0":"first1",
+					"nested1":"first2"
+				},
+				"test1":{
+					"nested0":"second1",
+					"nested1":"second2",
+					"nested2":"second3"
+				}
+			}`,
+			expectedYaml: `---
+			test0:
+			  nested0: first1
+			  nested1: first2
+			test1:
+			  nested0: second1
+			  nested1: second2
+			  nested2: second3
+			`,
+		},
+	}
+
+	for _, tc := range testCases {
+		for _, mode := range []string{"yaml", "json"} {
+			t.Run(tc.name+mode, func(t *testing.T) {
+				ds, _ := datasource.New(datasource.TypeSingle, "test")
+				var fas []datasource.FieldAccessor
+				var nestedFas [][]datasource.FieldAccessor
+				for i := range tc.nestedValues {
+					fa, err := ds.AddField(fmt.Sprintf("test%d", i), api.Kind_String)
+					require.NoError(t, err)
+					require.NotNil(t, fa)
+					fas = append(fas, fa)
+					var nestedFasForThisField []datasource.FieldAccessor
+					for j := range tc.nestedValues[i] {
+						nestedFa, err := fa.AddSubField(fmt.Sprintf("nested%d", j), api.Kind_String)
+						require.NoError(t, err)
+						require.NotNil(t, nestedFa)
+						nestedFasForThisField = append(nestedFasForThisField, nestedFa)
+
+					}
+					nestedFas = append(nestedFas, nestedFasForThisField)
+				}
+				data, _ := ds.NewPacketSingle()
+				for i, fa := range fas {
+					fa.PutString(data, tc.nestedValues[i][0])
+					for j, nestedFa := range nestedFas[i] {
+						err := nestedFa.PutString(data, tc.nestedValues[i][j])
+						require.NoError(t, err)
+					}
+				}
+				var buf bytes.Buffer
+				switch mode {
+				case "yaml":
+					jsonFormatter, _ := json.New(ds,
+						json.WithShowAll(true),
+						json.WithArray(true),
+					)
+					yamlDataFn(ds, data, jsonFormatter, &buf)
+					assert.Equal(t, strings.ReplaceAll(tc.expectedYaml, "\t", ""), buf.String())
+				case "json":
+					jsonFormatter, _ := json.New(ds,
+						json.WithShowAll(true),
+					)
+					jsonSingleDataFn(ds, data, jsonFormatter, &buf)
+					assert.Equal(t, removeNewLineAndTabs(tc.expectedJson), buf.String())
+				}
+			})
+		}
+	}
+}
+
+func TestJsonArray(t *testing.T) {
+	type testCase struct {
+		name      string
+		inputVals []string
+		expected  string
+	}
+	testCases := []testCase{
+		{
+			name:      "Single field with value",
+			inputVals: []string{"hello", "world"},
+			expected: `[
+		{
+			"test0":"hello",
+			"test1":""
+		},
+		{
+			"test0":"",
+			"test1":"world"
+		}
+	]`,
+		},
+		{
+			name:      "Single field with a long string",
+			inputVals: []string{"this is a very long string that goes beyond the usual length for testing purposes"},
+			expected: `[
+		{
+			"test0":"this is a very long string that goes beyond the usual length for testing purposes"
+		}
+	]`,
+		},
+		{
+			name:      "Empty field",
+			inputVals: []string{""},
+			expected: `[
+		{
+			"test0":""
+		}
+	]`,
+		},
+		{
+			name:      "More fields than values",
+			inputVals: []string{"one", "two"},
+			expected: `[
+		{
+			"test0":"one",
+			"test1":""
+		},
+		{
+			"test0":"",
+			"test1":"two"
+		}
+	]`,
+		},
+		{
+			name:      "Empty input values",
+			inputVals: []string{},
+			expected: `[
+	]`,
+		},
+		{
+			name:      "Large number of fields",
+			inputVals: []string{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"},
+			expected: `[
+		{
+			"test0":"a",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"b",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"c",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"d",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"e",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"f",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"g",
+			"test7":"",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"h",
+			"test8":"",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"i",
+			"test9":""
+		},
+		{
+			"test0":"",
+			"test1":"",
+			"test2":"",
+			"test3":"",
+			"test4":"",
+			"test5":"",
+			"test6":"",
+			"test7":"",
+			"test8":"",
+			"test9":"j"
+		}
+	]`,
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			ds, _ := datasource.New(datasource.TypeArray, "test")
+			var fas []datasource.FieldAccessor
+			for i := range tc.inputVals {
+				fa, err := ds.AddField(fmt.Sprintf("test%d", i), api.Kind_String)
+				require.NoError(t, err)
+				require.NotNil(t, fa)
+				fas = append(fas, fa)
+			}
+			data, _ := ds.NewPacketArray()
+
+			for i, fa := range fas {
+				data.Append(data.New())
+				err := fa.PutString(data.Get(data.Len()-1), tc.inputVals[i])
+				require.NoError(t, err)
+
+			}
+			var buf bytes.Buffer
+			jsonFormatter, _ := json.New(ds,
+				json.WithShowAll(true),
+				json.WithArray(true),
+			)
+			jsonArrayDataFn(ds, data, jsonFormatter, &buf)
+			assert.Equal(t, removeNewLineAndTabs(tc.expected), buf.String())
+		})
+	}
+}
+
+func removeNewLineAndTabs(s string) string {
+	s = strings.ReplaceAll(s, "\n", "")
+	s = strings.ReplaceAll(s, "\t", "")
+	return s + "\n"
+}
diff --git a/pkg/operators/combiner/combiner.go b/pkg/operators/combiner/combiner.go
index 6ca4b6dfe..ab7fb59b4 100644
--- a/pkg/operators/combiner/combiner.go
+++ b/pkg/operators/combiner/combiner.go
@@ -24,6 +24,7 @@ package combiner
 import (
 	"errors"
 	"fmt"
+	"strconv"
 	"time"
 
 	"google.golang.org/protobuf/proto"
@@ -61,16 +62,24 @@ func (o *combinerOperator) InstanceParams() api.Params {
 	return nil
 }
 
-func getFetchAnnotation(ds datasource.DataSource) (time.Duration, error) {
+func getFetchAnnotations(ds datasource.DataSource) (time.Duration, int, error) {
 	intervalAnn, ok := ds.Annotations()[api.FetchIntervalAnnotation]
 	if !ok {
-		return 0, errors.New("missing fetch interval annotation")
+		return 0, 0, errors.New("missing fetch interval annotation")
 	}
 	fetchInterval, err := time.ParseDuration(intervalAnn)
 	if err != nil {
-		return 0, fmt.Errorf("parsing fetch interval annotation to duration: %w", err)
+		return 0, 0, fmt.Errorf("parsing fetch interval annotation to duration: %w", err)
 	}
-	return fetchInterval, nil
+	countAnn, ok := ds.Annotations()[api.FetchCountAnnotation]
+	if !ok {
+		return 0, 0, errors.New("missing fetch count annotation")
+	}
+	fetchCount, err := strconv.Atoi(countAnn)
+	if err != nil {
+		return 0, 0, fmt.Errorf("parsing fetch count annotation to int: %w", err)
+	}
+	return fetchInterval, fetchCount, nil
 }
 
 func (o *combinerOperator) InstantiateDataOperator(gadgetCtx operators.GadgetContext, paramValues api.ParamValues) (operators.DataOperatorInstance, error) {
@@ -92,16 +101,38 @@ func (o *combinerOperator) InstantiateDataOperator(gadgetCtx operators.GadgetCon
 	configs := make(map[datasource.DataSource]*combinerConfig)
 	for _, ds := range gadgetCtx.GetDataSources() {
 		if ds.Type() == datasource.TypeArray {
-			interval, err := getFetchAnnotation(ds)
+			interval, count, err := getFetchAnnotations(ds)
 			if err != nil {
 				return nil, fmt.Errorf("getting fetch annotation for ds %s: %w", ds.Name(), err)
 			}
 
+			// Disable original data source to avoid other operators subscribing to it
+			ds.Unreference()
+
+			// Register a new data source that will emit the combined data
+			combinedDs, err := gadgetCtx.RegisterDataSource(
+				datasource.TypeArray,
+				fmt.Sprintf("%s-%s", DataSourcePrefix, ds.Name()),
+			)
+			if err != nil {
+				return nil, fmt.Errorf("registering combiner data source for %s: %w", ds.Name(), err)
+			}
+
+			gadgetCtx.Logger().Debugf("combiner: registered ds %q", combinedDs.Name())
+
+			// Use the same fields and annotations as the original data source
+			ds.CopyFieldsTo(combinedDs)
+			for k, v := range ds.Annotations() {
+				combinedDs.AddAnnotation(k, v)
+			}
+
 			configs[ds] = &combinerConfig{
 				// TODO: What happen if we receive more than one packet for the same
 				// target? We should probably have a way to handle this case.
-				packetBuf: make(chan datasource.PacketArray, targets),
-				interval:  interval,
+				packetBuf:  make(chan datasource.PacketArray, targets),
+				interval:   interval,
+				combinedDs: combinedDs,
+				count:      count,
 			}
 		}
 	}
@@ -125,8 +156,14 @@ type combinerConfig struct {
 	// Interval to wait for data before emitting the combined data
 	interval time.Duration
 
+	// Count of how many events are expected
+	count int
+
 	// Buffer to send data to the combiner data source
 	packetBuf chan datasource.PacketArray
+
+	// The new combined data source
+	combinedDs datasource.DataSource
 }
 
 type combinerOperatorInstance struct {
@@ -171,11 +208,14 @@ func (o *combinerOperatorInstance) forwardData(
 	var c <-chan time.Time
 
 	if config.interval == 0 {
-		// Define a maximum waiting time for data from all targets
+		// If count is 0, wait until the user stops the gadget, otherwise wait for
+		// 5 seconds
 		// TODO: Make it configurable?
-		timeout := time.NewTimer(5 * time.Second)
-		defer timeout.Stop()
-		c = timeout.C
+		if config.count != 0 {
+			timeout := time.NewTimer(5 * time.Second)
+			c = timeout.C
+			defer timeout.Stop()
+		}
 	} else {
 		// Even if we receive data from all targets, we emit the combined data
 		// only after the requested interval
@@ -247,27 +287,7 @@ func (o *combinerOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) e
 	o.done = make(chan struct{})
 
 	for ds, config := range o.configs {
-		// Disable original data source to avoid other operators subscribing to it
-		ds.Unreference()
-
-		// Register a new data source that will emit the combined data
-		combinedDs, err := gadgetCtx.RegisterDataSource(
-			datasource.TypeArray,
-			fmt.Sprintf("%s-%s", DataSourcePrefix, ds.Name()),
-		)
-		if err != nil {
-			return fmt.Errorf("registering combiner data source for %s: %w", ds.Name(), err)
-		}
-
-		gadgetCtx.Logger().Debugf("combiner: registered ds %q", combinedDs.Name())
-
-		// Use the same fields and annotations as the original data source
-		ds.CopyFieldsTo(combinedDs)
-		for k, v := range ds.Annotations() {
-			combinedDs.AddAnnotation(k, v)
-		}
-
-		go o.forwardData(gadgetCtx, config, combinedDs)
+		go o.forwardData(gadgetCtx, config, config.combinedDs)
 
 		gadgetCtx.Logger().Debugf("combiner: subscribing to %q", ds.Name())
 
@@ -276,7 +296,7 @@ func (o *combinerOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) e
 			// released once the callback returns. Use Marshal/Unmarshal to
 			// create a deep copy.
 			b, _ := proto.Marshal(packet.Raw())
-			pArray, err := combinedDs.NewPacketArrayFromRaw(b)
+			pArray, err := config.combinedDs.NewPacketArrayFromRaw(b)
 			if err != nil {
 				return fmt.Errorf("creating packet array from raw: %w", err)
 			}
diff --git a/pkg/operators/common/common_test.go b/pkg/operators/common/common_test.go
new file mode 100644
index 000000000..299764a19
--- /dev/null
+++ b/pkg/operators/common/common_test.go
@@ -0,0 +1,364 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package common
+
+import (
+	"bytes"
+	"testing"
+	"time"
+
+	"github.com/sirupsen/logrus"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+	v1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/client-go/kubernetes/fake"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/cachedmap"
+)
+
+func TestStartIncrementsUseCount(t *testing.T) {
+	fakeClientSet := fake.NewSimpleClientset()
+	cache := &inventoryCache{
+		clientset: fakeClientSet,
+	}
+
+	require.Equal(t, 0, cache.useCount)
+
+	cache.Start()
+	require.Equal(t, 1, cache.useCount)
+
+	cache.Start()
+	require.Equal(t, 2, cache.useCount)
+
+	cache.Stop()
+	require.Equal(t, 1, cache.useCount)
+
+	cache.Stop()
+	require.Equal(t, 0, cache.useCount)
+
+	// Verify resources are cleaned up after last Stop
+	assert.Nil(t, cache.factory)
+	assert.Nil(t, cache.pods)
+}
+
+func TestInventoryCacheAdd(t *testing.T) {
+	type addTestCase struct {
+		testName      string
+		kind          string
+		initialObj    any
+		expectedName  string
+		expectedIP    string
+		ok            bool
+		expectedError string
+	}
+
+	testCases := []addTestCase{
+		{
+			testName:     "Add valid Pod with IP",
+			kind:         "pod",
+			initialObj:   constructPod("test-pod", "default", "1.2.3.4"),
+			expectedName: "test-pod",
+			expectedIP:   "1.2.3.4",
+			ok:           true,
+		},
+		{
+			testName:     "Add valid Service with ClusterIP",
+			kind:         "svc",
+			initialObj:   constructService("test-svc", "default", "10.0.0.1"),
+			expectedName: "test-svc",
+			expectedIP:   "10.0.0.1",
+			ok:           true,
+		},
+		{
+			testName:     "Add Pod with no IP",
+			kind:         "pod",
+			initialObj:   constructPod("no-ip-pod", "default", ""),
+			expectedName: "no-ip-pod",
+			expectedIP:   "",
+			ok:           true,
+		},
+		{
+			testName:     "Add Service with no ClusterIP",
+			kind:         "svc",
+			initialObj:   constructService("no-ip-svc", "default", ""),
+			expectedName: "no-ip-svc",
+			expectedIP:   "",
+			ok:           true,
+		},
+		{
+			testName: "Add Pod with invalid key",
+			kind:     "pod",
+			// Create a pod with no metadata to trigger a key error.
+			initialObj:    &v1.Pod{},
+			expectedError: "OnAdd: empty key for pod",
+			ok:            false,
+		},
+		{
+			testName:      "Add unknown object",
+			kind:          "unknown",
+			initialObj:    "not a valid object",
+			expectedError: "OnAdd: unknown object type:",
+			ok:            false,
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.testName, func(t *testing.T) {
+			// Prepare the cache with all maps.
+			cache := &inventoryCache{
+				pods:     cachedmap.NewCachedMap[string, *SlimPod](time.Second),
+				podsByIp: cachedmap.NewCachedMap[string, *SlimPod](time.Second),
+				svcs:     cachedmap.NewCachedMap[string, *SlimService](time.Second),
+				svcsByIp: cachedmap.NewCachedMap[string, *SlimService](time.Second),
+			}
+
+			// If we expect an error, capture log output.
+			if !tc.ok {
+				var logBuffer bytes.Buffer
+				origOut := logrus.StandardLogger().Out
+				logrus.SetOutput(&logBuffer)
+				defer logrus.SetOutput(origOut)
+
+				cache.OnAdd(tc.initialObj, false)
+				logContent := logBuffer.String()
+				assert.Contains(t, logContent, tc.expectedError)
+				return
+			}
+
+			// Otherwise, perform the addition.
+			cache.OnAdd(tc.initialObj, false)
+
+			// Verify results based on kind.
+			switch tc.kind {
+			case "pod":
+				retrieved := cache.GetPodByName("default", tc.expectedName)
+				require.NotNil(t, retrieved, "expected pod to be added")
+				assert.Equal(t, tc.expectedName, retrieved.Name)
+				if tc.expectedIP != "" {
+					retrievedByIP := cache.GetPodByIp(tc.expectedIP)
+					require.NotNil(t, retrievedByIP, "expected pod to be retrievable by IP")
+					assert.Equal(t, tc.expectedName, retrievedByIP.Name)
+				}
+			case "svc":
+				retrieved := cache.GetSvcByName("default", tc.expectedName)
+				require.NotNil(t, retrieved, "expected service to be added")
+				assert.Equal(t, tc.expectedName, retrieved.Name)
+				if tc.expectedIP != "" {
+					retrievedByIP := cache.GetSvcByIp(tc.expectedIP)
+					require.NotNil(t, retrievedByIP, "expected service to be retrievable by IP")
+					assert.Equal(t, tc.expectedName, retrievedByIP.Name)
+				}
+			}
+		})
+	}
+}
+
+func TestInventoryCacheUpdate(t *testing.T) {
+	type updateTestCase struct {
+		testName      string
+		kind          string
+		initialObj    any
+		updatedObj    any
+		expectedIP    string
+		ok            bool
+		expectedError string
+	}
+
+	testCases := []updateTestCase{
+		{
+			testName:   "Update Pod IP",
+			kind:       "pod",
+			initialObj: constructPod("test-pod", "default", "1.2.3.4"),
+			updatedObj: constructPod("test-pod", "default", "5.6.7.8"),
+			expectedIP: "5.6.7.8",
+			ok:         true,
+		},
+		{
+			testName:   "Update Service ClusterIP",
+			kind:       "svc",
+			initialObj: constructService("test-svc", "default", "10.0.0.1"),
+			updatedObj: constructService("test-svc", "default", "10.0.0.2"),
+			expectedIP: "10.0.0.2",
+			ok:         true,
+		},
+		{
+			testName:   "Update Pod with invalid key",
+			kind:       "pod",
+			initialObj: constructPod("invalid-pod", "default", "1.2.3.4"),
+			// Updated object is missing metadata to force key error.
+			updatedObj:    &v1.Pod{},
+			expectedError: "OnUpdate: empty key for pod",
+			ok:            false,
+		},
+		{
+			testName:      "Update unknown object",
+			kind:          "unknown",
+			initialObj:    constructPod("some-pod", "default", "1.2.3.4"),
+			updatedObj:    "not a valid object",
+			expectedError: "OnUpdate: unknown object type:",
+			ok:            false,
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.testName, func(t *testing.T) {
+			cache := &inventoryCache{
+				pods:     cachedmap.NewCachedMap[string, *SlimPod](time.Nanosecond),
+				podsByIp: cachedmap.NewCachedMap[string, *SlimPod](time.Nanosecond),
+				svcs:     cachedmap.NewCachedMap[string, *SlimService](time.Nanosecond),
+				svcsByIp: cachedmap.NewCachedMap[string, *SlimService](time.Nanosecond),
+			}
+
+			cache.OnAdd(tc.initialObj, false)
+
+			if !tc.ok {
+				var logBuffer bytes.Buffer
+				origOut := logrus.StandardLogger().Out
+				logrus.SetOutput(&logBuffer)
+				defer logrus.SetOutput(origOut)
+
+				cache.OnUpdate(tc.initialObj, tc.updatedObj)
+				logContent := logBuffer.String()
+				assert.Contains(t, logContent, tc.expectedError)
+				return
+			}
+
+			cache.OnUpdate(tc.initialObj, tc.updatedObj)
+
+			switch tc.kind {
+			case "pod":
+				retrieved := cache.GetPodByName("default", "test-pod")
+				require.NotNil(t, retrieved, "expected pod to exist after update")
+				assert.Equal(t, tc.expectedIP, retrieved.Status.PodIP)
+				retrievedByIP := cache.GetPodByIp(tc.expectedIP)
+				require.NotNil(t, retrievedByIP, "expected pod to be retrievable by new IP")
+			case "svc":
+				retrieved := cache.GetSvcByName("default", "test-svc")
+				require.NotNil(t, retrieved, "expected service to exist after update")
+				assert.Equal(t, tc.expectedIP, retrieved.Spec.ClusterIP)
+				retrievedByIP := cache.GetSvcByIp(tc.expectedIP)
+				require.NotNil(t, retrievedByIP, "expected service to be retrievable by new IP")
+			}
+		})
+	}
+}
+
+func TestInventoryCacheDelete(t *testing.T) {
+	type deleteTestCase struct {
+		testName      string
+		kind          string
+		initialObj    any
+		ok            bool
+		expectedError string
+	}
+
+	testCases := []deleteTestCase{
+		{
+			testName:   "Delete Pod",
+			kind:       "pod",
+			initialObj: constructPod("test-pod", "default", "1.2.3.4"),
+			ok:         true,
+		},
+		{
+			testName:   "Delete Service",
+			kind:       "svc",
+			initialObj: constructService("test-svc", "default", "10.0.0.1"),
+			ok:         true,
+		},
+		{
+			testName:      "Delete unknown object",
+			kind:          "unknown",
+			initialObj:    "not a valid object",
+			expectedError: "OnDelete: unknown object type:",
+			ok:            false,
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.testName, func(t *testing.T) {
+			// Use a very short duration so that cache entries can expire.
+			cache := &inventoryCache{
+				pods:     cachedmap.NewCachedMap[string, *SlimPod](time.Nanosecond),
+				podsByIp: cachedmap.NewCachedMap[string, *SlimPod](time.Nanosecond),
+				svcs:     cachedmap.NewCachedMap[string, *SlimService](time.Nanosecond),
+				svcsByIp: cachedmap.NewCachedMap[string, *SlimService](time.Nanosecond),
+			}
+
+			if tc.ok {
+				cache.OnAdd(tc.initialObj, false)
+			}
+
+			if !tc.ok {
+				var logBuffer bytes.Buffer
+				origOut := logrus.StandardLogger().Out
+				logrus.SetOutput(&logBuffer)
+				defer logrus.SetOutput(origOut)
+
+				cache.OnDelete(tc.initialObj)
+				logContent := logBuffer.String()
+				assert.Contains(t, logContent, tc.expectedError)
+				return
+			}
+			cache.OnDelete(tc.initialObj)
+
+			start := time.Now()
+			for {
+				if tc.kind == "pod" {
+					rtvdName := cache.GetPodByName(tc.initialObj.(*v1.Pod).Namespace, tc.initialObj.(*v1.Pod).Name)
+					rtvdIp := cache.GetPodByIp(tc.initialObj.(*v1.Pod).Status.PodIP)
+					if rtvdName == nil && rtvdIp == nil {
+						break
+					}
+				} else if tc.kind == "svc" {
+					rtvdName := cache.GetSvcByName(tc.initialObj.(*v1.Service).Namespace, tc.initialObj.(*v1.Service).Name)
+					rtvdIp := cache.GetSvcByIp(tc.initialObj.(*v1.Service).Spec.ClusterIP)
+					if rtvdName == nil && rtvdIp == nil {
+						break
+					}
+				}
+				time.Sleep(time.Nanosecond)
+
+				if time.Since(start) > 1*time.Second {
+					t.Fatalf("Timed out waiting for object to be deleted")
+				}
+			}
+		})
+	}
+}
+
+func constructPod(name, namespace, ip string) *v1.Pod {
+	return &v1.Pod{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      name,
+			Namespace: namespace,
+		},
+		Status: v1.PodStatus{
+			PodIP: ip,
+		},
+	}
+}
+
+func constructService(name, namespace, clusterIP string) *v1.Service {
+	return &v1.Service{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      name,
+			Namespace: namespace,
+		},
+		Spec: v1.ServiceSpec{
+			ClusterIP: clusterIP,
+		},
+	}
+}
diff --git a/pkg/operators/common/containers-publisher.go b/pkg/operators/common/containers-publisher.go
new file mode 100644
index 000000000..2e18ec094
--- /dev/null
+++ b/pkg/operators/common/containers-publisher.go
@@ -0,0 +1,150 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package common
+
+import (
+	"fmt"
+
+	"github.com/google/uuid"
+	log "github.com/sirupsen/logrus"
+
+	containercollection "github.com/inspektor-gadget/inspektor-gadget/pkg/container-collection"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+)
+
+type ContainersPublisher struct {
+	collection *containercollection.ContainerCollection
+
+	containersDs              datasource.DataSource
+	eventTypeField            datasource.FieldAccessor
+	idField                   datasource.FieldAccessor
+	cgroupIDField             datasource.FieldAccessor
+	mountNsIDField            datasource.FieldAccessor
+	nameField                 datasource.FieldAccessor
+	containerConfigField      datasource.FieldAccessor
+	containersSubscriptionKey string
+}
+
+func NewContainersPublisher(gadgetCtx operators.GadgetContext, collection *containercollection.ContainerCollection) (*ContainersPublisher, error) {
+	publisher := &ContainersPublisher{}
+	var err error
+
+	publisher.containersDs, err = gadgetCtx.RegisterDataSource(datasource.TypeSingle, "containers")
+	if err != nil {
+		return nil, fmt.Errorf("creating datasource: %w", err)
+	}
+	publisher.containersDs.AddAnnotation("cli.default-output-mode", "none")
+
+	publisher.eventTypeField, err = publisher.containersDs.AddField("event_type", api.Kind_String)
+	if err != nil {
+		return nil, fmt.Errorf("adding field event_type: %w", err)
+	}
+
+	publisher.idField, err = publisher.containersDs.AddField("container_id", api.Kind_String)
+	if err != nil {
+		return nil, fmt.Errorf("adding field container_id: %w", err)
+	}
+
+	publisher.cgroupIDField, err = publisher.containersDs.AddField("cgroup_id", api.Kind_Uint64)
+	if err != nil {
+		return nil, fmt.Errorf("adding field cgroup_id: %w", err)
+	}
+
+	publisher.mountNsIDField, err = publisher.containersDs.AddField("mntns_id", api.Kind_Uint64)
+	if err != nil {
+		return nil, fmt.Errorf("adding field mntns_id: %w", err)
+	}
+
+	publisher.nameField, err = publisher.containersDs.AddField("name", api.Kind_String)
+	if err != nil {
+		return nil, fmt.Errorf("adding field name: %w", err)
+	}
+
+	publisher.containerConfigField, err = publisher.containersDs.AddField("container_config", api.Kind_String)
+	if err != nil {
+		return nil, fmt.Errorf("adding field container_config: %w", err)
+	}
+
+	publisher.collection = collection
+
+	return publisher, nil
+}
+
+func (publisher *ContainersPublisher) emitContainersDatasourceEvent(eventType containercollection.EventType, container *containercollection.Container, k8s bool) error {
+	ev, err := publisher.containersDs.NewPacketSingle()
+	if err != nil {
+		return fmt.Errorf("creating new containers datasource packet: %w", err)
+	}
+
+	publisher.eventTypeField.PutString(ev, eventType.String())
+	publisher.idField.PutString(ev, container.Runtime.ContainerID)
+	publisher.cgroupIDField.PutUint64(ev, container.CgroupID)
+	publisher.mountNsIDField.PutUint64(ev, container.Mntns)
+	if k8s {
+		publisher.nameField.PutString(ev, container.K8s.ContainerName)
+	} else {
+		publisher.nameField.PutString(ev, container.Runtime.ContainerName)
+	}
+
+	publisher.containerConfigField.PutString(ev, container.OciConfig)
+
+	err = publisher.containersDs.EmitAndRelease(ev)
+	if err != nil {
+		return fmt.Errorf("emitting containers datasource event: %w", err)
+	}
+
+	return nil
+}
+
+func (publisher *ContainersPublisher) PublishContainers(k8s bool, extraContainers []*containercollection.Container, containerSelector containercollection.ContainerSelector) error {
+	var containers []*containercollection.Container
+
+	if publisher.collection != nil {
+		publisher.containersSubscriptionKey = uuid.New().String()
+
+		log.Debugf("add datasource containers subscription to container collection")
+		containers = publisher.collection.Subscribe(
+			publisher.containersSubscriptionKey,
+			containerSelector,
+			func(event containercollection.PubSubEvent) {
+				err := publisher.emitContainersDatasourceEvent(event.Type, event.Container, k8s)
+				if err != nil {
+					log.Errorf("publishing new container event: %v", err)
+				}
+			},
+		)
+	}
+
+	if len(extraContainers) > 0 {
+		containers = append(containers, extraContainers...)
+	}
+
+	for _, container := range containers {
+		err := publisher.emitContainersDatasourceEvent(containercollection.EventTypeAddContainer, container, k8s)
+		if err != nil {
+			return fmt.Errorf("publishing existing container event: %w", err)
+		}
+	}
+
+	return nil
+}
+
+func (publisher *ContainersPublisher) Unsubscribe() {
+	if publisher.containersSubscriptionKey != "" {
+		publisher.collection.Unsubscribe(publisher.containersSubscriptionKey)
+	}
+}
diff --git a/pkg/operators/common/datasource.go b/pkg/operators/common/datasource.go
index 132474cd7..c767cd6ea 100644
--- a/pkg/operators/common/datasource.go
+++ b/pkg/operators/common/datasource.go
@@ -26,6 +26,9 @@ func GetIPForVersion(data datasource.Data, version, ipAddr datasource.FieldAcces
 	if ip == nil {
 		return "", fmt.Errorf("IP field not found")
 	}
+	if len(ip) != 16 {
+		return "", fmt.Errorf("IP field has wrong length. Expected 16 got %d", len(ip))
+	}
 
 	v, err := version.Uint8(data)
 	if err != nil {
diff --git a/pkg/operators/common/kubeinventorycache.go b/pkg/operators/common/kubeinventorycache.go
index 9f1de701e..a52115e22 100644
--- a/pkg/operators/common/kubeinventorycache.go
+++ b/pkg/operators/common/kubeinventorycache.go
@@ -1,4 +1,4 @@
-// Copyright 2023-2024 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -122,7 +122,7 @@ type K8sInventoryCache interface {
 }
 
 type inventoryCache struct {
-	clientset *kubernetes.Clientset
+	clientset kubernetes.Interface
 
 	factory     informers.SharedInformerFactory
 	podsHandler k8sCache.ResourceEventHandlerRegistration
@@ -199,7 +199,7 @@ func transformObject(obj any) (any, error) {
 }
 
 func newCache() (*inventoryCache, error) {
-	clientset, err := k8sutil.NewClientsetWithProtobuf("")
+	clientset, err := k8sutil.NewClientsetWithProtobuf("", "kube-inventory-cache")
 	if err != nil {
 		return nil, fmt.Errorf("creating new k8s clientset: %w", err)
 	}
@@ -318,6 +318,10 @@ func (cache *inventoryCache) OnAdd(obj any, _ bool) {
 			log.Warnf("OnAdd: error getting key for pod: %v", err)
 			return
 		}
+		if key == "" {
+			log.Warnf("OnAdd: empty key for pod")
+			return
+		}
 		slimPod := NewSlimPod(o)
 		cache.pods.Add(key, slimPod)
 		if ip := slimPod.Status.PodIP; ip != "" {
@@ -329,6 +333,10 @@ func (cache *inventoryCache) OnAdd(obj any, _ bool) {
 			log.Warnf("OnAdd: error getting key for service: %v", err)
 			return
 		}
+		if key == "" {
+			log.Warnf("OnAdd: empty key for svc")
+			return
+		}
 		slimService := NewSlimService(o)
 		cache.svcs.Add(key, slimService)
 		if ip := slimService.Spec.ClusterIP; ip != "" {
@@ -347,6 +355,10 @@ func (cache *inventoryCache) OnUpdate(_, newObj any) {
 			log.Warnf("OnUpdate: error getting key for pod: %v", err)
 			return
 		}
+		if key == "" {
+			log.Warnf("OnUpdate: empty key for pod")
+			return
+		}
 		slimPod := NewSlimPod(o)
 		cache.pods.Add(key, slimPod)
 		if ip := slimPod.Status.PodIP; ip != "" {
@@ -358,6 +370,10 @@ func (cache *inventoryCache) OnUpdate(_, newObj any) {
 			log.Warnf("OnUpdate: error getting key for service: %v", err)
 			return
 		}
+		if key == "" {
+			log.Warnf("OnUpdate: empty key for svc")
+			return
+		}
 		slimService := NewSlimService(o)
 		cache.svcs.Add(key, slimService)
 		if ip := slimService.Spec.ClusterIP; ip != "" {
diff --git a/pkg/operators/ebpf/attach.go b/pkg/operators/ebpf/attach.go
index b29498ec3..6cc523aa6 100644
--- a/pkg/operators/ebpf/attach.go
+++ b/pkg/operators/ebpf/attach.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -17,10 +17,13 @@ package ebpfoperator
 import (
 	"fmt"
 	"net"
+	"runtime"
+	"strconv"
 	"strings"
 
 	"github.com/cilium/ebpf"
 	"github.com/cilium/ebpf/link"
+	"golang.org/x/sys/unix"
 
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/uprobetracer"
@@ -32,6 +35,7 @@ const (
 	iterPrefix      = "iter/"
 	fentryPrefix    = "fentry/"
 	fexitPrefix     = "fexit/"
+	perfEventPrefix = "perf_event/"
 	tpBtfPrefix     = "tp_btf/"
 	uprobePrefix    = "uprobe/"
 	uretprobePrefix = "uretprobe/"
@@ -145,6 +149,82 @@ func (i *ebpfInstance) attachProgram(gadgetCtx operators.GadgetContext, p *ebpf.
 		return link.AttachLSM(link.LSMOptions{
 			Program: prog,
 		})
+	case ebpf.PerfEvent:
+		perfType := uint32(unix.PERF_TYPE_SOFTWARE)
+		perfConfig := uint64(unix.PERF_COUNT_SW_CPU_CLOCK)
+		perfSampleType := uint64(unix.PERF_SAMPLE_RAW)
+		frequency := uint64(0)
+		name, ok := strings.CutPrefix(p.SectionName, perfEventPrefix)
+		if !ok {
+			return nil, fmt.Errorf("perf_event programs require a name")
+		}
+
+		switch tmp := i.config.GetString("programs." + name + ".perf.type"); tmp {
+		case "":
+			return nil, fmt.Errorf("perf.type not specified for program %q", name)
+		case "software":
+			perfType = unix.PERF_TYPE_SOFTWARE
+		default:
+			return nil, fmt.Errorf("unsupported perf.type %q", tmp)
+		}
+		switch tmp := i.config.GetString("programs." + name + ".perf.config"); tmp {
+		case "":
+			return nil, fmt.Errorf("perf.config not specified for program %q", name)
+		case "count_sw_cpu_clock":
+			perfConfig = unix.PERF_COUNT_SW_CPU_CLOCK
+		default:
+			return nil, fmt.Errorf("unsupported perf.config %q", tmp)
+		}
+		switch tmp := i.config.GetString("programs." + name + ".perf.sampleType"); tmp {
+		case "":
+			return nil, fmt.Errorf("perf.sampleType not specified for program %q", name)
+		case "sample_raw":
+			perfSampleType = unix.PERF_SAMPLE_RAW
+		default:
+			return nil, fmt.Errorf("unsupported perf.sampleType %q", tmp)
+		}
+		if tmpFrequency := i.config.GetString("programs." + name + ".sampler.frequency"); tmpFrequency != "" {
+			var err error
+			frequency, err = strconv.ParseUint(tmpFrequency, 10, 64)
+			if err != nil {
+				return nil, fmt.Errorf("parsing frequency %q for program %q: %w", tmpFrequency, name, err)
+			}
+		} else {
+			return nil, fmt.Errorf("sampler.frequency not specified for program %q", name)
+		}
+		if frequency == 0 {
+			return nil, fmt.Errorf("sampler.frequency is zero for program %q", name)
+		}
+		for cpu := 0; cpu < runtime.NumCPU(); cpu++ {
+			fd, err := unix.PerfEventOpen(
+				&unix.PerfEventAttr{
+					Type:        perfType,
+					Config:      perfConfig,
+					Sample_type: perfSampleType,
+					Sample:      frequency,
+					Bits:        unix.PerfBitFreq,
+				},
+				-1,
+				cpu,
+				-1,
+				unix.PERF_FLAG_FD_CLOEXEC,
+			)
+			if err != nil {
+				return nil, fmt.Errorf("opening perf event: %w", err)
+			}
+			i.perfFds = append(i.perfFds, fd)
+
+			// Attach program to perf event.
+			if err := unix.IoctlSetInt(fd, unix.PERF_EVENT_IOC_SET_BPF, prog.FD()); err != nil {
+				return nil, fmt.Errorf("attaching eBPF program to perf fd: %w", err)
+			}
+
+			// Start perf event.
+			if err := unix.IoctlSetInt(fd, unix.PERF_EVENT_IOC_ENABLE, 0); err != nil {
+				return nil, fmt.Errorf("enabling perf fd: %w", err)
+			}
+		}
+		return nil, nil
 	default:
 		return nil, fmt.Errorf("unsupported program %q of type %q", p.Name, p.Type)
 	}
diff --git a/pkg/operators/ebpf/ebpf.go b/pkg/operators/ebpf/ebpf.go
index bd5799bab..c0a3e0a0a 100644
--- a/pkg/operators/ebpf/ebpf.go
+++ b/pkg/operators/ebpf/ebpf.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@ import (
 	"github.com/cilium/ebpf/link"
 	ocispec "github.com/opencontainers/image-spec/specs-go/v1"
 	"github.com/spf13/viper"
+	"golang.org/x/sys/unix"
 	"oras.land/oras-go/v2"
 
 	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
@@ -63,10 +64,20 @@ const (
 	ParamTraceKernel = "trace-pipe"
 
 	kernelTypesVar = "kernelTypes"
+
+	AnnotationFlushOnStop = "ebpf.map.flush-on-stop"
 )
 
+type gadgetObjects struct {
+	programIDs []ebpf.ProgramID
+	mapIDs     []ebpf.MapID
+}
+
 // ebpfOperator reads ebpf programs from OCI images and runs them
-type ebpfOperator struct{}
+type ebpfOperator struct {
+	mu         sync.Mutex
+	gadgetObjs map[operators.GadgetContext]gadgetObjects
+}
 
 func (o *ebpfOperator) Name() string {
 	return "ebpf"
@@ -98,8 +109,9 @@ func (o *ebpfOperator) InstantiateImageOperator(
 	// TODO: do some pre-checks in here, maybe validate hashes, signatures, etc.
 
 	newInstance := &ebpfInstance{
-		gadgetCtx: gadgetCtx, // context usually should not be stored, but should we really carry it through all funcs?
-		done:      make(chan struct{}),
+		bpfOperator: o,
+		gadgetCtx:   gadgetCtx, // context usually should not be stored, but should we really carry it through all funcs?
+		done:        make(chan struct{}),
 
 		logger:  gadgetCtx.Logger(),
 		program: program,
@@ -149,7 +161,8 @@ func (o *ebpfOperator) InstantiateImageOperator(
 }
 
 type ebpfInstance struct {
-	mu sync.Mutex
+	mu          sync.Mutex
+	bpfOperator *ebpfOperator
 
 	config *viper.Viper
 
@@ -172,7 +185,8 @@ type ebpfInstance struct {
 	// map from ebpf variable name to ebpfVar struct
 	vars map[string]*ebpfVar
 
-	links []link.Link
+	links   []link.Link
+	perfFds []int
 
 	containers map[string]*containercollection.Container
 
@@ -305,6 +319,15 @@ func (i *ebpfInstance) init(gadgetCtx operators.GadgetContext) error {
 	if err != nil {
 		return fmt.Errorf("initializing: %w", err)
 	}
+
+	// add extra info to gadgetcontext if requested
+	if gadgetCtx.ExtraInfo() {
+		err = i.addExtraInfo(gadgetCtx)
+		if err != nil {
+			return fmt.Errorf("adding extra info: %w", err)
+		}
+	}
+
 	err = i.analyze()
 	if err != nil {
 		return fmt.Errorf("analyzing: %w", err)
@@ -370,6 +393,7 @@ func (i *ebpfInstance) register(gadgetCtx operators.GadgetContext) error {
 		// combiner operator handle the data correctly
 		// TODO: Make this configurable
 		m.ds.AddAnnotation(api.FetchIntervalAnnotation, "0")
+		m.ds.AddAnnotation(api.FetchCountAnnotation, "1")
 	}
 	for name, m := range i.mapIters {
 		fields := make([]*Field, 0)
@@ -401,6 +425,12 @@ func (i *ebpfInstance) register(gadgetCtx operators.GadgetContext) error {
 		}
 		m.valAccessor = accessor
 
+		annotations := ds.Annotations()
+		if flushOnStop := annotations[AnnotationFlushOnStop]; flushOnStop == "true" {
+			i.logger.Debugf("flushing on stop enabled")
+			m.flushOnStop = true
+		}
+
 		m.ds = ds
 	}
 	return nil
@@ -521,7 +551,7 @@ func (i *ebpfInstance) tracePipe(gadgetCtx operators.GadgetContext) error {
 		defer tracePipe.Close()
 		scanner := bufio.NewScanner(tracePipe)
 		for scanner.Scan() {
-			log.Debug(scanner.Text())
+			log.Info(scanner.Text())
 		}
 	}()
 	return nil
@@ -652,6 +682,37 @@ func (i *ebpfInstance) Start(gadgetCtx operators.GadgetContext) error {
 	}
 	i.collection = collection
 
+	// collect program IDs and map IDs for this gadget
+	gadgetObjs := gadgetObjects{}
+
+	for _, p := range i.collection.Programs {
+		info, err := p.Info()
+		if err != nil {
+			i.logger.Warnf("stats for this gadget won't be available: getting program info: %v", err)
+			continue
+		}
+
+		id, _ := info.ID()
+		gadgetObjs.programIDs = append(gadgetObjs.programIDs, id)
+	}
+
+	for _, m := range i.collection.Maps {
+		info, err := m.Info()
+		if err != nil {
+			i.logger.Warnf("stats for this gadget won't be available: getting map info: %v", err)
+			continue
+		}
+
+		id, _ := info.ID()
+		gadgetObjs.mapIDs = append(gadgetObjs.mapIDs, id)
+	}
+	i.bpfOperator.mu.Lock()
+	if i.bpfOperator.gadgetObjs == nil {
+		i.bpfOperator.gadgetObjs = make(map[operators.GadgetContext]gadgetObjects)
+	}
+	i.bpfOperator.gadgetObjs[gadgetCtx] = gadgetObjs
+	i.bpfOperator.mu.Unlock()
+
 	for name, m := range i.collection.Maps {
 		gadgetCtx.SetVar(operators.MapPrefix+name, m)
 
@@ -726,9 +787,15 @@ func (i *ebpfInstance) Start(gadgetCtx operators.GadgetContext) error {
 	return nil
 }
 
-func (i *ebpfInstance) Stop(gadgetCtx operators.GadgetContext) error {
+func (i *ebpfInstance) PreStop(gadgetCtx operators.GadgetContext) error {
 	i.Close()
-	i.wg.Wait()
+	return nil
+}
+
+func (i *ebpfInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	i.bpfOperator.mu.Lock()
+	delete(i.bpfOperator.gadgetObjs, gadgetCtx)
+	i.bpfOperator.mu.Unlock()
 	return nil
 }
 
@@ -739,10 +806,6 @@ func (i *ebpfInstance) Close() {
 		t.close()
 	}
 
-	if i.collection != nil {
-		i.collection.Close()
-		i.collection = nil
-	}
 	for _, l := range i.links {
 		gadgets.CloseLink(l)
 	}
@@ -757,6 +820,26 @@ func (i *ebpfInstance) Close() {
 	for _, uprobeTracer := range i.uprobeTracers {
 		uprobeTracer.Close()
 	}
+
+	for _, fd := range i.perfFds {
+		// Disable perf event.
+		err := unix.IoctlSetInt(fd, unix.PERF_EVENT_IOC_DISABLE, 0)
+		if err != nil {
+			i.logger.Errorf("disabling perf fd: %v", err)
+		}
+
+		err = unix.Close(fd)
+		if err != nil {
+			i.logger.Errorf("closing perf fd: %v", err)
+		}
+	}
+
+	i.wg.Wait()
+
+	if i.collection != nil {
+		i.collection.Close()
+		i.collection = nil
+	}
 }
 
 // Using Attacher interface for network tracers for now
@@ -817,6 +900,9 @@ func (i *ebpfInstance) DetachContainer(container *containercollection.Container)
 	return nil
 }
 
+var ebpfOp = &ebpfOperator{}
+
 func init() {
-	operators.RegisterOperatorForMediaType(eBPFObjectMediaType, &ebpfOperator{})
+	operators.RegisterOperatorForMediaType(eBPFObjectMediaType, ebpfOp)
+	operators.RegisterDataOperator(ebpfOp)
 }
diff --git a/pkg/operators/ebpf/extrainfo.go b/pkg/operators/ebpf/extrainfo.go
new file mode 100644
index 000000000..571797a1e
--- /dev/null
+++ b/pkg/operators/ebpf/extrainfo.go
@@ -0,0 +1,157 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package ebpfoperator
+
+import (
+	"bytes"
+	"debug/elf"
+	"encoding/json"
+	"fmt"
+	"strings"
+
+	"github.com/cilium/ebpf/asm"
+	"github.com/cilium/ebpf/btf"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	graphutils "github.com/inspektor-gadget/inspektor-gadget/pkg/utils/ebpf2graph"
+)
+
+type extraInfoMap struct {
+	Name string
+	Type string
+}
+
+type extraInfoProgram struct {
+	Section              string
+	Source               string
+	SourceWithRelocation string
+}
+
+type extraInfoVariable struct {
+	Name   string
+	Offset uint64
+	Size   uint64
+	Map    string
+}
+
+func (i *ebpfInstance) addExtraInfo(gadgetCtx operators.GadgetContext) error {
+	ef, err := elf.NewFile(bytes.NewReader(i.program))
+	if err != nil {
+		return fmt.Errorf("parsing elf file: %w", err)
+	}
+	var sections []string
+	var maps []*extraInfoMap
+	var programs []*extraInfoProgram
+	var variables []*extraInfoVariable
+
+	// Add sections
+	for _, sec := range ef.Sections {
+		sections = append(sections, sec.Name)
+	}
+	sectionsJson, _ := json.Marshal(sections)
+
+	// Add maps
+	for name, m := range i.collectionSpec.Maps {
+		if name == ".rodata" || name == ".bss" {
+			continue
+		}
+		maps = append(maps, &extraInfoMap{
+			Name: name,
+			Type: m.Type.String(),
+		})
+	}
+	mapsJson, _ := json.Marshal(maps)
+
+	// Add programs
+	for _, p := range i.collectionSpec.Programs {
+		programs = append(programs, &extraInfoProgram{
+			Section:              p.SectionName,
+			Source:               p.Instructions.String(),
+			SourceWithRelocation: getSourceWithRelocations(p.Instructions),
+		})
+	}
+	programsJson, _ := json.Marshal(programs)
+
+	// Add variables
+	for name, v := range i.collectionSpec.Variables {
+		variables = append(variables, &extraInfoVariable{
+			Name:   name,
+			Offset: v.Offset(),
+			Size:   v.Size(),
+			Map:    v.MapName(),
+		})
+	}
+	variablesJson, _ := json.Marshal(variables)
+
+	ebpfInfo := &api.ExtraInfo{
+		Data: make(map[string]*api.GadgetInspectAddendum),
+	}
+	ebpfInfo.Data["ebpf.sections"] = &api.GadgetInspectAddendum{
+		ContentType: "application/json",
+		Content:     []byte(sectionsJson),
+	}
+	ebpfInfo.Data["ebpf.maps"] = &api.GadgetInspectAddendum{
+		ContentType: "application/json",
+		Content:     []byte(mapsJson),
+	}
+	ebpfInfo.Data["ebpf.programs"] = &api.GadgetInspectAddendum{
+		ContentType: "application/json",
+		Content:     []byte(programsJson),
+	}
+	ebpfInfo.Data["ebpf.variables"] = &api.GadgetInspectAddendum{
+		ContentType: "application/json",
+		Content:     []byte(variablesJson),
+	}
+
+	// add mermaid graph data
+	flowchartGraph, err := graphutils.GenerateFlowchartMermaidGraph(i.collectionSpec)
+	if err != nil {
+		return fmt.Errorf("generating mermaid flow graph: %w", err)
+	}
+	sequenceDiagram, err := graphutils.GenerateSequenceMermaidGraph(i.collectionSpec)
+	if err != nil {
+		return fmt.Errorf("generating mermaid sequence diagram: %w", err)
+	}
+
+	ebpfInfo.Data["ebpf.flowchart"] = &api.GadgetInspectAddendum{
+		ContentType: "text/mermaid",
+		Content:     []byte(flowchartGraph),
+	}
+	ebpfInfo.Data["ebpf.sequence"] = &api.GadgetInspectAddendum{
+		ContentType: "text/mermaid",
+		Content:     []byte(sequenceDiagram),
+	}
+
+	gadgetCtx.SetVar("extraInfo.ebpf", ebpfInfo)
+
+	return nil
+}
+
+func getSourceWithRelocations(insns asm.Instructions) (relocations string) {
+	var relocs strings.Builder
+
+	iter := insns.Iterate()
+	for iter.Next() {
+		if source := iter.Ins.Source(); source != nil {
+			relocs.WriteString(fmt.Sprintf("; %s\n", source))
+		}
+		if relo := btf.CORERelocationMetadata(iter.Ins); relo != nil {
+			relocs.WriteString(fmt.Sprintf("; %v\n", relo))
+		}
+		relocs.WriteString(fmt.Sprintf("%v\n", iter.Ins))
+	}
+	return relocs.String()
+}
diff --git a/pkg/operators/ebpf/formatters.go b/pkg/operators/ebpf/formatters.go
index fd485ac99..cb694213a 100644
--- a/pkg/operators/ebpf/formatters.go
+++ b/pkg/operators/ebpf/formatters.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/kallsyms"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	ebpftypes "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf/types"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/annotations"
@@ -70,83 +71,88 @@ func (i *ebpfInstance) initEnumFormatter(gadgetCtx operators.GadgetContext) erro
 	}
 
 	for _, ds := range gadgetCtx.GetDataSources() {
-		var formatters []func(ds datasource.DataSource, data datasource.Data) error
+		formatters, err := getFormattersForEnums(i.enums, ds, btfSpec, i.logger)
+		if err != nil {
+			return err
+		}
+		if len(formatters) > 0 {
+			i.formatters[ds] = formatters
+		}
+	}
 
-		for _, en := range i.enums {
-			enum := en.Enum
-			name := en.memberName
-			in := ds.GetField(name)
-			if in == nil {
-				continue
-			}
-			in.SetHidden(true, false)
+	return nil
+}
 
-			if btfSpec != nil {
-				kernelEnum := &btf.Enum{}
-				if err = btfSpec.TypeByName(enum.Name, &kernelEnum); err == nil {
-					// Use kernel enum if found
-					enum = kernelEnum
-				}
-			}
+func getFormattersForEnums(enums []*enum, ds datasource.DataSource, btfSpec *btf.Spec, lg logger.Logger) ([]func(ds datasource.DataSource, data datasource.Data) error, error) {
+	formatters := []func(ds datasource.DataSource, data datasource.Data) error{}
+	for _, en := range enums {
+		enum := en.Enum
+		name := en.memberName
+		in := ds.GetField(name)
+		if in == nil {
+			continue
+		}
+		in.SetHidden(true, false)
 
-			targetName, err := annotations.GetTargetNameFromAnnotation(i.logger, "enum", in, enumTargetNameAnnotation)
-			if err != nil {
-				i.logger.Warnf("getting target name for enum field %q: %v", in.Name(), err)
-				continue
+		if btfSpec != nil {
+			kernelEnum := &btf.Enum{}
+			if err := btfSpec.TypeByName(enum.Name, &kernelEnum); err == nil {
+				// Use kernel enum if found
+				enum = kernelEnum
 			}
+		}
 
-			out, err := ds.AddField(targetName, api.Kind_String, datasource.WithSameParentAs(in))
-			if err != nil {
-				return err
-			}
+		targetName, err := annotations.GetTargetNameFromAnnotation(lg, "enum", in, enumTargetNameAnnotation)
+		if err != nil {
+			lg.Warnf("getting target name for enum field %q: %v", in.Name(), err)
+			continue
+		}
 
-			var formatter func(ds datasource.DataSource, data datasource.Data) error
+		out, err := ds.AddField(targetName, api.Kind_String, datasource.WithSameParentAs(in))
+		if err != nil {
+			return formatters, err
+		}
 
-			isBitField := strings.HasSuffix(enum.Name, "_set")
-			if isBitField {
-				separator := in.Annotations()[enumBitfieldSeparatorAnnotation]
-				if separator == "" {
-					separator = "|"
-				}
+		var formatter func(ds datasource.DataSource, data datasource.Data) error
+
+		isBitField := strings.HasSuffix(enum.Name, "_set")
+		if isBitField {
+			separator := in.Annotations()[enumBitfieldSeparatorAnnotation]
+			if separator == "" {
+				separator = "|"
+			}
 
-				formatter = func(ds datasource.DataSource, data datasource.Data) error {
-					inBytes := in.Get(data)
-					val := byteSliceAsUint64(inBytes, enum.Signed, ds)
+			formatter = func(ds datasource.DataSource, data datasource.Data) error {
+				inBytes := in.Get(data)
+				val := byteSliceAsUint64(inBytes, enum.Signed, ds)
 
-					var arr []string
-					for _, v := range enum.Values {
-						if val&v.Value == v.Value {
-							arr = append(arr, v.Name)
-						}
+				var arr []string
+				for _, v := range enum.Values {
+					if val&v.Value == v.Value {
+						arr = append(arr, v.Name)
 					}
-					out.PutString(data, strings.Join(arr, separator))
-					return nil
 				}
-			} else {
-				formatter = func(ds datasource.DataSource, data datasource.Data) error {
-					// TODO: lookup table?
-					inBytes := in.Get(data)
-					val := byteSliceAsUint64(inBytes, enum.Signed, ds)
-					for _, v := range enum.Values {
-						if val == v.Value {
-							out.Set(data, []byte(v.Name))
-							return nil
-						}
+				out.PutString(data, strings.Join(arr, separator))
+				return nil
+			}
+		} else {
+			formatter = func(ds datasource.DataSource, data datasource.Data) error {
+				// TODO: lookup table?
+				inBytes := in.Get(data)
+				val := byteSliceAsUint64(inBytes, enum.Signed, ds)
+				for _, v := range enum.Values {
+					if val == v.Value {
+						return out.Set(data, []byte(v.Name))
 					}
-					out.Set(data, []byte("UNKNOWN"))
-					return nil
 				}
+				out.Set(data, []byte("UNKNOWN"))
+				return nil
 			}
-
-			formatters = append(formatters, formatter)
 		}
 
-		if len(formatters) > 0 {
-			i.formatters[ds] = formatters
-		}
+		formatters = append(formatters, formatter)
 	}
-
-	return nil
+	return formatters, nil
 }
 
 func (i *ebpfInstance) initStackConverter(gadgetCtx operators.GadgetContext) error {
@@ -184,23 +190,12 @@ func (i *ebpfInstance) initStackConverter(gadgetCtx operators.GadgetContext) err
 			converter := func(ds datasource.DataSource, data datasource.Data) error {
 				inBytes := in.Get(data)
 				stackId := ds.ByteOrder().Uint32(inBytes)
-
-				stack := [ebpftypes.KernelPerfMaxStackDepth]uint64{}
-				err = i.kernelStackMap.Lookup(stackId, &stack)
+				outString, err := fetchAndFormatStackTrace(stackId, i.kernelStackMap.Lookup, kernelSymbolResolver.LookupByInstructionPointer)
 				if err != nil {
 					i.logger.Warnf("stack with ID %d is lost: %s", stackId, err.Error())
 					out.Set(data, []byte{})
 					return nil
 				}
-
-				outString := ""
-				for depth, addr := range stack {
-					if addr == 0 {
-						break
-					}
-					outString += fmt.Sprintf("[%d]%s; ", depth, kernelSymbolResolver.LookupByInstructionPointer(addr))
-				}
-
 				out.Set(data, []byte(outString))
 				return nil
 			}
@@ -210,6 +205,22 @@ func (i *ebpfInstance) initStackConverter(gadgetCtx operators.GadgetContext) err
 	return nil
 }
 
+func fetchAndFormatStackTrace(stackId uint32, stackLookup func(interface{}, interface{}) error, lookupByInstructionPointer func(uint64) string) (string, error) {
+	stack := [ebpftypes.KernelPerfMaxStackDepth]uint64{}
+	err := stackLookup(stackId, &stack)
+	if err != nil {
+		return "", err
+	}
+	outString := ""
+	for depth, addr := range stack {
+		if addr == 0 {
+			break
+		}
+		outString += fmt.Sprintf("[%d]%s; ", depth, lookupByInstructionPointer(addr))
+	}
+	return outString, nil
+}
+
 func (i *ebpfInstance) initFormatters(gadgetCtx operators.GadgetContext) error {
 	if err := i.initEnumFormatter(gadgetCtx); err != nil {
 		return fmt.Errorf("initializing enum formatter: %w", err)
diff --git a/pkg/operators/ebpf/formatters_test.go b/pkg/operators/ebpf/formatters_test.go
new file mode 100644
index 000000000..f8d8399b1
--- /dev/null
+++ b/pkg/operators/ebpf/formatters_test.go
@@ -0,0 +1,372 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package ebpfoperator
+
+import (
+	"testing"
+
+	"github.com/cilium/ebpf/btf"
+	"github.com/stretchr/testify/require"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
+	ebpftypes "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf/types"
+)
+
+func TestGetFormattersForEnums(t *testing.T) {
+	nonBitfieldEnum := constructNValuedEnum([]string{"A", "B", "C"}, "field1", false)
+	bitfieldEnum := constructNValuedEnum([]string{"A", "B", "C"}, "field1", true)
+
+	type testCaseDatum struct {
+		enum                    *enum
+		inputValue              uint64
+		expectedOutput          string
+		expectedTargetFieldName string
+		separator               string
+		targetAnnotation        string
+		isMatch                 bool
+	}
+
+	type testCase struct {
+		name        string
+		noOfMatches uint8
+		data        []testCaseDatum
+	}
+
+	testCases := []testCase{
+		{
+			name:        "Single non-bitfield enum valid",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    nonBitfieldEnum,
+					inputValue:              1,
+					expectedOutput:          "A",
+					expectedTargetFieldName: "field1",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Single non-bitfield enum valid no target annotation",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    constructNValuedEnum([]string{"A", "B", "C"}, "field1_raw", false),
+					inputValue:              1,
+					expectedOutput:          "A",
+					expectedTargetFieldName: "field1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Single bitfield enum multiple flags",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    bitfieldEnum,
+					inputValue:              3,
+					expectedOutput:          "A|B|C",
+					expectedTargetFieldName: "field1",
+					separator:               "|",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Non-bitfield enum unknown",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    nonBitfieldEnum,
+					inputValue:              5,
+					expectedOutput:          "UNKNOWN",
+					expectedTargetFieldName: "field1",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Non-bitfield enum with multiple similar values",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    nonBitfieldEnum,
+					inputValue:              1,
+					expectedOutput:          "A",
+					expectedTargetFieldName: "field1",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Bitfield enum no flags set",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    bitfieldEnum,
+					inputValue:              0,
+					expectedOutput:          "",
+					expectedTargetFieldName: "field1",
+					separator:               "|",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Bitfield enum custom separator",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    bitfieldEnum,
+					inputValue:              3,
+					expectedOutput:          "A, B, C",
+					expectedTargetFieldName: "field1",
+					separator:               ", ",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Multiple enums, first non-match then match",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    nonBitfieldEnum,
+					expectedTargetFieldName: "nonmatch_field1",
+					targetAnnotation:        "target1",
+					isMatch:                 false,
+				},
+				{
+					enum:                    constructNValuedEnum([]string{"Match"}, "field2", false),
+					inputValue:              1,
+					expectedOutput:          "Match",
+					expectedTargetFieldName: "field2",
+					targetAnnotation:        "target2",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Multiple non-bitfield enums both matching",
+			noOfMatches: 2,
+			data: []testCaseDatum{
+				{
+					enum:                    nonBitfieldEnum,
+					inputValue:              1,
+					expectedOutput:          "A",
+					expectedTargetFieldName: "field1",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+				{
+					enum:                    constructNValuedEnum([]string{"Second"}, "field2", false),
+					inputValue:              1,
+					expectedOutput:          "Second",
+					expectedTargetFieldName: "field2",
+					targetAnnotation:        "target2",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Non-bitfield then bitfield enum, bitfield wins",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    constructNValuedEnum([]string{"Plain"}, "nonmatch_field2", false),
+					expectedTargetFieldName: "field2",
+					targetAnnotation:        "target2",
+					isMatch:                 false,
+				},
+				{
+					enum:                    bitfieldEnum,
+					inputValue:              1,
+					expectedOutput:          "A",
+					expectedTargetFieldName: "field1",
+					separator:               "|",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+		{
+			name:        "Multiple bitfield enums, last wins",
+			noOfMatches: 1,
+			data: []testCaseDatum{
+				{
+					enum:                    constructNValuedEnum([]string{"FirstFlag"}, "nonmatch_field2", true),
+					expectedTargetFieldName: "field2",
+					targetAnnotation:        "target2",
+					isMatch:                 false,
+				},
+				{
+					enum:                    bitfieldEnum,
+					inputValue:              1,
+					expectedOutput:          "A",
+					expectedTargetFieldName: "field1",
+					separator:               "|",
+					targetAnnotation:        "target1",
+					isMatch:                 true,
+				},
+			},
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			ds, _ := datasource.New(datasource.TypeSingle, "formatters")
+			fas := make(map[string]datasource.FieldAccessor)
+
+			for _, test := range tc.data {
+				var fn string
+				if test.targetAnnotation != "" {
+					fn = test.expectedTargetFieldName
+				} else {
+					fn = test.expectedTargetFieldName + "_raw"
+				}
+				in, err := ds.AddField(fn, api.Kind_Uint64)
+				require.NoError(t, err)
+				require.NotNil(t, in)
+				if test.separator != "" {
+					in.AddAnnotation(enumBitfieldSeparatorAnnotation, test.separator)
+				}
+				if test.targetAnnotation != "" {
+					in.AddAnnotation(enumTargetNameAnnotation, test.targetAnnotation)
+				}
+				fas[test.expectedTargetFieldName] = in
+			}
+
+			lg := logger.DefaultLogger()
+
+			var enums []*enum
+			for _, test := range tc.data {
+				enums = append(enums, test.enum)
+			}
+			formatters, err := getFormattersForEnums(enums, ds, nil, lg)
+			require.NoError(t, err)
+			require.Len(t, formatters, int(tc.noOfMatches))
+
+			formattersIndex := 0
+			for _, test := range tc.data {
+				if !test.isMatch {
+					continue
+				}
+				data, _ := ds.NewPacketSingle()
+				in := fas[test.expectedTargetFieldName]
+				in.PutUint64(data, test.inputValue)
+
+				err = formatters[formattersIndex](ds, data)
+				require.NoError(t, err)
+
+				var out datasource.FieldAccessor
+				if test.targetAnnotation != "" {
+					out = ds.GetField(test.targetAnnotation)
+				} else {
+					out = ds.GetField(test.expectedTargetFieldName)
+				}
+				res, _ := out.String(data)
+				require.Equal(t, test.expectedOutput, res)
+				formattersIndex++
+			}
+		})
+	}
+}
+
+func TestFetchAndFormatStackTrace(t *testing.T) {
+	type testCase struct {
+		name          string
+		stackEntries  [ebpftypes.KernelPerfMaxStackDepth]uint64
+		expectedTrace string
+	}
+
+	testCases := []testCase{
+		{
+			name: "Valid stack trace",
+			stackEntries: [ebpftypes.KernelPerfMaxStackDepth]uint64{
+				0xabcdef, 0x123456, 0x312414, 0,
+			},
+			expectedTrace: "[0]funcA; [1]funcB; [2]unknown; ",
+		},
+		{
+			name: "Empty stack trace",
+			stackEntries: [ebpftypes.KernelPerfMaxStackDepth]uint64{
+				0, 0, 0, 0,
+			},
+			expectedTrace: "",
+		},
+		{
+			name: "Single valid entry",
+			stackEntries: [ebpftypes.KernelPerfMaxStackDepth]uint64{
+				0xabcdef, 0, 0, 0,
+			},
+			expectedTrace: "[0]funcA; ",
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			// Custom stack lookup function for this test case.
+			stackLookup := func(key interface{}, valueOut interface{}) error {
+				stack := valueOut.(*[ebpftypes.KernelPerfMaxStackDepth]uint64)
+				*stack = tc.stackEntries
+				return nil
+			}
+
+			result, err := fetchAndFormatStackTrace(42, stackLookup, lookupByInstructionPointer)
+			require.NoError(t, err)
+			require.Equal(t, tc.expectedTrace, result)
+		})
+	}
+}
+
+func lookupByInstructionPointer(addr uint64) string {
+	switch addr {
+	case 0xabcdef:
+		return "funcA"
+	case 0x123456:
+		return "funcB"
+	default:
+		return "unknown"
+	}
+}
+
+func constructNValuedEnum(keys []string, memberName string, isBitField bool) *enum {
+	var vals []btf.EnumValue
+	for i, v := range keys {
+		vals = append(vals, btf.EnumValue{Name: v, Value: uint64(i + 1)})
+	}
+
+	name := "testenum"
+	if isBitField {
+		name += "_set"
+	}
+	return &enum{
+		Enum: &btf.Enum{
+			Name:   name,
+			Values: vals,
+			Signed: false,
+		},
+		memberName: memberName,
+	}
+}
diff --git a/pkg/operators/ebpf/maps.go b/pkg/operators/ebpf/maps.go
index aa7118cc6..839a7dcf7 100644
--- a/pkg/operators/ebpf/maps.go
+++ b/pkg/operators/ebpf/maps.go
@@ -34,6 +34,8 @@ import (
 const (
 	ParamMapIterInterval = "map-fetch-interval"
 	ParamMapIterCount    = "map-fetch-count"
+
+	mapIterIntervalDefault = "1000ms"
 )
 
 type mapIter struct {
@@ -48,6 +50,8 @@ type mapIter struct {
 
 	interval time.Duration
 	count    int
+
+	flushOnStop bool
 }
 
 func (i *ebpfInstance) populateMap(t btf.Type, varName string) error {
@@ -75,7 +79,7 @@ func (i *ebpfInstance) mapParams() api.Params {
 		{
 			Key:          ParamMapIterInterval,
 			Description:  "interval in which to iterate over maps",
-			DefaultValue: "1000ms",
+			DefaultValue: mapIterIntervalDefault,
 			TypeHint:     api.TypeString,
 			Title:        "Map fetch interval",
 		},
@@ -97,7 +101,14 @@ func (i *ebpfInstance) evaluateMapParams(paramValues api.ParamValues) error {
 	globalDuration := time.Duration(0)
 	globalCount := 0
 
-	durations, err := apihelpers.GetDurationValuesPerDataSource(paramValues[ParamMapIterInterval])
+	mapIterInterval := paramValues[ParamMapIterInterval]
+	// It's possible that in the param is empty in some cases, like running the
+	// gadget from a gadget spec file. In this case we need to set the param to
+	// the default value.
+	if mapIterInterval == "" {
+		mapIterInterval = mapIterIntervalDefault
+	}
+	durations, err := apihelpers.GetDurationValuesPerDataSource(mapIterInterval)
 	if err != nil {
 		return fmt.Errorf("evaluating map fetch interval: %w", err)
 	}
@@ -144,6 +155,10 @@ func (i *ebpfInstance) evaluateMapParams(paramValues api.ParamValues) error {
 
 func (i *ebpfInstance) runMapIterators() error {
 	for _, iter := range i.mapIters {
+		if iter.interval == 0 && iter.count > 1 {
+			return fmt.Errorf("map iterator %q has count > 1 but interval is zero", iter.name)
+		}
+
 		iterMap, ok := i.collection.Maps[iter.mapName]
 		if !ok {
 			return fmt.Errorf("map %q not found", iter.mapName)
@@ -204,18 +219,26 @@ func (i *ebpfInstance) runMapIterators() error {
 		i.wg.Add(1)
 		go func() {
 			defer i.wg.Done()
-			if iter.interval == 0 {
-				// Only a single time; is this really useful?
+			if iter.interval == 0 && iter.count == 1 {
+				// Only a single time if interval is zero and count is 1
 				fetch()
 				return
 			}
 			ctr := 0
-			ticker := time.NewTicker(iter.interval)
+
+			tickerChan := make(<-chan time.Time)
+			if iter.interval > 0 {
+				tickerChan = time.NewTicker(iter.interval).C
+			}
 			for {
 				select {
 				case <-i.done:
+					if iter.flushOnStop {
+						i.logger.Debugf("flushing map")
+						fetch()
+					}
 					return
-				case <-ticker.C:
+				case <-tickerChan:
 					fetch()
 					ctr++
 					if iter.count > 0 && ctr >= iter.count {
diff --git a/pkg/operators/ebpf/params.go b/pkg/operators/ebpf/params.go
index e3873ffd4..6373f3a1f 100644
--- a/pkg/operators/ebpf/params.go
+++ b/pkg/operators/ebpf/params.go
@@ -118,6 +118,10 @@ var wellKnownParams = map[wellKnownParamKey]wellKnownParamVal{
 		Key:         "comm",
 		Description: "Show only events generated by processes with this name",
 	},
+	{TypeName: "bool", VarName: "collect_ustack"}: {
+		Key:         "collect-ustack",
+		Description: "Collect user stack traces",
+	},
 }
 
 func handleWellKnownParam(btfVar *btf.Var, p *param) {
diff --git a/pkg/operators/ebpf/stats.go b/pkg/operators/ebpf/stats.go
new file mode 100644
index 000000000..8c57d4e47
--- /dev/null
+++ b/pkg/operators/ebpf/stats.go
@@ -0,0 +1,577 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package ebpfoperator
+
+import (
+	"errors"
+	"fmt"
+	"os"
+	"strings"
+	"time"
+
+	"github.com/cilium/ebpf"
+	"github.com/spf13/viper"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/bpfstats"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	metadatav1 "github.com/inspektor-gadget/inspektor-gadget/pkg/metadata/v1"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap"
+	processmaptypes "github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap/types"
+)
+
+const (
+	ParamGadgetStatisticsInterval = "statistics-interval"
+	EmitStatsAnn                  = "emitstats"
+	ParamAllProgramsStats         = "all"
+	StatsDSName                   = "bpfstats"
+)
+
+func (o *ebpfOperator) GlobalParams() api.Params {
+	return nil
+}
+
+func (o *ebpfOperator) Init(params *params.Params) error {
+	return nil
+}
+
+func (o *ebpfOperator) InstantiateDataOperator(
+	gadgetCtx operators.GadgetContext, paramValues api.ParamValues,
+) (operators.DataOperatorInstance, error) {
+	cfg, ok := gadgetCtx.GetVar("config")
+	if !ok {
+		return nil, fmt.Errorf("missing configuration")
+	}
+	v, ok := cfg.(*viper.Viper)
+	if !ok {
+		return nil, fmt.Errorf("invalid configuration format")
+	}
+
+	emitStatsAnn := v.GetBool(fmt.Sprintf("operator.%s.%s", o.Name(), EmitStatsAnn))
+	if !emitStatsAnn {
+		return nil, nil
+	}
+
+	processMap, err := processmap.NewProcessMap()
+	if err != nil {
+		return nil, fmt.Errorf("creating processMap: %w", err)
+	}
+
+	instance := &ebpfOperatorDataInstance{
+		bpfOperator:      o,
+		done:             make(chan struct{}),
+		allProgramsStats: paramValues[ParamAllProgramsStats] == "true",
+		processMap:       processMap,
+	}
+
+	instance.ds, err = gadgetCtx.RegisterDataSource(datasource.TypeArray, StatsDSName)
+	if err != nil {
+		return nil, err
+	}
+
+	intervalAnn := paramValues[ParamGadgetStatisticsInterval]
+	instance.interval, err = time.ParseDuration(intervalAnn)
+	if err != nil {
+		return nil, fmt.Errorf("parsing duration: %w", err)
+	}
+
+	instance.ds.AddAnnotation(api.FetchIntervalAnnotation, intervalAnn)
+	instance.ds.AddAnnotation("cli.clear-screen-before", "true")
+
+	if nodeName, ok := os.LookupEnv("NODE_NAME"); ok {
+		instance.nodeNameField, err = instance.ds.AddField("nodeName", api.Kind_String,
+			datasource.WithAnnotations(map[string]string{
+				metadatav1.TemplateAnnotation: "node",
+				"metrics.type":                "key",
+			}),
+		)
+		if err != nil {
+			return nil, err
+		}
+		instance.nodeName = nodeName
+	}
+
+	// gadget-specific fields
+	instance.gadgetIDField, err = instance.ds.AddField("gadgetID", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation: "8",
+			metadatav1.DescriptionAnnotation:  "Unique ID assigned to each Gadget instance",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.gadgetNameField, err = instance.ds.AddField("gadgetName", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation: "16",
+			metadatav1.DescriptionAnnotation:  "Name of the Gadget instance",
+			"metrics.type":                    "key",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.gadgetImageField, err = instance.ds.AddField("gadgetImage", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation: "16",
+			metadatav1.DescriptionAnnotation:  "Name of the Gadget image (like trace_open, trace_exec, etc.)",
+			"metrics.type":                    "key",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	// low-level fields
+	// TODO: how to disable it based on the programs param?
+	instance.progIDField, err = instance.ds.AddField("progID", api.Kind_Uint32,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsAlignmentAnnotation: string(metadatav1.AlignmentRight),
+			metadatav1.DescriptionAnnotation:      "eBPF program ID assigned by the Linux kernel",
+			metadatav1.ColumnsWidthAnnotation:     "5",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.progNameField, err = instance.ds.AddField("progName", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			// The maximum length provided by the kernel is 16 bytes
+			metadatav1.ColumnsFixedAnnotation: "16",
+			metadatav1.DescriptionAnnotation:  "Name of the eBPF program",
+			"metrics.type":                    "key",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.progTypeField, err = instance.ds.AddField("progType", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation: "16",
+			metadatav1.DescriptionAnnotation:  "Type of the eBPF program",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	// stats fields
+	instance.runtimeField, err = instance.ds.AddField("runtime", api.Kind_Uint64,
+		datasource.WithAnnotations(map[string]string{
+			// TODO: provide human readable format
+			metadatav1.ColumnsWidthAnnotation:     "12",
+			metadatav1.ColumnsAlignmentAnnotation: string(metadatav1.AlignmentRight),
+			metadatav1.DescriptionAnnotation:      "Time that the eBPF program or Gadget has run in nanoseconds",
+			"metrics.type":                        "counter",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.runcountField, err = instance.ds.AddField("runcount", api.Kind_Uint64,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation:     "12",
+			metadatav1.ColumnsAlignmentAnnotation: string(metadatav1.AlignmentRight),
+			metadatav1.DescriptionAnnotation:      "Number of times the eBPF program or Gadget has run",
+			"metrics.type":                        "counter",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.mapMemoryField, err = instance.ds.AddField("mapMemory", api.Kind_Uint64,
+		datasource.WithAnnotations(map[string]string{
+			// TODO provide human readable format
+			metadatav1.ColumnsWidthAnnotation:     "12",
+			metadatav1.ColumnsAlignmentAnnotation: string(metadatav1.AlignmentRight),
+			metadatav1.DescriptionAnnotation:      "Memory used by maps in bytes",
+			"metrics.type":                        "gauge",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.mapCountField, err = instance.ds.AddField("mapCount", api.Kind_Uint64,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation:     "5",
+			metadatav1.ColumnsAlignmentAnnotation: string(metadatav1.AlignmentRight),
+			metadatav1.DescriptionAnnotation:      "Number of maps used by the eBPF program or Gadget",
+			"metrics.type":                        "gauge",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	// process fields
+	// TODO: Ideally these should be arrays, but it's not supported yet by
+	// Inspektor Gadget, see
+	// https://github.com/inspektor-gadget/inspektor-gadget/issues/3032
+	instance.commsField, err = instance.ds.AddField("comms", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation: "16",
+			metadatav1.DescriptionAnnotation:  "List of processes using the eBPF program",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+	instance.pidsField, err = instance.ds.AddField("pids", api.Kind_String,
+		datasource.WithAnnotations(map[string]string{
+			metadatav1.ColumnsWidthAnnotation: "16",
+			metadatav1.DescriptionAnnotation:  "List of PIDs using the eBPF program",
+		}),
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	return instance, nil
+}
+
+func (o *ebpfOperator) InstanceParams() api.Params {
+	return api.Params{
+		{
+			Key:          ParamGadgetStatisticsInterval,
+			Description:  "interval in which to provide gadget statistics",
+			DefaultValue: "1000ms",
+			TypeHint:     api.TypeDuration,
+			Title:        "Gadget statistics interval",
+		},
+		{
+			Key:          ParamAllProgramsStats,
+			Description:  "Collect statistics for all eBPF programs",
+			DefaultValue: "false",
+			TypeHint:     api.TypeBool,
+			Title:        "All programs statistics",
+		},
+	}
+}
+
+func (o *ebpfOperator) Priority() int {
+	return 0
+}
+
+type ebpfOperatorDataInstance struct {
+	bpfOperator *ebpfOperator
+	ds          datasource.DataSource
+	interval    time.Duration
+	done        chan struct{}
+	processMap  *processmap.ProcessMap
+
+	// used to emit incremental values
+	oldProgStats map[ebpf.ProgramID]progStat
+
+	// if true stats are collected with programs granularity
+	allProgramsStats bool
+
+	nodeNameField datasource.FieldAccessor
+	nodeName      string
+
+	// gadget-specific fields
+	gadgetIDField    datasource.FieldAccessor
+	gadgetNameField  datasource.FieldAccessor
+	gadgetImageField datasource.FieldAccessor
+
+	// low-level fields
+	progIDField   datasource.FieldAccessor
+	progNameField datasource.FieldAccessor
+	progTypeField datasource.FieldAccessor
+
+	// stats fields
+	runtimeField   datasource.FieldAccessor
+	runcountField  datasource.FieldAccessor
+	mapMemoryField datasource.FieldAccessor
+	mapCountField  datasource.FieldAccessor
+
+	// process fields
+	commsField datasource.FieldAccessor
+	pidsField  datasource.FieldAccessor
+}
+
+func (i *ebpfOperatorDataInstance) Name() string {
+	return "ebpfdataoperator"
+}
+
+type stat struct {
+	gadgetID    string
+	gadgetName  string
+	gadgetImage string
+
+	programID   uint32
+	programName string
+	programType string
+
+	runtime   uint64
+	runcount  uint64
+	mapMemory uint64
+	mapCount  uint64
+
+	comms string
+	pids  string
+}
+
+type progStat struct {
+	runtime  uint64
+	runcount uint64
+}
+
+func (i *ebpfOperatorDataInstance) sendStats(stats []stat) error {
+	arr, err := i.ds.NewPacketArray()
+	if err != nil {
+		return fmt.Errorf("creating new packet: %w", err)
+	}
+
+	for _, stat := range stats {
+		d := arr.New()
+
+		if i.nodeNameField != nil {
+			i.nodeNameField.PutString(d, i.nodeName)
+		}
+		i.gadgetIDField.PutString(d, stat.gadgetID)
+		i.gadgetNameField.PutString(d, stat.gadgetName)
+		i.gadgetImageField.PutString(d, stat.gadgetImage)
+		if i.allProgramsStats {
+			i.progIDField.PutUint32(d, stat.programID)
+			i.progNameField.PutString(d, stat.programName)
+			i.progTypeField.PutString(d, stat.programType)
+		}
+		i.runtimeField.PutUint64(d, stat.runtime)
+		i.runcountField.PutUint64(d, stat.runcount)
+		i.mapMemoryField.PutUint64(d, stat.mapMemory)
+		i.mapCountField.PutUint64(d, stat.mapCount)
+		i.commsField.PutString(d, stat.comms)
+		i.pidsField.PutString(d, stat.pids)
+
+		arr.Append(d)
+	}
+
+	return i.ds.EmitAndRelease(arr)
+}
+
+func getProgramStats(cache map[ebpf.ProgramID]progStat, id ebpf.ProgramID) (progStat, error) {
+	if stat, ok := cache[id]; ok {
+		return stat, nil
+	}
+
+	prog, err := ebpf.NewProgramFromID(id)
+	if err != nil {
+		return progStat{}, err
+	}
+	defer prog.Close()
+
+	pi, err := prog.Info()
+	if err != nil {
+		return progStat{}, err
+	}
+
+	runtime, _ := pi.Runtime()
+	runcount, _ := pi.RunCount()
+
+	stat := progStat{
+		runtime:  uint64(runtime),
+		runcount: runcount,
+	}
+	cache[id] = stat
+
+	return stat, nil
+}
+
+func enrichStat(stat *stat, processMap map[uint32][]processmaptypes.Process) {
+	procs, ok := processMap[stat.programID]
+	if !ok {
+		return
+	}
+
+	comms := make([]string, 0, len(procs))
+	pids := make([]string, 0, len(procs))
+	for _, proc := range procs {
+		comms = append(comms, proc.Comm)
+		pids = append(pids, fmt.Sprintf("%d", proc.Pid))
+	}
+	stat.comms = strings.Join(comms, ",")
+	stat.pids = strings.Join(pids, ",")
+}
+
+func (i *ebpfOperatorDataInstance) getStats() ([]stat, error) {
+	stats := make([]stat, 0)
+
+	mapSizes, err := bpfstats.GetMapsMemUsage()
+	if err != nil {
+		return nil, fmt.Errorf("getting map memory usage: %w", err)
+	}
+
+	// get process information to enrich ebpf programs
+	processMap, err := i.processMap.Fetch()
+	if err != nil {
+		return nil, fmt.Errorf("getting processMap: %w", err)
+	}
+
+	i.bpfOperator.mu.Lock()
+	defer i.bpfOperator.mu.Unlock()
+
+	oldStats := i.oldProgStats
+	i.oldProgStats = make(map[ebpf.ProgramID]progStat)
+
+	// emit consolidated stats for gadgets
+	if !i.allProgramsStats {
+		cache := make(map[ebpf.ProgramID]progStat)
+
+		for ctx, gadgetObjs := range i.bpfOperator.gadgetObjs {
+			stat := stat{
+				gadgetID:    ctx.ID(),
+				gadgetName:  ctx.Name(),
+				gadgetImage: ctx.ImageName(),
+			}
+
+			for _, id := range gadgetObjs.programIDs {
+				progStat, err := getProgramStats(cache, id)
+				if err != nil {
+					return nil, fmt.Errorf("getting program stats: %w", err)
+				}
+
+				i.oldProgStats[id] = progStat
+				oldProgStats := oldStats[id]
+
+				stat.runtime += progStat.runtime - oldProgStats.runtime
+				stat.runcount += progStat.runcount - oldProgStats.runcount
+			}
+
+			for _, mapID := range gadgetObjs.mapIDs {
+				stat.mapMemory += mapSizes[mapID]
+				stat.mapCount += 1
+			}
+
+			enrichStat(&stat, processMap)
+
+			stats = append(stats, stat)
+		}
+
+		return stats, nil
+	}
+
+	// emit per ebpf programs stats
+	programToGadget := make(map[ebpf.ProgramID]operators.GadgetContext)
+	for ctx, gadgetObjs := range i.bpfOperator.gadgetObjs {
+		for _, id := range gadgetObjs.programIDs {
+			programToGadget[id] = ctx
+		}
+	}
+
+	var curID ebpf.ProgramID
+	var nextID ebpf.ProgramID
+	for {
+		nextID, err = ebpf.ProgramGetNextID(curID)
+		if err != nil {
+			if errors.Is(err, os.ErrNotExist) {
+				break
+			}
+			return nil, fmt.Errorf("getting next program ID: %w", err)
+		}
+		if nextID <= curID {
+			break
+		}
+		curID = nextID
+		prog, err := ebpf.NewProgramFromID(curID)
+		if err != nil {
+			continue
+		}
+		pi, err := prog.Info()
+		if err != nil {
+			prog.Close()
+			continue
+		}
+
+		stat := stat{}
+
+		id, _ := pi.ID()
+		stat.programID = uint32(id)
+		stat.programName = pi.Name
+		stat.programType = pi.Type.String()
+		runtime, _ := pi.Runtime()
+		stat.runtime = uint64(runtime)
+		stat.runcount, _ = pi.RunCount()
+
+		i.oldProgStats[curID] = progStat{
+			runtime:  stat.runtime,
+			runcount: stat.runcount,
+		}
+
+		oldProgStat := oldStats[curID]
+		stat.runtime -= oldProgStat.runtime
+		stat.runcount -= oldProgStat.runcount
+
+		mapIDs, _ := pi.MapIDs()
+		for _, mapID := range mapIDs {
+			stat.mapMemory += mapSizes[mapID]
+			stat.mapCount += 1
+		}
+
+		// enrich with gadget information if they're part of a gadget
+		if ctx, ok := programToGadget[ebpf.ProgramID(id)]; ok {
+			stat.gadgetID = ctx.ID()
+			stat.gadgetName = ctx.Name()
+			stat.gadgetImage = ctx.ImageName()
+		}
+
+		enrichStat(&stat, processMap)
+
+		stats = append(stats, stat)
+
+		prog.Close()
+	}
+
+	return stats, nil
+}
+
+func (i *ebpfOperatorDataInstance) Start(gadgetCtx operators.GadgetContext) error {
+	if err := bpfstats.EnableBPFStats(); err != nil {
+		return fmt.Errorf("enabling bpf stats: %w", err)
+	}
+
+	go func() {
+		ticker := time.NewTicker(i.interval)
+		for {
+			select {
+			case <-i.done:
+				return
+			case <-ticker.C:
+				stats, err := i.getStats()
+				if err != nil {
+					gadgetCtx.Logger().Errorf("Failed to get stats: %v", err)
+					continue
+				}
+				if err := i.sendStats(stats); err != nil {
+					gadgetCtx.Logger().Errorf("Failed to emit stats: %v", err)
+					continue
+				}
+			}
+		}
+	}()
+
+	return nil
+}
+
+func (i *ebpfOperatorDataInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	defer close(i.done)
+
+	if err := bpfstats.DisableBPFStats(); err != nil {
+		return fmt.Errorf("disabling bpf stats: %w", err)
+	}
+
+	return nil
+}
diff --git a/pkg/operators/ebpf/struct.go b/pkg/operators/ebpf/struct.go
index a1a502774..f5e664970 100644
--- a/pkg/operators/ebpf/struct.go
+++ b/pkg/operators/ebpf/struct.go
@@ -147,7 +147,8 @@ func applyAnnotationsTemplateForType(typeName string, dst map[string]string) boo
 		ebpftypes.MntNsTypeName,
 		ebpftypes.NetNsTypeName,
 		ebpftypes.PcommTypeName,
-		ebpftypes.PpidTypeName:
+		ebpftypes.PpidTypeName,
+		ebpftypes.UserStackTypeName:
 		return metadatav1.ApplyAnnotationsTemplate(strings.TrimPrefix(typeName, "gadget_"), dst)
 	case ebpftypes.ProcessTypeName,
 		ebpftypes.CredsTypeName,
diff --git a/pkg/operators/env/env.go b/pkg/operators/env/env.go
new file mode 100644
index 000000000..75d496bfa
--- /dev/null
+++ b/pkg/operators/env/env.go
@@ -0,0 +1,147 @@
+// Copyright 2024-2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package env
+
+import (
+	"fmt"
+	"os"
+	"slices"
+	"strings"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
+)
+
+const (
+	Name     = "env"
+	Priority = 1
+
+	AnnotationPrefix = "env.fields."
+
+	ParamEnvVars = "env-vars"
+)
+
+type Config struct {
+	AllowedVars []string
+}
+
+type envOperator struct {
+	config Config
+}
+
+func (e *envOperator) Name() string {
+	return Name
+}
+
+func (e *envOperator) Init(params *params.Params) error {
+	e.config.AllowedVars = strings.Split(params.Get(ParamEnvVars).AsString(), ",")
+	return nil
+}
+
+func (e *envOperator) GlobalParams() api.Params {
+	return api.Params{
+		{
+			Key:         "env-vars",
+			Description: "Comma-separated list of environment variables to allow to be included",
+			Title:       "Allowed Environment Variables",
+		},
+	}
+}
+
+func (e *envOperator) InstanceParams() api.Params {
+	return nil
+}
+
+func (e *envOperator) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (operators.DataOperatorInstance, error) {
+	instance := &envOperatorInstance{
+		op:     e,
+		fields: make(map[datasource.DataSource][]datasource.DataFunc),
+	}
+	err := instance.init(gadgetCtx)
+	if err != nil {
+		return nil, err
+	}
+	return instance, nil
+}
+
+func (e *envOperator) Priority() int {
+	return Priority
+}
+
+type envOperatorInstance struct {
+	op     *envOperator
+	fields map[datasource.DataSource][]datasource.DataFunc
+}
+
+func (e *envOperatorInstance) Name() string {
+	return Name
+}
+
+func (e *envOperatorInstance) init(gadgetCtx operators.GadgetContext) error {
+	e.fields = make(map[datasource.DataSource][]datasource.DataFunc)
+	for _, ds := range gadgetCtx.GetDataSources() {
+		annotations := ds.Annotations()
+		for k, v := range annotations {
+			fieldName, ok := strings.CutPrefix(k, AnnotationPrefix)
+			if !ok {
+				continue
+			}
+
+			// check, if the environment variable is allowed
+			if !slices.Contains(e.op.config.AllowedVars, v) {
+				return fmt.Errorf("environment var %q not in allowed vars: %v", fieldName, e.op.config.AllowedVars)
+			}
+
+			nf, err := ds.AddField(fieldName, api.Kind_String)
+			if err != nil {
+				return fmt.Errorf("adding field %s: %w", fieldName, err)
+			}
+
+			ct := os.Getenv(v)
+
+			gadgetCtx.Logger().Debugf("adding field %s with content %q from environment variable %q", fieldName, ct, v)
+			e.fields[ds] = append(e.fields[ds], func(ds datasource.DataSource, data datasource.Data) error {
+				return nf.PutString(data, ct)
+			})
+		}
+	}
+	return nil
+}
+
+func (e *envOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error {
+	for ds, funcs := range e.fields {
+		for _, f := range funcs {
+			err := ds.Subscribe(f, 0)
+			if err != nil {
+				return err
+			}
+		}
+	}
+	return nil
+}
+
+func (e *envOperatorInstance) Start(gadgetCtx operators.GadgetContext) error {
+	return nil
+}
+
+func (e *envOperatorInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	return nil
+}
+
+func init() {
+	operators.RegisterDataOperator(&envOperator{})
+}
diff --git a/pkg/operators/env/env_test.go b/pkg/operators/env/env_test.go
new file mode 100644
index 000000000..8d774b745
--- /dev/null
+++ b/pkg/operators/env/env_test.go
@@ -0,0 +1,132 @@
+// Copyright 2024-2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package env
+
+import (
+	"context"
+	"os"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	gadgetcontext "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-context"
+	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/simple"
+)
+
+func TestEnv(t *testing.T) {
+	demoEnvVar := "DEMO_ENV_VAR"
+	demoEnvVal := "Ahoy!"
+	demoFieldName := "env"
+	os.Setenv(demoEnvVar, demoEnvVal)
+	o := &envOperator{}
+	globalParams := apihelpers.ToParamDescs(o.GlobalParams()).ToParams()
+	globalParams.Set(ParamEnvVars, demoEnvVar)
+	err := o.Init(globalParams)
+	require.NoError(t, err)
+
+	var ds datasource.DataSource
+
+	ctx, cancel := context.WithTimeout(context.TODO(), time.Second)
+	defer cancel()
+
+	prepare := func(gadgetCtx operators.GadgetContext) error {
+		var err error
+		ds, err = gadgetCtx.RegisterDataSource(datasource.TypeSingle, "test")
+		require.NoError(t, err)
+		ds.AddAnnotation(AnnotationPrefix+demoFieldName, demoEnvVar)
+		require.NoError(t, err)
+		return nil
+	}
+	produce := func(operators.GadgetContext) error {
+		data, err := ds.NewPacketSingle()
+		assert.NoError(t, err)
+		err = ds.EmitAndRelease(data)
+		assert.NoError(t, err)
+		cancel()
+		return nil
+	}
+	producer := simple.New("producer",
+		simple.WithPriority(Priority-1),
+		simple.OnInit(prepare),
+		simple.OnStart(produce),
+	)
+
+	success := false
+	consume := func(gadgetCtx operators.GadgetContext) error {
+		ds := gadgetCtx.GetDataSources()["test"]
+		require.NotNil(t, ds)
+
+		field := ds.GetField(demoFieldName)
+		require.NotNil(t, field)
+
+		ds.Subscribe(func(ds datasource.DataSource, data datasource.Data) error {
+			sv, err := field.String(data)
+			require.NoError(t, err)
+			assert.Equal(t, demoEnvVal, sv)
+			success = true
+			return nil
+		}, 1000)
+		return nil
+	}
+	consumer := simple.New("consumer",
+		simple.WithPriority(Priority-1),
+		simple.OnPreStart(consume),
+	)
+
+	gadgetCtx := gadgetcontext.New(ctx, "", gadgetcontext.WithDataOperators(o, producer, consumer))
+	err = gadgetCtx.Run(nil)
+	require.NoError(t, err)
+
+	assert.True(t, success)
+}
+
+func TestEnvForbidden(t *testing.T) {
+	demoEnvVar := "DEMO_ENV_VAR"
+	demoEnvVal := "Ahoy!"
+	demoFieldName := "env"
+	os.Setenv(demoEnvVar, demoEnvVal)
+	o := &envOperator{}
+	globalParams := apihelpers.ToParamDescs(o.GlobalParams()).ToParams()
+	// Omitting setting ParamEnvVars here
+	err := o.Init(globalParams)
+	require.NoError(t, err)
+
+	var ds datasource.DataSource
+
+	ctx, cancel := context.WithTimeout(context.TODO(), time.Second)
+	defer cancel()
+
+	prepare := func(gadgetCtx operators.GadgetContext) error {
+		var err error
+		ds, err = gadgetCtx.RegisterDataSource(datasource.TypeSingle, "test")
+		require.NoError(t, err)
+		ds.AddAnnotation(AnnotationPrefix+demoFieldName, demoEnvVar)
+		require.NoError(t, err)
+		return nil
+	}
+	producer := simple.New("producer",
+		simple.WithPriority(Priority-1),
+		simple.OnInit(prepare),
+	)
+
+	gadgetCtx := gadgetcontext.New(ctx, "", gadgetcontext.WithDataOperators(o, producer))
+	err = gadgetCtx.Run(nil)
+	require.Error(t, err)
+}
diff --git a/pkg/operators/filter/filter.go b/pkg/operators/filter/filter.go
index 59ed360f1..4dee7279a 100644
--- a/pkg/operators/filter/filter.go
+++ b/pkg/operators/filter/filter.go
@@ -71,15 +71,18 @@ func (f *filterOperator) InstanceParams() api.Params {
     field<=value     - matches, if the content of field is less than or equal to the value
     field<value      - matches, if the content of field is less than the value
     field~value      - matches, if the content of field matches the regular expression 'value'
+    field!~value     - matches, if the content of field does not match the regular expression 'value'
                  see [https://github.com/google/re2/wiki/Syntax] for more information on the syntax
   Multiple filters can be combined using a comma: field1==value1,field2==value2
+  It is recommended to use single quotes to escape the filter string, especially if using regular expressions.
+  Example: --filter 'field!~regex'
         `,
 		Alias: "F",
 	}}
 }
 
 func (f *filterOperator) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (operators.DataOperatorInstance, error) {
-	filterCfg, _ := instanceParamValues[ParamFilter]
+	filterCfg := instanceParamValues[ParamFilter]
 
 	fop := &filterOperatorInstance{
 		ffns: map[datasource.DataSource][]func(datasource.DataSource, datasource.Data) bool{},
@@ -171,10 +174,7 @@ func extractFilter(filter string) (dsName string, fieldName string, op compariso
 	stage := 0
 	pos := 0
 nextChar:
-	for {
-		if pos >= len(filter) {
-			break
-		}
+	for pos < len(filter) {
 		switch stage {
 		case 0:
 			switch filter[pos] {
diff --git a/pkg/operators/filter/filter_test.go b/pkg/operators/filter/filter_test.go
index 808b79cdf..3722a1bc8 100644
--- a/pkg/operators/filter/filter_test.go
+++ b/pkg/operators/filter/filter_test.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -247,7 +247,7 @@ func TestFilter(t *testing.T) {
 		},
 		{
 			name:         "string escaped match positive",
-			filterString: `stringValueEscaped==a\,\\\/`,
+			filterString: `stringValueEscaped==a\,\/`,
 			match:        true,
 		},
 
diff --git a/pkg/operators/formatters/formatters.go b/pkg/operators/formatters/formatters.go
index 3061d3b00..047bee908 100644
--- a/pkg/operators/formatters/formatters.go
+++ b/pkg/operators/formatters/formatters.go
@@ -46,6 +46,7 @@ const (
 	errnoTargetAnnotation     = "formatters.errno.target"
 	bytesTargetAnnotation     = "formatters.bytes.target"
 	durationTargetAnnotation  = "formatters.duration.target"
+	Priority                  = 0
 )
 
 type formattersOperator struct{}
@@ -137,9 +138,6 @@ func handleL3Endpoint(in datasource.FieldAccessor) (func(entry datasource.Data)
 	if len(ips) != 1 {
 		return nil, fmt.Errorf("expected %d %q field, got %d", 1, ebpftypes.IPAddrTypeName, len(ips))
 	}
-	if ips[0].Size() != 16 {
-		return nil, fmt.Errorf("expected %q to have 16 bytes, got %d", ebpftypes.IPAddrTypeName, ips[0].Size())
-	}
 	ips[0].RemoveReference(true)
 
 	versions := in.GetSubFieldsWithTag("name:version")
@@ -196,7 +194,13 @@ var replacers = []replacer{
 				return nil, err
 			}
 
-			signalField, err := ds.AddField(outName, api.Kind_String, datasource.WithSameParentAs(in))
+			opts := []datasource.FieldOption{
+				datasource.WithAnnotations(map[string]string{
+					metadatav1.ValueOneOfAnnotation: strings.Join(signalNames, ", "),
+				}),
+				datasource.WithSameParentAs(in),
+			}
+			signalField, err := ds.AddField(outName, api.Kind_String, opts...)
 			if err != nil {
 				return nil, err
 			}
@@ -211,6 +215,9 @@ var replacers = []replacer{
 				case 4:
 					signalNumber, _ := in.Uint32(data)
 					signalName := unix.SignalName(syscall.Signal(signalNumber))
+					if signalName == "" {
+						signalName = fmt.Sprintf("signal#%d", signalNumber)
+					}
 					signalField.Set(data, []byte(signalName))
 				}
 				return nil
@@ -229,7 +236,8 @@ var replacers = []replacer{
 
 			opts := []datasource.FieldOption{
 				datasource.WithAnnotations(map[string]string{
-					metadatav1.TemplateAnnotation: "errorString",
+					metadatav1.TemplateAnnotation:   "errorString",
+					metadatav1.ValueOneOfAnnotation: strings.Join(errnoNames, ", "),
 				}),
 				datasource.WithSameParentAs(in),
 			}
@@ -447,18 +455,12 @@ var replacers = []replacer{
 			if len(ports) != 1 {
 				return nil, fmt.Errorf("expected exactly 1 port field")
 			}
-			if ports[0].Size() != 2 {
-				return nil, fmt.Errorf("port size expected to be 2 bytes")
-			}
 
 			protos := in.GetSubFieldsWithTag("name:proto_raw")
 			var protoField datasource.FieldAccessor
 			var protoFieldName string
 
 			if len(protos) == 1 {
-				if protos[0].Size() != 2 {
-					return nil, fmt.Errorf("proto size expected to be 2 bytes")
-				}
 				protoFieldName = strings.TrimSuffix(protos[0].Name(), "_raw")
 				protoField, err = in.AddSubField(protoFieldName, api.Kind_String, datasource.WithFlags(datasource.FieldFlagHidden))
 				if err != nil {
@@ -487,11 +489,17 @@ var replacers = []replacer{
 					return err
 				}
 
-				port, _ := ports[0].Uint16(entry)
+				port, err := ports[0].Uint16(entry)
+				if err != nil {
+					return fmt.Errorf("getting port: %w", err)
+				}
 				endpointF.PutString(entry, fmt.Sprintf("%s:%d", addrStr, port))
 
 				if len(protos) == 1 {
-					protoNumber, _ := protos[0].Uint16(entry)
+					protoNumber, err := protos[0].Uint16(entry)
+					if err != nil {
+						return fmt.Errorf("getting proto: %w", err)
+					}
 					protoName, exist := protocols.GetProtocolNameByNumber(int(protoNumber))
 					if !exist {
 						protoName = fmt.Sprintf("proto#%d", protoNumber)
@@ -506,7 +514,7 @@ var replacers = []replacer{
 }
 
 func (f *formattersOperator) Priority() int {
-	return 0
+	return Priority
 }
 
 type formattersOperatorInstance struct {
diff --git a/pkg/operators/formatters/formatters_test.go b/pkg/operators/formatters/formatters_test.go
new file mode 100644
index 000000000..92e5e2677
--- /dev/null
+++ b/pkg/operators/formatters/formatters_test.go
@@ -0,0 +1,751 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//	http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package formatters
+
+import (
+	"fmt"
+	"net"
+	"runtime"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/require"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
+	ebpftypes "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf/types"
+)
+
+func TestGeneral(t *testing.T) {
+	type testCaseDatum struct {
+		value      any
+		expected   any
+		annotation map[string]string
+		arch       string
+		ok         bool
+	}
+
+	type testCase struct {
+		name     string
+		kind     api.Kind
+		epbftype string
+		putFunc  func(fa datasource.FieldAccessor, data datasource.Data, value any)
+		data     []testCaseDatum
+	}
+
+	testCases := []testCase{
+		{
+			name:     "timestamp",
+			kind:     api.Kind_Uint64,
+			epbftype: ebpftypes.TimestampTypeName,
+			putFunc: func(fa datasource.FieldAccessor, data datasource.Data, value any) {
+				fa.PutUint64(data, value.(uint64))
+			},
+			data: []testCaseDatum{
+				{
+					value:    uint64(1e9), // 1.5 seconds
+					ok:       true,
+					expected: getFormattedTimeFromBootTime(1e9, "2006-01-02T15:04:05.000000000Z07:00"),
+				},
+				{
+					value:    uint64(45 * 60 * 1e9), // 45 minutes
+					ok:       true,
+					expected: getFormattedTimeFromBootTime(45*60*1e9, "02-01-2006 15:04:05"),
+					annotation: map[string]string{
+						"formatters.timestamp.target": "walltime",
+						"formatters.timestamp.format": "02-01-2006 15:04:05",
+					},
+				},
+				{
+					value:    uint64(2 * 60 * 60 * 1e9), // 2 hours
+					ok:       true,
+					expected: getFormattedTimeFromBootTime(2*60*60*1e9, "03:04:05 PM"),
+					annotation: map[string]string{
+						"formatters.timestamp.target": "walltime",
+						"formatters.timestamp.format": "03:04:05 PM",
+					},
+				},
+				{
+					value:    uint64(5*60*60*1e9 + 30*1e9), // 5 hours, 30 seconds
+					ok:       true,
+					expected: getFormattedTimeFromBootTime(5*60*60*1e9+30*1e9, "Monday, January 2, 2006 at 15:04:05 MST"),
+					annotation: map[string]string{
+						"formatters.timestamp.target": "walltime",
+						"formatters.timestamp.format": "Monday, January 2, 2006 at 15:04:05 MST",
+					},
+				},
+				{
+					value:    uint64(9*60*60*1e9 + 15*60*1e9), // 9 hours, 15 minutes
+					ok:       true,
+					expected: getFormattedTimeFromBootTime(9*60*60*1e9+15*60*1e9, "20060102_150405"),
+					annotation: map[string]string{
+						"formatters.timestamp.target": "walltime",
+						"formatters.timestamp.format": "20060102_150405",
+					},
+				},
+			},
+		},
+		{
+			name:     "signal",
+			kind:     api.Kind_Uint32,
+			epbftype: ebpftypes.SignalTypeName,
+			putFunc: func(fa datasource.FieldAccessor, data datasource.Data, value any) {
+				fa.PutUint32(data, value.(uint32))
+			},
+			data: []testCaseDatum{
+				{
+					value:      uint32(9),
+					ok:         true,
+					expected:   "SIGKILL",
+					annotation: nil,
+				},
+				{
+					value:      uint32(15),
+					ok:         true,
+					expected:   "SIGTERM",
+					annotation: map[string]string{"formatters.signal.target": "friendly"},
+				},
+				{
+					value:      uint32(2),
+					ok:         true,
+					expected:   "SIGINT",
+					annotation: map[string]string{"formatters.signal.target": "interrupt"},
+				},
+				{
+					value:      uint32(11),
+					ok:         true,
+					expected:   "SIGSEGV",
+					annotation: map[string]string{"formatters.signal.target": "crash"},
+				},
+				{
+					value:      uint32(1),
+					ok:         true,
+					expected:   "SIGHUP",
+					annotation: map[string]string{"formatters.signal.target": "standard"},
+				},
+				{
+					value:    uint32(32),
+					expected: "signal#32",
+					ok:       true,
+				},
+				{
+					value:    uint32(100),
+					expected: "signal#100",
+					ok:       true,
+				},
+			},
+		},
+		{
+			name:     "errno",
+			kind:     api.Kind_Uint32,
+			epbftype: ebpftypes.ErrnoTypeName,
+			putFunc: func(fa datasource.FieldAccessor, data datasource.Data, value any) {
+				fa.PutUint32(data, value.(uint32))
+			},
+			data: []testCaseDatum{
+				{
+					value:      uint32(2),
+					ok:         true,
+					expected:   "ENOENT",
+					annotation: nil,
+				},
+				{
+					value:      uint32(13),
+					ok:         true,
+					expected:   "EACCES",
+					annotation: map[string]string{"formatters.errno.target": "description"},
+				},
+				{
+					value:      uint32(5),
+					ok:         true,
+					expected:   "EIO",
+					annotation: map[string]string{"formatters.errno.target": "io_error"},
+				},
+				{
+					value:      uint32(28),
+					ok:         true,
+					expected:   "ENOSPC",
+					annotation: map[string]string{"formatters.errno.target": "storage"},
+				},
+				{
+					value:      uint32(110),
+					ok:         true,
+					expected:   "ETIMEDOUT",
+					annotation: map[string]string{"formatters.errno.target": "timeout"},
+				},
+				{
+					value:    uint32(134),
+					expected: "error#134",
+					ok:       true,
+				},
+			},
+		},
+		{
+			name:     "bytes",
+			kind:     api.Kind_Uint64,
+			epbftype: ebpftypes.BytesTypeName,
+			putFunc: func(fa datasource.FieldAccessor, data datasource.Data, value any) {
+				fa.PutUint64(data, value.(uint64))
+			},
+			data: []testCaseDatum{
+				{
+					value:      uint64(1e6),
+					ok:         true,
+					expected:   "1.0 MB",
+					annotation: nil,
+				},
+				{
+					value:      uint64(1e9),
+					ok:         true,
+					expected:   "1.0 GB",
+					annotation: map[string]string{"formatters.bytes.target": "humanreadable"},
+				},
+				{
+					value:      uint64(512),
+					ok:         true,
+					expected:   "512 B",
+					annotation: map[string]string{"formatters.bytes.target": "small_units"},
+				},
+				{
+					value:      uint64(5 * 1e12), // 5 Terabytes
+					ok:         true,
+					expected:   "5.0 TB",
+					annotation: map[string]string{"formatters.bytes.target": "large_units"},
+				},
+				{
+					value:      uint64(256 * 1e6), // 256 Megabytes
+					ok:         true,
+					expected:   "256 MB",
+					annotation: nil,
+				},
+			},
+		},
+		{
+			name:     "duration",
+			kind:     api.Kind_Uint64,
+			epbftype: ebpftypes.DurationTypeName,
+			putFunc: func(fa datasource.FieldAccessor, data datasource.Data, value any) {
+				fa.PutUint64(data, value.(uint64))
+			},
+			data: []testCaseDatum{
+				{
+					value:      uint64(3*time.Second + 250*time.Millisecond),
+					ok:         true,
+					expected:   "3.25s",
+					annotation: nil,
+				},
+				{
+					value:      uint64(5 * time.Minute),
+					ok:         true,
+					expected:   "5m0s",
+					annotation: map[string]string{"formatters.duration.target": "compact"},
+				},
+				{
+					value:      uint64(150 * time.Millisecond),
+					ok:         true,
+					expected:   "150.00ms",
+					annotation: map[string]string{"formatters.duration.target": "milliseconds"},
+				},
+				{
+					value:      uint64(2*time.Hour + 30*time.Minute),
+					ok:         true,
+					expected:   "2h30m0s",
+					annotation: map[string]string{"formatters.duration.target": "longform"},
+				},
+				{
+					value:      uint64(10 * time.Microsecond), // < 1 milli second
+					ok:         true,
+					expected:   "10.00µs",
+					annotation: nil,
+				},
+				{
+					value:      uint64(10 * time.Nanosecond), // < 1 micro second
+					ok:         true,
+					expected:   "10ns",
+					annotation: nil,
+				},
+			},
+		},
+		{
+			name:     "syscall",
+			kind:     api.Kind_Uint64,
+			epbftype: ebpftypes.SyscallTypeName,
+			putFunc: func(fa datasource.FieldAccessor, data datasource.Data, value any) {
+				fa.PutUint64(data, value.(uint64))
+			},
+			data: []testCaseDatum{
+				// AMD64 Test Cases
+				{
+					value:      uint64(60),
+					ok:         true,
+					expected:   "SYS_EXIT",
+					arch:       "amd64",
+					annotation: map[string]string{"formatters.syscall.target": "systarget"},
+				},
+				{
+					value:      uint64(80),
+					ok:         true,
+					expected:   "SYS_CHDIR",
+					arch:       "amd64",
+					annotation: nil,
+				},
+				{
+					value:      uint64(3),
+					ok:         true,
+					expected:   "SYS_CLOSE",
+					arch:       "amd64",
+					annotation: map[string]string{"formatters.syscall.target": "shortname"},
+				},
+				{
+					value:      uint64(292),
+					ok:         true,
+					expected:   "SYS_DUP3",
+					arch:       "amd64",
+					annotation: nil,
+				},
+				{
+					value:      uint64(300),
+					ok:         true,
+					expected:   "SYS_FANOTIFY_INIT",
+					arch:       "amd64",
+					annotation: map[string]string{"formatters.syscall.target": "detailed"},
+				},
+				{
+					value:    uint64(1e6),
+					ok:       true,
+					expected: "SYS_UNKNOWN",
+					arch:     "amd64",
+				},
+
+				// ARM64 Test Cases
+				{
+					value:      uint64(64),
+					ok:         true,
+					expected:   "SYS_WRITE",
+					arch:       "arm64",
+					annotation: nil,
+				},
+				{
+					value:      uint64(211),
+					ok:         true,
+					expected:   "SYS_SENDMSG",
+					arch:       "arm64",
+					annotation: nil,
+				},
+				{
+					value:      uint64(147),
+					ok:         true,
+					expected:   "SYS_SETRESUID",
+					arch:       "arm64",
+					annotation: map[string]string{"formatters.syscall.target": "user"},
+				},
+				{
+					value:      uint64(210),
+					ok:         true,
+					expected:   "SYS_SHUTDOWN",
+					arch:       "arm64",
+					annotation: nil,
+				},
+				{
+					value:      uint64(77),
+					ok:         true,
+					expected:   "SYS_TEE",
+					arch:       "arm64",
+					annotation: map[string]string{"formatters.syscall.target": "network"},
+				},
+				{
+					value:    uint64(1e6),
+					ok:       true,
+					expected: "SYS_UNKNOWN",
+					arch:     "arm64",
+				},
+			},
+		},
+	}
+
+	for _, tc := range testCases {
+		for _, datum := range tc.data {
+			t.Run(
+				fmt.Sprintf("%s input: %v expected output: %v", tc.name, datum.value, datum.expected),
+				func(t *testing.T) {
+					if datum.arch != "" && runtime.GOARCH != datum.arch {
+						t.Skip("skipping test on non-" + datum.arch + " arch")
+					}
+					var rpl replacer
+					found := false
+					for _, r := range replacers {
+						if r.name == tc.name {
+							rpl = r
+							found = true
+							break
+						}
+					}
+					require.True(t, found, "replacer not found for "+tc.name)
+
+					ds, err := datasource.New(datasource.TypeSingle, tc.name)
+					require.NoError(t, err)
+
+					fieldName := fmt.Sprintf("%s_raw", tc.name)
+					fa, err := ds.AddField(fieldName, tc.kind, datasource.WithTags("type:"+tc.epbftype))
+					require.NoError(t, err)
+
+					if datum.annotation != nil {
+						for k, v := range datum.annotation {
+							fa.AddAnnotation(k, v)
+						}
+					}
+
+					lg := logger.DefaultLogger()
+					replacerFunc, err := rpl.replace(lg, ds, fa)
+					require.NoError(t, err)
+
+					data, err := ds.NewPacketSingle()
+					require.NoError(t, err)
+
+					tc.putFunc(fa, data, datum.value)
+
+					err = replacerFunc(data)
+
+					if !datum.ok {
+						require.Error(t, err)
+						return
+					}
+					require.NoError(t, err)
+
+					var formattedField datasource.FieldAccessor
+					if customTargetName, ok := datum.annotation["formatters."+tc.name+".target"]; ok {
+						formattedField = ds.GetField(customTargetName)
+					} else {
+						formattedField = ds.GetField(tc.name)
+					}
+					require.NotNil(t, formattedField, "formatted field not found for "+tc.name)
+					res, err := formattedField.String(data)
+					require.NoError(t, err)
+					require.Equal(t, datum.expected, res)
+				},
+			)
+		}
+	}
+}
+
+func TestL3Formatter(t *testing.T) {
+	type testDataL3 struct {
+		rawIP      []byte
+		expectedIP string
+		ok         bool
+		version    uint8
+	}
+
+	tests := []testDataL3{
+		// IPv4 test cases
+		{
+			rawIP:      ipToBytes("192.168.10.10", 4),
+			expectedIP: "192.168.10.10",
+			ok:         true,
+			version:    4,
+		},
+		{
+			rawIP:      ipToBytes("0.113.45", 4),
+			expectedIP: "0.113.45",
+			ok:         false,
+			version:    4,
+		},
+		{
+			rawIP:      ipToBytes("8.8", 4),
+			expectedIP: "8.8",
+			ok:         false,
+			version:    4,
+		},
+
+		// IPv6 test cases
+		{
+			rawIP:      ipToBytes("2001:db8::1", 6),
+			expectedIP: "2001:db8::1",
+			ok:         true,
+			version:    6,
+		},
+		{
+			rawIP:      ipToBytes("fe80::1", 6),
+			expectedIP: "fe80::1",
+			ok:         true,
+			version:    6,
+		},
+		{
+			rawIP:      ipToBytes("::1", 6),
+			expectedIP: "::1",
+			ok:         true,
+			version:    6,
+		},
+		{
+			rawIP:      ipToBytes("::1", 6),
+			expectedIP: "::1",
+			ok:         false,
+			version:    10, // invalid version
+		},
+	}
+
+	for _, td := range tests {
+		t.Run(
+			fmt.Sprintf("l3endpoint input: %v expected output: %v", td.rawIP, td.expectedIP),
+			func(t *testing.T) {
+				var rpl replacer
+				found := false
+				for _, r := range replacers {
+					if r.name == "l3endpoint" {
+						rpl = r
+						found = true
+						break
+					}
+				}
+				require.True(t, found, "l3endpoint replacer not found")
+
+				ds, err := datasource.New(datasource.TypeSingle, "l3endpoint")
+				require.NoError(t, err)
+
+				fa, err := ds.AddField("l3endpoint_raw", api.Kind_Bytes)
+				require.NoError(t, err)
+
+				ipField, err := fa.AddSubField("l3endpoint_raw", api.Kind_Bytes, datasource.WithTags("type:"+ebpftypes.IPAddrTypeName))
+				require.NoError(t, err)
+
+				versionField, err := fa.AddSubField("version", api.Kind_Uint8, datasource.WithTags("name:version"))
+				require.NoError(t, err)
+
+				lg := logger.DefaultLogger()
+				replacerFunc, err := rpl.replace(lg, ds, fa)
+				require.NoError(t, err)
+
+				data, err := ds.NewPacketSingle()
+				require.NoError(t, err)
+
+				ipField.PutBytes(data, td.rawIP)
+				versionField.PutUint8(data, td.version)
+
+				err = replacerFunc(data)
+				if !td.ok {
+					require.Error(t, err)
+					return
+				}
+				require.NoError(t, err)
+
+				formattedField := ds.GetField("l3endpoint_raw.l3endpoint")
+				require.NotNil(t, formattedField)
+				res, err := formattedField.String(data)
+				require.NoError(t, err)
+				require.Equal(t, td.expectedIP, res)
+			},
+		)
+	}
+}
+
+func TestL4Formatter(t *testing.T) {
+	type testDataL4 struct {
+		rawIP            []byte
+		port             uint16
+		expectedEndpoint string
+		protoNumber      *uint16
+		expectedProto    *string
+		ok               bool
+		version          int
+	}
+
+	tests := []testDataL4{
+		{
+			rawIP:            ipToBytes("192.168.10.10", 4),
+			port:             8080,
+			expectedEndpoint: "192.168.10.10:8080",
+			protoNumber:      uint16Ptr(6),
+			expectedProto:    stringPtr("TCP"),
+			ok:               true,
+			version:          4,
+		},
+		{
+			rawIP:            ipToBytes("10.0.0.1", 4),
+			port:             80,
+			expectedEndpoint: "10.0.0.1:80",
+			protoNumber:      nil,
+			expectedProto:    nil,
+			ok:               true,
+			version:          4,
+		},
+		{
+			rawIP:            ipToBytes("172.16.5.100", 4),
+			port:             0,
+			expectedEndpoint: "172.16.5.100:0",
+			protoNumber:      uint16Ptr(28),
+			expectedProto:    stringPtr("IRTP"),
+			ok:               true,
+			version:          4,
+		},
+		{
+			rawIP:            ipToBytes("203.0.113.45", 4),
+			port:             1234,
+			expectedEndpoint: "203.0.113.45:1234",
+			protoNumber:      uint16Ptr(42),
+			expectedProto:    stringPtr("SDRP"),
+			ok:               true,
+			version:          4,
+		},
+		{
+			rawIP:            ipToBytes("2001:db8::5", 6),
+			port:             8888,
+			expectedEndpoint: "2001:db8::5:8888",
+			protoNumber:      uint16Ptr(78),
+			expectedProto:    stringPtr("WB-MON"),
+			ok:               true,
+			version:          6,
+		},
+		{
+			rawIP:            ipToBytes("2607:f8b0:4005:809::200e", 6),
+			port:             5060,
+			expectedEndpoint: "2607:f8b0:4005:809::200e:5060",
+			protoNumber:      uint16Ptr(126),
+			expectedProto:    stringPtr("CRTP"),
+			ok:               true,
+			version:          6,
+		},
+		{
+			rawIP:            ipToBytes("fe80::1", 6),
+			port:             5353,
+			expectedEndpoint: "fe80::1:5353",
+			protoNumber:      uint16Ptr(141),
+			expectedProto:    stringPtr("WESP"),
+			ok:               true,
+			version:          6,
+		},
+		{
+			rawIP:            ipToBytes("2607:f8b0:4005:809::200e", 6),
+			port:             22,
+			expectedEndpoint: "2607:f8b0:4005:809::200e:22",
+			protoNumber:      uint16Ptr(1000),
+			expectedProto:    stringPtr("proto#1000"),
+			ok:               true,
+			version:          6,
+		},
+		{
+			rawIP:            ipToBytes("2607:f8b0:4005:809::200e", 6),
+			port:             4,
+			expectedEndpoint: "2607:f8b0:4005:809::200e",
+			protoNumber:      uint16Ptr(1000),
+			expectedProto:    stringPtr("TCP"),
+			ok:               false,
+			version:          10, // invalid version
+		},
+	}
+
+	for _, td := range tests {
+		t.Run(
+			fmt.Sprintf("l4endpoint raw: %v port: %d formatted: %v", td.rawIP, td.port, td.expectedEndpoint),
+			func(t *testing.T) {
+				var rpl replacer
+				found := false
+				for _, r := range replacers {
+					if r.name == "l4endpoint" {
+						rpl = r
+						found = true
+						break
+					}
+				}
+				require.True(t, found, "l4endpoint replacer not found")
+
+				ds, err := datasource.New(datasource.TypeSingle, "l4endpoint")
+				require.NoError(t, err)
+
+				fa, err := ds.AddField("l4endpoint_raw", api.Kind_Bytes)
+				require.NoError(t, err)
+
+				ipField, err := fa.AddSubField("l4endpoint_raw", api.Kind_Bytes, datasource.WithTags("type:"+ebpftypes.IPAddrTypeName))
+				require.NoError(t, err)
+
+				versionField, err := fa.AddSubField("version", api.Kind_Uint8, datasource.WithTags("name:version"))
+				require.NoError(t, err)
+
+				portField, err := fa.AddSubField("port", api.Kind_Uint16, datasource.WithTags("name:port"))
+				require.NoError(t, err)
+
+				var protoRawField datasource.FieldAccessor
+				if td.protoNumber != nil {
+					protoRawField, err = fa.AddSubField("proto_raw", api.Kind_Uint16, datasource.WithTags("name:proto_raw"))
+					require.NoError(t, err)
+				}
+
+				lg := logger.DefaultLogger()
+				replacerFunc, err := rpl.replace(lg, ds, fa)
+				require.NoError(t, err)
+
+				data, err := ds.NewPacketSingle()
+				require.NoError(t, err)
+
+				ipField.PutBytes(data, td.rawIP)
+				versionField.PutUint8(data, uint8(td.version))
+				portField.PutUint16(data, td.port)
+				if td.protoNumber != nil {
+					protoRawField.PutUint16(data, *td.protoNumber)
+				}
+
+				err = replacerFunc(data)
+
+				if !td.ok {
+					require.Error(t, err)
+					return
+				}
+
+				require.NoError(t, err)
+
+				endpointField := ds.GetField("l4endpoint_raw.endpoint")
+				require.NotNil(t, endpointField)
+				endpointStr, err := endpointField.String(data)
+				require.NoError(t, err)
+				require.Equal(t, td.expectedEndpoint, endpointStr)
+
+				if td.protoNumber != nil {
+					protoField := ds.GetField("l4endpoint_raw.proto")
+					require.NotNil(t, protoField)
+					protoStr, err := protoField.String(data)
+					require.NoError(t, err)
+					require.Equal(t, *td.expectedProto, protoStr)
+				}
+			})
+	}
+}
+
+func uint16Ptr(v uint16) *uint16 {
+	return &v
+}
+
+func stringPtr(s string) *string {
+	return &s
+}
+
+func ipToBytes(ipStr string, version int) []byte {
+	ip := net.ParseIP(ipStr)
+	if ip == nil {
+		return nil
+	}
+
+	if version == 4 && ip.To4() != nil {
+		return append([]byte(ip.To4()), make([]byte, 12)...)
+	} else if version == 6 && ip.To16() != nil {
+		return ip.To16()
+	}
+	return nil
+}
+
+func getFormattedTimeFromBootTime(bootTime uint64, format string) string {
+	adjusted := gadgets.WallTimeFromBootTime(bootTime)
+	t := time.Unix(0, int64(adjusted))
+	return t.Format(format)
+}
diff --git a/pkg/operators/formatters/types.go b/pkg/operators/formatters/types.go
new file mode 100644
index 000000000..0ee48a947
--- /dev/null
+++ b/pkg/operators/formatters/types.go
@@ -0,0 +1,189 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package formatters
+
+var signalNames = []string{
+	"SIGABRT",
+	"SIGALRM",
+	"SIGBUS",
+	"SIGCHLD",
+	"SIGCLD",
+	"SIGCONT",
+	"SIGFPE",
+	"SIGHUP",
+	"SIGILL",
+	"SIGINT",
+	"SIGIO",
+	"SIGIOT",
+	"SIGKILL",
+	"SIGPIPE",
+	"SIGPOLL",
+	"SIGPROF",
+	"SIGPWR",
+	"SIGQUIT",
+	"SIGSEGV",
+	"SIGSTKFLT",
+	"SIGSTOP",
+	"SIGSYS",
+	"SIGTERM",
+	"SIGTRAP",
+	"SIGTSTP",
+	"SIGTTIN",
+	"SIGTTOU",
+	"SIGUNUSED",
+	"SIGURG",
+	"SIGUSR1",
+	"SIGUSR2",
+	"SIGVTALRM",
+	"SIGWINCH",
+	"SIGXCPU",
+	"SIGXFSZ",
+}
+
+var errnoNames = []string{
+	"E2BIG",
+	"EACCES",
+	"EADDRINUSE",
+	"EADDRNOTAVAIL",
+	"EADV",
+	"EAFNOSUPPORT",
+	"EAGAIN",
+	"EALREADY",
+	"EBADE",
+	"EBADF",
+	"EBADFD",
+	"EBADMSG",
+	"EBADR",
+	"EBADRQC",
+	"EBADSLT",
+	"EBFONT",
+	"EBUSY",
+	"ECANCELED",
+	"ECHILD",
+	"ECHRNG",
+	"ECOMM",
+	"ECONNABORTED",
+	"ECONNREFUSED",
+	"ECONNRESET",
+	"EDEADLK",
+	"EDEADLOCK",
+	"EDESTADDRREQ",
+	"EDOM",
+	"EDOTDOT",
+	"EDQUOT",
+	"EEXIST",
+	"EFAULT",
+	"EFBIG",
+	"EHOSTDOWN",
+	"EHOSTUNREACH",
+	"EIDRM",
+	"EILSEQ",
+	"EINPROGRESS",
+	"EINTR",
+	"EINVAL",
+	"EIO",
+	"EISCONN",
+	"EISDIR",
+	"EISNAM",
+	"EKEYEXPIRED",
+	"EKEYREJECTED",
+	"EKEYREVOKED",
+	"EL2HLT",
+	"EL2NSYNC",
+	"EL3HLT",
+	"EL3RST",
+	"ELIBACC",
+	"ELIBBAD",
+	"ELIBEXEC",
+	"ELIBMAX",
+	"ELIBSCN",
+	"ELNRNG",
+	"ELOOP",
+	"EMEDIUMTYPE",
+	"EMFILE",
+	"EMLINK",
+	"EMSGSIZE",
+	"EMULTIHOP",
+	"ENAMETOOLONG",
+	"ENAVAIL",
+	"ENETDOWN",
+	"ENETRESET",
+	"ENETUNREACH",
+	"ENFILE",
+	"ENOANO",
+	"ENOBUFS",
+	"ENOCSI",
+	"ENODATA",
+	"ENODEV",
+	"ENOENT",
+	"ENOEXEC",
+	"ENOKEY",
+	"ENOLCK",
+	"ENOLINK",
+	"ENOMEDIUM",
+	"ENOMEM",
+	"ENOMSG",
+	"ENONET",
+	"ENOPKG",
+	"ENOPROTOOPT",
+	"ENOSPC",
+	"ENOSR",
+	"ENOSTR",
+	"ENOSYS",
+	"ENOTBLK",
+	"ENOTCONN",
+	"ENOTDIR",
+	"ENOTEMPTY",
+	"ENOTNAM",
+	"ENOTRECOVERABLE",
+	"ENOTSOCK",
+	"ENOTSUP",
+	"ENOTTY",
+	"ENOTUNIQ",
+	"ENXIO",
+	"EOPNOTSUPP",
+	"EOVERFLOW",
+	"EOWNERDEAD",
+	"EPERM",
+	"EPFNOSUPPORT",
+	"EPIPE",
+	"EPROTO",
+	"EPROTONOSUPPORT",
+	"EPROTOTYPE",
+	"ERANGE",
+	"EREMCHG",
+	"EREMOTE",
+	"EREMOTEIO",
+	"ERESTART",
+	"ERFKILL",
+	"EROFS",
+	"ESHUTDOWN",
+	"ESOCKTNOSUPPORT",
+	"ESPIPE",
+	"ESRCH",
+	"ESRMNT",
+	"ESTALE",
+	"ESTRPIPE",
+	"ETIME",
+	"ETIMEDOUT",
+	"ETOOMANYREFS",
+	"ETXTBSY",
+	"EUCLEAN",
+	"EUNATCH",
+	"EUSERS",
+	"EWOULDBLOCK",
+	"EXDEV",
+	"EXFULL",
+}
diff --git a/pkg/operators/generate_networkpolicy/generate_networkpolicy.go b/pkg/operators/generate_networkpolicy/generate_networkpolicy.go
new file mode 100644
index 000000000..91024af7b
--- /dev/null
+++ b/pkg/operators/generate_networkpolicy/generate_networkpolicy.go
@@ -0,0 +1,349 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package generate_networkpolicy
+
+import (
+	"errors"
+	"fmt"
+	"sort"
+
+	v1 "k8s.io/api/core/v1"
+	networkingv1 "k8s.io/api/networking/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/util/intstr"
+	k8syaml "sigs.k8s.io/yaml"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
+)
+
+type NetworkEvent struct {
+	K8s types.K8sMetadata
+
+	egress   bool
+	endpoint types.L4Endpoint
+	proto    string // L4Endpoint has proto as uint8, but we need a string here
+}
+
+var defaultLabelsToIgnore = map[string]struct{}{
+	"controller-revision-hash": {},
+	"pod-template-generation":  {},
+	"pod-template-hash":        {},
+}
+
+var LabelsToIgnore = defaultLabelsToIgnore
+
+/* labelFilteredKeyList returns a sorted list of label keys but without the labels to
+ * ignore.
+ */
+func labelFilteredKeyList(labels map[string]string) []string {
+	keys := make([]string, 0, len(labels))
+	for k := range labels {
+		if _, ok := LabelsToIgnore[k]; ok {
+			continue
+		}
+		keys = append(keys, k)
+	}
+	sort.Strings(keys)
+
+	return keys
+}
+
+func labelFilter(labels map[string]string) map[string]string {
+	ret := map[string]string{}
+	for k := range labels {
+		if _, ok := LabelsToIgnore[k]; ok {
+			continue
+		}
+		ret[k] = labels[k]
+	}
+	return ret
+}
+
+/* labelKeyString returns a sorted list of labels in a single string.
+ * label1=value1,label2=value2
+ */
+func labelKeyString(labels map[string]string) (ret string) {
+	keys := labelFilteredKeyList(labels)
+
+	for index, k := range keys {
+		sep := ","
+		if index == 0 {
+			sep = ""
+		}
+		ret += fmt.Sprintf("%s%s=%s", sep, k, labels[k])
+	}
+	return
+}
+
+/* localPodKey returns a key that can be used to group pods together:
+ * namespace:label1=value1,label2=value2
+ */
+func localPodKey(e NetworkEvent) (ret string) {
+	return e.K8s.Namespace + ":" + labelKeyString(e.K8s.PodLabels)
+}
+
+func networkPeerKey(e NetworkEvent) (string, error) {
+	var ret string
+	switch e.endpoint.Kind {
+	case types.EndpointKindPod:
+		ret = string(e.endpoint.Kind) + ":" + e.endpoint.Namespace + ":" + labelKeyString(e.endpoint.PodLabels)
+	case types.EndpointKindService:
+		ret = string(e.endpoint.Kind) + ":" + e.endpoint.Namespace + ":" + labelKeyString(e.endpoint.PodLabels)
+	case types.EndpointKindRaw:
+		ret = string(e.endpoint.Kind) + ":" + e.endpoint.Addr
+	default:
+		return "", fmt.Errorf("unknown endpoint kind: %s", e.endpoint.Kind)
+	}
+	return fmt.Sprintf("%s:%d", ret, e.endpoint.Port), nil
+}
+
+func eventToRule(e NetworkEvent) ([]networkingv1.NetworkPolicyPort, []networkingv1.NetworkPolicyPeer, error) {
+	port := intstr.FromInt(int(e.endpoint.Port))
+	protocol := v1.Protocol(e.proto)
+	ports := []networkingv1.NetworkPolicyPort{
+		{
+			Port:     &port,
+			Protocol: &protocol,
+		},
+	}
+	var peers []networkingv1.NetworkPolicyPeer
+	switch e.endpoint.Kind {
+	case types.EndpointKindPod:
+		peers = []networkingv1.NetworkPolicyPeer{
+			{
+				PodSelector: &metav1.LabelSelector{MatchLabels: labelFilter(e.endpoint.PodLabels)},
+			},
+		}
+		if e.K8s.Namespace != e.endpoint.Namespace {
+			peers[0].NamespaceSelector = &metav1.LabelSelector{
+				MatchLabels: map[string]string{
+					// Kubernetes 1.22 is guaranteed to add the following label on namespaces:
+					// kubernetes.io/metadata.name=obj.Name
+					// See:
+					// https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/2161-apiserver-default-labels#proposal
+					"kubernetes.io/metadata.name": e.endpoint.Namespace,
+				},
+			}
+		}
+	case types.EndpointKindService:
+		peers = []networkingv1.NetworkPolicyPeer{
+			{
+				PodSelector: &metav1.LabelSelector{MatchLabels: e.endpoint.PodLabels},
+			},
+		}
+		if e.K8s.Namespace != e.endpoint.Namespace {
+			peers[0].NamespaceSelector = &metav1.LabelSelector{
+				MatchLabels: map[string]string{
+					// Kubernetes 1.22 is guaranteed to add the following label on namespaces:
+					// kubernetes.io/metadata.name=obj.Name
+					// See:
+					// https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/2161-apiserver-default-labels#proposal
+					"kubernetes.io/metadata.name": e.endpoint.Namespace,
+				},
+			}
+		}
+	case types.EndpointKindRaw:
+		if e.endpoint.Addr == "127.0.0.1" {
+			// No need to generate a network policy for localhost
+			peers = []networkingv1.NetworkPolicyPeer{}
+		} else {
+			peers = []networkingv1.NetworkPolicyPeer{
+				{
+					IPBlock: &networkingv1.IPBlock{
+						CIDR: e.endpoint.Addr + "/32",
+					},
+				},
+			}
+		}
+	default:
+		return nil, nil, fmt.Errorf("unknown endpoint kind: %s", e.endpoint.Kind)
+	}
+	return ports, peers, nil
+}
+
+func sortIngressRules(rules []networkingv1.NetworkPolicyIngressRule) ([]networkingv1.NetworkPolicyIngressRule, error) {
+	var errs []error
+	sort.Slice(rules, func(i, j int) bool {
+		ri, rj := rules[i], rules[j]
+
+		// No need to support all network policies, but only the ones
+		// generated by eventToRule()
+		if len(ri.Ports) != 1 || len(rj.Ports) != 1 {
+			errs = append(errs, fmt.Errorf("rules with multiple ports"))
+			return true
+		}
+		if ri.Ports[0].Protocol == nil || rj.Ports[0].Protocol == nil {
+			errs = append(errs, fmt.Errorf("rules without protocol"))
+			return true
+		}
+
+		switch {
+		case *ri.Ports[0].Protocol != *rj.Ports[0].Protocol:
+			return *ri.Ports[0].Protocol < *rj.Ports[0].Protocol
+		case ri.Ports[0].Port.IntVal != rj.Ports[0].Port.IntVal:
+			return ri.Ports[0].Port.IntVal < rj.Ports[0].Port.IntVal
+		default:
+			yamlOutput1, _ := k8syaml.Marshal(ri)
+			yamlOutput2, _ := k8syaml.Marshal(rj)
+			return string(yamlOutput1) < string(yamlOutput2)
+		}
+	})
+	return rules, errors.Join(errs...)
+}
+
+func sortEgressRules(rules []networkingv1.NetworkPolicyEgressRule) ([]networkingv1.NetworkPolicyEgressRule, error) {
+	var errs []error
+	sort.Slice(rules, func(i, j int) bool {
+		ri, rj := rules[i], rules[j]
+
+		// No need to support all network policies, but only the ones
+		// generated by eventToRule()
+		if len(ri.Ports) != 1 || len(rj.Ports) != 1 {
+			errs = append(errs, fmt.Errorf("rules with multiple ports"))
+			return true
+		}
+		if ri.Ports[0].Protocol == nil || rj.Ports[0].Protocol == nil {
+			errs = append(errs, fmt.Errorf("rules without protocol"))
+			return true
+		}
+
+		switch {
+		case *ri.Ports[0].Protocol != *rj.Ports[0].Protocol:
+			return *ri.Ports[0].Protocol < *rj.Ports[0].Protocol
+		case ri.Ports[0].Port.IntVal != rj.Ports[0].Port.IntVal:
+			return ri.Ports[0].Port.IntVal < rj.Ports[0].Port.IntVal
+		default:
+			yamlOutput1, _ := k8syaml.Marshal(ri)
+			yamlOutput2, _ := k8syaml.Marshal(rj)
+			return string(yamlOutput1) < string(yamlOutput2)
+		}
+	})
+	return rules, errors.Join(errs...)
+}
+
+func handleEvents(eventsBySource map[string][]NetworkEvent) ([]networkingv1.NetworkPolicy, error) {
+	policies := make([]networkingv1.NetworkPolicy, 0, len(eventsBySource))
+
+	for _, events := range eventsBySource {
+		egressNetworkPeer := map[string]NetworkEvent{}
+		ingressNetworkPeer := map[string]NetworkEvent{}
+		for _, e := range events {
+			key, err := networkPeerKey(e)
+			if err != nil {
+				return nil, fmt.Errorf("generating network peer key: %w", err)
+			}
+			// api.Warnf("key for event with kind %s: %s", e.endpoint.Kind, key)
+			if e.egress {
+				if _, ok := egressNetworkPeer[key]; ok {
+					// api.Warnf("duplicate egress network peer: %s", key)
+					continue
+				}
+				egressNetworkPeer[key] = e
+			} else {
+				if _, ok := ingressNetworkPeer[key]; ok {
+					// api.Warnf("duplicate ingress network peer: %s", key)
+					continue
+				}
+				ingressNetworkPeer[key] = e
+			}
+		}
+		// api.Warnf("> Found %d egress network peers", len(egressNetworkPeer))
+		// api.Warnf("> Found %d ingress network peers", len(ingressNetworkPeer))
+
+		egressPolicies := []networkingv1.NetworkPolicyEgressRule{}
+		for _, p := range egressNetworkPeer {
+			ports, peers, err := eventToRule(p)
+			if err != nil {
+				return nil, fmt.Errorf("generating network policy egress rule: %w", err)
+			}
+			if len(peers) > 0 {
+				rule := networkingv1.NetworkPolicyEgressRule{
+					Ports: ports,
+					To:    peers,
+				}
+				egressPolicies = append(egressPolicies, rule)
+			}
+		}
+		ingressPolicies := []networkingv1.NetworkPolicyIngressRule{}
+		for _, p := range ingressNetworkPeer {
+			ports, peers, err := eventToRule(p)
+			if err != nil {
+				return nil, fmt.Errorf("generating network policy ingress rule: %w", err)
+			}
+			if len(peers) > 0 {
+				rule := networkingv1.NetworkPolicyIngressRule{
+					Ports: ports,
+					From:  peers,
+				}
+				ingressPolicies = append(ingressPolicies, rule)
+			}
+		}
+
+		name := events[0].K8s.PodName
+		if events[0].K8s.Owner.Name != "" {
+			name = events[0].K8s.Owner.Name
+		}
+		ingressRules, err := sortIngressRules(ingressPolicies)
+		if err != nil {
+			return nil, fmt.Errorf("sorting ingress rules: %w", err)
+		}
+		egressRules, err := sortEgressRules(egressPolicies)
+		if err != nil {
+			return nil, fmt.Errorf("sorting egress rules: %w", err)
+		}
+		name += "-network"
+		policy := networkingv1.NetworkPolicy{
+			TypeMeta: metav1.TypeMeta{
+				APIVersion: "networking.k8s.io/v1",
+				Kind:       "NetworkPolicy",
+			},
+			ObjectMeta: metav1.ObjectMeta{
+				Name:      name,
+				Namespace: events[0].K8s.Namespace,
+				Labels:    map[string]string{},
+			},
+			Spec: networkingv1.NetworkPolicySpec{
+				PodSelector: metav1.LabelSelector{MatchLabels: labelFilter(events[0].K8s.PodLabels)},
+				PolicyTypes: []networkingv1.PolicyType{"Ingress", "Egress"},
+				Ingress:     ingressRules,
+				Egress:      egressRules,
+			},
+		}
+		policies = append(policies, policy)
+	}
+
+	sort.Slice(policies, func(i, j int) bool {
+		return policies[i].Name < policies[j].Name
+	})
+
+	return policies, nil
+}
+
+func FormatPolicies(policies []networkingv1.NetworkPolicy) (out string) {
+	for i, p := range policies {
+		// api.Warnf("policy %d: %s", i, p.Name)
+		yamlOutput, err := k8syaml.Marshal(p)
+		if err != nil {
+			// api.Warnf("marshalling policy: %s", err)
+			continue
+		}
+		sep := "---\n"
+		if i == len(policies)-1 {
+			sep = ""
+		}
+		out += fmt.Sprintf("%s%s", string(yamlOutput), sep)
+	}
+	return
+}
diff --git a/pkg/operators/generate_networkpolicy/generate_networkpolicy_op.go b/pkg/operators/generate_networkpolicy/generate_networkpolicy_op.go
new file mode 100644
index 000000000..512fcfa8b
--- /dev/null
+++ b/pkg/operators/generate_networkpolicy/generate_networkpolicy_op.go
@@ -0,0 +1,299 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Package generate_networkpolicy provides an operator that generates network policies
+// based on the network traffic observed in the cluster.
+// This is a temporary solution until we have a way of running gadget code on the client side
+package generate_networkpolicy
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
+)
+
+const (
+	name     = "GenerateNetworkPolicy"
+	Priority = 9200
+)
+
+type gnpOperator struct{}
+
+func (s *gnpOperator) Name() string {
+	return name
+}
+
+func (s *gnpOperator) Init(params *params.Params) error {
+	return nil
+}
+
+func (s *gnpOperator) GlobalParams() api.Params {
+	return nil
+}
+
+func (s *gnpOperator) InstanceParams() api.Params {
+	return nil
+}
+
+type k8sAccesors struct {
+	k8sHostNetwork       datasource.FieldAccessor
+	k8sNamespace         datasource.FieldAccessor
+	k8sPodLabels         datasource.FieldAccessor
+	k8sPodIP             datasource.FieldAccessor
+	k8sPodName           datasource.FieldAccessor
+	k8sOwnerName         datasource.FieldAccessor
+	endpointAddr         datasource.FieldAccessor
+	endpointPort         datasource.FieldAccessor
+	endpointK8sKind      datasource.FieldAccessor
+	endpointK8sName      datasource.FieldAccessor
+	endpointK8sNamespace datasource.FieldAccessor
+	endpointK8sLabels    datasource.FieldAccessor
+	endpointProto        datasource.FieldAccessor
+	egress               datasource.FieldAccessor
+
+	adviseDS    datasource.DataSource
+	adviseField datasource.FieldAccessor
+}
+
+func (s *gnpOperator) getAccessors(gadgetCtx operators.GadgetContext) (map[datasource.DataSource]k8sAccesors, error) {
+	logger := gadgetCtx.Logger()
+	accessors := make(map[datasource.DataSource]k8sAccesors)
+	for _, ds := range gadgetCtx.GetDataSources() {
+		logger.Debugf("GenerateNetworkPolicy inspecting datasource %q", ds.Name())
+
+		if ds.Annotations()["generate_networkpolicy.enable"] != "true" {
+			logger.Debugf("GenerateNetworkPolicy not enabled by annotation")
+			continue
+		}
+
+		acc := k8sAccesors{}
+
+		acc.k8sHostNetwork = ds.GetField("k8s.hostnetwork")
+		if acc.k8sHostNetwork == nil {
+			return nil, fmt.Errorf("no hostnetwork field found")
+		}
+		acc.k8sNamespace = ds.GetField("k8s.namespace")
+		if acc.k8sNamespace == nil {
+			return nil, fmt.Errorf("no namespace field found")
+		}
+		acc.k8sPodLabels = ds.GetField("k8s.podLabels")
+		if acc.k8sPodLabels == nil {
+			return nil, fmt.Errorf("no podLabels field found")
+		}
+		acc.k8sPodIP = ds.GetField("k8s.podIP")
+		if acc.k8sPodIP == nil {
+			return nil, fmt.Errorf("no podIP field found")
+		}
+		acc.k8sPodName = ds.GetField("k8s.podName")
+		if acc.k8sPodName == nil {
+			return nil, fmt.Errorf("no podName field found")
+		}
+		acc.k8sOwnerName = ds.GetField("k8s.owner.name")
+		if acc.k8sOwnerName == nil {
+			return nil, fmt.Errorf("no owner.name field found")
+		}
+		acc.endpointAddr = ds.GetField("endpoint.addr")
+		if acc.endpointAddr == nil {
+			return nil, fmt.Errorf("no endpoint.addr field found")
+		}
+		acc.endpointPort = ds.GetField("endpoint.port")
+		if acc.endpointPort == nil {
+			return nil, fmt.Errorf("no endpoint.port field found")
+		}
+		acc.endpointK8sKind = ds.GetField("endpoint.k8s.kind")
+		if acc.endpointK8sKind == nil {
+			return nil, fmt.Errorf("no endpoint.k8s.kind field found")
+		}
+		acc.endpointK8sName = ds.GetField("endpoint.k8s.name")
+		if acc.endpointK8sName == nil {
+			return nil, fmt.Errorf("no endpoint.k8s.name field found")
+		}
+		acc.endpointK8sNamespace = ds.GetField("endpoint.k8s.namespace")
+		if acc.endpointK8sNamespace == nil {
+			return nil, fmt.Errorf("no endpoint.k8s.namespace field found")
+		}
+		acc.endpointK8sLabels = ds.GetField("endpoint.k8s.labels")
+		if acc.endpointK8sLabels == nil {
+			return nil, fmt.Errorf("no endpoint.k8s.labels field found")
+		}
+		acc.endpointProto = ds.GetField("endpoint.proto")
+		if acc.endpointProto == nil {
+			return nil, fmt.Errorf("no endpoint.proto field found")
+		}
+		acc.egress = ds.GetField("egress")
+		if acc.egress == nil {
+			return nil, fmt.Errorf("no egress field found")
+		}
+
+		// Disable datasource for other operators
+		ds.Unreference()
+
+		var err error
+		acc.adviseDS, err = gadgetCtx.RegisterDataSource(
+			datasource.TypeSingle,
+			fmt.Sprintf("advise-%s", ds.Name()),
+		)
+		if err != nil {
+			return nil, fmt.Errorf("registering policies data source for %s: %w", acc.adviseDS.Name(), err)
+		}
+		gadgetCtx.Logger().Debugf("GenerateNetworkPolicy: registered ds %q", acc.adviseDS.Name())
+
+		acc.adviseDS.AddAnnotation("cli.default-output-mode", "advise")
+		acc.adviseDS.AddAnnotation("cli.supported-output-modes", "advise")
+
+		acc.adviseField, err = acc.adviseDS.AddField("text", api.Kind_String)
+		if err != nil {
+			return nil, fmt.Errorf("adding field %q: %w", "text", err)
+		}
+
+		accessors[ds] = acc
+	}
+	return accessors, nil
+}
+
+func (s *gnpOperator) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (operators.DataOperatorInstance, error) {
+	accessors, err := s.getAccessors(gadgetCtx)
+	if err != nil {
+		return nil, fmt.Errorf("getting accessors: %w", err)
+	}
+	if len(accessors) == 0 {
+		gadgetCtx.Logger().Debug("GenerateNetworkPolicy: no datasources requiring the operator found")
+		return nil, nil
+	}
+	return &gnpOperatorInstance{
+		accessors: accessors,
+	}, nil
+}
+
+func (s *gnpOperator) Priority() int {
+	return Priority
+}
+
+type gnpOperatorInstance struct {
+	accessors map[datasource.DataSource]k8sAccesors
+}
+
+func (s *gnpOperatorInstance) Name() string {
+	return name + "Instance"
+}
+
+func (s *gnpOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error {
+	for ds, acc := range s.accessors {
+		ds.SubscribeArray(func(source datasource.DataSource, packet datasource.DataArray) error {
+			eventsBySource := map[string][]NetworkEvent{}
+			for i := range packet.Len() {
+				data := packet.Get(i)
+				k8sLabelsRaw, _ := acc.k8sPodLabels.String(data)
+				k8sLabelPairs := strings.Split(k8sLabelsRaw, ",")
+
+				hostNetwork, _ := acc.k8sHostNetwork.Bool(data)
+				if hostNetwork {
+					continue
+				}
+
+				e := NetworkEvent{
+					endpoint: types.L4Endpoint{
+						L3Endpoint: types.L3Endpoint{
+							PodLabels: map[string]string{},
+						},
+					},
+					K8s: types.K8sMetadata{
+						BasicK8sMetadata: types.BasicK8sMetadata{
+							PodLabels: map[string]string{},
+						},
+					},
+				}
+
+				egressRaw, _ := acc.egress.Uint8(data)
+				e.egress = egressRaw != 0
+				e.endpoint.Addr, _ = acc.endpointAddr.String(data)
+				e.endpoint.Port, _ = acc.endpointPort.Uint16(data)
+				e.endpoint.Name, _ = acc.endpointK8sName.String(data)
+				e.endpoint.Namespace, _ = acc.endpointK8sNamespace.String(data)
+				e.proto, _ = acc.endpointProto.String(data)
+
+				endpointEndpointStr, _ := acc.endpointK8sKind.String(data)
+				e.endpoint.Kind = types.EndpointKind(endpointEndpointStr)
+
+				endpointK8sPodLabelsRaw, _ := acc.endpointK8sLabels.String(data)
+				endpointK8sLabelPairs := strings.Split(endpointK8sPodLabelsRaw, ",")
+				for _, pair := range endpointK8sLabelPairs {
+					kv := strings.Split(pair, "=")
+					if len(kv) != 2 {
+						continue
+					}
+					e.endpoint.PodLabels[kv[0]] = kv[1]
+				}
+
+				e.K8s.PodName, _ = acc.k8sPodName.String(data)
+				e.K8s.Owner.Name, _ = acc.k8sOwnerName.String(data)
+				e.K8s.HostNetwork = hostNetwork
+				e.K8s.Namespace, _ = acc.k8sNamespace.String(data)
+				for _, pair := range k8sLabelPairs {
+					kv := strings.Split(pair, "=")
+					if len(kv) != 2 {
+						continue
+					}
+					e.K8s.PodLabels[kv[0]] = kv[1]
+				}
+
+				// Kubernetes Network Policies can't block traffic from a pod's
+				// own resident node. Therefore we must not generate a network
+				// policy in that case.
+				podIP, _ := acc.k8sPodIP.String(data)
+				if !e.egress && podIP == e.endpoint.Addr {
+					continue
+				}
+
+				key := localPodKey(e)
+				eventsBySource[key] = append(eventsBySource[key], e)
+			}
+
+			if len(eventsBySource) != 0 {
+				// api.Warnf("Got %d events by source", len(eventsBySource))
+				policies, err := handleEvents(eventsBySource)
+				if err != nil {
+					return fmt.Errorf("handling events: %w", err)
+				}
+				// api.Warnf("> Created %d policies", len(policies))
+				policiesStr := FormatPolicies(policies)
+				//// api.Warnf("> Policies:\n%s", policiesStr[:100])
+
+				yamlPack, err := acc.adviseDS.NewPacketSingle()
+				if err != nil {
+					return fmt.Errorf("creating packet: %w", err)
+				}
+				acc.adviseField.PutString(yamlPack, policiesStr)
+				acc.adviseDS.EmitAndRelease(yamlPack)
+			}
+			return nil
+		}, 0)
+	}
+	return nil
+}
+
+func (s *gnpOperatorInstance) Start(gadgetCtx operators.GadgetContext) error {
+	return nil
+}
+
+func (s *gnpOperatorInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	return nil
+}
+
+var GNPOperator = &gnpOperator{}
diff --git a/pkg/operators/kubeipresolver/kubeipresolver.go b/pkg/operators/kubeipresolver/kubeipresolver.go
index 35ace0212..a9d2f1d30 100644
--- a/pkg/operators/kubeipresolver/kubeipresolver.go
+++ b/pkg/operators/kubeipresolver/kubeipresolver.go
@@ -333,6 +333,14 @@ func (m *KubeIPResolverInstance) Start(gadgetCtx operators.GadgetContext) error
 						v := fmt.Sprintf("s/%s/%s:%d", svc.Namespace, svc.Name, p)
 						a.column.Set(data, []byte(v))
 					}
+					continue
+				}
+
+				a.subK8sKind.Set(data, []byte("raw"))
+				if a.column != nil && a.port != nil {
+					p, _ := a.port.Uint16(data)
+					v := fmt.Sprintf("r/%s:%d", addrStr, p)
+					a.column.Set(data, []byte(v))
 				}
 			}
 			return errs
diff --git a/pkg/operators/kubemanager/kubemanager.go b/pkg/operators/kubemanager/kubemanager.go
index 8bf2141cf..e2fc47278 100644
--- a/pkg/operators/kubemanager/kubemanager.go
+++ b/pkg/operators/kubemanager/kubemanager.go
@@ -1,4 +1,4 @@
-// Copyright 2023-2024 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@ import (
 	"github.com/cilium/ebpf"
 	"github.com/google/uuid"
 	log "github.com/sirupsen/logrus"
+	"github.com/spf13/viper"
 
 	containercollection "github.com/inspektor-gadget/inspektor-gadget/pkg/container-collection"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
@@ -30,7 +31,9 @@ import (
 	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgettracermanager"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/common"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
 )
@@ -198,17 +201,16 @@ type KubeManagerInstance struct {
 	gadgetCtx          operators.GadgetContext
 
 	eventWrappers map[datasource.DataSource]*compat.EventWrapperBase
+
+	containersPublisher *common.ContainersPublisher
 }
 
 func (m *KubeManagerInstance) Name() string {
 	return OperatorName
 }
 
-func (m *KubeManagerInstance) PreGadgetRun() error {
-	log := m.gadgetCtx.Logger()
-
+func newContainerSelector(selectorSlice []string, namespace, podName, containerName string, useAllNamespace bool) containercollection.ContainerSelector {
 	labels := make(map[string]string)
-	selectorSlice := m.params.Get(ParamSelector).AsStringSlice()
 	for _, pair := range selectorSlice {
 		kv := strings.Split(pair, "=")
 		labels[kv[0]] = kv[1]
@@ -217,18 +219,43 @@ func (m *KubeManagerInstance) PreGadgetRun() error {
 	containerSelector := containercollection.ContainerSelector{
 		K8s: containercollection.K8sSelector{
 			BasicK8sMetadata: types.BasicK8sMetadata{
-				Namespace:     m.params.Get(ParamNamespace).AsString(),
-				PodName:       m.params.Get(ParamPodName).AsString(),
-				ContainerName: m.params.Get(ParamContainerName).AsString(),
+				Namespace:     namespace,
+				PodName:       podName,
+				ContainerName: containerName,
 				PodLabels:     labels,
 			},
 		},
 	}
 
-	if m.params.Get(ParamAllNamespaces).AsBool() {
+	if useAllNamespace {
 		containerSelector.K8s.Namespace = ""
 	}
 
+	return containerSelector
+}
+
+func (m *KubeManagerInstance) PreGadgetRun() error {
+	log := m.gadgetCtx.Logger()
+
+	if m.gadgetInstance != nil {
+		err := m.handleGadgetInstance(log)
+		if err != nil {
+			return err
+		}
+	}
+
+	return nil
+}
+
+func (m *KubeManagerInstance) handleGadgetInstance(log logger.Logger) error {
+	containerSelector := newContainerSelector(
+		m.params.Get(ParamSelector).AsStringSlice(),
+		m.params.Get(ParamNamespace).AsString(),
+		m.params.Get(ParamPodName).AsString(),
+		m.params.Get(ParamContainerName).AsString(),
+		m.params.Get(ParamAllNamespaces).AsBool(),
+	)
+
 	if setter, ok := m.gadgetInstance.(MountNsMapSetter); ok {
 		err := m.manager.gadgetTracerManager.AddTracer(m.id, containerSelector)
 		if err != nil {
@@ -305,7 +332,6 @@ func (m *KubeManagerInstance) PreGadgetRun() error {
 			attachContainerFunc(container)
 		}
 	}
-
 	return nil
 }
 
@@ -314,6 +340,7 @@ func (m *KubeManagerInstance) PostGadgetRun() error {
 		m.gadgetCtx.Logger().Debugf("calling RemoveTracer()")
 		m.manager.gadgetTracerManager.RemoveTracer(m.id)
 	}
+
 	if m.subscribed {
 		m.gadgetCtx.Logger().Debugf("calling Unsubscribe()")
 		m.manager.gadgetTracerManager.Unsubscribe(m.id)
@@ -323,15 +350,16 @@ func (m *KubeManagerInstance) PostGadgetRun() error {
 			m.attacher.DetachContainer(container)
 		}
 	}
+
 	return nil
 }
 
 func (m *KubeManagerInstance) enrich(ev any) {
 	if event, canEnrichEventFromMountNs := ev.(operators.ContainerInfoFromMountNSID); canEnrichEventFromMountNs {
-		m.manager.gadgetTracerManager.ContainerCollection.EnrichEventByMntNs(event)
+		m.manager.gadgetTracerManager.EnrichEventByMntNs(event)
 	}
 	if event, canEnrichEventFromNetNs := ev.(operators.ContainerInfoFromNetNSID); canEnrichEventFromNetNs {
-		m.manager.gadgetTracerManager.ContainerCollection.EnrichEventByNetNs(event)
+		m.manager.gadgetTracerManager.EnrichEventByNetNs(event)
 	}
 }
 
@@ -360,6 +388,25 @@ func (k *KubeManager) InstantiateDataOperator(gadgetCtx operators.GadgetContext,
 		return nil, err
 	}
 
+	cfg, ok := gadgetCtx.GetVar("config")
+	if !ok {
+		return nil, fmt.Errorf("missing configuration")
+	}
+	v, ok := cfg.(*viper.Viper)
+	if !ok {
+		return nil, fmt.Errorf("invalid configuration format")
+	}
+
+	enableContainersDs := v.GetBool("annotations.enable-containers-datasource")
+
+	var containersPublisher *common.ContainersPublisher
+	if enableContainersDs {
+		containersPublisher, err = common.NewContainersPublisher(gadgetCtx, &k.gadgetTracerManager.ContainerCollection)
+		if err != nil {
+			return nil, fmt.Errorf("creating containers publisher: %w", err)
+		}
+	}
+
 	traceInstance := &KubeManagerInstance{
 		manager:            k,
 		enrichEvents:       false,
@@ -369,13 +416,8 @@ func (k *KubeManager) InstantiateDataOperator(gadgetCtx operators.GadgetContext,
 		id:                 uuid.New().String(),
 
 		eventWrappers: make(map[datasource.DataSource]*compat.EventWrapperBase),
-	}
 
-	// hack - this makes it possible to use the Attacher interface
-	var ok bool
-	traceInstance.gadgetInstance, ok = gadgetCtx.GetVar("ebpfInstance")
-	if !ok {
-		return nil, fmt.Errorf("getting ebpfInstance")
+		containersPublisher: containersPublisher,
 	}
 
 	activate := false
@@ -421,10 +463,12 @@ func (m *KubeManagerInstance) ParamDescs(gadgetCtx operators.GadgetContext) para
 }
 
 func (m *KubeManagerInstance) PreStart(gadgetCtx operators.GadgetContext) error {
+	m.gadgetInstance, _ = gadgetCtx.GetVar("ebpfInstance")
+
 	compat.Subscribe(
 		m.eventWrappers,
-		m.manager.gadgetTracerManager.ContainerCollection.EnrichEventByMntNs,
-		m.manager.gadgetTracerManager.ContainerCollection.EnrichEventByNetNs,
+		m.manager.gadgetTracerManager.EnrichEventByMntNs,
+		m.manager.gadgetTracerManager.EnrichEventByNetNs,
 		0,
 	)
 
@@ -476,11 +520,28 @@ func (m *KubeManagerInstance) PreStart(gadgetCtx operators.GadgetContext) error
 }
 
 func (m *KubeManagerInstance) Start(gadgetCtx operators.GadgetContext) error {
-	return nil
+	if m.containersPublisher == nil {
+		return nil
+	}
+
+	containerSelector := newContainerSelector(
+		m.params.Get(ParamSelector).AsStringSlice(),
+		m.params.Get(ParamNamespace).AsString(),
+		m.params.Get(ParamPodName).AsString(),
+		m.params.Get(ParamContainerName).AsString(),
+		m.params.Get(ParamAllNamespaces).AsBool(),
+	)
+
+	return m.containersPublisher.PublishContainers(true, []*containercollection.Container{}, containerSelector)
 }
 
 func (m *KubeManagerInstance) Stop(gadgetCtx operators.GadgetContext) error {
 	m.manager.gadgetTracerManager.RemoveTracer(m.id)
+
+	if m.containersPublisher != nil {
+		m.containersPublisher.Unsubscribe()
+	}
+
 	return nil
 }
 
diff --git a/pkg/operators/kubenameresolver/kubenameresolver.go b/pkg/operators/kubenameresolver/kubenameresolver.go
index c7749ffd6..116579db0 100644
--- a/pkg/operators/kubenameresolver/kubenameresolver.go
+++ b/pkg/operators/kubenameresolver/kubenameresolver.go
@@ -1,4 +1,4 @@
-// Copyright 2023 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -22,6 +22,8 @@ import (
 	"fmt"
 	"strings"
 
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/common"
@@ -31,6 +33,7 @@ import (
 
 const (
 	OperatorName = "KubeNameResolver"
+	priority     = 11
 )
 
 type KubeNameResolverInterface interface {
@@ -92,6 +95,7 @@ func (k *KubeNameResolver) Instantiate(gadgetCtx operators.GadgetContext, gadget
 type KubeNameResolverInstance struct {
 	gadgetCtx      operators.GadgetContext
 	k8sInventory   common.K8sInventoryCache
+	accessors      map[datasource.DataSource]k8sAccesors
 	gadgetInstance any
 }
 
@@ -134,6 +138,136 @@ func (m *KubeNameResolverInstance) EnrichEvent(ev any) error {
 	return nil
 }
 
+func (k *KubeNameResolver) GlobalParams() api.Params {
+	return nil
+}
+
+func (k *KubeNameResolver) InstanceParams() api.Params {
+	return nil
+}
+
+func (k *KubeNameResolver) Priority() int {
+	return priority
+}
+
+type k8sAccesors struct {
+	PodName   datasource.FieldAccessor
+	Namespace datasource.FieldAccessor
+	PodIP     datasource.FieldAccessor
+	HostIP    datasource.FieldAccessor
+}
+
+func (k *KubeNameResolver) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (operators.DataOperatorInstance, error) {
+	logger := gadgetCtx.Logger()
+	accessors := make(map[datasource.DataSource]k8sAccesors)
+	for _, ds := range gadgetCtx.GetDataSources() {
+		logger.Debugf("KubeNameResolverOperator inspecting datasource %q", ds.Name())
+
+		if ds.Annotations()["kubenameresolver.enable"] != "true" {
+			logger.Debugf("KubeNameResolverOperator not enabled by annotation")
+			continue
+		}
+
+		k8sField := ds.GetField("k8s")
+		if k8sField == nil {
+			logger.Debugf("> no k8s fields found")
+			continue
+		}
+
+		k8sAccesors := k8sAccesors{}
+		var err error
+
+		k8sAccesors.PodName = ds.GetField("k8s.podName")
+		if k8sAccesors.PodName == nil {
+			logger.Warnf("No podName field found in datasource %q", ds.Name())
+			continue
+		}
+
+		k8sAccesors.Namespace = ds.GetField("k8s.namespace")
+		if k8sAccesors.Namespace == nil {
+			logger.Warnf("No namespace field found in datasource %q", ds.Name())
+			continue
+		}
+
+		// Create 2 new fields
+		k8sAccesors.HostIP, err = k8sField.AddSubField("hostIP", api.Kind_String, datasource.WithFlags(datasource.FieldFlagHidden))
+		if err != nil {
+			return nil, fmt.Errorf("adding field %q: %w", "hostIP", err)
+		}
+		k8sAccesors.PodIP, err = k8sField.AddSubField("podIP", api.Kind_String, datasource.WithFlags(datasource.FieldFlagHidden))
+		if err != nil {
+			return nil, fmt.Errorf("adding field %q: %w", "podIP", err)
+		}
+
+		logger.Debugf("> Found fields for DS %q", ds.Name())
+		accessors[ds] = k8sAccesors
+	}
+
+	// No endpoints found, nothing to do
+	if len(accessors) == 0 {
+		return nil, nil
+	}
+
+	k8sInventory, err := common.GetK8sInventoryCache()
+	if err != nil {
+		return nil, fmt.Errorf("creating k8s inventory cache: %w", err)
+	}
+
+	return &KubeNameResolverInstance{
+		k8sInventory: k8sInventory,
+		accessors:    accessors,
+	}, nil
+}
+
+func (m *KubeNameResolverInstance) enrichSingle(data datasource.Data, accessor k8sAccesors) error {
+	podName, err := accessor.PodName.String(data)
+	if err != nil {
+		return fmt.Errorf("getting podName: %w", err)
+	}
+	namespace, err := accessor.Namespace.String(data)
+	if err != nil {
+		return fmt.Errorf("getting namespace: %w", err)
+	}
+
+	pod := m.k8sInventory.GetPodByName(namespace, podName)
+	if pod == nil {
+		return nil
+	}
+
+	accessor.HostIP.PutString(data, pod.Status.HostIP)
+	accessor.PodIP.PutString(data, pod.Status.PodIP)
+	return nil
+}
+
+func (m *KubeNameResolverInstance) PreStart(gadgetCtx operators.GadgetContext) error {
+	m.k8sInventory.Start()
+
+	for ds, accessor := range m.accessors {
+		err := ds.Subscribe(func(source datasource.DataSource, data datasource.Data) error {
+			return m.enrichSingle(data, accessor)
+		}, priority)
+		if err != nil {
+			return fmt.Errorf("subscribing to data source %q: %w", ds.Name(), err)
+		}
+	}
+
+	return nil
+}
+
+func (m *KubeNameResolverInstance) Start(gadgetCtx operators.GadgetContext) error {
+	return nil
+}
+
+func (m *KubeNameResolverInstance) PostStop(gadgetCtx operators.GadgetContext) error {
+	m.k8sInventory.Stop()
+	return nil
+}
+
+func (m *KubeNameResolverInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	return nil
+}
+
 func init() {
 	operators.Register(&KubeNameResolver{})
+	operators.RegisterDataOperator(&KubeNameResolver{})
 }
diff --git a/pkg/operators/limiter/limiter.go b/pkg/operators/limiter/limiter.go
index 99d3ed0c0..61fc92de0 100644
--- a/pkg/operators/limiter/limiter.go
+++ b/pkg/operators/limiter/limiter.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -139,18 +139,22 @@ func (l *limiterOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) er
 		gadgetCtx.Logger().Debugf("limiter: data source %q max-entries %d", ds.Name(), maxEntries)
 
 		ds.SubscribeArray(func(ds datasource.DataSource, data datasource.DataArray) error {
-			if data.Len() <= maxEntries {
-				return nil
-			}
-			if err := data.Resize(maxEntries); err != nil {
-				return fmt.Errorf("limiting data source %q to %d entries: %w", ds.Name(), maxEntries, err)
-			}
-			return nil
+			return limiterFn(ds, data, maxEntries)
 		}, Priority)
 	}
 	return nil
 }
 
+func limiterFn(ds datasource.DataSource, data datasource.DataArray, maxEntries int) error {
+	if data.Len() <= maxEntries {
+		return nil
+	}
+	if err := data.Resize(maxEntries); err != nil {
+		return fmt.Errorf("limiting data source %q to %d entries: %w", ds.Name(), maxEntries, err)
+	}
+	return nil
+}
+
 func (l *limiterOperatorInstance) Start(gadgetCtx operators.GadgetContext) error {
 	return nil
 }
diff --git a/pkg/operators/limiter/limiter_test.go b/pkg/operators/limiter/limiter_test.go
new file mode 100644
index 000000000..c0c9ef944
--- /dev/null
+++ b/pkg/operators/limiter/limiter_test.go
@@ -0,0 +1,86 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Package limiter is a data operator that limits the number of entries in each
+// batch of data. This operator is only enabled for data sources of type array.
+// A great scenario for this operator is when you are already sorting data
+// within an array of data and you want to filter out the top `X` entries.
+package limiter
+
+import (
+	"fmt"
+	"testing"
+
+	"github.com/stretchr/testify/require"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+)
+
+func TestLimiter(t *testing.T) {
+	type testCase struct {
+		originalSize int
+		limit        int
+		ok           bool
+	}
+
+	testCases := []testCase{
+		{
+			originalSize: 10,
+			limit:        5,
+			ok:           true,
+		},
+		{
+			originalSize: 10,
+			limit:        10,
+			ok:           true,
+		},
+		{
+			originalSize: 10,
+			limit:        15,
+			ok:           true,
+		},
+		{
+			originalSize: 10,
+			limit:        -10,
+			ok:           false,
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(
+			fmt.Sprintf("originalSize=%d, limit=%d", tc.originalSize, tc.limit),
+			func(t *testing.T) {
+				ds, err := datasource.New(datasource.TypeArray, "limiter")
+				require.NoError(t, err)
+
+				data, err := ds.NewPacketArray()
+				require.NoError(t, err)
+
+				for i := 0; i < tc.originalSize; i++ {
+					data.Append(data.New())
+				}
+
+				err = limiterFn(ds, data, tc.limit)
+
+				if !tc.ok {
+					require.Error(t, err)
+					return
+				}
+
+				require.NoError(t, err)
+				require.Equal(t, min(tc.limit, data.Len()), data.Len()) // limiting to a greater size should not change the size
+			},
+		)
+	}
+}
diff --git a/pkg/operators/localmanager/localmanager.go b/pkg/operators/localmanager/localmanager.go
index 8dba36578..2c1f509bd 100644
--- a/pkg/operators/localmanager/localmanager.go
+++ b/pkg/operators/localmanager/localmanager.go
@@ -1,4 +1,4 @@
-// Copyright 2022-2024 The Inspektor Gadget authors
+// Copyright 2022-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -39,7 +39,9 @@ import (
 	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	igmanager "github.com/inspektor-gadget/inspektor-gadget/pkg/ig-manager"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/common"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/types"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
@@ -57,6 +59,7 @@ const (
 	ContainerdNamespace    = "containerd-namespace"
 	RuntimeProtocol        = "runtime-protocol"
 	EnrichWithK8sApiserver = "enrich-with-k8s-apiserver"
+	KubeconfigPath         = "kubeconfig"
 )
 
 type MountNsMapSetter interface {
@@ -132,6 +135,11 @@ func (l *localManager) GlobalParamDescs() params.ParamDescs {
 			Description:  "Connect to the K8s API server to get further K8s enrichment",
 			TypeHint:     params.TypeBool,
 		},
+		{
+			Key:          KubeconfigPath,
+			DefaultValue: "", // Try in-cluster config by default
+			Description:  "Path to kubeconfig file. If not set, in-cluster config will be used.",
+		},
 	}
 }
 
@@ -265,8 +273,17 @@ func (l *localManager) Init(operatorParams *params.Params) error {
 	}
 
 	additionalOpts := []containercollection.ContainerCollectionOption{}
+	if kubeconfig := operatorParams.Get(KubeconfigPath).AsString(); kubeconfig != "" {
+		additionalOpts = append(additionalOpts, containercollection.WithKubeconfigPath(kubeconfig))
+	}
+
 	if operatorParams.Get(EnrichWithK8sApiserver).AsBool() {
-		additionalOpts = append(additionalOpts, containercollection.WithKubernetesEnrichment("", nil))
+		nodeName := os.Getenv("NODE_NAME")
+		if nodeName == "" {
+			return errors.New("NODE_NAME environment variable is not set, cannot enrich with K8s API server")
+		}
+		additionalOpts = append(additionalOpts, containercollection.WithNodeName(nodeName))
+		additionalOpts = append(additionalOpts, containercollection.WithKubernetesEnrichment(nodeName))
 	}
 
 	igManager, err := igmanager.NewManager(l.rc, additionalOpts)
@@ -321,40 +338,27 @@ type localManagerTrace struct {
 
 	eventWrappers map[datasource.DataSource]*compat.EventWrapperBase
 
-	containersDs              datasource.DataSource
-	eventTypeField            datasource.FieldAccessor
-	cgroupIDField             datasource.FieldAccessor
-	mountNsIDField            datasource.FieldAccessor
-	nameField                 datasource.FieldAccessor
-	containersSubscriptionKey string
+	containersPublisher *common.ContainersPublisher
 }
 
 func (l *localManagerTrace) Name() string {
 	return OperatorName
 }
 
-func (l *localManagerTrace) emitContainersDatasourceEvent(eventType containercollection.EventType, container *containercollection.Container) error {
-	ev, err := l.containersDs.NewPacketSingle()
-	if err != nil {
-		return fmt.Errorf("creating new containers datasource packet: %w", err)
-	}
-
-	l.eventTypeField.PutString(ev, eventType.String())
-	l.cgroupIDField.PutUint64(ev, container.CgroupID)
-	l.mountNsIDField.PutUint64(ev, container.Mntns)
-	l.nameField.PutString(ev, container.Runtime.ContainerName)
+func (l *localManagerTrace) PreGadgetRun() error {
+	log := l.gadgetCtx.Logger()
 
-	err = l.containersDs.EmitAndRelease(ev)
-	if err != nil {
-		log.Errorf("%v", err)
-		return fmt.Errorf("emitting containers datasource event: %w", err)
+	if l.gadgetInstance != nil {
+		err := l.handleGadgetInstance(log)
+		if err != nil {
+			return err
+		}
 	}
 
 	return nil
 }
 
-func (l *localManagerTrace) PreGadgetRun() error {
-	log := l.gadgetCtx.Logger()
+func (l *localManagerTrace) handleGadgetInstance(log logger.Logger) error {
 	id := uuid.New()
 	host := l.params.Get(Host).AsBool()
 
@@ -460,7 +464,6 @@ func (l *localManagerTrace) PreGadgetRun() error {
 			attachContainerFunc(container)
 		}
 	}
-
 	return nil
 }
 
@@ -486,18 +489,15 @@ func (l *localManagerTrace) PostGadgetRun() error {
 			}
 		}
 	}
-	if l.containersSubscriptionKey != "" {
-		l.manager.igManager.Unsubscribe(l.containersSubscriptionKey)
-	}
 	return nil
 }
 
 func (l *localManagerTrace) enrich(ev any) {
 	if event, canEnrichEventFromMountNs := ev.(operators.ContainerInfoFromMountNSID); canEnrichEventFromMountNs {
-		l.manager.igManager.ContainerCollection.EnrichEventByMntNs(event)
+		l.manager.igManager.EnrichEventByMntNs(event)
 	}
 	if event, canEnrichEventFromNetNs := ev.(operators.ContainerInfoFromNetNSID); canEnrichEventFromNetNs {
-		l.manager.igManager.ContainerCollection.EnrichEventByNetNs(event)
+		l.manager.igManager.EnrichEventByNetNs(event)
 	}
 }
 
@@ -542,37 +542,11 @@ func (l *localManager) InstantiateDataOperator(gadgetCtx operators.GadgetContext
 
 	enableContainersDs := v.GetBool("annotations.enable-containers-datasource")
 
-	var containersDs datasource.DataSource
-	var eventTypeField datasource.FieldAccessor
-	var cgroupIDField datasource.FieldAccessor
-	var mountNsIDField datasource.FieldAccessor
-	var nameField datasource.FieldAccessor
-
+	var containersPublisher *common.ContainersPublisher
 	if enableContainersDs {
-		containersDs, err = gadgetCtx.RegisterDataSource(datasource.TypeSingle, "containers")
-		if err != nil {
-			return nil, fmt.Errorf("creating datasource: %w", err)
-		}
-		containersDs.AddAnnotation("cli.default-output-mode", "none")
-
-		eventTypeField, err = containersDs.AddField("event_type", api.Kind_String)
+		containersPublisher, err = common.NewContainersPublisher(gadgetCtx, &l.igManager.ContainerCollection)
 		if err != nil {
-			return nil, fmt.Errorf("adding field event_type: %w", err)
-		}
-
-		cgroupIDField, err = containersDs.AddField("cgroup_id", api.Kind_Uint64)
-		if err != nil {
-			return nil, fmt.Errorf("adding field cgroup_id: %w", err)
-		}
-
-		mountNsIDField, err = containersDs.AddField("mntns_id", api.Kind_Uint64)
-		if err != nil {
-			return nil, fmt.Errorf("adding field mntns_id: %w", err)
-		}
-
-		nameField, err = containersDs.AddField("name", api.Kind_String)
-		if err != nil {
-			return nil, fmt.Errorf("adding field name: %w", err)
+			return nil, fmt.Errorf("creating containers publisher: %w", err)
 		}
 	}
 
@@ -584,13 +558,10 @@ func (l *localManager) InstantiateDataOperator(gadgetCtx operators.GadgetContext
 			attachedContainers: make(map[*containercollection.Container]struct{}),
 			params:             params,
 			gadgetCtx:          gadgetCtx,
-			eventWrappers:      make(map[datasource.DataSource]*compat.EventWrapperBase),
 
-			containersDs:   containersDs,
-			eventTypeField: eventTypeField,
-			cgroupIDField:  cgroupIDField,
-			mountNsIDField: mountNsIDField,
-			nameField:      nameField,
+			eventWrappers: make(map[datasource.DataSource]*compat.EventWrapperBase),
+
+			containersPublisher: containersPublisher,
 		},
 	}
 
@@ -653,18 +624,13 @@ func (l *localManager) Priority() int {
 }
 
 func (l *localManagerTraceWrapper) PreStart(gadgetCtx operators.GadgetContext) error {
-	// hack - this makes it possible to use the Attacher interface
-	var ok bool
-	l.gadgetInstance, ok = gadgetCtx.GetVar("ebpfInstance")
-	if !ok {
-		return fmt.Errorf("getting ebpfInstance")
-	}
+	l.gadgetInstance, _ = gadgetCtx.GetVar("ebpfInstance")
 
 	if l.manager.igManager != nil {
 		compat.Subscribe(
 			l.eventWrappers,
-			l.manager.igManager.ContainerCollection.EnrichEventByMntNs,
-			l.manager.igManager.ContainerCollection.EnrichEventByNetNs,
+			l.manager.igManager.EnrichEventByMntNs,
+			l.manager.igManager.EnrichEventByNetNs,
 			0,
 		)
 	}
@@ -703,50 +669,30 @@ func (l *localManagerTraceWrapper) PreStart(gadgetCtx operators.GadgetContext) e
 }
 
 func (l *localManagerTraceWrapper) Start(gadgetCtx operators.GadgetContext) error {
-	host := l.params.Get(Host).AsBool()
-	var containers []*containercollection.Container
-
-	if l.containersDs == nil {
+	if l.containersPublisher == nil {
 		return nil
 	}
 
-	if l.manager.igManager != nil {
-		containerSelector := containercollection.ContainerSelector{
-			Runtime: containercollection.RuntimeSelector{
-				ContainerName: l.params.Get(ContainerName).AsString(),
-			},
-		}
-
-		l.containersSubscriptionKey = uuid.New().String()
-
-		log.Debugf("add datasource containers subscription to igManager")
-		containers = l.manager.igManager.Subscribe(
-			l.containersSubscriptionKey,
-			containerSelector,
-			func(event containercollection.PubSubEvent) {
-				err := l.emitContainersDatasourceEvent(event.Type, event.Container)
-				if err != nil {
-					log.Errorf("emitting containers datasource event: %v", err)
-				}
-			},
-		)
+	host := l.params.Get(Host).AsBool()
+	containerSelector := containercollection.ContainerSelector{
+		Runtime: containercollection.RuntimeSelector{
+			ContainerName: l.params.Get(ContainerName).AsString(),
+		},
 	}
 
+	extraContainers := []*containercollection.Container{}
 	if host {
-		containers = append(containers, l.manager.fakeContainer)
+		extraContainers = append(extraContainers, l.manager.fakeContainer)
 	}
 
-	for _, container := range containers {
-		err := l.emitContainersDatasourceEvent(containercollection.EventTypeAddContainer, container)
-		if err != nil {
-			return fmt.Errorf("emitting containers datasource event: %w", err)
-		}
-	}
-
-	return nil
+	return l.containersPublisher.PublishContainers(false, extraContainers, containerSelector)
 }
 
 func (l *localManagerTraceWrapper) Stop(gadgetCtx operators.GadgetContext) error {
+	if l.containersPublisher != nil {
+		l.containersPublisher.Unsubscribe()
+	}
+
 	return l.PostGadgetRun()
 }
 
diff --git a/pkg/operators/oci-handler/extrainfo.go b/pkg/operators/oci-handler/extrainfo.go
new file mode 100644
index 000000000..a0f0c8945
--- /dev/null
+++ b/pkg/operators/oci-handler/extrainfo.go
@@ -0,0 +1,79 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package ocihandler
+
+import (
+	"encoding/json"
+
+	"github.com/distribution/reference"
+	ocispec "github.com/opencontainers/image-spec/specs-go/v1"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+)
+
+func addExtraInfo(gadgetCtx operators.GadgetContext, metadata []byte, manifest *ocispec.Manifest) error {
+	parsed, err := reference.Parse(gadgetCtx.ImageName())
+	if err != nil {
+		return err
+	}
+
+	var repository string
+	if named, ok := parsed.(reference.Named); ok {
+		repository = named.Name()
+	}
+
+	tag := "latest"
+	if tagged, ok := parsed.(reference.Tagged); ok {
+		tag = tagged.Tag()
+	}
+
+	digest := manifest.Config.Digest.String()
+
+	created := manifest.Annotations[ocispec.AnnotationCreated]
+
+	ociInfo := &api.ExtraInfo{
+		Data: make(map[string]*api.GadgetInspectAddendum),
+	}
+	manifestJson, _ := json.Marshal(manifest)
+	ociInfo.Data["oci.manifest"] = &api.GadgetInspectAddendum{
+		ContentType: "application/json",
+		Content:     manifestJson,
+	}
+	ociInfo.Data["oci.metadata"] = &api.GadgetInspectAddendum{
+		ContentType: "text/yaml",
+		Content:     metadata,
+	}
+	ociInfo.Data["oci.repository"] = &api.GadgetInspectAddendum{
+		ContentType: "text/plain",
+		Content:     []byte(repository),
+	}
+	ociInfo.Data["oci.tag"] = &api.GadgetInspectAddendum{
+		ContentType: "text/plain",
+		Content:     []byte(tag),
+	}
+	ociInfo.Data["oci.digest"] = &api.GadgetInspectAddendum{
+		ContentType: "text/plain",
+		Content:     []byte(digest),
+	}
+	ociInfo.Data["oci.created"] = &api.GadgetInspectAddendum{
+		ContentType: "text/plain",
+		Content:     []byte(created),
+	}
+
+	gadgetCtx.SetVar("extraInfo.oci", ociInfo)
+
+	return nil
+}
diff --git a/pkg/operators/oci-handler/oci.go b/pkg/operators/oci-handler/oci.go
index 1dd97c82f..03574ff54 100644
--- a/pkg/operators/oci-handler/oci.go
+++ b/pkg/operators/oci-handler/oci.go
@@ -19,6 +19,7 @@ import (
 	"context"
 	"fmt"
 	"io"
+	"slices"
 	"strings"
 
 	"github.com/blang/semver"
@@ -26,6 +27,7 @@ import (
 	"github.com/spf13/viper"
 	corev1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/client-go/kubernetes"
 
 	"github.com/inspektor-gadget/inspektor-gadget/internal/version"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/environment"
@@ -158,11 +160,7 @@ func (o *ociHandler) InstanceParams() api.Params {
 	}
 }
 
-func getPullSecret(pullSecretString string, gadgetNamespace string) ([]byte, error) {
-	k8sClient, err := k8sutil.NewClientset("")
-	if err != nil {
-		return nil, fmt.Errorf("creating new k8s clientset: %w", err)
-	}
+func getPullSecret(pullSecretString string, gadgetNamespace string, k8sClient kubernetes.Interface) ([]byte, error) {
 	gps, err := k8sClient.CoreV1().Secrets(gadgetNamespace).Get(context.TODO(), pullSecretString, metav1.GetOptions{})
 	if err != nil {
 		return nil, fmt.Errorf("getting secret %q: %w", pullSecretString, err)
@@ -176,22 +174,24 @@ func getPullSecret(pullSecretString string, gadgetNamespace string) ([]byte, err
 func (o *ociHandler) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (
 	operators.DataOperatorInstance, error,
 ) {
-	ociParams := o.globalParams
-	if ociParams == nil {
-		ociParams = apihelpers.ToParamDescs(o.GlobalParams()).ToParams()
+	// TODO: This should be moved to Init(), but we're relying on Init() not
+	// being called in many places, specially tests and examples.
+	if o.globalParams == nil {
+		o.globalParams = apihelpers.ToParamDescs(o.GlobalParams()).ToParams()
 	}
 
-	*ociParams = append(*ociParams, *apihelpers.ToParamDescs(o.InstanceParams()).ToParams()...)
-	err := ociParams.CopyFromMap(instanceParamValues, "")
+	instanceParams := apihelpers.ToParamDescs(o.InstanceParams()).ToParams()
+	err := instanceParams.CopyFromMap(instanceParamValues, "")
 	if err != nil {
 		return nil, err
 	}
 
 	instance := &OciHandlerInstance{
-		ociHandler:  o,
-		gadgetCtx:   gadgetCtx,
-		ociParams:   ociParams,
-		paramValues: instanceParamValues,
+		ociHandler:     o,
+		gadgetCtx:      gadgetCtx,
+		globalParams:   o.globalParams,
+		instanceParams: instanceParams,
+		paramValues:    instanceParamValues,
 	}
 
 	err = instance.init(gadgetCtx)
@@ -210,9 +210,7 @@ func (o *OciHandlerInstance) ExtraParams(gadgetCtx operators.GadgetContext) api.
 	return o.extraParams
 }
 
-func checkBuilderVersion(manifest *v1.Manifest, logger logger.Logger) {
-	currentVersion := version.Version()
-
+func checkBuilderVersion(manifest *v1.Manifest, logger logger.Logger, currentVersion semver.Version) {
 	// Do not print any warning if this is a prerelease to avoid annoying developers
 	if len(currentVersion.Pre) > 0 {
 		return
@@ -237,6 +235,73 @@ func checkBuilderVersion(manifest *v1.Manifest, logger logger.Logger) {
 	}
 }
 
+func constructTempConfig(ann string) (map[string]any, int, error) {
+	annInfo := strings.Split(ann, ":")
+	if len(annInfo) > 2 && strings.Contains(annInfo[1], "=") {
+		// the case when the annotation value contains a colon
+		annInfo[1] = strings.Join(annInfo[1:], ":")
+	} else if len(annInfo) != 2 {
+		return nil, 0, fmt.Errorf("annotation %q must be in subject:assignment format", ann)
+	}
+
+	if slices.Contains(annInfo, "") {
+		return nil, 0, fmt.Errorf("annotation %q has empty subject or assignment", ann)
+	}
+
+	annotation := strings.SplitN(annInfo[1], "=", 2)
+	if len(annotation) != 2 {
+		return nil, 0, fmt.Errorf("annotation %q must contain a key=value pair", ann)
+	}
+	if annotation[0] == "" {
+		return nil, 0, fmt.Errorf("annotation %q has empty key", ann)
+	}
+
+	subject := strings.Split(annInfo[0], ".")
+
+	if slices.Contains(subject, "") {
+		return nil, 0, fmt.Errorf("annotation %q has empty field or subfield name", ann)
+	}
+
+	if len(subject) > 2 {
+		subject[1] = strings.Join(subject[1:], ".")
+		subject = subject[:2]
+	}
+
+	switch len(subject) {
+	case 1:
+		// data source
+		tmpConfig := map[string]any{
+			"datasources": map[string]any{
+				annInfo[0]: map[string]any{
+					"annotations": map[string]any{
+						annotation[0]: annotation[1],
+					},
+				},
+			},
+		}
+		viper.Set("a", "b")
+		return tmpConfig, 1, nil
+
+	case 2:
+		// field
+		tmpConfig := map[string]any{
+			"datasources": map[string]any{
+				subject[0]: map[string]any{
+					"fields": map[string]any{
+						subject[1]: map[string]any{
+							"annotations": map[string]any{
+								annotation[0]: annotation[1],
+							},
+						},
+					},
+				},
+			},
+		}
+		return tmpConfig, 2, nil
+	}
+	return nil, 0, fmt.Errorf("invalid annotation %q", ann)
+}
+
 func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 	if len(gadgetCtx.ImageName()) == 0 {
 		return fmt.Errorf("imageName empty")
@@ -245,13 +310,17 @@ func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 	var secretBytes []byte
 
 	// TODO: move to a place without dependency on k8s
-	if pullSecretParam := o.ociParams.Get(pullSecret); pullSecretParam != nil {
-		pullSecretString := o.ociParams.Get(pullSecret).AsString()
+	if pullSecretParam := o.globalParams.Get(pullSecret); pullSecretParam != nil {
+		pullSecretString := o.globalParams.Get(pullSecret).AsString()
 
 		if pullSecretString != "" {
 			var err error
+			k8sClient, err := k8sutil.NewClientset("", "pull-secret")
+			if err != nil {
+				return fmt.Errorf("creating new k8s clientset: %w", err)
+			}
 			// TODO: Namespace is still hardcoded
-			secretBytes, err = getPullSecret(pullSecretString, "gadget")
+			secretBytes, err = getPullSecret(pullSecretString, "gadget", k8sClient)
 			if err != nil {
 				return err
 			}
@@ -260,17 +329,17 @@ func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 
 	imgOpts := &oci.ImageOptions{
 		AuthOptions: oci.AuthOptions{
-			AuthFile:           o.ociParams.Get(authfileParam).AsString(),
+			AuthFile:           o.globalParams.Get(authfileParam).AsString(),
 			SecretBytes:        secretBytes,
-			InsecureRegistries: o.ociParams.Get(insecureRegistriesParam).AsStringSlice(),
-			DisallowPulling:    o.ociParams.Get(disallowPulling).AsBool(),
+			InsecureRegistries: o.globalParams.Get(insecureRegistriesParam).AsStringSlice(),
+			DisallowPulling:    o.globalParams.Get(disallowPulling).AsBool(),
 		},
 		VerifyOptions: oci.VerifyOptions{
-			VerifyPublicKey: o.ociParams.Get(verifyImage).AsBool(),
-			PublicKeys:      o.ociParams.Get(publicKeys).AsStringSlice(),
+			VerifyPublicKey: o.globalParams.Get(verifyImage).AsBool(),
+			PublicKeys:      o.globalParams.Get(publicKeys).AsStringSlice(),
 		},
 		AllowedGadgetsOptions: oci.AllowedGadgetsOptions{
-			AllowedGadgets: o.ociParams.Get(allowedGadgets).AsStringSlice(),
+			AllowedGadgets: o.globalParams.Get(allowedGadgets).AsStringSlice(),
 		},
 		Logger: gadgetCtx.Logger(),
 	}
@@ -284,7 +353,7 @@ func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 		// Make sure the image is available, either through pulling or by just accessing a local copy
 		// TODO: add security constraints (e.g. don't allow pulling - add GlobalParams for that)
 		err := oci.EnsureImage(gadgetCtx.Context(), gadgetCtx.ImageName(),
-			imgOpts, o.ociParams.Get(pullParam).AsString())
+			imgOpts, o.instanceParams.Get(pullParam).AsString())
 		if err != nil {
 			return fmt.Errorf("ensuring image: %w", err)
 		}
@@ -296,7 +365,7 @@ func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 	}
 
 	log := gadgetCtx.Logger()
-	checkBuilderVersion(manifest, log)
+	checkBuilderVersion(manifest, log, version.Version())
 
 	r, err := oci.GetContentFromDescriptor(gadgetCtx.Context(), target, manifest.Config)
 	if err != nil {
@@ -319,58 +388,24 @@ func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 		return fmt.Errorf("unmarshalling metadata: %w", err)
 	}
 
-	for _, ann := range o.ociParams.Get(annotate).AsStringSlice() {
+	for _, ann := range o.instanceParams.Get(annotate).AsStringSlice() {
 		if len(ann) == 0 {
 			continue
 		}
-		annInfo := strings.SplitN(ann, ":", 2)
-		if len(annInfo) != 2 {
-			return fmt.Errorf("invalid annotation %q", ann)
+		tmpConfig, lenSubject, err := constructTempConfig(ann)
+		if err != nil {
+			return err
 		}
 
-		annotation := strings.SplitN(annInfo[1], "=", 2)
-		if len(annotation) != 2 {
-			return fmt.Errorf("invalid annotation %q", ann)
+		err = viper.MergeConfigMap(tmpConfig)
+		if err != nil {
+			return fmt.Errorf("adding annotation %q: %w", ann, err)
 		}
 
-		subject := strings.SplitN(annInfo[0], ".", 2)
-		switch len(subject) {
+		switch lenSubject {
 		case 1:
-			// data source
-			tmpConfig := map[string]any{
-				"datasources": map[string]any{
-					annInfo[0]: map[string]any{
-						"annotations": map[string]any{
-							annotation[0]: annotation[1],
-						},
-					},
-				},
-			}
-			viper.Set("a", "b")
-			err = viper.MergeConfigMap(tmpConfig)
-			if err != nil {
-				return fmt.Errorf("adding annotation %q: %w", ann, err)
-			}
 			log.Debugf("ds annotation %q added", ann)
 		case 2:
-			// field
-			tmpConfig := map[string]any{
-				"datasources": map[string]any{
-					subject[0]: map[string]any{
-						"fields": map[string]any{
-							subject[1]: map[string]any{
-								"annotations": map[string]any{
-									annotation[0]: annotation[1],
-								},
-							},
-						},
-					},
-				},
-			}
-			err = viper.MergeConfigMap(tmpConfig)
-			if err != nil {
-				return fmt.Errorf("adding annotation %q: %w", ann, err)
-			}
 			log.Debugf("field annotation %q added", ann)
 		}
 	}
@@ -400,6 +435,14 @@ func (o *OciHandlerInstance) init(gadgetCtx operators.GadgetContext) error {
 		return nil
 	}
 
+	// add extra info if requested
+	if gadgetCtx.ExtraInfo() {
+		err := addExtraInfo(gadgetCtx, metadata, manifest)
+		if err != nil {
+			return fmt.Errorf("adding extra info: %w", err)
+		}
+	}
+
 	extraParams := make([]*api.Param, 0)
 	for _, opInst := range o.imageOperatorInstances {
 		err := opInst.Prepare(o.gadgetCtx)
@@ -445,6 +488,20 @@ func (o *OciHandlerInstance) Start(gadgetCtx operators.GadgetContext) error {
 	return nil
 }
 
+func (o *OciHandlerInstance) PreStop(gadgetCtx operators.GadgetContext) error {
+	for _, opInst := range o.imageOperatorInstances {
+		preStop, ok := opInst.(operators.PreStop)
+		if !ok {
+			continue
+		}
+		err := preStop.PreStop(gadgetCtx)
+		if err != nil {
+			o.gadgetCtx.Logger().Errorf("pre-stopping operator %q: %v", opInst.Name(), err)
+		}
+	}
+	return nil
+}
+
 func (o *OciHandlerInstance) Stop(gadgetCtx operators.GadgetContext) error {
 	for _, opInst := range o.imageOperatorInstances {
 		err := opInst.Stop(o.gadgetCtx)
@@ -473,7 +530,8 @@ type OciHandlerInstance struct {
 	imageOperatorInstances []operators.ImageOperatorInstance
 	extraParams            api.Params
 	paramValues            api.ParamValues
-	ociParams              *params.Params
+	globalParams           *params.Params
+	instanceParams         *params.Params
 }
 
 func (o *OciHandlerInstance) Name() string {
diff --git a/pkg/operators/oci-handler/oci_test.go b/pkg/operators/oci-handler/oci_test.go
new file mode 100644
index 000000000..2780e69b5
--- /dev/null
+++ b/pkg/operators/oci-handler/oci_test.go
@@ -0,0 +1,370 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package ocihandler
+
+import (
+	"bytes"
+	"context"
+	"fmt"
+	"testing"
+
+	"github.com/blang/semver"
+	v1 "github.com/opencontainers/image-spec/specs-go/v1"
+	"github.com/sirupsen/logrus"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/client-go/kubernetes/fake"
+)
+
+func TestCheckBuilderVersion(t *testing.T) {
+	var logBuffer bytes.Buffer
+	logrus.SetOutput(&logBuffer)
+	logrus.SetLevel(logrus.DebugLevel)
+	tests := []struct {
+		currentVersion  string
+		name            string
+		annotationValue string
+		expectedLogPart string
+	}{
+		{"v1.0.0", "Missing annotation warn", "", "Builder version not found in the gadget image. Gadget could be incompatible"},
+		{"v1.0.0", "Invalid annotation debug", "invalid", "parsing builder version:"},
+		{"v1.0.0", "Different version warn", "0.9.0", "This gadget was built with ig 0.9.0 and it's being run with v1.0.0. Gadget could be incompatible"},
+		{"v1.0.0-rc.1", "Prerelease version", "1.0.0", ""},
+		{"v1.0.0", "Matching version no log", "1.0.0", ""},
+
+		{"v2.0.0", "Missing annotation warn", "", "Builder version not found in the gadget image. Gadget could be incompatible"},
+		{"v2.0.0", "Invalid annotation debug", "invalid", "parsing builder version:"},
+		{"v2.0.0", "Different version warn", "1.9.9", "This gadget was built with ig 1.9.9 and it's being run with v2.0.0. Gadget could be incompatible"},
+		{"v2.0.0-rc.2", "Prerelease version", "2.0.0", ""},
+		{"v2.0.0", "Matching version no log", "2.0.0", ""},
+
+		{"v3.0.0", "Missing annotation warn", "", "Builder version not found in the gadget image. Gadget could be incompatible"},
+		{"v3.0.0", "Invalid annotation debug", "invalid", "parsing builder version:"},
+		{"v3.0.0", "Different version warn", "2.9.9", "This gadget was built with ig 2.9.9 and it's being run with v3.0.0. Gadget could be incompatible"},
+		{"v3.0.0-rc.4", "Prerelease version", "3.0.0", ""},
+		{"v3.0.0", "Matching version no log", "3.0.0", ""},
+	}
+
+	lg := logrus.StandardLogger()
+
+	for _, tc := range tests {
+		t.Run(tc.name, func(t *testing.T) {
+			logBuffer.Reset()
+			mn := v1.Manifest{Annotations: map[string]string{}}
+			mn.Annotations[builderVersionAnnotation] = tc.annotationValue
+			cV, _ := semver.ParseTolerant(tc.currentVersion)
+			checkBuilderVersion(&mn, lg, cV)
+
+			loggedOutput := logBuffer.String()
+			if tc.expectedLogPart == "" {
+				assert.Empty(t, loggedOutput)
+			} else {
+				assert.Contains(t, loggedOutput, tc.expectedLogPart)
+			}
+		})
+	}
+}
+
+func TestGetPullSecret(t *testing.T) {
+	type testCase struct {
+		name             string
+		secretName       string
+		secretNamespace  string
+		secretType       corev1.SecretType
+		secretDataKey    string
+		secretContent    string
+		expectError      bool
+		expectedErrorMsg string
+		expectedResult   string
+	}
+
+	tests := []testCase{
+		{
+			name:            "valid secret",
+			secretName:      "pullSecret",
+			secretNamespace: "default",
+			secretType:      corev1.SecretTypeDockerConfigJson,
+			secretDataKey:   corev1.DockerConfigJsonKey,
+			secretContent:   "valid-content",
+			expectError:     false,
+			expectedResult:  "valid-content",
+		},
+		{
+			name:             "missing type",
+			secretName:       "nonexistent",
+			secretNamespace:  "default",
+			expectError:      true,
+			expectedErrorMsg: `secret "nonexistent" is not of type "kubernetes.io/dockerconfigjson"`,
+		},
+		{
+			name:             "wrong secret type",
+			secretName:       "wrongType",
+			secretNamespace:  "default",
+			secretType:       corev1.SecretTypeOpaque,
+			secretDataKey:    corev1.DockerConfigJsonKey,
+			secretContent:    "data",
+			expectError:      true,
+			expectedErrorMsg: "secret \"wrongType\" is not of type \"kubernetes.io/dockerconfigjson\"",
+		},
+		{
+			name:            "missing dockerconfigjson key",
+			secretName:      "missingKey",
+			secretNamespace: "default",
+			secretType:      corev1.SecretTypeDockerConfigJson,
+			secretDataKey:   "someOtherKey",
+			secretContent:   "data",
+			expectError:     false,
+			expectedResult:  "",
+		},
+		{
+			name:            "empty secret content",
+			secretName:      "emptySecret",
+			secretNamespace: "default",
+			secretType:      corev1.SecretTypeDockerConfigJson,
+			secretDataKey:   corev1.DockerConfigJsonKey,
+			secretContent:   "",
+			expectError:     false,
+			expectedResult:  "",
+		},
+		{
+			name:            "valid special characters",
+			secretName:      "docker-pull",
+			secretNamespace: "custom-ns",
+			secretType:      corev1.SecretTypeDockerConfigJson,
+			secretDataKey:   corev1.DockerConfigJsonKey,
+			secretContent:   `$%{}!@#`,
+			expectError:     false,
+			expectedResult:  `$%{}!@#`,
+		},
+		{
+			name:            "large content",
+			secretName:      "largeSecret",
+			secretNamespace: "default",
+			secretType:      corev1.SecretTypeDockerConfigJson,
+			secretDataKey:   corev1.DockerConfigJsonKey,
+			secretContent:   string(make([]byte, 1000)),
+			expectError:     false,
+			expectedResult:  string(make([]byte, 1000)),
+		},
+		{
+			name:            "nil data map",
+			secretName:      "nilDataSecret",
+			secretNamespace: "default",
+			secretType:      corev1.SecretTypeDockerConfigJson,
+			expectError:     false,
+			expectedResult:  "",
+		},
+	}
+
+	for _, test := range tests {
+		t.Run(test.name, func(t *testing.T) {
+			fcs := fake.NewClientset()
+
+			secret := &corev1.Secret{
+				ObjectMeta: metav1.ObjectMeta{
+					Name:      test.secretName,
+					Namespace: test.secretNamespace,
+				},
+				Type: test.secretType,
+			}
+			if test.secretDataKey != "" {
+				secret.Data = map[string][]byte{
+					test.secretDataKey: []byte(test.secretContent),
+				}
+			}
+			_, err := fcs.CoreV1().Secrets(test.secretNamespace).Create(context.TODO(), secret, metav1.CreateOptions{})
+			require.NoError(t, err, "setup: failed to create test secret")
+
+			result, err := getPullSecret(test.secretName, test.secretNamespace, fcs)
+
+			if test.expectError {
+				require.Error(t, err)
+				require.Contains(t, err.Error(), test.expectedErrorMsg)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, test.expectedResult, string(result))
+			}
+		})
+	}
+}
+
+func TestConstructTempConfig(t *testing.T) {
+	tests := []struct {
+		name       string
+		input      string
+		wantErr    bool
+		wantConfig map[string]any
+		isField    bool
+	}{
+		{
+			name:    "Invalid no colon",
+			input:   "invalidannotation",
+			wantErr: true,
+		},
+		{
+			name:    "Invalid no equal sign",
+			input:   "source:invalidannotation",
+			wantErr: true,
+		},
+		{
+			name:    "Valid datasource annotation",
+			input:   "source:foo=bar",
+			wantErr: false,
+			wantConfig: map[string]any{
+				"datasources": map[string]any{
+					"source": map[string]any{
+						"annotations": map[string]any{
+							"foo": "bar",
+						},
+					},
+				},
+			},
+		},
+		{
+			name:    "Valid field annotation",
+			input:   "source.field:foo=bar",
+			wantErr: false,
+			wantConfig: map[string]any{
+				"datasources": map[string]any{
+					"source": map[string]any{
+						"fields": map[string]any{
+							"field": map[string]any{
+								"annotations": map[string]any{
+									"foo": "bar",
+								},
+							},
+						},
+					},
+				},
+			},
+			isField: true,
+		},
+		{
+			name:    "Invalid multiple colons",
+			input:   "source:field:foo=bar",
+			wantErr: true,
+		},
+		{
+			name:    "allowing equal signs in value (e.g. base64 encoded)",
+			input:   "source:foo=bar=baz",
+			wantErr: false,
+			wantConfig: map[string]any{
+				"datasources": map[string]any{
+					"source": map[string]any{
+						"annotations": map[string]any{
+							"foo": "bar=baz",
+						},
+					},
+				},
+			},
+		},
+		{
+			name:    "allowing colon signs in value",
+			input:   "source:foo=b:a:r",
+			wantErr: false,
+			wantConfig: map[string]any{
+				"datasources": map[string]any{
+					"source": map[string]any{
+						"annotations": map[string]any{
+							"foo": "b:a:r",
+						},
+					},
+				},
+			},
+		},
+		{
+			name:    "multiple dots (for subfields)",
+			input:   "source.field.foo:foo=bar",
+			wantErr: false,
+			wantConfig: map[string]any{
+				"datasources": map[string]any{
+					"source": map[string]any{
+						"fields": map[string]any{
+							"field.foo": map[string]any{
+								"annotations": map[string]any{
+									"foo": "bar",
+								},
+							},
+						},
+					},
+				},
+			},
+			isField: true,
+		},
+		{
+			name:    "Empty annotation key",
+			input:   "source:=bar",
+			wantErr: true,
+		},
+		{
+			name:    "Empty annotation value",
+			input:   "source:foo=",
+			wantErr: false,
+			wantConfig: map[string]any{
+				"datasources": map[string]any{
+					"source": map[string]any{
+						"annotations": map[string]any{
+							"foo": "",
+						},
+					},
+				},
+			},
+		},
+		{
+			name:    "Empty subject",
+			input:   ":foo=bar",
+			wantErr: true,
+		},
+		{
+			name:    "Empty field name",
+			input:   "source.:foo=bar",
+			wantErr: true,
+		},
+		{
+			name:    "Empty source name",
+			input:   ".field:foo=bar",
+			wantErr: true,
+		},
+		{
+			name:    "Empty subfield name",
+			input:   "source.test..bar:foo=bar",
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			gotConfig, gotLength, err := constructTempConfig(tt.input)
+			if tt.wantErr {
+				require.Error(t, err)
+				return
+			}
+			fmt.Printf("gotConfig: %v\n", gotConfig)
+			require.NoError(t, err)
+			require.Equal(t, tt.wantConfig, gotConfig)
+			switch gotLength {
+			case 1:
+				require.False(t, tt.isField)
+			case 2:
+				require.True(t, tt.isField)
+			default:
+				require.Fail(t, "Invalid length")
+
+			}
+		})
+	}
+}
diff --git a/pkg/operators/operators.go b/pkg/operators/operators.go
index 80db04bd1..265c5ad4a 100644
--- a/pkg/operators/operators.go
+++ b/pkg/operators/operators.go
@@ -33,12 +33,14 @@ import (
 
 type GadgetContext interface {
 	ID() string
+	Name() string
 	Context() context.Context
 	GadgetDesc() gadgets.GadgetDesc
 	Logger() logger.Logger
+	ExtraInfo() bool
 
 	Cancel()
-	SerializeGadgetInfo() (*api.GadgetInfo, error)
+	SerializeGadgetInfo(requestExtraInfo bool) (*api.GadgetInfo, error)
 	ImageName() string
 	RegisterDataSource(datasource.Type, string) (datasource.DataSource, error)
 	GetDataSources() map[string]datasource.DataSource
@@ -149,6 +151,10 @@ type PreStart interface {
 	PreStart(gadgetCtx GadgetContext) error
 }
 
+type PreStop interface {
+	PreStop(gadgetCtx GadgetContext) error
+}
+
 type PostStop interface {
 	PostStop(gadgetCtx GadgetContext) error
 }
diff --git a/pkg/operators/otel-logs/otel-logs.go b/pkg/operators/otel-logs/otel-logs.go
index 100d83900..e45736cb4 100644
--- a/pkg/operators/otel-logs/otel-logs.go
+++ b/pkg/operators/otel-logs/otel-logs.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -268,7 +268,7 @@ func (o *otelLogsOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) e
 				continue
 			}
 
-			kvf, err := datasource.GetKeyValueFunc[string, otellog.Value](f, otellog.Int64Value, otellog.Float64Value, otellog.StringValue)
+			kvf, err := datasource.GetKeyValueFunc[string, otellog.Value](f, name, otellog.Int64Value, otellog.Float64Value, otellog.StringValue)
 			if err != nil {
 				return fmt.Errorf("getting key/val func for %s.%s: %w", ds.Name(), f.Name(), err)
 			}
diff --git a/pkg/operators/otel-metrics/otel-metrics.go b/pkg/operators/otel-metrics/otel-metrics.go
index b3ee68407..60cb56f46 100644
--- a/pkg/operators/otel-metrics/otel-metrics.go
+++ b/pkg/operators/otel-metrics/otel-metrics.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@ import (
 	"context"
 	"fmt"
 	"net/http"
+	"os"
 	"strconv"
 	"strings"
 	"sync"
@@ -27,6 +28,7 @@ import (
 	"github.com/prometheus/client_golang/prometheus"
 	"github.com/prometheus/client_golang/prometheus/promhttp"
 	log "github.com/sirupsen/logrus"
+	"go.opentelemetry.io/contrib/instrumentation/runtime"
 	"go.opentelemetry.io/otel/attribute"
 	"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc"
 	otelprometheus "go.opentelemetry.io/otel/exporters/prometheus"
@@ -39,6 +41,7 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
 	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/histogram"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/metrics"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	ebpftypes "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf/types"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
@@ -47,12 +50,13 @@ import (
 const (
 	name = "otel-metrics"
 
-	Priority                      = 9995 // slightly before CLI so we can reroute output there
-	ParamOtelMetricsListen        = "otel-metrics-listen"
-	ParamOtelMetricsListenAddress = "otel-metrics-listen-address"
-	ParamOtelMetricsName          = "otel-metrics-name"
-	ParamOtelMetricsExporter      = "otel-metrics-exporter"
-	ParamOtelMetricsPrintInterval = "otel-metrics-print-interval"
+	Priority                        = 9995 // slightly before CLI so we can reroute output there
+	ParamOtelMetricsListen          = "otel-metrics-listen"
+	ParamOtelMetricsListenAddress   = "otel-metrics-listen-address"
+	ParamOtelMetricsExportInternals = "otel-metrics-export-internals"
+	ParamOtelMetricsName            = "otel-metrics-name"
+	ParamOtelMetricsExporter        = "otel-metrics-exporter"
+	ParamOtelMetricsPrintInterval   = "otel-metrics-print-interval"
 
 	MetricTypeKey       = "key"
 	MetricTypeCounter   = "counter"
@@ -84,11 +88,13 @@ var renderedDsCliAnnotations = map[string]string{
 }
 
 type metricsConfig struct {
-	Exporter    string        `json:"exporter" yaml:"exporter"`
-	Endpoint    string        `json:"endpoint" yaml:"endpoint"`
-	Insecure    bool          `json:"insecure" yaml:"insecure"`
-	Temporality string        `json:"temporality" yaml:"temporality"`
-	Interval    time.Duration `json:"interval" yaml:"interval"`
+	Exporter         string        `json:"exporter" yaml:"exporter"`
+	Endpoint         string        `json:"endpoint" yaml:"endpoint"`
+	Insecure         bool          `json:"insecure" yaml:"insecure"`
+	Temporality      string        `json:"temporality" yaml:"temporality"`
+	Interval         time.Duration `json:"interval" yaml:"interval"`
+	CollectGoMetrics bool          `json:"collectGoMetrics" yaml:"collectGoMetrics"`
+	CollectIGMetrics bool          `json:"collectIGMetrics" yaml:"collectIGMetrics"`
 }
 
 func deltaSelector(kind sdkmetric.InstrumentKind) metricdata.Temporality {
@@ -168,6 +174,29 @@ func (m *otelMetricsOperator) Init(globalParams *params.Params) error {
 						sdkmetric.NewPeriodicReader(otlpcollector, periodicReaderOptions...),
 					),
 				)
+
+				if v.CollectIGMetrics {
+					// Register with internal metrics
+					log.Debugf("registering internal metrics for provider %q", k)
+					err := metrics.RegisterProvider(m.providers[k])
+					if err != nil {
+						return fmt.Errorf("registering internal metrics for provider %q: %w", k, err)
+					}
+				}
+
+				if v.CollectGoMetrics {
+					// Don't use deprecated runtime metrics
+					os.Setenv("OTEL_GO_X_DEPRECATED_RUNTIME_METRICS", "false")
+					// Also register go internal metrics
+					log.Debugf("registering go metrics for provider %q", k)
+					if err := runtime.Start(
+						runtime.WithMeterProvider(m.providers[k]),
+						runtime.WithMinimumReadMemStatsInterval(v.Interval),
+					); err != nil {
+						return fmt.Errorf("starting runtime instrumentation (internal Go metrics) for provider %q: %w", k, err)
+					}
+				}
+
 				log.Debugf("initialized metric provider %q", k)
 			}
 		}
@@ -185,6 +214,15 @@ func (m *otelMetricsOperator) Init(globalParams *params.Params) error {
 	m.exporter = exporter
 	m.meterProvider = sdkmetric.NewMeterProvider(sdkmetric.WithReader(exporter))
 
+	if globalParams.Get(ParamOtelMetricsExportInternals).AsBool() {
+		log.Debug("enabled exporting internal metrics to global provider")
+
+		err = metrics.RegisterProvider(m.meterProvider)
+		if err != nil {
+			return fmt.Errorf("registering internal metrics for global provider: %w", err)
+		}
+	}
+
 	// Start HTTP listener for the global exporter
 	if !m.skipListen {
 		go func() {
@@ -214,6 +252,12 @@ func (m *otelMetricsOperator) GlobalParams() api.Params {
 			TypeHint:     api.TypeString,
 			Description:  "address and port to create the OpenTelemetry metrics listener (Prometheus compatible) on",
 		},
+		{
+			Key:          ParamOtelMetricsExportInternals,
+			DefaultValue: "false",
+			TypeHint:     api.TypeBool,
+			Description:  "export Inspektor Gadget internal metrics",
+		},
 	}
 }
 
@@ -320,7 +364,7 @@ type metricsCollector struct {
 }
 
 func (mc *metricsCollector) addKeyFunc(f datasource.FieldAccessor) error {
-	vf, err := datasource.GetKeyValueFunc[attribute.Key, attribute.Value](f, attribute.Int64Value, attribute.Float64Value, attribute.StringValue)
+	vf, err := datasource.GetKeyValueFunc[attribute.Key, attribute.Value](f, "", attribute.Int64Value, attribute.Float64Value, attribute.StringValue)
 	if err != nil {
 		return err
 	}
diff --git a/pkg/operators/process/process.go b/pkg/operators/process/process.go
new file mode 100644
index 000000000..94f6956e9
--- /dev/null
+++ b/pkg/operators/process/process.go
@@ -0,0 +1,617 @@
+// Copyright 2024-2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Package process implements an operator that emits events about running processes
+// with CPU and RAM usage information.
+package process
+
+import (
+	"bufio"
+	"fmt"
+	"os"
+	"path/filepath"
+	"runtime"
+	"strconv"
+	"strings"
+	"sync"
+	"time"
+
+	"github.com/spf13/viper"
+	"github.com/tklauser/numcpus"
+
+	containerutils "github.com/inspektor-gadget/inspektor-gadget/pkg/container-utils"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	metadatav1 "github.com/inspektor-gadget/inspektor-gadget/pkg/metadata/v1"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
+	processhelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/process-helpers"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
+)
+
+const (
+	Name = "process"
+
+	// Priority defines the operator's priority
+	Priority = -1000
+
+	// Configuration keys
+	configKeyEnabled  = "operator.process.emitstats"
+	configKeyInterval = "operator.process.interval"
+	configKeyFields   = "operator.process.fields"
+
+	// Default values
+	defaultInterval = 60 * time.Second
+
+	// Field names
+	fieldPID              = "pid"
+	fieldPPID             = "ppid"
+	fieldComm             = "comm"
+	fieldCPUUsage         = "cpuUsage"
+	fieldCPUUsageRelative = "cpuUsageRelative"
+	fieldMemoryRSS        = "memoryRSS"
+	fieldMemoryVirtual    = "memoryVirtual"
+	fieldMemoryRelative   = "memoryRelative"
+	fieldThreadCount      = "threadCount"
+	fieldState            = "state"
+	fieldUid              = "uid"
+	fieldStartTime        = "startTime"
+	fieldStartTimeStr     = "startTimeStr"
+	fieldMountNsID        = "mountnsid"
+)
+
+type processOperator struct{}
+
+func (p *processOperator) Name() string {
+	return Name
+}
+
+func (p *processOperator) Init(globalParams *params.Params) error {
+	return nil
+}
+
+func (p *processOperator) GlobalParams() api.Params {
+	return api.Params{}
+}
+
+func (p *processOperator) InstanceParams() api.Params {
+	return api.Params{}
+}
+
+func (p *processOperator) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (operators.DataOperatorInstance, error) {
+	// Get configuration from viper
+	config, ok := gadgetCtx.GetVar("config")
+	if !ok {
+		return nil, fmt.Errorf("config not found in gadget context")
+	}
+
+	viperConfig, ok := config.(*viper.Viper)
+	if !ok {
+		return nil, fmt.Errorf("config is not a viper instance")
+	}
+
+	// Check if process monitoring is enabled
+	enabled := viperConfig.GetBool(configKeyEnabled)
+	if !enabled {
+		gadgetCtx.Logger().Debug("Process monitoring is disabled")
+		return nil, nil
+	}
+
+	// Get the interval from config or use default
+	interval := viperConfig.GetDuration(configKeyInterval)
+	if interval <= 0 {
+		interval = defaultInterval
+		gadgetCtx.Logger().Debugf("Using default interval: %s", interval)
+	}
+
+	// Get fields from config
+	fields := viperConfig.GetStringSlice(configKeyFields)
+
+	// If no fields are specified, enable all fields by default
+	if len(fields) == 0 {
+		gadgetCtx.Logger().Debug("No fields specified for internal datasource 'processes', enabling all fields")
+		fields = []string{
+			fieldPID,
+			fieldPPID,
+			fieldComm,
+			fieldCPUUsage,
+			fieldCPUUsageRelative,
+			fieldMemoryRSS,
+			fieldMemoryVirtual,
+			fieldMemoryRelative,
+			fieldThreadCount,
+			fieldState,
+			fieldUid,
+			fieldStartTime,
+		}
+	}
+
+	// Create a data source for process information
+	ds, err := gadgetCtx.RegisterDataSource(datasource.TypeArray, "processes")
+	if err != nil {
+		return nil, fmt.Errorf("registering processes data source: %w", err)
+	}
+
+	instance := &processOperatorInstance{
+		interval:   interval,
+		done:       make(chan struct{}),
+		dataSource: ds,
+	}
+
+	// Add fields to the data source based on enabled fields
+	// PID field is always added (it's required)
+	instance.pidField, err = ds.AddField(fieldPID, api.Kind_Int32, datasource.WithAnnotations(map[string]string{
+		metadatav1.TemplateAnnotation: "pid",
+	}))
+	if err != nil {
+		return nil, fmt.Errorf("adding pid field: %w", err)
+	}
+
+	requireCPUInfo := false
+
+	for _, field := range fields {
+		switch field {
+		case fieldPPID:
+			instance.ppidField, err = ds.AddField(fieldPPID, api.Kind_Int32, datasource.WithAnnotations(map[string]string{
+				metadatav1.TemplateAnnotation: "ppid",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding ppid field: %w", err)
+			}
+		case fieldComm:
+			instance.commField, err = ds.AddField(fieldComm, api.Kind_String, datasource.WithAnnotations(map[string]string{
+				metadatav1.TemplateAnnotation: "comm",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding comm field: %w", err)
+			}
+		case fieldCPUUsage:
+			instance.cpuField, err = ds.AddField(fieldCPUUsage, api.Kind_Float64, datasource.WithAnnotations(map[string]string{
+				metadatav1.ColumnsPrecisionAnnotation: "1",
+				metadatav1.ColumnsAlignmentAnnotation: "right",
+				metadatav1.DescriptionAnnotation:      "The CPU usage of the process as a percentage.",
+				metadatav1.ColumnsMaxWidthAnnotation:  "8",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding cpuUsage field: %w", err)
+			}
+			requireCPUInfo = true
+		case fieldCPUUsageRelative:
+			instance.cpuRelativeField, err = ds.AddField(fieldCPUUsageRelative, api.Kind_Float64, datasource.WithAnnotations(map[string]string{
+				metadatav1.ColumnsPrecisionAnnotation: "1",
+				metadatav1.ColumnsAlignmentAnnotation: "right",
+				metadatav1.DescriptionAnnotation:      "The CPU usage percentage relative to the number of CPUs available.",
+				metadatav1.ColumnsMaxWidthAnnotation:  "16",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding cpuUsageRelative field: %w", err)
+			}
+			requireCPUInfo = true
+		case fieldMemoryRSS:
+			instance.memoryRSSField, err = ds.AddField(fieldMemoryRSS, api.Kind_Uint64, datasource.WithAnnotations(map[string]string{
+				metadatav1.ColumnsAlignmentAnnotation: "right",
+				metadatav1.DescriptionAnnotation:      "The Resident Set Size (RSS) of the process in bytes. This represents the portion of memory occupied by a process that is held in main memory (RAM).",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding memoryRSS field: %w", err)
+			}
+		case fieldMemoryVirtual:
+			instance.memoryVirtualField, err = ds.AddField(fieldMemoryVirtual, api.Kind_Uint64, datasource.WithAnnotations(map[string]string{
+				metadatav1.ColumnsAlignmentAnnotation: "right",
+				metadatav1.DescriptionAnnotation:      "The Virtual Memory Size of the process in bytes. This represents the total amount of virtual memory used by the process.",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding memoryVirtual field: %w", err)
+			}
+		case fieldMemoryRelative:
+			instance.memoryRelativeField, err = ds.AddField(fieldMemoryRelative, api.Kind_Float64, datasource.WithAnnotations(map[string]string{
+				metadatav1.ColumnsAlignmentAnnotation: "right",
+				metadatav1.ColumnsPrecisionAnnotation: "1",
+				metadatav1.DescriptionAnnotation:      "Percentage of RSS memory used relative to available memory.",
+				metadatav1.ColumnsMaxWidthAnnotation:  "14",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding memoryRelative field: %w", err)
+			}
+		case fieldThreadCount:
+			instance.threadCountField, err = ds.AddField(fieldThreadCount, api.Kind_Int32, datasource.WithAnnotations(map[string]string{
+				metadatav1.ColumnsAlignmentAnnotation: "right",
+				metadatav1.DescriptionAnnotation:      "The number of threads used by the process.",
+				metadatav1.ColumnsMaxWidthAnnotation:  "11",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding threadCount field: %w", err)
+			}
+		case fieldState:
+			instance.stateField, err = ds.AddField(fieldState, api.Kind_String, datasource.WithAnnotations(map[string]string{
+				metadatav1.DescriptionAnnotation:     "The state of the process (e.g., \"R\" for running, \"S\" for sleeping, \"Z\" for zombie, etc.).",
+				metadatav1.ValueOneOfAnnotation:      "R,S,D,Z,T,t,W,X,x,K,W,P,I",
+				metadatav1.ColumnsMaxWidthAnnotation: "5",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding state field: %w", err)
+			}
+		case fieldUid:
+			instance.uidField, err = ds.AddField(fieldUid, api.Kind_Uint32, datasource.WithAnnotations(map[string]string{
+				metadatav1.TemplateAnnotation: "uid",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding uid field: %w", err)
+			}
+		case fieldStartTime, fieldStartTimeStr:
+			instance.startTimeField, err = ds.AddField(fieldStartTime, api.Kind_Uint64, datasource.WithAnnotations(map[string]string{
+				metadatav1.DescriptionAnnotation:   "The time when the process started, represented as clock ticks since system boot.",
+				metadatav1.ColumnsHiddenAnnotation: "true",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding startTime field: %w", err)
+			}
+
+			// Add the formatted start time field
+			instance.startTimeStrField, err = ds.AddField(fieldStartTimeStr, api.Kind_String, datasource.WithAnnotations(map[string]string{
+				metadatav1.DescriptionAnnotation:     "The time when the process started, represented as a formatted date-time string in RFC3339 format (e.g., \"2023-06-15T14:30:45Z\").",
+				metadatav1.ColumnsEllipsisAnnotation: "start",
+			}))
+			if err != nil {
+				return nil, fmt.Errorf("adding startTimeStr field: %w", err)
+			}
+		}
+	}
+
+	// Add mount namespace ID field (always added)
+	instance.mountNsIDField, err = ds.AddField(fieldMountNsID, api.Kind_Uint64, datasource.WithTags("type:gadget_mntns_id"), datasource.WithAnnotations(map[string]string{
+		metadatav1.TemplateAnnotation: "mntns_id",
+	}))
+	if err != nil {
+		return nil, fmt.Errorf("adding mountnsid field: %w", err)
+	}
+
+	// Initialize CPU usage tracking if needed
+	if requireCPUInfo {
+		instance.lastCPUTimes = make(map[int]uint64)
+		instance.lastSampleTime = time.Now()
+	}
+
+	return instance, nil
+}
+
+func (p *processOperator) Priority() int {
+	return Priority
+}
+
+type processOperatorInstance struct {
+	interval            time.Duration
+	dataSource          datasource.DataSource
+	done                chan struct{}
+	wg                  sync.WaitGroup
+	pidField            datasource.FieldAccessor
+	ppidField           datasource.FieldAccessor
+	commField           datasource.FieldAccessor
+	cpuField            datasource.FieldAccessor
+	cpuRelativeField    datasource.FieldAccessor
+	memoryRSSField      datasource.FieldAccessor
+	memoryVirtualField  datasource.FieldAccessor
+	memoryRelativeField datasource.FieldAccessor
+	threadCountField    datasource.FieldAccessor
+	stateField          datasource.FieldAccessor
+	uidField            datasource.FieldAccessor
+	startTimeField      datasource.FieldAccessor
+	startTimeStrField   datasource.FieldAccessor
+	mountNsIDField      datasource.FieldAccessor
+	// For relative memory
+	totalMemory uint64
+	// For CPU usage calculation
+	lastCPUTimes   map[int]uint64
+	lastSampleTime time.Time
+	numCPU         int
+	// System boot time
+	bootTime time.Time
+}
+
+func (p *processOperatorInstance) Name() string {
+	return Name
+}
+
+func (p *processOperatorInstance) Start(gadgetCtx operators.GadgetContext) error {
+	// Get the system boot time
+	bootTime, err := getBootTime()
+	if err != nil {
+		gadgetCtx.Logger().Warn("Could not determine system boot time, using current time: %v", err)
+	}
+
+	p.bootTime = bootTime
+
+	// Start the process monitoring goroutine
+	p.wg.Add(1)
+	go p.monitorProcesses(gadgetCtx)
+
+	return nil
+}
+
+func getBootTime() (time.Time, error) {
+	// Read /proc/stat to get the boot time
+	statFile, err := os.Open(filepath.Join(host.HostProcFs, "stat"))
+	if err != nil {
+		return time.Now(), fmt.Errorf("opening /proc/stat: %w", err)
+	}
+	defer statFile.Close()
+
+	scanner := bufio.NewScanner(statFile)
+	for scanner.Scan() {
+		line := scanner.Text()
+		if !strings.HasPrefix(line, "btime ") {
+			continue
+		}
+		fields := strings.Fields(line)
+		if len(fields) < 2 {
+			continue
+		}
+		bootTimeSec, err := strconv.ParseInt(fields[1], 10, 64)
+		if err != nil {
+			continue
+		}
+		return time.Unix(bootTimeSec, 0), nil
+	}
+
+	return time.Now(), fmt.Errorf("determining boot time")
+}
+
+func (p *processOperatorInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	close(p.done)
+	p.wg.Wait()
+	gadgetCtx.Logger().Debug("Process monitoring stopped")
+	return nil
+}
+
+func (p *processOperatorInstance) TotalMemory() uint64 {
+	return p.totalMemory
+}
+
+func (p *processOperatorInstance) NumCPU() int {
+	return p.numCPU
+}
+
+func (p *processOperatorInstance) monitorProcesses(gadgetCtx operators.GadgetContext) {
+	defer p.wg.Done()
+
+	ticker := time.NewTicker(p.interval)
+	defer ticker.Stop()
+
+	for {
+		select {
+		case <-p.done:
+			return
+		case <-ticker.C:
+			err := p.collectAndEmitProcessInfo(gadgetCtx)
+			if err != nil {
+				gadgetCtx.Logger().Errorf("Error collecting process info: %v", err)
+			}
+		}
+	}
+}
+
+func (p *processOperatorInstance) collectAndEmitProcessInfo(gadgetCtx operators.GadgetContext) error {
+	// Get the current time for CPU usage calculation if needed
+	var timeDelta float64
+	if p.cpuField != nil {
+		currentTime := time.Now()
+		timeDelta = currentTime.Sub(p.lastSampleTime).Seconds()
+		defer func() { p.lastSampleTime = currentTime }()
+	}
+
+	var err error
+	p.numCPU, err = numcpus.GetOnline()
+	if err != nil {
+		return fmt.Errorf("getting number of CPUs: %w", err)
+	}
+
+	p.totalMemory, err = processhelpers.GetTotalMemory()
+	if err != nil {
+		return fmt.Errorf("getting total memory: %w", err)
+	}
+
+	// Read /proc directory to get all processes
+	entries, err := os.ReadDir(host.HostProcFs)
+	if err != nil {
+		return fmt.Errorf("reading /proc directory: %w", err)
+	}
+
+	var mu sync.Mutex
+	var wg sync.WaitGroup
+	pidQueue := make(chan int, 64)
+
+	var processes []processhelpers.ProcessInfo
+
+	// Fetch process information in parallel
+	for i := 0; i < runtime.NumCPU(); i++ {
+		wg.Add(1)
+		go func() {
+			defer wg.Done()
+			for pid := range pidQueue {
+				// Get process information
+				procInfo, err := processhelpers.GetProcessInfo(pid, timeDelta, p)
+				if err != nil {
+					// Skip processes that we can't read (they might have terminated)
+					gadgetCtx.Logger().Debugf("Skipping process %d: %v", pid, err)
+					continue
+				}
+				procInfo.MountNsID, _ = containerutils.GetMntNs(pid)
+				mu.Lock()
+				processes = append(processes, procInfo)
+				mu.Unlock()
+			}
+		}()
+	}
+
+	for _, entry := range entries {
+		// Skip non-directories and non-numeric names (not PIDs)
+		if !entry.IsDir() {
+			continue
+		}
+
+		pid64, err := strconv.ParseInt(entry.Name(), 10, 32)
+		if err != nil {
+			// Not a process directory
+			continue
+		}
+		pid := int(pid64)
+
+		pidQueue <- pid
+	}
+	close(pidQueue)
+	wg.Wait()
+
+	// Reset lastCPUTime
+	p.lastCPUTimes = make(map[int]uint64, len(processes))
+	for _, procInfo := range processes {
+		p.lastCPUTimes[procInfo.PID] = procInfo.CPUTime
+	}
+
+	// Create a packet array to hold all processes
+	packetArray, err := p.dataSource.NewPacketArray()
+	if err != nil {
+		return fmt.Errorf("creating packet array: %w", err)
+	}
+
+	// Add each process to the packet array
+	for _, proc := range processes {
+		// Create a new data element for the array
+		packet := packetArray.New()
+
+		// PID field is always emitted (it's required)
+		p.pidField.PutInt32(packet, int32(proc.PID))
+
+		// Emit optional fields if their accessors are not nil
+		if p.ppidField != nil {
+			p.ppidField.PutInt32(packet, int32(proc.PPID))
+		}
+
+		if p.commField != nil {
+			p.commField.PutString(packet, proc.Comm)
+		}
+
+		if p.cpuField != nil {
+			p.cpuField.PutFloat64(packet, proc.CPUUsage)
+		}
+
+		if p.cpuRelativeField != nil {
+			p.cpuRelativeField.PutFloat64(packet, proc.CPUUsageRelative)
+		}
+
+		if p.memoryRSSField != nil {
+			p.memoryRSSField.PutUint64(packet, proc.MemoryRSS)
+		}
+
+		if p.memoryVirtualField != nil {
+			p.memoryVirtualField.PutUint64(packet, proc.MemoryVirtual)
+		}
+
+		if p.memoryRelativeField != nil {
+			p.memoryRelativeField.PutFloat64(packet, proc.MemoryRelative)
+		}
+
+		if p.threadCountField != nil {
+			p.threadCountField.PutInt32(packet, int32(proc.ThreadCount))
+		}
+
+		if p.stateField != nil {
+			p.stateField.PutString(packet, proc.State)
+		}
+
+		if p.uidField != nil {
+			p.uidField.PutUint32(packet, proc.Uid)
+		}
+
+		if p.startTimeField != nil {
+			p.startTimeField.PutUint64(packet, proc.StartTime)
+			p.startTimeStrField.PutString(packet, proc.StartTimeStr.Format(time.RFC3339))
+		}
+
+		// Always emit mount namespace ID
+		p.mountNsIDField.PutUint64(packet, proc.MountNsID)
+
+		// Append the packet to the array
+		packetArray.Append(packet)
+	}
+
+	// Emit the packet array with all processes
+	err = p.dataSource.EmitAndRelease(packetArray)
+	if err != nil {
+		return fmt.Errorf("emitting packet array: %w", err)
+	}
+	// Set to nil so it's not released again in the defer function
+	packetArray = nil
+
+	return nil
+}
+
+func (p *processOperatorInstance) WithCPUUsage() bool {
+	return p.cpuField != nil
+}
+
+func (p *processOperatorInstance) WithCPUUsageRelative() bool {
+	return p.cpuRelativeField != nil
+}
+
+func (p *processOperatorInstance) WithComm() bool {
+	return p.commField != nil
+}
+
+func (p *processOperatorInstance) WithPPID() bool {
+	return p.ppidField != nil
+}
+
+func (p *processOperatorInstance) WithState() bool {
+	return p.stateField != nil
+}
+
+func (p *processOperatorInstance) WithUID() bool {
+	return p.uidField != nil
+}
+
+func (p *processOperatorInstance) WithVmSize() bool {
+	return p.memoryVirtualField != nil
+}
+
+func (p *processOperatorInstance) WithVmRSS() bool {
+	return p.memoryRSSField != nil
+}
+
+func (p *processOperatorInstance) WithMemoryRelative() bool {
+	return p.memoryRelativeField != nil
+}
+
+func (p *processOperatorInstance) WithThreadCount() bool {
+	return p.threadCountField != nil
+}
+
+func (p *processOperatorInstance) WithStartTime() bool {
+	return p.startTimeField != nil
+}
+
+func (p *processOperatorInstance) LastCPUTime(pid int) (uint64, bool) {
+	t, ok := p.lastCPUTimes[pid]
+	return t, ok
+}
+
+func (p *processOperatorInstance) BootTime() time.Time {
+	return p.bootTime
+}
+
+// Operator is the global instance of the process operator
+var Operator = &processOperator{}
+
+func init() {
+	operators.RegisterDataOperator(Operator)
+}
diff --git a/pkg/operators/process/process_test.go b/pkg/operators/process/process_test.go
new file mode 100644
index 000000000..8dad1dc76
--- /dev/null
+++ b/pkg/operators/process/process_test.go
@@ -0,0 +1,178 @@
+// Copyright 2024-2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package process
+
+import (
+	"context"
+	"testing"
+	"time"
+
+	"github.com/spf13/viper"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
+	gadgetcontext "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-context"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators/simple"
+)
+
+type testSubscriber struct {
+	events []datasource.Data
+}
+
+func (s *testSubscriber) handleEvent(ds datasource.DataSource, data datasource.Data) error {
+	s.events = append(s.events, data)
+	return nil
+}
+
+func TestProcessOperator(t *testing.T) {
+	// Create a viper config with process monitoring enabled
+	config := viper.New()
+	config.Set(configKeyEnabled, true)
+	config.Set(configKeyInterval, "100ms") // Use a short interval for testing
+
+	// Create a context with timeout
+	ctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
+	defer cancel()
+
+	// Create a subscriber to collect events
+	subscriber := &testSubscriber{events: make([]datasource.Data, 0)}
+
+	// Create a simple operator to set up the config and subscribe to events
+	setupOp := simple.New("setup",
+		simple.WithPriority(Priority-1),
+		simple.OnInit(func(gadgetCtx operators.GadgetContext) error {
+			// Set the config in the context
+			gadgetCtx.SetVar("config", config)
+			return nil
+		}),
+		simple.OnStart(func(gadgetCtx operators.GadgetContext) error {
+			// Subscribe to the processes data source
+			ds := gadgetCtx.GetDataSources()["processes"]
+			require.NotNil(t, ds)
+
+			err := ds.Subscribe(subscriber.handleEvent, Priority+1)
+			require.NoError(t, err)
+
+			return nil
+		}),
+	)
+
+	// Create the gadget context with the process operator and setup operator
+	op := &processOperator{}
+	gadgetCtx := gadgetcontext.New(ctx, "test", gadgetcontext.WithDataOperators(op, setupOp))
+
+	// Run the gadget
+	err := gadgetCtx.Run(api.ParamValues{})
+	require.NoError(t, err)
+
+	// Verify that events were emitted
+	assert.Greater(t, len(subscriber.events), 0)
+}
+
+func TestProcessOperatorWithFields(t *testing.T) {
+	// Create a viper config with process monitoring enabled and specific fields
+	config := viper.New()
+	config.Set(configKeyEnabled, true)
+	config.Set(configKeyInterval, "100ms") // Use a short interval for testing
+	config.Set(configKeyFields, []string{"comm", "pid", "ppid"})
+
+	// Create a context with timeout
+	ctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
+	defer cancel()
+
+	// Create a subscriber to collect events
+	subscriber := &testSubscriber{events: make([]datasource.Data, 0)}
+
+	// Create a simple operator to set up the config and subscribe to events
+	setupOp := simple.New("setup",
+		simple.WithPriority(Priority-1),
+		simple.OnInit(func(gadgetCtx operators.GadgetContext) error {
+			// Set the config in the context
+			gadgetCtx.SetVar("config", config)
+			return nil
+		}),
+		simple.OnStart(func(gadgetCtx operators.GadgetContext) error {
+			// Subscribe to the processes data source
+			ds := gadgetCtx.GetDataSources()["processes"]
+			require.NotNil(t, ds)
+
+			// Verify that only the specified fields were created
+			accessors := ds.Accessors(false)
+			fieldNames := make(map[string]bool)
+			for _, accessor := range accessors {
+				fieldNames[accessor.Name()] = true
+			}
+
+			assert.True(t, fieldNames["pid"])
+			assert.True(t, fieldNames["ppid"])
+			assert.True(t, fieldNames["comm"])
+			assert.False(t, fieldNames["cpuUsage"])
+			assert.False(t, fieldNames["memoryRSS"])
+
+			err := ds.Subscribe(subscriber.handleEvent, Priority+1)
+			require.NoError(t, err)
+
+			return nil
+		}),
+	)
+
+	// Create the gadget context with the process operator and setup operator
+	op := &processOperator{}
+	gadgetCtx := gadgetcontext.New(ctx, "test", gadgetcontext.WithDataOperators(op, setupOp))
+
+	// Run the gadget
+	err := gadgetCtx.Run(api.ParamValues{})
+	require.NoError(t, err)
+
+	// Verify that events were emitted
+	assert.Greater(t, len(subscriber.events), 0)
+}
+
+func TestProcessOperatorDisabled(t *testing.T) {
+	// Create a viper config with process monitoring disabled
+	config := viper.New()
+	config.Set(configKeyEnabled, false)
+
+	// Create a context with timeout
+	ctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
+	defer cancel()
+
+	// Create a simple operator to set up the config
+	setupOp := simple.New("setup",
+		simple.WithPriority(Priority-1),
+		simple.OnInit(func(gadgetCtx operators.GadgetContext) error {
+			// Set the config in the context
+			gadgetCtx.SetVar("config", config)
+			return nil
+		}),
+		simple.OnStart(func(gadgetCtx operators.GadgetContext) error {
+			// Verify that the processes data source was not created
+			ds := gadgetCtx.GetDataSources()["processes"]
+			assert.Nil(t, ds)
+			return nil
+		}),
+	)
+
+	// Create the gadget context with the process operator and setup operator
+	op := &processOperator{}
+	gadgetCtx := gadgetcontext.New(ctx, "test", gadgetcontext.WithDataOperators(op, setupOp))
+
+	// Run the gadget
+	err := gadgetCtx.Run(api.ParamValues{})
+	require.NoError(t, err)
+}
diff --git a/pkg/operators/sort/sort.go b/pkg/operators/sort/sort.go
index 2051df8a5..62132a0e5 100644
--- a/pkg/operators/sort/sort.go
+++ b/pkg/operators/sort/sort.go
@@ -40,10 +40,7 @@ type arrSort struct {
 }
 
 func (s *arrSort) Less(i, j int) bool {
-	if s.fn(s.DataArray.Get(i), s.DataArray.Get(j)) {
-		return true
-	}
-	return false
+	return s.fn(s.Get(i), s.Get(j))
 }
 
 func (s *sortOperator) Name() string {
diff --git a/pkg/operators/uidgidresolver/usergroupcache.go b/pkg/operators/uidgidresolver/usergroupcache.go
index 71085532a..a76ea70ed 100644
--- a/pkg/operators/uidgidresolver/usergroupcache.go
+++ b/pkg/operators/uidgidresolver/usergroupcache.go
@@ -173,13 +173,14 @@ func (cache *userGroupCache) handleEvent(event fsnotify.Event) {
 
 	targetFilePath := ""
 	var resourceCache cachedmap.CachedMap[uint32, string]
-	if event.Name == fullPasswdPath {
+	switch event.Name {
+	case fullPasswdPath:
 		targetFilePath = fullPasswdPath
 		resourceCache = cache.userCache
-	} else if event.Name == fullGroupPath {
+	case fullGroupPath:
 		targetFilePath = fullGroupPath
 		resourceCache = cache.groupCache
-	} else {
+	default:
 		return
 	}
 
diff --git a/pkg/operators/ustack/ustack.go b/pkg/operators/ustack/ustack.go
index f18e8628d..50ba42eb1 100644
--- a/pkg/operators/ustack/ustack.go
+++ b/pkg/operators/ustack/ustack.go
@@ -18,6 +18,7 @@ package ustack
 import (
 	"errors"
 	"fmt"
+	"strings"
 
 	"github.com/cilium/ebpf"
 
@@ -27,7 +28,6 @@ import (
 	ebpftypes "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf/types"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/params"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/symbolizer"
-	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/annotations"
 )
 
 const (
@@ -36,7 +36,8 @@ const (
 )
 
 const (
-	userStackTargetNameAnnotation = "ebpf.formatter.ustack"
+	// Params
+	symbolizersParam = "symbolizers"
 )
 
 type Operator struct{}
@@ -54,19 +55,45 @@ func (o *Operator) GlobalParams() api.Params {
 }
 
 func (o *Operator) InstanceParams() api.Params {
-	return nil
+	return api.Params{&api.Param{
+		Key:          symbolizersParam,
+		Description:  `Symbolizers to use. Possible values are: "none", "auto", or comma-separated list among: "symtab"`,
+		DefaultValue: "auto",
+	}}
 }
 
 func (o *Operator) InstantiateDataOperator(gadgetCtx operators.GadgetContext, instanceParamValues api.ParamValues) (operators.DataOperatorInstance, error) {
-	s, err := symbolizer.NewSymbolizer()
-	if err != nil {
-		return nil, err
-	}
-
 	instance := &OperatorInstance{
-		symbolizer:    s,
 		subscriptions: make(map[datasource.DataSource][]func(ds datasource.DataSource, data datasource.Data) error),
 	}
+
+	opts := symbolizer.SymbolizerOptions{}
+	symbolizers := instanceParamValues[symbolizersParam]
+	switch symbolizers {
+	case "", "none":
+		opts.UseSymtab = false
+	case "auto":
+		opts.UseSymtab = true
+	default:
+		list := strings.Split(symbolizers, ",")
+		for _, s := range list {
+			switch s {
+			case "symtab":
+				opts.UseSymtab = true
+			default:
+				return nil, fmt.Errorf("invalid symbolizer: %s", s)
+			}
+		}
+	}
+
+	var err error
+	// When the Symbolizer implements more options, they can be added here
+	if opts.UseSymtab {
+		instance.symbolizer, err = symbolizer.NewSymbolizer(opts)
+		if err != nil {
+			return nil, err
+		}
+	}
 	err = instance.init(gadgetCtx)
 	if err != nil {
 		return nil, err
@@ -146,15 +173,15 @@ func (o *OperatorInstance) init(gadgetCtx operators.GadgetContext) error {
 				continue
 			}
 
-			targetName, err := annotations.GetTargetNameFromAnnotation(logger, "ustack", in, userStackTargetNameAnnotation)
+			addressesField, err := in.AddSubField("addresses", api.Kind_String, datasource.WithFlags(datasource.FieldFlagHidden))
 			if err != nil {
-				logger.Warnf("getting target name for ustack field %q: %v", in.Name(), err)
-				continue
+				return err
 			}
-			out, err := ds.AddField(targetName, api.Kind_String, datasource.WithSameParentAs(in))
+			symbolsField, err := in.AddSubField("symbols", api.Kind_String, datasource.WithFlags(datasource.FieldFlagHidden))
 			if err != nil {
 				return err
 			}
+
 			converter := func(ds datasource.DataSource, data datasource.Data) error {
 				inode, _ := inodeField[0].Uint64(data)
 				// If user stacks are disabled
@@ -209,32 +236,38 @@ func (o *OperatorInstance) init(gadgetCtx operators.GadgetContext) error {
 					return nil
 				}
 
+				var addressesBuilder strings.Builder
 				addrs := make([]uint64, 0, len(stack))
-				for _, addr := range stack {
+				for i, addr := range stack {
 					if addr == 0 {
 						break
 					}
 					addrs = append(addrs, addr)
+					fmt.Fprintf(&addressesBuilder, "[%d]0x%016x; ", i, addr)
 				}
-				task := symbolizer.Task{
-					Name:         fmt.Sprintf("%s/%s", containerName, comm),
-					PidNumbers:   pidNumbers,
-					ContainerPid: containerPid,
-					Ino:          inode,
-					MtimeSec:     int64(mtimeSec),
-					MtimeNsec:    mtimeNsec,
-				}
-				symbols, err := o.symbolizer.Resolve(task, addrs)
-				if err != nil {
-					logger.Warnf("symbolizer: %s", err)
-					return nil
-				}
+				addressesField.PutString(data, addressesBuilder.String())
+
+				if o.symbolizer != nil {
+					task := symbolizer.Task{
+						Name:         fmt.Sprintf("%s/%s", containerName, comm),
+						PidNumbers:   pidNumbers,
+						ContainerPid: containerPid,
+						Ino:          inode,
+						MtimeSec:     int64(mtimeSec),
+						MtimeNsec:    mtimeNsec,
+					}
+					symbols, err := o.symbolizer.Resolve(task, addrs)
+					if err != nil {
+						logger.Warnf("symbolizer: %s", err)
+						return nil
+					}
 
-				outString := ""
-				for i, symbol := range symbols {
-					outString += fmt.Sprintf("[%d]%s; ", i, symbol)
+					var symbolsBuilder strings.Builder
+					for i, symbol := range symbols {
+						fmt.Fprintf(&symbolsBuilder, "[%d]%s; ", i, symbol)
+					}
+					symbolsField.PutString(data, symbolsBuilder.String())
 				}
-				out.PutString(data, outString)
 				return nil
 			}
 			o.subscriptions[ds] = append(o.subscriptions[ds], converter)
@@ -248,7 +281,9 @@ func (o *OperatorInstance) Name() string {
 }
 
 func (o *OperatorInstance) Stop(gadgetCtx operators.GadgetContext) error {
-	o.symbolizer.Close()
+	if o.symbolizer != nil {
+		o.symbolizer.Close()
+	}
 	return nil
 }
 
diff --git a/pkg/operators/wasm/extrainfo.go b/pkg/operators/wasm/extrainfo.go
new file mode 100644
index 000000000..83128119e
--- /dev/null
+++ b/pkg/operators/wasm/extrainfo.go
@@ -0,0 +1,53 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package wasm
+
+import (
+	"encoding/json"
+	"fmt"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
+)
+
+func (i *wasmOperatorInstance) addExtraInfo(gadgetcontext operators.GadgetContext, version uint64, wasmProgram []byte) error {
+	module, err := i.rt.CompileModule(gadgetcontext.Context(), wasmProgram)
+	if err != nil {
+		return err
+	}
+	imports := module.ImportedFunctions()
+	upcalls := []string{}
+	for _, imp := range imports {
+		moduleName, name, isImport := imp.Import()
+		if isImport && moduleName == "ig" {
+			upcalls = append(upcalls, name)
+		}
+	}
+	wasmInfo := &api.ExtraInfo{
+		Data: make(map[string]*api.GadgetInspectAddendum),
+	}
+	wasmInfo.Data["wasm.gadgetAPIVersion"] = &api.GadgetInspectAddendum{
+		ContentType: "text/plain",
+		Content:     []byte(fmt.Sprintf("%d", version)),
+	}
+	upcallsJSON, _ := json.Marshal(upcalls)
+	wasmInfo.Data["wasm.upcalls"] = &api.GadgetInspectAddendum{
+		ContentType: "application/json",
+		Content:     []byte(upcallsJSON),
+	}
+	gadgetcontext.SetVar("extraInfo.wasm", wasmInfo)
+
+	return nil
+}
diff --git a/pkg/operators/wasm/fields.go b/pkg/operators/wasm/fields.go
index 8db55affb..0cd961169 100644
--- a/pkg/operators/wasm/fields.go
+++ b/pkg/operators/wasm/fields.go
@@ -30,6 +30,7 @@ func (i *wasmOperatorInstance) addFieldFuncs(env wazero.HostModuleBuilder) {
 			wapi.ValueTypeI32, // Accessor
 			wapi.ValueTypeI32, // Data
 			wapi.ValueTypeI32, // Kind
+			wapi.ValueTypeI32, // Error Pointer
 		},
 		[]wapi.ValueType{wapi.ValueTypeI64}, // Value
 	)
@@ -83,23 +84,23 @@ func (i *wasmOperatorInstance) getDataFromDatasourceHandle(dataHandle uint32) (d
 // - stack[0]: Field handle
 // - stack[1]: Data handle
 // - stack[2]: Kind
+// - stack[3]: Error Pointer. It's set to 1 if an error happened.
 // Return value:
-// - Field's value, 0 on error
-// TODO: error handling is still TBD as there not a way to differentiate between
-// a field with value 0 and an error.
+// - Field's value
 func (i *wasmOperatorInstance) fieldGetScalar(ctx context.Context, m wapi.Module, stack []uint64) {
 	fieldHandle := wapi.DecodeU32(stack[0])
 	dataHandle := wapi.DecodeU32(stack[1])
 	fieldKind := api.Kind(wapi.DecodeU32(stack[2]))
+	errPtr := wapi.DecodeU32(stack[3])
 
 	field, ok := getHandle[datasource.FieldAccessor](i, fieldHandle)
 	if !ok {
-		stack[0] = 0
+		i.writeErrToGuest(ctx, 1, errPtr)
 		return
 	}
 	data, ok := i.getDataFromDatasourceHandle(dataHandle)
 	if !ok {
-		stack[0] = 0
+		i.writeErrToGuest(ctx, 1, errPtr)
 		return
 	}
 
@@ -154,17 +155,17 @@ func (i *wasmOperatorInstance) fieldGetScalar(ctx context.Context, m wapi.Module
 		val, err = field.Uint64(data)
 	case api.Kind_String, api.Kind_Bytes:
 		i.logger.Warnf("fieldGetScalar: field kind %q not supported, use fieldGetBuffer instead()", fieldKind)
-		stack[0] = 0
+		i.writeErrToGuest(ctx, 1, errPtr)
 		return
 	default:
 		i.logger.Warnf("unknown field kind: %d", stack[2])
-		stack[0] = 0
+		i.writeErrToGuest(ctx, 1, errPtr)
 		return
 	}
 
 	if err != nil {
 		i.logger.Warnf("fieldGetScalar for field %q failed: %v", field.Name(), err)
-		stack[0] = 0
+		i.writeErrToGuest(ctx, 1, errPtr)
 		return
 	}
 
@@ -292,6 +293,8 @@ func (i *wasmOperatorInstance) fieldSet(ctx context.Context, m wapi.Module, stac
 		stack[0] = 1
 		return
 	}
+
+	stack[0] = 0
 }
 
 // fieldAddTag adds a tag to the field
diff --git a/pkg/operators/wasm/filter.go b/pkg/operators/wasm/filter.go
new file mode 100644
index 000000000..401dd0fd9
--- /dev/null
+++ b/pkg/operators/wasm/filter.go
@@ -0,0 +1,55 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package wasm
+
+import (
+	"context"
+
+	"github.com/tetratelabs/wazero"
+	wapi "github.com/tetratelabs/wazero/api"
+)
+
+func (i *wasmOperatorInstance) addFilterFuncs(env wazero.HostModuleBuilder) {
+	exportFunction(env, "shouldDiscardMntnsID", i.shouldDiscardMntnsID,
+		[]wapi.ValueType{
+			wapi.ValueTypeI64, // MntNS ID
+		},
+		[]wapi.ValueType{wapi.ValueTypeI32}, // Discard the event, 1 if true, 0 if false
+	)
+}
+
+// shouldDiscardMntnsID returns 1 if the mount ns ID should be filtered out.
+// Params:
+// - stack[0]: mount ns ID
+// Return value:
+// - 1 if the mount ns ID should be filter out, 0 otherwise
+func (i *wasmOperatorInstance) shouldDiscardMntnsID(ctx context.Context, m wapi.Module, stack []uint64) {
+	// if the filtering map is not configured, we assume the gadget wants to get
+	// all data
+	if i.mntNsIDMap == nil {
+		stack[0] = 0
+		return
+	}
+
+	ret := uint32(0)
+
+	mntnsID := uint64(stack[0])
+	if err := i.mntNsIDMap.Lookup(mntnsID, &ret); err != nil {
+		stack[0] = 1
+		return
+	}
+
+	stack[0] = 0
+}
diff --git a/pkg/operators/wasm/helpers.go b/pkg/operators/wasm/helpers.go
index 6d0f16232..65466ffd7 100644
--- a/pkg/operators/wasm/helpers.go
+++ b/pkg/operators/wasm/helpers.go
@@ -16,6 +16,7 @@ package wasm
 
 import (
 	"context"
+	"encoding/binary"
 	"errors"
 	"fmt"
 
@@ -81,6 +82,19 @@ func exportFunction(
 		Export(name)
 }
 
+func (i *wasmOperatorInstance) writeErrToGuest(ctx context.Context, err uint32, addr uint32) {
+	if addr == 0 {
+		return
+	}
+
+	buf := make([]byte, 4)
+	binary.NativeEndian.PutUint32(buf, err)
+	if !i.mod.Memory().Write(addr, buf) {
+		i.logger.Errorf("writing error bytes to guest memory: out of memory write")
+		i.mod.CloseWithExitCode(ctx, 1)
+	}
+}
+
 func (i *wasmOperatorInstance) writeToDstBuffer(src []byte, dstBuf uint64) error {
 	if getLength(dstBuf) < uint32(len(src)) {
 		return fmt.Errorf("writing %d bytes to guest memory buffer of %d bytes: not enough memory", len(src), getLength(dstBuf))
diff --git a/pkg/operators/wasm/perf.go b/pkg/operators/wasm/perf.go
index f3ac9ee27..2738c5627 100644
--- a/pkg/operators/wasm/perf.go
+++ b/pkg/operators/wasm/perf.go
@@ -173,10 +173,11 @@ func (i *wasmOperatorInstance) perfReaderRead(ctx context.Context, m wapi.Module
 
 	record, err := perfReader.Read()
 	if err != nil {
-		i.logger.Warnf("perfReaderRead: reading perf buffer: %v", err)
-		stack[0] = 1
 		if errors.Is(err, os.ErrDeadlineExceeded) {
 			stack[0] = 2
+		} else {
+			stack[0] = 1
+			i.logger.Warnf("perfReaderRead: reading perf buffer: %v", err)
 		}
 		return
 	}
diff --git a/pkg/operators/wasm/testdata/Makefile b/pkg/operators/wasm/testdata/Makefile
index f3fc6a2f0..75f1402ff 100644
--- a/pkg/operators/wasm/testdata/Makefile
+++ b/pkg/operators/wasm/testdata/Makefile
@@ -6,6 +6,7 @@ TEST_ARTIFACTS = \
 	dataarray \
 	dataemit \
 	badguest \
+	baderrptr \
 	params \
 	config \
 	map \
@@ -13,6 +14,7 @@ TEST_ARTIFACTS = \
 	syscall \
 	perf \
 	kallsyms \
+	filtering \
 	#
 
 all: $(TEST_ARTIFACTS)
diff --git a/pkg/operators/wasm/testdata/baderrptr/build.yaml b/pkg/operators/wasm/testdata/baderrptr/build.yaml
new file mode 100644
index 000000000..9a6d0a5f8
--- /dev/null
+++ b/pkg/operators/wasm/testdata/baderrptr/build.yaml
@@ -0,0 +1 @@
+wasm: program.go
diff --git a/pkg/operators/wasm/testdata/baderrptr/go.mod b/pkg/operators/wasm/testdata/baderrptr/go.mod
new file mode 100644
index 000000000..0d571b2ca
--- /dev/null
+++ b/pkg/operators/wasm/testdata/baderrptr/go.mod
@@ -0,0 +1,8 @@
+module main
+
+go 1.24.0
+
+require github.com/inspektor-gadget/inspektor-gadget v0.0.0
+
+// use this to be able to compile it locally
+replace github.com/inspektor-gadget/inspektor-gadget => ../../../../../
diff --git a/pkg/operators/wasm/testdata/baderrptr/program.go b/pkg/operators/wasm/testdata/baderrptr/program.go
new file mode 100644
index 000000000..d65dcab83
--- /dev/null
+++ b/pkg/operators/wasm/testdata/baderrptr/program.go
@@ -0,0 +1,33 @@
+// Copyright 2024 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	api "github.com/inspektor-gadget/inspektor-gadget/wasmapi/go"
+)
+
+// Invalid ptr: out of bound 17 MB (max memory of the module is 16MB)
+const invalidPtr uint32 = uint32(17 * 1024 * 1024)
+
+//go:wasmimport ig fieldGetScalar
+func fieldGetScalar(acc uint32, data uint32, kind uint32, errPtr uint32) uint64
+
+//go:wasmexport gadgetInit
+func gadgetInit() int32 {
+	fieldGetScalar(55, 55, uint32(api.Kind_Uint32), invalidPtr)
+	panic("This should never be reached")
+}
+
+func main() {}
diff --git a/pkg/operators/wasm/testdata/badguest/go.mod b/pkg/operators/wasm/testdata/badguest/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/badguest/go.mod
+++ b/pkg/operators/wasm/testdata/badguest/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/badguest/program.go b/pkg/operators/wasm/testdata/badguest/program.go
index 20955ba58..933d53726 100644
--- a/pkg/operators/wasm/testdata/badguest/program.go
+++ b/pkg/operators/wasm/testdata/badguest/program.go
@@ -40,8 +40,8 @@ const (
 	subscriptionTypePacket subscriptionType = 3
 )
 
-// Invalid string: Too big (4GB) and offset too big (64MB)
-const invalidStrPtr uint64 = uint64(1024 * 1024 << 32)
+// Invalid string: Too big (17 MB, we only provide 16MB to WASM programs)
+const invalidStrPtr uint64 = uint64(1024 * 1024 * 17 << 32)
 
 // Keep in sync with pkg/operators/wasm/syscalls.go.
 type syscallParam struct {
@@ -57,85 +57,85 @@ type syscallDeclaration struct {
 	params   [6]syscallParam
 }
 
-//go:wasmimport env gadgetLog
+//go:wasmimport ig gadgetLog
 func gadgetLog(level uint32, str uint64)
 
-//go:wasmimport env newDataSource
+//go:wasmimport ig newDataSource
 func newDataSource(name uint64, typ uint32) uint32
 
-//go:wasmimport env getDataSource
+//go:wasmimport ig getDataSource
 func getDataSource(name uint64) uint32
 
-//go:wasmimport env dataSourceSubscribe
+//go:wasmimport ig dataSourceSubscribe
 func dataSourceSubscribe(ds uint32, typ uint32, prio uint32, cb uint64) uint32
 
-//go:wasmimport env dataSourceGetField
+//go:wasmimport ig dataSourceGetField
 func dataSourceGetField(ds uint32, name uint64) uint32
 
-//go:wasmimport env dataSourceAddField
+//go:wasmimport ig dataSourceAddField
 func dataSourceAddField(ds uint32, name uint64, kind uint32) uint32
 
-//go:wasmimport env dataSourceNewPacketSingle
+//go:wasmimport ig dataSourceNewPacketSingle
 func dataSourceNewPacketSingle(ds uint32) uint32
 
-//go:wasmimport env dataSourceNewPacketArray
+//go:wasmimport ig dataSourceNewPacketArray
 func dataSourceNewPacketArray(ds uint32) uint32
 
-//go:wasmimport env dataSourceEmitAndRelease
+//go:wasmimport ig dataSourceEmitAndRelease
 func dataSourceEmitAndRelease(ds uint32, packet uint32) uint32
 
-//go:wasmimport env dataSourceRelease
+//go:wasmimport ig dataSourceRelease
 func dataSourceRelease(ds uint32, packet uint32) uint32
 
-//go:wasmimport env dataArrayNew
+//go:wasmimport ig dataArrayNew
 func dataArrayNew(d uint32) uint32
 
-//go:wasmimport env dataArrayAppend
+//go:wasmimport ig dataArrayAppend
 func dataArrayAppend(d uint32, data uint32) uint32
 
-//go:wasmimport env dataArrayRelease
+//go:wasmimport ig dataArrayRelease
 func dataArrayRelease(d uint32, data uint32) uint32
 
-//go:wasmimport env dataArrayLen
+//go:wasmimport ig dataArrayLen
 func dataArrayLen(d uint32) uint32
 
-//go:wasmimport env dataArrayGet
+//go:wasmimport ig dataArrayGet
 func dataArrayGet(d uint32, index uint32) uint32
 
-//go:wasmimport env fieldGetScalar
-func fieldGetScalar(acc uint32, data uint32, kind uint32) uint64
+//go:wasmimport ig fieldGetScalar
+func fieldGetScalar(acc uint32, data uint32, kind uint32, errPtr uint32) uint64
 
-//go:wasmimport env fieldSet
+//go:wasmimport ig fieldSet
 func fieldSet(acc uint32, data uint32, kind uint32, value uint64) uint32
 
-//go:wasmimport env getParamValue
+//go:wasmimport ig getParamValue
 func getParamValue(key uint64, dst uint64) uint32
 
-//go:wasmimport env setConfig
+//go:wasmimport ig setConfig
 func setConfig(key uint64, val uint64, kind uint32) uint32
 
-//go:wasmimport env newMap
+//go:wasmimport ig newMap
 func newMap(name uint64, typ uint32, keySize uint32, valueSize uint32, maxEntries uint32) uint32
 
-//go:wasmimport env getMap
+//go:wasmimport ig getMap
 func getMap(name uint64) uint32
 
-//go:wasmimport env mapLookup
+//go:wasmimport ig mapLookup
 func mapLookup(m uint32, keyptr uint64, valueptr uint64) uint32
 
-//go:wasmimport env mapUpdate
+//go:wasmimport ig mapUpdate
 func mapUpdate(m uint32, keyptr uint64, valueptr uint64, flags uint64) uint32
 
-//go:wasmimport env mapDelete
+//go:wasmimport ig mapDelete
 func mapDelete(m uint32, keyptr uint64) uint32
 
-//go:wasmimport env mapRelease
+//go:wasmimport ig mapRelease
 func mapRelease(m uint32) uint32
 
-//go:wasmimport env getSyscallDeclaration
+//go:wasmimport ig getSyscallDeclaration
 func getSyscallDeclaration(name uint64, pointer uint64) uint32
 
-//go:wasmimport env kallsymsSymbolExists
+//go:wasmimport ig kallsymsSymbolExists
 func kallsymsSymbolExists(symbol uint64) uint32
 
 func stringToBufPtr(s string) uint64 {
@@ -294,16 +294,31 @@ func gadgetInit() int32 {
 	dataHandle := dataSourceNewPacketSingle(dsSingleHandle)
 	assertNonZero(dataHandle, "dataSourceNewPacketSingle: creating new")
 
-	assertNonZero(fieldSet(fieldHandle, dataHandle, uint32(api.Kind_Uint32), 1234), "fieldSet: ok")
+	assertZero(fieldSet(fieldHandle, dataHandle, uint32(api.Kind_Uint32), 1234), "fieldSet: ok")
 	assertNonZero(fieldSet(fieldHandle, dataHandle, uint32(api.Kind_Uint64), 1234), "fieldSet: bad kind")
 	assertNonZero(fieldSet(fieldHandle, dataHandle, 1005, 1234), "fieldSet: bad kind")
 	assertNonZero(fieldSet(fieldHandle, fieldHandle, uint32(api.Kind_Uint32), 1234), "fieldSet: bad data handle")
 	assertNonZero(fieldSet(dataHandle, dataHandle, uint32(api.Kind_Uint32), 1234), "fieldSet: bad field handle")
 
-	assertEqual(uint32(fieldGetScalar(fieldHandle, dataHandle, uint32(api.Kind_Uint32))), 1234, "fieldGetScalar: ok")
-	fieldGetScalar(fieldHandle, dataHandle, 1005)
-	fieldGetScalar(fieldHandle, fieldHandle, uint32(api.Kind_Uint32))
-	fieldGetScalar(dataHandle, dataHandle, uint32(api.Kind_Uint32))
+	var err uint32
+	errPtr := uint32(uintptr(unsafe.Pointer(&err)))
+	var ret uint64
+
+	ret = fieldGetScalar(fieldHandle, dataHandle, uint32(api.Kind_Uint32), errPtr)
+	assertEqual(uint32(ret), 1234, "fieldGetScalar: ok")
+	assertZero(err, "fieldGetScalar: ok")
+
+	fieldGetScalar(fieldHandle, dataHandle, 1005, errPtr)
+	assertEqual(err, 1, "fieldGetScalar: bad kind")
+
+	fieldGetScalar(fieldHandle, fieldHandle, uint32(api.Kind_Uint32), errPtr)
+	assertEqual(err, 1, "fieldGetScalar: bad data handle")
+
+	fieldGetScalar(dataHandle, dataHandle, uint32(api.Kind_Uint32), errPtr)
+	assertEqual(err, 1, "fieldGetScalar: bad field handle")
+
+	// a zero err ptr shouldn't cause any crash
+	fieldGetScalar(fieldHandle, dataHandle, 1005, 0)
 
 	/* Params */
 	paramBuf := bytesToBufPtr(make([]byte, 512))
diff --git a/pkg/operators/wasm/testdata/config/go.mod b/pkg/operators/wasm/testdata/config/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/config/go.mod
+++ b/pkg/operators/wasm/testdata/config/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/config/program.go b/pkg/operators/wasm/testdata/config/program.go
index d3d512579..2ed0383fb 100644
--- a/pkg/operators/wasm/testdata/config/program.go
+++ b/pkg/operators/wasm/testdata/config/program.go
@@ -26,14 +26,14 @@ import (
 func gadgetInit() int32 {
 	err := api.SetConfig("foo.bar.zas", "myvalue")
 	if err != nil {
-		api.Errorf("SetAnnotation failed: %v", err)
+		api.Errorf("SetConfig failed: %v", err)
 		return 1
 	}
 
 	// This should fail as the key is not a string
 	err = api.SetConfig("foo.bar.zas", 42)
 	if err == nil {
-		api.Errorf("SetAnnotation should have failed")
+		api.Errorf("SetConfig should have failed")
 		return 1
 	}
 
diff --git a/pkg/operators/wasm/testdata/dataarray/go.mod b/pkg/operators/wasm/testdata/dataarray/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/dataarray/go.mod
+++ b/pkg/operators/wasm/testdata/dataarray/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/dataemit/go.mod b/pkg/operators/wasm/testdata/dataemit/go.mod
index 91f046f61..def16d7a8 100644
--- a/pkg/operators/wasm/testdata/dataemit/go.mod
+++ b/pkg/operators/wasm/testdata/dataemit/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 // Version doesn't matter because of the replace directive below.
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
diff --git a/pkg/operators/wasm/testdata/fields/go.mod b/pkg/operators/wasm/testdata/fields/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/fields/go.mod
+++ b/pkg/operators/wasm/testdata/fields/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/fields/program.go b/pkg/operators/wasm/testdata/fields/program.go
index f4ea6642a..9d05977e8 100644
--- a/pkg/operators/wasm/testdata/fields/program.go
+++ b/pkg/operators/wasm/testdata/fields/program.go
@@ -15,6 +15,8 @@
 package main
 
 import (
+	"fmt"
+
 	api "github.com/inspektor-gadget/inspektor-gadget/wasmapi/go"
 )
 
@@ -76,29 +78,33 @@ func gadgetInit() int32 {
 		for _, f := range fields {
 			switch f.typ {
 			case api.Kind_Int8:
-				f.acc.SetInt8(data, f.val.(int8))
+				err = f.acc.SetInt8(data, f.val.(int8))
 			case api.Kind_Int16:
-				f.acc.SetInt16(data, f.val.(int16))
+				err = f.acc.SetInt16(data, f.val.(int16))
 			case api.Kind_Int32:
-				f.acc.SetInt32(data, f.val.(int32))
+				err = f.acc.SetInt32(data, f.val.(int32))
 			case api.Kind_Int64:
-				f.acc.SetInt64(data, f.val.(int64))
+				err = f.acc.SetInt64(data, f.val.(int64))
 			case api.Kind_Uint8:
-				f.acc.SetUint8(data, f.val.(uint8))
+				err = f.acc.SetUint8(data, f.val.(uint8))
 			case api.Kind_Uint16:
-				f.acc.SetUint16(data, f.val.(uint16))
+				err = f.acc.SetUint16(data, f.val.(uint16))
 			case api.Kind_Uint32:
-				f.acc.SetUint32(data, f.val.(uint32))
+				err = f.acc.SetUint32(data, f.val.(uint32))
 			case api.Kind_Uint64:
-				f.acc.SetUint64(data, f.val.(uint64))
+				err = f.acc.SetUint64(data, f.val.(uint64))
 			case api.Kind_Float32:
-				f.acc.SetFloat32(data, f.val.(float32))
+				err = f.acc.SetFloat32(data, f.val.(float32))
 			case api.Kind_Float64:
-				f.acc.SetFloat64(data, f.val.(float64))
+				err = f.acc.SetFloat64(data, f.val.(float64))
 			case api.Kind_String:
-				f.acc.SetString(data, f.val.(string))
+				err = f.acc.SetString(data, f.val.(string))
 			case api.Kind_Bytes:
-				f.acc.SetBytes(data, f.val.([]byte))
+				err = f.acc.SetBytes(data, f.val.([]byte))
+			}
+
+			if err != nil {
+				panic(fmt.Sprintf("failed to set field: %v", err))
 			}
 		}
 	}, 0)
diff --git a/pkg/operators/wasm/testdata/filtering/build.yaml b/pkg/operators/wasm/testdata/filtering/build.yaml
new file mode 100644
index 000000000..9a6d0a5f8
--- /dev/null
+++ b/pkg/operators/wasm/testdata/filtering/build.yaml
@@ -0,0 +1 @@
+wasm: program.go
diff --git a/pkg/operators/wasm/testdata/filtering/go.mod b/pkg/operators/wasm/testdata/filtering/go.mod
new file mode 100644
index 000000000..0d571b2ca
--- /dev/null
+++ b/pkg/operators/wasm/testdata/filtering/go.mod
@@ -0,0 +1,8 @@
+module main
+
+go 1.24.0
+
+require github.com/inspektor-gadget/inspektor-gadget v0.0.0
+
+// use this to be able to compile it locally
+replace github.com/inspektor-gadget/inspektor-gadget => ../../../../../
diff --git a/pkg/operators/wasm/testdata/filtering/program.go b/pkg/operators/wasm/testdata/filtering/program.go
new file mode 100644
index 000000000..035ca6e0f
--- /dev/null
+++ b/pkg/operators/wasm/testdata/filtering/program.go
@@ -0,0 +1,40 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	api "github.com/inspektor-gadget/inspektor-gadget/wasmapi/go"
+)
+
+// Keep in sync with pkg/operators/wasm/wasm_test.go TestFiltering
+const (
+	mntnsDiscarded    = uint64(555)
+	mntnsNotDiscarded = uint64(777)
+)
+
+//go:wasmexport gadgetStart
+func gadgetStart() int32 {
+	if ret := api.ShouldDiscardMntNsID(mntnsDiscarded); !ret {
+		api.Errorf("mntns should be discarded")
+		return 1
+	}
+	if ret := api.ShouldDiscardMntNsID(mntnsNotDiscarded); ret {
+		api.Errorf("mntns should not be discarded")
+		return 1
+	}
+	return 0
+}
+
+func main() {}
diff --git a/pkg/operators/wasm/testdata/kallsyms/go.mod b/pkg/operators/wasm/testdata/kallsyms/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/kallsyms/go.mod
+++ b/pkg/operators/wasm/testdata/kallsyms/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/map/go.mod b/pkg/operators/wasm/testdata/map/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/map/go.mod
+++ b/pkg/operators/wasm/testdata/map/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/mapofmap/go.mod b/pkg/operators/wasm/testdata/mapofmap/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/mapofmap/go.mod
+++ b/pkg/operators/wasm/testdata/mapofmap/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/params/go.mod b/pkg/operators/wasm/testdata/params/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/params/go.mod
+++ b/pkg/operators/wasm/testdata/params/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/perf/go.mod b/pkg/operators/wasm/testdata/perf/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/perf/go.mod
+++ b/pkg/operators/wasm/testdata/perf/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/testdata/syscall/go.mod b/pkg/operators/wasm/testdata/syscall/go.mod
index 721ae09f6..0d571b2ca 100644
--- a/pkg/operators/wasm/testdata/syscall/go.mod
+++ b/pkg/operators/wasm/testdata/syscall/go.mod
@@ -1,6 +1,6 @@
 module main
 
-go 1.23.0
+go 1.24.0
 
 require github.com/inspektor-gadget/inspektor-gadget v0.0.0
 
diff --git a/pkg/operators/wasm/wasm.go b/pkg/operators/wasm/wasm.go
index 10ade93c3..38b3f4444 100644
--- a/pkg/operators/wasm/wasm.go
+++ b/pkg/operators/wasm/wasm.go
@@ -23,6 +23,7 @@ import (
 	"sync"
 	"time"
 
+	"github.com/cilium/ebpf"
 	ocispec "github.com/opencontainers/image-spec/specs-go/v1"
 	"github.com/spf13/viper"
 	"github.com/tetratelabs/wazero"
@@ -31,6 +32,7 @@ import (
 	"oras.land/oras-go/v2"
 
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	syscallhelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/traceloop/syscall-helpers"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/oci"
@@ -48,9 +50,25 @@ const (
 
 	// Indicates the handle encodes a member of a data array as index << 16 | arrayHandle
 	dataArrayHandleFlag = uint32(1 << 31)
+
+	// cache path for the wasm compilation
+	cacheDir = "/var/run/ig/wasm-cache"
 )
 
-type wasmOperator struct{}
+type wasmOperator struct {
+	cache wazero.CompilationCache
+}
+
+func newWasmOperator() *wasmOperator {
+	cache, err := wazero.NewCompilationCacheWithDir(cacheDir)
+	if err != nil {
+		logger.DefaultLogger().Debugf("failed to create wasm compilation cache: %v", err)
+		return &wasmOperator{}
+	}
+	return &wasmOperator{
+		cache: cache,
+	}
+}
 
 func (w *wasmOperator) Name() string {
 	return "wasm"
@@ -76,7 +94,7 @@ func (w *wasmOperator) InstantiateImageOperator(
 		createdMap:  map[uint32]struct{}{},
 	}
 
-	if err := instance.init(gadgetCtx, target, desc); err != nil {
+	if err := instance.init(gadgetCtx, target, desc, w.cache); err != nil {
 		instance.close(gadgetCtx)
 		return nil, fmt.Errorf("initializing wasm: %w", err)
 	}
@@ -101,6 +119,8 @@ func (w *wasmOperator) InstantiateImageOperator(
 }
 
 type wasmOperatorInstance struct {
+	ctx       context.Context
+	cancel    func()
 	rt        wazero.Runtime
 	gadgetCtx operators.GadgetContext
 	mod       wapi.Module
@@ -126,6 +146,8 @@ type wasmOperatorInstance struct {
 	createdMapMutex sync.RWMutex
 
 	syscallsDeclarations map[string]syscallhelpers.SyscallDeclaration
+
+	mntNsIDMap *ebpf.Map
 }
 
 func (i *wasmOperatorInstance) Name() string {
@@ -210,27 +232,30 @@ func (i *wasmOperatorInstance) init(
 	gadgetCtx operators.GadgetContext,
 	target oras.ReadOnlyTarget,
 	desc ocispec.Descriptor,
+	cache wazero.CompilationCache,
 ) error {
 	ctx := gadgetCtx.Context()
 	rtConfig := wazero.NewRuntimeConfig().
 		WithCloseOnContextDone(true).
-		WithMemoryLimitPages(256) // 16MB (64KB per page)
+		WithMemoryLimitPages(256). // 16MB (64KB per page)
+		WithCompilationCache(cache)
 	i.rt = wazero.NewRuntimeWithConfig(ctx, rtConfig)
 
-	env := i.rt.NewHostModuleBuilder("env")
-
-	i.addLogFuncs(env)
-	i.addDataSourceFuncs(env)
-	i.addFieldFuncs(env)
-	i.addParamsFuncs(env)
-	i.addConfigFuncs(env)
-	i.addMapFuncs(env)
-	i.addHandleFuncs(env)
-	i.addSyscallsDeclarationsFuncs(env)
-	i.addPerfFuncs(env)
-	i.addKallsymsFuncs(env)
-
-	if _, err := env.Instantiate(ctx); err != nil {
+	igModuleBuilder := i.rt.NewHostModuleBuilder("ig")
+
+	i.addLogFuncs(igModuleBuilder)
+	i.addDataSourceFuncs(igModuleBuilder)
+	i.addFieldFuncs(igModuleBuilder)
+	i.addParamsFuncs(igModuleBuilder)
+	i.addConfigFuncs(igModuleBuilder)
+	i.addMapFuncs(igModuleBuilder)
+	i.addHandleFuncs(igModuleBuilder)
+	i.addSyscallsDeclarationsFuncs(igModuleBuilder)
+	i.addPerfFuncs(igModuleBuilder)
+	i.addKallsymsFuncs(igModuleBuilder)
+	i.addFilterFuncs(igModuleBuilder)
+
+	if _, err := igModuleBuilder.Instantiate(ctx); err != nil {
 		return fmt.Errorf("instantiating host module: %w", err)
 	}
 
@@ -274,6 +299,14 @@ func (i *wasmOperatorInstance) init(
 		return fmt.Errorf("unsupported gadget API version: %d, expected: %d", ret[0], apiVersion)
 	}
 
+	// add extra info to gadgetcontext if requested
+	if gadgetCtx.ExtraInfo() {
+		err := i.addExtraInfo(gadgetCtx, ret[0], wasmProgram)
+		if err != nil {
+			return fmt.Errorf("adding extra info: %w", err)
+		}
+	}
+
 	i.dataSourceCallback = mod.ExportedFunction("dataSourceCallback")
 
 	return err
@@ -295,14 +328,27 @@ func (i *wasmOperatorInstance) callGuestFunction(ctx context.Context, name strin
 }
 
 func (i *wasmOperatorInstance) PreStart(gadgetCtx operators.GadgetContext) error {
-	return i.callGuestFunction(gadgetCtx.Context(), "gadgetPreStart")
+	// We're creating a new context here that gets cancelled when Stop() is called; it is important to know
+	// that gadgetInit uses the gadgetContext instead, which will be cancelled whenever the gadgetCtx is cancelled
+	// (and so are any callbacks registered in gadgetInit)
+	i.ctx, i.cancel = context.WithCancel(context.Background())
+	return i.callGuestFunction(i.ctx, "gadgetPreStart")
 }
 
 func (i *wasmOperatorInstance) Start(gadgetCtx operators.GadgetContext) error {
-	return i.callGuestFunction(gadgetCtx.Context(), "gadgetStart")
+	// TODO: We use the mntns map to filter events by mount namespace. Ideally
+	// this shouldn't rely on the map (as it requires a syscall), but on
+	// information stored on the container collection, however it's hidden under
+	// a lot of layers and getting it here is complicated.
+	if mntnsVar, ok := gadgetCtx.GetVar(gadgets.MntNsFilterMapName); ok {
+		i.mntNsIDMap, _ = mntnsVar.(*ebpf.Map)
+	}
+
+	return i.callGuestFunction(i.ctx, "gadgetStart")
 }
 
 func (i *wasmOperatorInstance) Stop(gadgetCtx operators.GadgetContext) error {
+	i.cancel()
 	defer func() {
 		i.handleLock.Lock()
 		i.handleMap = nil
@@ -327,7 +373,10 @@ func (i *wasmOperatorInstance) Stop(gadgetCtx operators.GadgetContext) error {
 }
 
 func (i *wasmOperatorInstance) PostStop(gadgetCtx operators.GadgetContext) error {
-	return i.callGuestFunction(gadgetCtx.Context(), "gadgetPostStop")
+	// TODO: reenable it when
+	// https://github.com/inspektor-gadget/inspektor-gadget/pull/3778 is merged
+	// return i.callGuestFunction(gadgetCtx.Context(), "gadgetPostStop")
+	return nil
 }
 
 func (i *wasmOperatorInstance) close(gadgetCtx operators.GadgetContext) error {
@@ -344,5 +393,5 @@ func (i *wasmOperatorInstance) close(gadgetCtx operators.GadgetContext) error {
 }
 
 func init() {
-	operators.RegisterOperatorForMediaType(wasmObjectMediaType, &wasmOperator{})
+	operators.RegisterOperatorForMediaType(wasmObjectMediaType, newWasmOperator())
 }
diff --git a/pkg/operators/wasm/wasm_test.go b/pkg/operators/wasm/wasm_test.go
index 36350b212..7b974cbf5 100644
--- a/pkg/operators/wasm/wasm_test.go
+++ b/pkg/operators/wasm/wasm_test.go
@@ -29,6 +29,7 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/datasource"
 	gadgetcontext "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-context"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/ebpf"
 	ocihandler "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/oci-handler"
@@ -37,6 +38,73 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/runtime/local"
 )
 
+func runGadget(t *testing.T, gadgetCtx *gadgetcontext.GadgetContext, params map[string]string) error {
+	runtime := local.New()
+	err := runtime.Init(nil)
+	if err != nil {
+		return err
+	}
+	t.Cleanup(func() { runtime.Close() })
+
+	if params == nil {
+		params = map[string]string{}
+	}
+
+	params["operator.oci.verify-image"] = "false"
+	return runtime.RunGadget(gadgetCtx, nil, params)
+}
+
+func createGadgetCtx(t *testing.T, name string, ops ...operators.DataOperator) *gadgetcontext.GadgetContext {
+	ctx, cancel := context.WithTimeout(context.Background(), time.Second*10)
+	t.Cleanup(cancel)
+
+	ociStore, err := orasoci.NewFromTar(ctx, fmt.Sprintf("testdata/%s.tar", name))
+	require.NoError(t, err, "creating oci store")
+
+	dataOps := []operators.DataOperator{ocihandler.OciHandler}
+	dataOps = append(dataOps, ops...)
+	gadgetCtx := gadgetcontext.New(
+		ctx,
+		fmt.Sprintf("%s:latest", name),
+		gadgetcontext.WithDataOperators(dataOps...),
+		gadgetcontext.WithOrasReadonlyTarget(ociStore),
+	)
+
+	return gadgetCtx
+}
+
+func TestWasm(t *testing.T) {
+	utilstest.RequireRoot(t)
+
+	t.Parallel()
+
+	tests := []struct {
+		name        string
+		errExpected bool
+	}{
+		{"map", false},
+		{"mapofmap", false},
+		{"badguest", false},
+		{"baderrptr", true},
+		{"syscall", false},
+		{"perf", false},
+		{"kallsyms", false},
+	}
+
+	for _, test := range tests {
+		t.Run(test.name, func(t *testing.T) {
+			t.Parallel()
+			gadgetCtx := createGadgetCtx(t, test.name)
+			err := runGadget(t, gadgetCtx, nil)
+			if test.errExpected {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+			}
+		})
+	}
+}
+
 func TestWasmFields(t *testing.T) {
 	utilstest.RequireRoot(t)
 
@@ -177,18 +245,7 @@ func TestWasmFields(t *testing.T) {
 		}),
 	)
 
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/fields.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"fields:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
+	gadgetCtx := createGadgetCtx(t, "fields", myOperator)
 
 	// Register data source that will be used by the wasm program to add fields
 	ds, err := gadgetCtx.RegisterDataSource(datasource.TypeSingle, "myds")
@@ -207,15 +264,7 @@ func TestWasmFields(t *testing.T) {
 	},
 	)
 
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
+	err = runGadget(t, gadgetCtx, nil)
 	require.NoError(t, err, "running gadget")
 
 	require.Equal(t, counter, 1)
@@ -280,18 +329,7 @@ func TestWasmDataArray(t *testing.T) {
 		}),
 	)
 
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/dataarray.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"dataarray:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
+	gadgetCtx := createGadgetCtx(t, "dataarray", myOperator)
 
 	// Register data source that will be used by the wasm program to add fields
 	ds, err := gadgetCtx.RegisterDataSource(datasource.TypeArray, "myds")
@@ -300,15 +338,7 @@ func TestWasmDataArray(t *testing.T) {
 	_, err = ds.AddField("foo", api.Kind_Uint32)
 	require.NoError(t, err)
 
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
+	err = runGadget(t, gadgetCtx, nil)
 	require.NoError(t, err, "running gadget")
 
 	require.Equal(t, counter, 1)
@@ -369,18 +399,7 @@ func TestWasmDataEmit(t *testing.T) {
 		}),
 	)
 
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/dataemit.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"dataemit:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
+	gadgetCtx := createGadgetCtx(t, "dataemit", myOperator)
 
 	// Register data source that will be used by the wasm program to add fields
 	ds, err := gadgetCtx.RegisterDataSource(datasource.TypeArray, "old_ds")
@@ -389,50 +408,12 @@ func TestWasmDataEmit(t *testing.T) {
 	_, err = ds.AddField("foo", api.Kind_Uint32)
 	require.NoError(t, err)
 
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
+	err = runGadget(t, gadgetCtx, nil)
 	require.NoError(t, err, "running gadget")
 
 	require.Equal(t, counter, 1) // as only 1 of the two packets emitted by the `old_ds` will be passed on to the `new_ds`
 }
 
-func TestBadGuest(t *testing.T) {
-	utilstest.RequireRoot(t)
-
-	t.Parallel()
-
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/badguest.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"badguest:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
-	require.NoError(t, err, "running gadget")
-}
-
 func TestWasmParams(t *testing.T) {
 	utilstest.RequireRoot(t)
 
@@ -461,29 +442,12 @@ func TestWasmParams(t *testing.T) {
 		}),
 	)
 
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/params.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"params:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler, myOperator),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
+	gadgetCtx := createGadgetCtx(t, "params", myOperator)
 	params := map[string]string{
-		"operator.oci.verify-image":   "false",
 		"operator.oci.wasm.param-key": "param-value",
 	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
+
+	err := runGadget(t, gadgetCtx, params)
 	require.NoError(t, err, "running gadget")
 }
 
@@ -492,28 +456,8 @@ func TestConfig(t *testing.T) {
 
 	t.Parallel()
 
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/config.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"config:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
+	gadgetCtx := createGadgetCtx(t, "config")
+	err := runGadget(t, gadgetCtx, nil)
 	require.NoError(t, err, "running gadget")
 
 	cfg, ok := gadgetCtx.GetVar("config")
@@ -524,152 +468,13 @@ func TestConfig(t *testing.T) {
 	require.Equal(t, "myvalue", v.GetString("foo.bar.zas"))
 }
 
-func TestMap(t *testing.T) {
-	utilstest.RequireRoot(t)
-
-	t.Parallel()
-
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/map.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"map:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
-	require.NoError(t, err, "running gadget")
-}
-
-func TestMapOfMap(t *testing.T) {
-	utilstest.RequireRoot(t)
-
-	t.Parallel()
-
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/mapofmap.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"mapofmap:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
-	require.NoError(t, err, "running gadget")
-}
-
-func TestSyscall(t *testing.T) {
-	utilstest.RequireRoot(t)
-
-	t.Parallel()
-
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/syscall.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"syscall:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
-	require.NoError(t, err, "running gadget")
-}
-
-func TestPerf(t *testing.T) {
-	utilstest.RequireRoot(t)
-
-	t.Parallel()
-
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/perf.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"perf:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
-	require.NoError(t, err, "running gadget")
-}
-
-func TestKallsyms(t *testing.T) {
-	utilstest.RequireRoot(t)
+func TestFiltering(t *testing.T) {
+	gadgetCtx := createGadgetCtx(t, "filtering")
 
-	t.Parallel()
+	// Keep in sync with testdata/filtering/program.go
+	mntNsMap := utilstest.CreateMntNsFilterMap(t, 777)
+	gadgetCtx.SetVar(gadgets.MntNsFilterMapName, mntNsMap)
 
-	ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)
-	t.Cleanup(cancel)
-
-	ociStore, err := orasoci.NewFromTar(ctx, "testdata/kallsyms.tar")
-	require.NoError(t, err, "creating oci store")
-
-	gadgetCtx := gadgetcontext.New(
-		ctx,
-		"kallsyms:latest",
-		gadgetcontext.WithDataOperators(ocihandler.OciHandler),
-		gadgetcontext.WithOrasReadonlyTarget(ociStore),
-	)
-
-	runtime := local.New()
-	err = runtime.Init(nil)
-	require.NoError(t, err, "runtime init")
-	t.Cleanup(func() { runtime.Close() })
-
-	params := map[string]string{
-		"operator.oci.verify-image": "false",
-	}
-	err = runtime.RunGadget(gadgetCtx, nil, params)
+	err := runGadget(t, gadgetCtx, nil)
 	require.NoError(t, err, "running gadget")
 }
diff --git a/pkg/params/params.go b/pkg/params/params.go
index f90c6506d..caaa8884f 100644
--- a/pkg/params/params.go
+++ b/pkg/params/params.go
@@ -1,4 +1,4 @@
-// Copyright 2022-2024 The Inspektor Gadget authors
+// Copyright 2022-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -279,6 +279,10 @@ func b64DecodeAndDecompress(s string) ([]byte, error) {
 
 func (p *Params) CopyToMap(target map[string]string, prefix string) {
 	for _, param := range *p {
+		if target[prefix+param.Key] != "" {
+			continue
+		}
+
 		if param.TypeHint == TypeBytes {
 			target[prefix+param.Key] = compressAndB64Encode(param.String())
 		} else {
@@ -291,11 +295,12 @@ func (p *Params) CopyToMap(target map[string]string, prefix string) {
 // given the TypeHint is set to TypeStringSlice
 func (p *Params) CopyToMapExt(target map[string]any, prefix string) {
 	for _, param := range *p {
-		if param.TypeHint == TypeBytes {
+		switch param.TypeHint {
+		case TypeBytes:
 			target[prefix+param.Key] = compressAndB64Encode(param.String())
-		} else if param.TypeHint == TypeStringSlice {
-			target[prefix+param.Key] = strings.Split(param.String(), ",")
-		} else {
+		case TypeStringSlice:
+			target[prefix+param.Key] = SplitStringSlice(param.String())
+		default:
 			target[prefix+param.Key] = param.String()
 		}
 	}
@@ -488,10 +493,7 @@ func (p *Param) AsBytes() []byte {
 }
 
 func (p *Param) AsStringSlice() []string {
-	if p.value == "" {
-		return []string{}
-	}
-	return strings.Split(p.value, ",")
+	return SplitStringSlice(p.value)
 }
 
 func (p *Param) AsBool() bool {
@@ -543,3 +545,38 @@ func (p *Param) AsDuration() time.Duration {
 func (p *Param) AsIP() net.IP {
 	return net.ParseIP(p.value)
 }
+
+// SplitStringSlice splits a string into multiple strings that were
+// delimited by comma characters.
+func SplitStringSlice(s string) []string {
+	if len(s) == 0 {
+		return []string{}
+	}
+	var result []string
+	var b strings.Builder
+	var escape bool
+	for _, c := range s {
+		if escape {
+			escape = false
+			if c != ',' && c != '\\' {
+				// Leave escape char alone if not a comma or backslash
+				b.WriteByte('\\')
+			}
+			b.WriteRune(c)
+			continue
+		}
+		switch c {
+		case '\\':
+			escape = true
+		case ',':
+			result = append(result, b.String())
+			b.Reset()
+		default:
+			b.WriteRune(c)
+		}
+	}
+	if b.Len() > 0 {
+		result = append(result, b.String())
+	}
+	return result
+}
diff --git a/pkg/params/params_test.go b/pkg/params/params_test.go
index ac2405d3b..c191833bb 100644
--- a/pkg/params/params_test.go
+++ b/pkg/params/params_test.go
@@ -1,4 +1,4 @@
-// Copyright 2022-2023 The Inspektor Gadget authors
+// Copyright 2022-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -136,6 +136,12 @@ func TestParamAs(t *testing.T) {
 			expected: []string{},
 			getter:   func(p *Param) any { return p.AsStringSlice() },
 		},
+		{
+			name:     "StringSlice()_EscapedCommas",
+			value:    "foo,bar,zas\\,foob,olo\\lol,fro\\\\bedeedoo",
+			expected: []string{"foo", "bar", "zas,foob", "olo\\lol", "fro\\bedeedoo"},
+			getter:   func(p *Param) any { return p.AsStringSlice() },
+		},
 		{
 			name:     "Bool()_true",
 			value:    "true",
@@ -463,8 +469,8 @@ func TestBytesHandling(t *testing.T) {
 }
 
 func TestStringSlice(t *testing.T) {
-	const testStringSlice = "foo,bar,quux"
-	testStringSliceExpected := []string{"foo", "bar", "quux"}
+	const testStringSlice = "foo,bar,quux,abc\\,def"
+	testStringSliceExpected := []string{"foo", "bar", "quux", "abc,def"}
 	params := Params{
 		&Param{
 			ParamDesc: &ParamDesc{
diff --git a/pkg/parser/outputhelpers.go b/pkg/parser/outputhelpers.go
index f89fd8394..b8c5c5e6c 100644
--- a/pkg/parser/outputhelpers.go
+++ b/pkg/parser/outputhelpers.go
@@ -51,7 +51,7 @@ type outputHelper[T any] struct {
 }
 
 func (oh *outputHelper[T]) forwardEvent(ev *T) {
-	oh.eventCallback(oh.TextColumnsFormatter.FormatEntry(ev))
+	oh.eventCallback(oh.FormatEntry(ev))
 	if !oh.enableExtraLines {
 		return
 	}
diff --git a/pkg/process-helpers/processhelpers.go b/pkg/process-helpers/processhelpers.go
new file mode 100644
index 000000000..f25f94b5c
--- /dev/null
+++ b/pkg/process-helpers/processhelpers.go
@@ -0,0 +1,387 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package processhelpers
+
+import (
+	"bufio"
+	"bytes"
+	"fmt"
+	"io"
+	"os"
+	"path/filepath"
+	"strconv"
+	"sync"
+	"time"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
+)
+
+const (
+	// Clock ticks per second (constant on Linux for all architectures except alpha and ia64)
+	// This could be determined dynamically using sysconf(_SC_CLK_TCK) in C
+	// See e.g.
+	// https://git.musl-libc.org/cgit/musl/tree/src/conf/sysconf.c#n30
+	// https://github.com/containerd/cgroups/pull/12
+	// https://lore.kernel.org/lkml/agtlq6$iht$1@penguin.transmeta.com/
+	clockTicksPerSecond = 100
+)
+
+// ProcessInfo represents information about a running process
+type ProcessInfo struct {
+	PID              int       `json:"pid"`
+	PPID             int       `json:"ppid"`
+	Comm             string    `json:"comm"`
+	CPUUsage         float64   `json:"cpuUsage"`         // CPU usage in percentage
+	CPUUsageRelative float64   `json:"cpuUsageRelative"` // CPU usage in percentage, relative to number of cores
+	CPUTime          uint64    `json:"cpuTime"`          // Total CPU time
+	MemoryRSS        uint64    `json:"memoryRSS"`        // Resident Set Size in bytes
+	MemoryVirtual    uint64    `json:"memoryVirtual"`    // Virtual memory size in bytes
+	MemoryRelative   float64   `json:"memoryRelative"`   // Percentage of memory usage of the system
+	ThreadCount      int       `json:"threadCount"`      // Number of threads
+	State            string    `json:"state"`            // Process state (R: running, S: sleeping, etc.)
+	Uid              uint32    `json:"uid"`              // UID of the process owner
+	StartTime        uint64    `json:"startTime"`        // Process start time (clock ticks since system boot)
+	StartTimeStr     time.Time `json:"startTimeStr"`     // Process start time as a formatted string
+	MountNsID        uint64    `json:"mountnsid"`        // Mount namespace ID
+}
+
+type Options interface {
+	WithCPUUsage() bool
+	WithCPUUsageRelative() bool
+	WithComm() bool
+	WithPPID() bool
+	WithState() bool
+	WithUID() bool
+	WithVmSize() bool
+	WithVmRSS() bool
+	WithMemoryRelative() bool
+	WithThreadCount() bool
+	WithStartTime() bool
+
+	TotalMemory() uint64
+	NumCPU() int
+
+	LastCPUTime(pid int) (uint64, bool)
+	BootTime() time.Time
+}
+
+func needStatus(options Options) bool {
+	return options.WithPPID() ||
+		options.WithComm() ||
+		options.WithState() ||
+		options.WithUID() ||
+		options.WithVmRSS() ||
+		options.WithVmSize() ||
+		options.WithMemoryRelative() ||
+		options.WithThreadCount()
+}
+
+func needStat(options Options) bool {
+	return options.WithCPUUsage() || options.WithCPUUsageRelative() || options.WithStartTime()
+}
+
+// buffer pool to reuse read buffers and minimize allocations
+var bufPool = sync.Pool{
+	New: func() interface{} {
+		buf := make([]byte, 64*1024)
+		return &buf
+	},
+}
+
+var builderPool = sync.Pool{New: func() interface{} { b := new(bytes.Buffer); return b }}
+
+// parseDecimal parses a []byte of decimal digits without allocations
+func parseDecimal(b []byte) uint64 {
+	var v uint64
+	for _, c := range b {
+		if c < '0' || c > '9' {
+			break
+		}
+		v = v*10 + uint64(c-'0')
+	}
+	return v
+}
+
+// parseTrimDecimal parses a []byte of decimal digits without allocations and removes leading spaces
+func parseTrimDecimal(b []byte) uint64 {
+	var v uint64
+	started := false
+	for _, c := range b {
+		if c < '0' || c > '9' {
+			if c == ' ' && !started {
+				continue
+			}
+			break
+		}
+		started = true
+		v = v*10 + uint64(c-'0')
+	}
+	return v
+}
+
+var (
+	prefName    = []byte("Name:\t")
+	prefPPid    = []byte("PPid:\t")
+	prefState   = []byte("State:\t")
+	prefUid     = []byte("Uid:\t")
+	prefVmSize  = []byte("VmSize:\t")
+	prefVmRSS   = []byte("VmRSS:\t")
+	prefThreads = []byte("Threads:\t")
+)
+
+func GetTotalMemory() (uint64, error) {
+	path := filepath.Join(host.HostProcFs, "meminfo")
+	f, err := os.Open(path)
+	if err != nil {
+		return 0, fmt.Errorf("opening meminfo: %w", err)
+	}
+	scanner := bufio.NewScanner(f)
+	for scanner.Scan() {
+		suffix, ok := bytes.CutPrefix(scanner.Bytes(), []byte("MemTotal:"))
+		if !ok {
+			continue
+		}
+		memBytes, ok := bytes.CutSuffix(bytes.TrimSpace(suffix), []byte(" kB"))
+		if !ok {
+			return 0, fmt.Errorf("unexpected contents of total memory field: %q", suffix)
+		}
+		b, err := strconv.ParseUint(string(memBytes), 10, 64)
+		if err != nil {
+			return 0, fmt.Errorf("parsing total memory field: %w", err)
+		}
+		return b * 1024, nil
+	}
+	return 0, fmt.Errorf("getting total memory from meminfo")
+}
+
+// readBytes fully reads s into a byte slice provided by bufPool; in case of error, it also
+// returns it. In case of success, it's up to the caller to return it.
+func readBytes(s io.Reader) (*[]byte, int, error) {
+	xbuf := bufPool.Get().(*[]byte)
+	n := 0
+	for {
+		r, e := s.Read((*xbuf)[n:])
+		if r > 0 {
+			n += r
+		}
+		if e == io.EOF {
+			break
+		}
+		if e != nil {
+			bufPool.Put(xbuf)
+			return nil, 0, fmt.Errorf("reading file: %w", e)
+		}
+	}
+	return xbuf, n, nil
+}
+
+func GetProcessInfo(pid int, timeDelta float64, options Options) (ProcessInfo, error) {
+	pi := ProcessInfo{PID: pid}
+
+	// read status file to extract requested data
+	if needStatus(options) {
+		path := filepath.Join(host.HostProcFs, strconv.Itoa(pid), "status")
+		s, err := os.Open(path)
+		if err != nil {
+			return pi, fmt.Errorf("opening status file for pid %d: %w", pid, err)
+		}
+		xbuf, n, err := readBytes(s)
+		if err != nil {
+			return pi, fmt.Errorf("reading status file for pid %d: %w", pid, err)
+		}
+		s.Close()
+		data := (*xbuf)[:n]
+
+		bComm := options.WithComm()
+		bPPID := options.WithPPID()
+		bState := options.WithState()
+		bUid := options.WithUID()
+		bVmSize := options.WithVmSize()
+		bVmRSS := options.WithVmRSS()
+		bThreads := options.WithThreadCount()
+
+		if options.WithMemoryRelative() {
+			bVmRSS = true
+		}
+
+		for i := 0; i < len(data); {
+			j := bytes.IndexByte(data[i:], '\n')
+			if j < 0 {
+				j = len(data) - i
+			}
+			line := data[i : i+j]
+
+			switch {
+			case bComm && bytes.HasPrefix(line, prefName):
+				bComm = false
+				pi.Comm = unescapeCommandBytes(line[len(prefName):])
+			case bPPID && bytes.HasPrefix(line, prefPPid):
+				bPPID = false
+				pi.PPID = int(parseTrimDecimal(line[len(prefPPid):]))
+			case bState && bytes.HasPrefix(line, prefState):
+				bState = false
+				if len(line) > len(prefState) {
+					pi.State = string(line[len(prefState)])
+				}
+			case bUid && bytes.HasPrefix(line, prefUid):
+				bUid = false
+				pi.Uid = uint32(parseTrimDecimal(line[len(prefUid):]))
+			case bVmSize && bytes.HasPrefix(line, prefVmSize):
+				bVmSize = false
+				pi.MemoryVirtual = parseTrimDecimal(line[len(prefVmSize):]) * 1024
+			case bVmRSS && bytes.HasPrefix(line, prefVmRSS):
+				bVmRSS = false
+				pi.MemoryRSS = parseTrimDecimal(line[len(prefVmRSS):]) * 1024
+			case bThreads && bytes.HasPrefix(line, prefThreads):
+				bThreads = false
+				pi.ThreadCount = int(parseTrimDecimal(line[len(prefThreads):]))
+			}
+
+			if !bComm && !bPPID && !bState && !bUid && !bVmSize && !bVmRSS && !bThreads {
+				// exit early if we got everything we need
+				break
+			}
+
+			i += j + 1
+		}
+		bufPool.Put(xbuf)
+	}
+
+	if options.WithMemoryRelative() {
+		totalMem := options.TotalMemory()
+		if totalMem > 0 {
+			pi.MemoryRelative = 100 * float64(pi.MemoryRSS) / float64(totalMem)
+		}
+	}
+
+	// read stat file to extract CPU Usage & start time
+	if needStat(options) {
+		path := filepath.Join(host.HostProcFs, strconv.Itoa(pid), "stat")
+		s, err := os.Open(path)
+		if err != nil {
+			return pi, fmt.Errorf("open stat %d: %w", pid, err)
+		}
+		xbuf, n, err := readBytes(s)
+		if err != nil {
+			return pi, fmt.Errorf("reading stat file for pid %d: %w", pid, err)
+		}
+		s.Close()
+		data := (*xbuf)[:n]
+
+		o := bytes.IndexByte(data, '(')
+		c := bytes.LastIndexByte(data, ')')
+		if o < 0 || c <= o {
+			bufPool.Put(xbuf)
+			return pi, fmt.Errorf("invalid stat %d", pid)
+		}
+		r := data[c+1:]
+
+		idx := 3 // offset field index to match https://man7.org/linux/man-pages/man5/proc_pid_stat.5.html
+
+		var utime, stime, ticks uint64
+
+		for i := 0; i < len(r) && idx <= 22; {
+			// skip spaces
+			for i < len(r) && r[i] == ' ' {
+				i++
+			}
+			if i >= len(r) {
+				break
+			}
+			j := i
+			for j < len(r) && r[j] != ' ' {
+				j++
+			}
+			f := r[i:j]
+			switch idx {
+			case 14: // utime
+				utime = parseDecimal(f)
+			case 15: // stime
+				stime = parseDecimal(f)
+			case 22:
+				ticks = parseDecimal(f)
+			}
+			idx++
+			i = j
+		}
+		bufPool.Put(xbuf)
+
+		if options.WithCPUUsage() || options.WithCPUUsageRelative() {
+			pi.CPUTime = utime + stime
+			if prev, ok := options.LastCPUTime(pi.PID); ok && timeDelta > 0 {
+				d := float64(pi.CPUTime - prev)
+				if d < 0 {
+					d = float64(pi.CPUTime)
+				}
+				pi.CPUUsage = 100 * d / clockTicksPerSecond / timeDelta // d / clockTicksPerSecond / timeDelta * 100
+				if options.WithCPUUsageRelative() {
+					pi.CPUUsageRelative = pi.CPUUsage / float64(options.NumCPU())
+				}
+			}
+		}
+
+		if options.WithStartTime() {
+			pi.StartTime = ticks
+			sec := float64(ticks) / clockTicksPerSecond
+			pi.StartTimeStr = options.BootTime().Add(time.Duration(sec * float64(time.Second)))
+		}
+	}
+
+	return pi, nil
+}
+
+// unescapeCommandBytes unescapes the command string according to kernel escaping rules
+// %ESCAPE_SPACE: ('\f', '\n', '\r', '\t', '\v')
+// %ESCAPE_SPECIAL: ('\"', '\\', '\a', '\e')
+func unescapeCommandBytes(cmd []byte) string {
+	if bytes.IndexByte(cmd, '\\') < 0 {
+		return string(cmd)
+	}
+	b := builderPool.Get().(*bytes.Buffer)
+	b.Reset()
+	b.Grow(len(cmd))
+	for i := 0; i < len(cmd); i++ {
+		if cmd[i] == '\\' && i+1 < len(cmd) {
+			switch cmd[i+1] {
+			case 'f':
+				b.WriteByte('\f') // form feed
+			case 'n':
+				b.WriteByte('\n') // new line
+			case 'r':
+				b.WriteByte('\r') // carriage return
+			case 't':
+				b.WriteByte('\t') // horizontal tab
+			case 'v':
+				b.WriteByte('\v') // vertical tab
+			case '"':
+				b.WriteByte('"') // double quote
+			case '\\':
+				b.WriteByte('\\') // backslash
+			case 'a':
+				b.WriteByte('\a') // alert
+			case 'e':
+				b.WriteByte(27) // escape
+			default:
+				b.Write(cmd[i : i+2])
+			}
+			i++
+		} else {
+			b.WriteByte(cmd[i])
+		}
+	}
+	s := b.String()
+	builderPool.Put(b)
+	return s
+}
diff --git a/pkg/process-helpers/processhelpers_test.go b/pkg/process-helpers/processhelpers_test.go
new file mode 100644
index 000000000..d0029e307
--- /dev/null
+++ b/pkg/process-helpers/processhelpers_test.go
@@ -0,0 +1,182 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package processhelpers_test
+
+import (
+	"os"
+	"runtime"
+	"strconv"
+	"sync"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+
+	processhelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/process-helpers"
+)
+
+type allOptions struct {
+	totalMemory uint64
+	cpuCount    int
+}
+
+func (a allOptions) WithCPUUsage() bool {
+	return true
+}
+
+func (a allOptions) WithCPUUsageRelative() bool {
+	return true
+}
+
+func (a allOptions) WithComm() bool {
+	return true
+}
+
+func (a allOptions) WithPPID() bool {
+	return true
+}
+
+func (a allOptions) WithState() bool {
+	return true
+}
+
+func (a allOptions) WithUID() bool {
+	return true
+}
+
+func (a allOptions) WithVmSize() bool {
+	return true
+}
+
+func (a allOptions) WithVmRSS() bool {
+	return true
+}
+
+func (a allOptions) WithMemoryRelative() bool {
+	return true
+}
+
+func (a allOptions) WithThreadCount() bool {
+	return true
+}
+
+func (a allOptions) WithStartTime() bool {
+	return true
+}
+
+func (a allOptions) TotalMemory() uint64 {
+	return a.totalMemory
+}
+
+func (a allOptions) NumCPU() int {
+	return a.cpuCount
+}
+
+func (a allOptions) LastCPUTime(pid int) (uint64, bool) {
+	return 0, false
+}
+
+func (a allOptions) BootTime() time.Time {
+	return time.Now()
+}
+
+func TestGetProcessInfo(t *testing.T) {
+	pid := os.Getpid()
+	proc, err := processhelpers.GetProcessInfo(pid, 0, allOptions{
+		cpuCount: 1,
+	})
+	require.NoError(t, err)
+
+	assert.Equal(t, pid, proc.PID)
+	assert.Greater(t, proc.PPID, 0)
+	assert.NotEmpty(t, proc.Comm)
+	assert.Zero(t, proc.CPUUsage)
+	assert.Zero(t, proc.CPUUsageRelative)
+	assert.NotZero(t, proc.MemoryRSS)
+	assert.NotZero(t, proc.MemoryVirtual)
+	assert.NotZero(t, proc.ThreadCount)
+	assert.Equal(t, proc.State, "R")
+	assert.NotZero(t, proc.StartTime)
+}
+
+func BenchmarkSingle(b *testing.B) {
+	pid := os.Getpid()
+	opts := allOptions{cpuCount: 1}
+	b.ResetTimer()
+	for i := 0; i < b.N; i++ {
+		processhelpers.GetProcessInfo(pid, 0, opts)
+	}
+}
+
+func BenchmarkAllProcessesSeq(b *testing.B) {
+	entries, err := os.ReadDir("/proc")
+	require.NoError(b, err)
+	opts := allOptions{cpuCount: 1}
+	b.ResetTimer()
+	for i := 0; i < b.N; i++ {
+		for _, entry := range entries {
+			// Skip non-directories and non-numeric names (not PIDs)
+			if !entry.IsDir() {
+				continue
+			}
+
+			pid64, err := strconv.ParseInt(entry.Name(), 10, 32)
+			if err != nil {
+				// Not a process directory
+				continue
+			}
+			pid := int(pid64)
+			processhelpers.GetProcessInfo(pid, 0, opts)
+		}
+	}
+}
+
+func BenchmarkAllProcessesParallel(b *testing.B) {
+	entries, err := os.ReadDir("/proc")
+	require.NoError(b, err)
+	opts := allOptions{cpuCount: 1}
+	b.ResetTimer()
+
+	for i := 0; i < b.N; i++ {
+		var wg sync.WaitGroup
+		q := make(chan int, 64)
+		for i := 0; i < runtime.NumCPU(); i++ {
+			wg.Add(1)
+			go func() {
+				defer wg.Done()
+				for pid := range q {
+					processhelpers.GetProcessInfo(pid, 0, opts)
+				}
+			}()
+		}
+		for _, entry := range entries {
+			// Skip non-directories and non-numeric names (not PIDs)
+			if !entry.IsDir() {
+				continue
+			}
+
+			pid64, err := strconv.ParseInt(entry.Name(), 10, 32)
+			if err != nil {
+				// Not a process directory
+				continue
+			}
+			pid := int(pid64)
+			q <- pid
+		}
+		close(q)
+		wg.Wait()
+	}
+}
diff --git a/pkg/runtime/grpc/oci.go b/pkg/runtime/grpc/oci.go
index ef23fefd7..0b8806263 100644
--- a/pkg/runtime/grpc/oci.go
+++ b/pkg/runtime/grpc/oci.go
@@ -44,9 +44,10 @@ func (r *Runtime) GetGadgetInfo(gadgetCtx runtime.GadgetContext, runtimeParams *
 	client := api.NewGadgetManagerClient(conn)
 
 	in := &api.GetGadgetInfoRequest{
-		ParamValues: paramValues,
-		ImageName:   gadgetCtx.ImageName(),
-		Version:     api.VersionGadgetInfo,
+		ParamValues:      paramValues,
+		ImageName:        gadgetCtx.ImageName(),
+		Version:          api.VersionGadgetInfo,
+		RequestExtraInfo: gadgetCtx.ExtraInfo(),
 	}
 
 	// specify that ImageName will contain a gadget instance ID
@@ -58,13 +59,18 @@ func (r *Runtime) GetGadgetInfo(gadgetCtx runtime.GadgetContext, runtimeParams *
 	if err != nil {
 		return nil, fmt.Errorf("getting gadget info: %w", err)
 	}
+	extraInfo := &api.ExtraInfo{}
 
-	err = gadgetCtx.LoadGadgetInfo(out.GadgetInfo, paramValues, false)
+	if gadgetCtx.ExtraInfo() {
+		extraInfo = out.GadgetInfo.ExtraInfo
+	}
+
+	err = gadgetCtx.LoadGadgetInfo(out.GadgetInfo, paramValues, false, extraInfo)
 	if err != nil {
 		return nil, fmt.Errorf("initializing local operators: %w", err)
 	}
 
-	return gadgetCtx.SerializeGadgetInfo()
+	return gadgetCtx.SerializeGadgetInfo(gadgetCtx.ExtraInfo())
 }
 
 func (r *Runtime) RunGadget(gadgetCtx runtime.GadgetContext, runtimeParams *params.Params, paramValues api.ParamValues) error {
@@ -117,6 +123,9 @@ func (r *Runtime) runGadgetOnTargets(
 	}
 
 	wg.Wait()
+	// Stop local operators after all remote targets
+	// have stopped their operators and "returned"
+	gadgetCtx.StopLocalOperators()
 	return results, results.Err()
 }
 
@@ -241,7 +250,7 @@ func (r *Runtime) runGadget(gadgetCtx runtime.GadgetContext, target target, allP
 
 				// Try to load gadget info; if gadget info has already been loaded and this one
 				// doesn't match, this will terminate this particular client session
-				err = gadgetCtx.LoadGadgetInfo(gi, allParams, true)
+				err = gadgetCtx.LoadGadgetInfo(gi, allParams, true, nil)
 				if err != nil {
 					gadgetCtx.Logger().Warnf("deserizalize gadget info: %v", err)
 					continue
diff --git a/pkg/runtime/local/oci.go b/pkg/runtime/local/oci.go
index f0376b4d6..0f26915f5 100644
--- a/pkg/runtime/local/oci.go
+++ b/pkg/runtime/local/oci.go
@@ -27,8 +27,7 @@ func (r *Runtime) GetGadgetInfo(gadgetCtx runtime.GadgetContext, runtimeParams *
 	if err != nil {
 		return nil, fmt.Errorf("initializing and preparing operators: %w", err)
 	}
-
-	return gadgetCtx.SerializeGadgetInfo()
+	return gadgetCtx.SerializeGadgetInfo(gadgetCtx.ExtraInfo())
 }
 
 func (r *Runtime) RunGadget(gadgetCtx runtime.GadgetContext, runtimeParams *params.Params, paramValues api.ParamValues) error {
diff --git a/pkg/runtime/runtime.go b/pkg/runtime/runtime.go
index a60f7e1b6..2baed6ebc 100644
--- a/pkg/runtime/runtime.go
+++ b/pkg/runtime/runtime.go
@@ -36,6 +36,7 @@ const (
 
 type GadgetContext interface {
 	ID() string
+	Name() string
 	Parser() parser.Parser
 	GadgetDesc() gadgets.GadgetDesc
 	Context() context.Context
@@ -47,6 +48,7 @@ type GadgetContext interface {
 	OperatorsParamCollection() params.Collection
 	Timeout() time.Duration
 	UseInstance() bool
+	ExtraInfo() bool
 
 	Cancel()
 	ImageName() string
@@ -55,8 +57,9 @@ type GadgetContext interface {
 	GetAllDataSources() map[string]datasource.DataSource
 	SetVar(string, any)
 	GetVar(string) (any, bool)
-	SerializeGadgetInfo() (*api.GadgetInfo, error)
-	LoadGadgetInfo(info *api.GadgetInfo, paramValues api.ParamValues, run bool) error
+	SerializeGadgetInfo(requestExtraInfo bool) (*api.GadgetInfo, error)
+	LoadGadgetInfo(info *api.GadgetInfo, paramValues api.ParamValues, run bool, extraInfo *api.ExtraInfo) error
+	StopLocalOperators()
 	Params() []*api.Param
 	SetMetadata([]byte)
 	SetParams([]*api.Param)
diff --git a/pkg/socketenricher/socketenricher_arm64_bpfel.o b/pkg/socketenricher/socketenricher_arm64_bpfel.o
index 9c8ff4230..cc6246932 100644
Binary files a/pkg/socketenricher/socketenricher_arm64_bpfel.o and b/pkg/socketenricher/socketenricher_arm64_bpfel.o differ
diff --git a/pkg/socketenricher/socketenricher_x86_bpfel.o b/pkg/socketenricher/socketenricher_x86_bpfel.o
index cab94005b..e3fc2fff8 100644
Binary files a/pkg/socketenricher/socketenricher_x86_bpfel.o and b/pkg/socketenricher/socketenricher_x86_bpfel.o differ
diff --git a/pkg/symbolizer/symbolizer.go b/pkg/symbolizer/symbolizer.go
index 5056277c3..1954f770a 100644
--- a/pkg/symbolizer/symbolizer.go
+++ b/pkg/symbolizer/symbolizer.go
@@ -41,7 +41,13 @@ const (
 	pruneTickerTime     = time.Minute
 )
 
+type SymbolizerOptions struct {
+	UseSymtab bool
+}
+
 type Symbolizer struct {
+	options SymbolizerOptions
+
 	lock             sync.RWMutex
 	symbolTables     map[exeKey]*symbolTable
 	symbolCountTotal int
@@ -80,7 +86,7 @@ func (k exeKey) String() string {
 	return fmt.Sprintf("ino=%d mtime=%d.%d", k.ino, k.mtimeSec, k.mtimeNsec)
 }
 
-func NewSymbolizer() (*Symbolizer, error) {
+func NewSymbolizer(opts SymbolizerOptions) (*Symbolizer, error) {
 	pid1PidNsInfo, err := os.Stat(fmt.Sprintf("%s/1/ns/pid", host.HostProcFs))
 	if err != nil {
 		return nil, err
@@ -91,6 +97,7 @@ func NewSymbolizer() (*Symbolizer, error) {
 	}
 
 	s := &Symbolizer{
+		options:         opts,
 		symbolTables:    make(map[exeKey]*symbolTable),
 		hostProcFsPidNs: uint32(pid1PidNsStat.Ino),
 		pruneTickerTime: pruneTickerTime,
@@ -181,6 +188,17 @@ type Task struct {
 }
 
 func (s *Symbolizer) Resolve(task Task, addresses []uint64) ([]string, error) {
+	if s.options.UseSymtab {
+		return s.resolveWithSymtab(task, addresses)
+	}
+	// At the moment, we don't support other symbolization methods than symtab
+	// and NewSymbolizer() is only called with UseSymtab. So this code path is
+	// not taken. When implementing more symbolization methods, this can be
+	// added here.
+	return nil, nil
+}
+
+func (s *Symbolizer) resolveWithSymtab(task Task, addresses []uint64) ([]string, error) {
 	res := make([]string, len(addresses))
 
 	if len(addresses) == 0 {
diff --git a/pkg/testing/gadgetrunner/gadgetrunner.go b/pkg/testing/gadgetrunner/gadgetrunner.go
index be34a3a54..154ef2e49 100644
--- a/pkg/testing/gadgetrunner/gadgetrunner.go
+++ b/pkg/testing/gadgetrunner/gadgetrunner.go
@@ -1,4 +1,4 @@
-// Copyright 2024 The Inspektor Gadget authors
+// Copyright 2024-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@ import (
 	igjson "github.com/inspektor-gadget/inspektor-gadget/pkg/datasource/formatters/json"
 	gadgetcontext "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-context"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api"
+	apihelpers "github.com/inspektor-gadget/inspektor-gadget/pkg/gadget-service/api-helpers"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/logger"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/operators"
@@ -45,6 +46,7 @@ import (
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/filter"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/formatters"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/limiter"
+	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/process"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/socketenricher"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/sort"
 	_ "github.com/inspektor-gadget/inspektor-gadget/pkg/operators/uidgidresolver"
@@ -52,10 +54,11 @@ import (
 )
 
 type GadgetRunnerOpts[T any] struct {
-	Image          string
-	Timeout        time.Duration
-	MntnsFilterMap *ebpf.Map
-	ParamValues    api.ParamValues
+	Image              string
+	Timeout            time.Duration
+	MntnsFilterMap     *ebpf.Map
+	ParamValues        api.ParamValues
+	GlobalParamsValues api.ParamValues
 
 	OnGadgetRun     func(gadgetCtx operators.GadgetContext) error
 	BeforeGadgetRun func() error
@@ -63,12 +66,13 @@ type GadgetRunnerOpts[T any] struct {
 }
 
 type GadgetRunner[T any] struct {
-	image          string
-	timeout        time.Duration
-	mntnsFilterMap *ebpf.Map
-	paramValues    api.ParamValues
-	runtimeParams  *params.Params
-	testCtx        *testing.T
+	image             string
+	timeout           time.Duration
+	mntnsFilterMap    *ebpf.Map
+	paramValues       api.ParamValues
+	globalParamValues api.ParamValues
+	runtimeParams     *params.Params
+	testCtx           *testing.T
 
 	gadgetCtx     *gadgetcontext.GadgetContext
 	DataFunc      datasource.DataFunc
@@ -93,23 +97,24 @@ func NewGadgetRunner[T any](t *testing.T, opts GadgetRunnerOpts[T]) *GadgetRunne
 
 	verifyImage := strings.ToLower(os.Getenv("IG_VERIFY_IMAGE"))
 	if verifyImage == "true" || verifyImage == "false" {
-		if opts.ParamValues == nil {
-			opts.ParamValues = map[string]string{
+		if opts.GlobalParamsValues == nil {
+			opts.GlobalParamsValues = map[string]string{
 				"operator.oci.verify-image": verifyImage,
 			}
 		} else {
-			opts.ParamValues["operator.oci.verify-image"] = verifyImage
+			opts.GlobalParamsValues["operator.oci.verify-image"] = verifyImage
 		}
 	}
 
 	gadgetImage := GetGadgetImageName(opts.Image)
 	return &GadgetRunner[T]{
-		image:          gadgetImage,
-		timeout:        opts.Timeout,
-		paramValues:    opts.ParamValues,
-		CapturedEvents: make([]T, 0),
-		mntnsFilterMap: opts.MntnsFilterMap,
-		testCtx:        t,
+		image:             gadgetImage,
+		timeout:           opts.Timeout,
+		paramValues:       opts.ParamValues,
+		globalParamValues: opts.GlobalParamsValues,
+		CapturedEvents:    make([]T, 0),
+		mntnsFilterMap:    opts.MntnsFilterMap,
+		testCtx:           t,
 
 		onGadgetRun:     opts.OnGadgetRun,
 		beforeGadgetRun: opts.BeforeGadgetRun,
@@ -167,7 +172,7 @@ func (g *GadgetRunner[T]) RunGadget() {
 		gadgetOperatorOpts = append(gadgetOperatorOpts, simple.OnStart(g.onGadgetRun))
 	}
 
-	g.DataOperator = []operators.DataOperator{ocihandler.OciHandler}
+	g.DataOperator = append(g.DataOperator, ocihandler.OciHandler)
 	for _, dataOperator := range operators.GetDataOperators() {
 		g.DataOperator = append(g.DataOperator, dataOperator)
 	}
@@ -188,6 +193,16 @@ func (g *GadgetRunner[T]) RunGadget() {
 
 	g.gadgetCtx = gadgetcontext.New(context.Background(), g.image, gadgetContextOps...)
 	runtime := local.New()
+
+	for _, op := range g.DataOperator {
+		opParams := apihelpers.ToParamDescs(op.GlobalParams()).ToParams()
+		err := opParams.CopyFromMap(g.globalParamValues, "operator."+op.Name()+".")
+		require.NoError(g.testCtx, err, "copying global params error")
+
+		err = op.Init(opParams)
+		require.NoError(g.testCtx, err, "operator initialization error")
+	}
+
 	err := runtime.Init(nil)
 	require.NoError(g.testCtx, err, "runtime initialization error")
 
diff --git a/pkg/testing/ig/ig.go b/pkg/testing/ig/ig.go
index 0c2fd60d4..fecc0d448 100644
--- a/pkg/testing/ig/ig.go
+++ b/pkg/testing/ig/ig.go
@@ -30,8 +30,9 @@ import (
 
 // runner is responsible for storing configuration of ig executable and provide methods to interact with.
 type runner struct {
-	path  string
-	image string
+	path       string
+	image      string
+	outputMode string
 
 	// command.Command contains *exec.Cmd and additional properties and methods for the same.
 	command.Command
@@ -39,7 +40,7 @@ type runner struct {
 }
 
 func (ig *runner) createCmd() {
-	ig.flags = append(ig.flags, "-o=json")
+	ig.flags = append(ig.flags, "-o="+ig.outputMode)
 	args := append([]string{"run", ig.image}, ig.flags...)
 
 	ig.Cmd = exec.Command(ig.path, args...)
@@ -75,6 +76,13 @@ func WithValidateOutput(validateOutput func(t *testing.T, output string)) Option
 	}
 }
 
+// WithOutputMode sets the output mode
+func WithOutputMode(outputMode string) Option {
+	return func(ig *runner) {
+		ig.outputMode = outputMode
+	}
+}
+
 // New creates a new IG configured with the Options passed as parameters.
 func New(image string, opts ...Option) igtesting.TestStep {
 	commandName := fmt.Sprintf("Run_%s", image)
@@ -88,8 +96,9 @@ func New(image string, opts ...Option) igtesting.TestStep {
 	}
 
 	factoryRunner := &runner{
-		path:  "ig",
-		image: image,
+		path:       "ig",
+		image:      image,
+		outputMode: "json",
 		Command: command.Command{
 			Name: commandName,
 		},
diff --git a/pkg/testing/utils/utils.go b/pkg/testing/utils/utils.go
index 91eef1643..7c23380f7 100644
--- a/pkg/testing/utils/utils.go
+++ b/pkg/testing/utils/utils.go
@@ -125,6 +125,17 @@ func NormalizeCommonData(e *eventtypes.CommonData) {
 	}
 }
 
+func NormalizeEndpoint(e *L4Endpoint) {
+	// Information about the endpoint is not enriched when running ig, since it needs
+	// to connect to the kubeapiserver to get this information.
+	if CurrentTestComponent != KubectlGadgetTestComponent {
+		e.K8s.Kind = ""
+		e.K8s.Name = ""
+		e.K8s.Namespace = ""
+		e.K8s.Labels = ""
+	}
+}
+
 func BuildProc(comm string, uid, gid uint32) Process {
 	return Process{
 		Comm:    comm,
diff --git a/pkg/types/types.go b/pkg/types/types.go
index 6d9a13e0e..c29c56322 100644
--- a/pkg/types/types.go
+++ b/pkg/types/types.go
@@ -114,6 +114,7 @@ type Container interface {
 	UsesHostNetwork() bool
 	K8sOwnerReference() *K8sOwnerReference
 	ContainerPid() uint32
+	K8sPodLabelsAsString() string
 }
 
 type BasicRuntimeMetadata struct {
@@ -134,7 +135,7 @@ type BasicRuntimeMetadata struct {
 	ContainerPID uint32 `json:"containerPid,omitempty" column:"containerPid,template:containerPid"`
 
 	// ContainerImageName is the name of the container image where the event comes from
-	// i.e. docker.io/library/busybox:latest
+	// i.e. ghcr.io/inspektor-gadget/ci/busybox:latest
 	// Sometimes the image name is not provided by the runtime (i.e. Docker), then ContainerImageName
 	// is the imageID
 	// i.e. sha256:6e38f40d628db3002f5617342c8872c935de530d867d0f709a2fbda1a302a562
diff --git a/pkg/utils/ebpf2graph/ebpf2graph.go b/pkg/utils/ebpf2graph/ebpf2graph.go
new file mode 100644
index 000000000..28555859a
--- /dev/null
+++ b/pkg/utils/ebpf2graph/ebpf2graph.go
@@ -0,0 +1,179 @@
+package ebpf2graph
+
+import (
+	"fmt"
+	"sort"
+	"strings"
+
+	"github.com/cilium/ebpf"
+	"github.com/cilium/ebpf/asm"
+)
+
+func GenerateFlowchartMermaidGraph(collectionSpec *ebpf.CollectionSpec) (string, error) {
+	var graph strings.Builder
+	graph.WriteString("flowchart LR\n")
+
+	var mapsList []*ebpf.MapSpec
+	for _, m := range collectionSpec.Maps {
+		if m.Name == ".rodata" || m.Name == ".bss" {
+			continue
+		}
+		mapsList = append(mapsList, m)
+	}
+	sort.Slice(mapsList, func(i, j int) bool {
+		return mapsList[i].Name < mapsList[j].Name
+	})
+
+	var progsList []*ebpf.ProgramSpec
+	for _, p := range collectionSpec.Programs {
+		progsList = append(progsList, p)
+	}
+	sort.Slice(progsList, func(i, j int) bool {
+		return progsList[i].Name < progsList[j].Name
+	})
+	for _, m := range mapsList {
+		graph.WriteString(fmt.Sprintf("%s[(\"%s\")]\n", m.Name, m.Name))
+	}
+
+	for _, prog := range progsList {
+		references := extractProgramReferences(prog)
+		possibleVerbs := []string{"Lookup", "Update", "Delete"}
+
+		referencesMap := make(map[string]bool)
+		for _, ref := range references {
+			referencesMap[ref] = true
+		}
+		for _, ref := range references {
+			if !referencesMap[ref] {
+				continue
+			}
+			parts := strings.SplitN(ref, "\000", 2)
+			mapName := parts[0]
+			fnName := parts[1]
+
+			// Merge arrows if needed
+			verbs := []string{}
+			for _, verb := range possibleVerbs {
+				if referencesMap[mapName+"\000"+verb] {
+					verbs = append(verbs, verb)
+				}
+			}
+			if len(verbs) > 1 {
+				for _, verb := range verbs {
+					referencesMap[mapName+"\000"+verb] = false
+				}
+				fnName = strings.Join(verbs, "+")
+			}
+
+			graph.WriteString(fmt.Sprintf("%s -- \"%s\" --> %s\n", prog.Name, fnName, mapName))
+		}
+
+		graph.WriteString(fmt.Sprintf("%s[\"%s\"]\n", prog.Name, prog.Name))
+	}
+
+	return graph.String(), nil
+}
+
+func GenerateSequenceMermaidGraph(collectionSpec *ebpf.CollectionSpec) (string, error) {
+	var graph strings.Builder
+	graph.WriteString("sequenceDiagram\n")
+
+	var progsList []*ebpf.ProgramSpec
+	graph.WriteString("box eBPF Programs\n")
+	for _, p := range collectionSpec.Programs {
+		progsList = append(progsList, p)
+	}
+	sort.Slice(progsList, func(i, j int) bool {
+		return progsList[i].Name < progsList[j].Name
+	})
+	for _, p := range progsList {
+		graph.WriteString(fmt.Sprintf("participant %s\n", p.Name))
+	}
+	graph.WriteString("end\n")
+
+	mapSeen := make(map[string]bool)
+	var orderedMapNames []string
+
+	type event struct {
+		sender   string
+		receiver string
+		label    string
+	}
+	var events []event
+
+	for _, prog := range progsList {
+		references := extractProgramReferences(prog)
+		for _, ref := range references {
+			parts := strings.SplitN(ref, "\000", 2)
+			mapName := parts[0]
+			label := parts[1]
+
+			if !mapSeen[mapName] {
+				mapSeen[mapName] = true
+				orderedMapNames = append(orderedMapNames, mapName)
+			}
+
+			events = append(events, event{
+				sender:   prog.Name,
+				receiver: mapName,
+				label:    label,
+			})
+		}
+	}
+
+	graph.WriteString("box eBPF Maps\n")
+	for _, mName := range orderedMapNames {
+		if mName == ".rodata" || mName == ".bss" {
+			continue
+		}
+		graph.WriteString(fmt.Sprintf("participant %s\n", mName))
+	}
+	graph.WriteString("end\n")
+
+	for _, e := range events {
+		graph.WriteString(fmt.Sprintf("%s->>%s: %s\n", e.sender, e.receiver, e.label))
+	}
+
+	return graph.String(), nil
+}
+
+func extractProgramReferences(prog *ebpf.ProgramSpec) []string {
+	var references []string
+	previousRef := map[asm.Register]string{}
+
+	addReference := func(ref string) {
+		for _, r := range references {
+			if r == ref {
+				return // already exists
+			}
+		}
+		references = append(references, ref)
+	}
+
+	for _, ins := range prog.Instructions {
+		if ins.IsBuiltinCall() {
+			builtinFunc := asm.BuiltinFunc(ins.Constant)
+			builtinFuncName := fmt.Sprint(builtinFunc)
+			var ref string
+
+			switch {
+			case strings.HasPrefix(builtinFuncName, "FnMap") && strings.HasSuffix(builtinFuncName, "Elem"):
+				builtinFuncName = strings.TrimPrefix(builtinFuncName, "FnMap")
+				builtinFuncName = strings.TrimSuffix(builtinFuncName, "Elem")
+				ref = previousRef[asm.R1]
+			case builtinFuncName == "FnPerfEventOutput":
+				builtinFuncName = strings.TrimPrefix(builtinFuncName, "FnPerf")
+				ref = previousRef[asm.R2]
+			}
+
+			if ref != "" {
+				addReference(ref + "\000" + builtinFuncName)
+			}
+		}
+		if ref := ins.Reference(); ref != "" {
+			previousRef[ins.Dst] = ref
+		}
+	}
+
+	return references
+}
diff --git a/pkg/utils/host/host.go b/pkg/utils/host/host.go
index 6287c666d..79a4803fb 100644
--- a/pkg/utils/host/host.go
+++ b/pkg/utils/host/host.go
@@ -120,10 +120,8 @@ func Init(config Config) error {
 
 // AddFlags adds CLI flags for various workarounds
 func AddFlags(command *cobra.Command) {
-	automountFilesystemsDefault := false
-	if HostRoot != "" && HostRoot != "/" {
-		automountFilesystemsDefault = true
-	}
+	automountFilesystemsDefault := HostRoot != "" && HostRoot != "/"
+
 	command.PersistentFlags().BoolVarP(
 		&autoMountFilesystemsFlag,
 		"auto-mount-filesystems",
diff --git a/pkg/gadgets/top/ebpf/piditer/iter.go b/pkg/utils/processmap/bpf.go
similarity index 67%
rename from pkg/gadgets/top/ebpf/piditer/iter.go
rename to pkg/utils/processmap/bpf.go
index 34acca53d..7974281ea 100644
--- a/pkg/gadgets/top/ebpf/piditer/iter.go
+++ b/pkg/utils/processmap/bpf.go
@@ -1,4 +1,4 @@
-// Copyright 2019-2022 The Inspektor Gadget authors
+// Copyright 2019-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package piditer
+package processmap
 
 import (
 	"fmt"
@@ -24,12 +24,13 @@ import (
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets"
 	"github.com/inspektor-gadget/inspektor-gadget/pkg/kallsyms"
 	bpfiterns "github.com/inspektor-gadget/inspektor-gadget/pkg/utils/bpf-iter-ns"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap/types"
 )
 
-//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target $TARGET -cc clang -cflags ${CFLAGS} -type pid_iter_entry piditer ./bpf/pid_iter.bpf.c -- -I./bpf/
+//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target $TARGET -cc clang -cflags ${CFLAGS} -type pid_iter_entry bpf ./bpf/pid_iter.bpf.c -- -I./bpf/
 
-type PidIter struct {
-	objs piditerObjects
+type pidIterEbpf struct {
+	objs bpfObjects
 	iter *link.Iter
 }
 
@@ -39,10 +40,10 @@ type PidIterEntry struct {
 	Comm   string
 }
 
-var iterEntrySize = int(unsafe.Sizeof(piditerPidIterEntry{}))
+var iterEntrySize = int(unsafe.Sizeof(bpfPidIterEntry{}))
 
-func NewTracer() (iter *PidIter, err error) {
-	p := &PidIter{}
+func NewTracer() (iter *pidIterEbpf, err error) {
+	p := &pidIterEbpf{}
 	defer func() {
 		if err != nil {
 			if p.iter != nil {
@@ -52,7 +53,7 @@ func NewTracer() (iter *PidIter, err error) {
 		}
 	}()
 
-	spec, err := loadPiditer()
+	spec, err := loadBpf()
 	if err != nil {
 		return nil, fmt.Errorf("loading ebpf program: %w", err)
 	}
@@ -77,33 +78,32 @@ func NewTracer() (iter *PidIter, err error) {
 	return p, nil
 }
 
-// DumpPids returns an array of PidIterEntry containing information
-// on which pid (and comm) has an open fd to which eBPF Program ID.
-func (p *PidIter) DumpPids() ([]*PidIterEntry, error) {
+func (p *pidIterEbpf) fetch() (map[uint32][]types.Process, error) {
 	buf, err := bpfiterns.Read(p.iter)
 	if err != nil {
 		return nil, fmt.Errorf("reading iter: %w", err)
 	}
 
-	n := len(buf)
-	if n%iterEntrySize != 0 {
-		return nil, fmt.Errorf("invalid format: %d", n)
+	bufLen := len(buf)
+	if bufLen%iterEntrySize != 0 {
+		return nil, fmt.Errorf("invalid format: %d", bufLen)
 	}
 
-	res := make([]*PidIterEntry, 0)
-	for i := 0; i < n/iterEntrySize; i++ {
-		entry := (*piditerPidIterEntry)(unsafe.Pointer(&buf[i*iterEntrySize]))
-		res = append(res, &PidIterEntry{
-			ProgID: entry.Id,
-			Pid:    entry.Pid,
-			Comm:   gadgets.FromCString(entry.Comm[:]),
+	n := bufLen / iterEntrySize
+	pidmap := make(map[uint32][]types.Process)
+
+	for i := 0; i < n; i++ {
+		entry := (*bpfPidIterEntry)(unsafe.Pointer(&buf[i*iterEntrySize]))
+		pidmap[entry.Id] = append(pidmap[entry.Id], types.Process{
+			Pid:  entry.Pid,
+			Comm: gadgets.FromCString(entry.Comm[:]),
 		})
 	}
 
-	return res, nil
+	return pidmap, nil
 }
 
-func (p *PidIter) Close() (err error) {
+func (p *pidIterEbpf) Close() (err error) {
 	// If there's an error, return the last one
 	if tmpErr := p.iter.Close(); tmpErr != nil {
 		err = tmpErr
diff --git a/pkg/gadgets/top/ebpf/piditer/bpf/pid_iter.bpf.c b/pkg/utils/processmap/bpf/pid_iter.bpf.c
similarity index 100%
rename from pkg/gadgets/top/ebpf/piditer/bpf/pid_iter.bpf.c
rename to pkg/utils/processmap/bpf/pid_iter.bpf.c
diff --git a/pkg/gadgets/top/ebpf/piditer/bpf/pid_iter.h b/pkg/utils/processmap/bpf/pid_iter.h
similarity index 100%
rename from pkg/gadgets/top/ebpf/piditer/bpf/pid_iter.h
rename to pkg/utils/processmap/bpf/pid_iter.h
diff --git a/pkg/utils/processmap/bpf_arm64_bpfel.go b/pkg/utils/processmap/bpf_arm64_bpfel.go
new file mode 100644
index 000000000..de5df4bd6
--- /dev/null
+++ b/pkg/utils/processmap/bpf_arm64_bpfel.go
@@ -0,0 +1,139 @@
+// Code generated by bpf2go; DO NOT EDIT.
+//go:build arm64
+
+package processmap
+
+import (
+	"bytes"
+	_ "embed"
+	"fmt"
+	"io"
+
+	"github.com/cilium/ebpf"
+)
+
+type bpfPidIterEntry struct {
+	Id   uint32
+	Pid  uint32
+	Comm [16]uint8
+}
+
+// loadBpf returns the embedded CollectionSpec for bpf.
+func loadBpf() (*ebpf.CollectionSpec, error) {
+	reader := bytes.NewReader(_BpfBytes)
+	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
+	if err != nil {
+		return nil, fmt.Errorf("can't load bpf: %w", err)
+	}
+
+	return spec, err
+}
+
+// loadBpfObjects loads bpf and converts it into a struct.
+//
+// The following types are suitable as obj argument:
+//
+//	*bpfObjects
+//	*bpfPrograms
+//	*bpfMaps
+//
+// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
+func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
+	spec, err := loadBpf()
+	if err != nil {
+		return err
+	}
+
+	return spec.LoadAndAssign(obj, opts)
+}
+
+// bpfSpecs contains maps and programs before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfSpecs struct {
+	bpfProgramSpecs
+	bpfMapSpecs
+	bpfVariableSpecs
+}
+
+// bpfProgramSpecs contains programs before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfProgramSpecs struct {
+	IgTopEbpfIt *ebpf.ProgramSpec `ebpf:"ig_top_ebpf_it"`
+}
+
+// bpfMapSpecs contains maps before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfMapSpecs struct {
+}
+
+// bpfVariableSpecs contains global variables before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfVariableSpecs struct {
+	BpfProgFopsAddr *ebpf.VariableSpec `ebpf:"bpf_prog_fops_addr"`
+	Unused          *ebpf.VariableSpec `ebpf:"unused"`
+}
+
+// bpfObjects contains all objects after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfObjects struct {
+	bpfPrograms
+	bpfMaps
+	bpfVariables
+}
+
+func (o *bpfObjects) Close() error {
+	return _BpfClose(
+		&o.bpfPrograms,
+		&o.bpfMaps,
+	)
+}
+
+// bpfMaps contains all maps after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfMaps struct {
+}
+
+func (m *bpfMaps) Close() error {
+	return _BpfClose()
+}
+
+// bpfVariables contains all global variables after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfVariables struct {
+	BpfProgFopsAddr *ebpf.Variable `ebpf:"bpf_prog_fops_addr"`
+	Unused          *ebpf.Variable `ebpf:"unused"`
+}
+
+// bpfPrograms contains all programs after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfPrograms struct {
+	IgTopEbpfIt *ebpf.Program `ebpf:"ig_top_ebpf_it"`
+}
+
+func (p *bpfPrograms) Close() error {
+	return _BpfClose(
+		p.IgTopEbpfIt,
+	)
+}
+
+func _BpfClose(closers ...io.Closer) error {
+	for _, closer := range closers {
+		if err := closer.Close(); err != nil {
+			return err
+		}
+	}
+	return nil
+}
+
+// Do not access this directly.
+//
+//go:embed bpf_arm64_bpfel.o
+var _BpfBytes []byte
diff --git a/pkg/gadgets/top/ebpf/piditer/piditer_arm64_bpfel.o b/pkg/utils/processmap/bpf_arm64_bpfel.o
similarity index 98%
rename from pkg/gadgets/top/ebpf/piditer/piditer_arm64_bpfel.o
rename to pkg/utils/processmap/bpf_arm64_bpfel.o
index 76fd2d1d9..420931e93 100644
Binary files a/pkg/gadgets/top/ebpf/piditer/piditer_arm64_bpfel.o and b/pkg/utils/processmap/bpf_arm64_bpfel.o differ
diff --git a/pkg/utils/processmap/bpf_x86_bpfel.go b/pkg/utils/processmap/bpf_x86_bpfel.go
new file mode 100644
index 000000000..341b4ea6d
--- /dev/null
+++ b/pkg/utils/processmap/bpf_x86_bpfel.go
@@ -0,0 +1,139 @@
+// Code generated by bpf2go; DO NOT EDIT.
+//go:build 386 || amd64
+
+package processmap
+
+import (
+	"bytes"
+	_ "embed"
+	"fmt"
+	"io"
+
+	"github.com/cilium/ebpf"
+)
+
+type bpfPidIterEntry struct {
+	Id   uint32
+	Pid  uint32
+	Comm [16]uint8
+}
+
+// loadBpf returns the embedded CollectionSpec for bpf.
+func loadBpf() (*ebpf.CollectionSpec, error) {
+	reader := bytes.NewReader(_BpfBytes)
+	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
+	if err != nil {
+		return nil, fmt.Errorf("can't load bpf: %w", err)
+	}
+
+	return spec, err
+}
+
+// loadBpfObjects loads bpf and converts it into a struct.
+//
+// The following types are suitable as obj argument:
+//
+//	*bpfObjects
+//	*bpfPrograms
+//	*bpfMaps
+//
+// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
+func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
+	spec, err := loadBpf()
+	if err != nil {
+		return err
+	}
+
+	return spec.LoadAndAssign(obj, opts)
+}
+
+// bpfSpecs contains maps and programs before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfSpecs struct {
+	bpfProgramSpecs
+	bpfMapSpecs
+	bpfVariableSpecs
+}
+
+// bpfProgramSpecs contains programs before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfProgramSpecs struct {
+	IgTopEbpfIt *ebpf.ProgramSpec `ebpf:"ig_top_ebpf_it"`
+}
+
+// bpfMapSpecs contains maps before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfMapSpecs struct {
+}
+
+// bpfVariableSpecs contains global variables before they are loaded into the kernel.
+//
+// It can be passed ebpf.CollectionSpec.Assign.
+type bpfVariableSpecs struct {
+	BpfProgFopsAddr *ebpf.VariableSpec `ebpf:"bpf_prog_fops_addr"`
+	Unused          *ebpf.VariableSpec `ebpf:"unused"`
+}
+
+// bpfObjects contains all objects after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfObjects struct {
+	bpfPrograms
+	bpfMaps
+	bpfVariables
+}
+
+func (o *bpfObjects) Close() error {
+	return _BpfClose(
+		&o.bpfPrograms,
+		&o.bpfMaps,
+	)
+}
+
+// bpfMaps contains all maps after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfMaps struct {
+}
+
+func (m *bpfMaps) Close() error {
+	return _BpfClose()
+}
+
+// bpfVariables contains all global variables after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfVariables struct {
+	BpfProgFopsAddr *ebpf.Variable `ebpf:"bpf_prog_fops_addr"`
+	Unused          *ebpf.Variable `ebpf:"unused"`
+}
+
+// bpfPrograms contains all programs after they have been loaded into the kernel.
+//
+// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
+type bpfPrograms struct {
+	IgTopEbpfIt *ebpf.Program `ebpf:"ig_top_ebpf_it"`
+}
+
+func (p *bpfPrograms) Close() error {
+	return _BpfClose(
+		p.IgTopEbpfIt,
+	)
+}
+
+func _BpfClose(closers ...io.Closer) error {
+	for _, closer := range closers {
+		if err := closer.Close(); err != nil {
+			return err
+		}
+	}
+	return nil
+}
+
+// Do not access this directly.
+//
+//go:embed bpf_x86_bpfel.o
+var _BpfBytes []byte
diff --git a/pkg/gadgets/top/ebpf/piditer/piditer_x86_bpfel.o b/pkg/utils/processmap/bpf_x86_bpfel.o
similarity index 98%
rename from pkg/gadgets/top/ebpf/piditer/piditer_x86_bpfel.o
rename to pkg/utils/processmap/bpf_x86_bpfel.o
index d7212c488..56d4d055a 100644
Binary files a/pkg/gadgets/top/ebpf/piditer/piditer_x86_bpfel.o and b/pkg/utils/processmap/bpf_x86_bpfel.o differ
diff --git a/pkg/utils/processmap/processmap.go b/pkg/utils/processmap/processmap.go
new file mode 100644
index 000000000..a706b5958
--- /dev/null
+++ b/pkg/utils/processmap/processmap.go
@@ -0,0 +1,56 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package processmap
+
+import "github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap/types"
+
+type ProcessMap struct {
+	bpfIter             *pidIterEbpf
+	useFallbackIterator bool
+}
+
+func NewProcessMap() (*ProcessMap, error) {
+	// To resolve pids, we will first try to iterate using a bpf
+	// program. If that doesn't work, we will fall back to scanning
+	// all used fds in all processes /proc/$pid/fdinfo/$fd.
+	bpfIter, err := NewTracer()
+	if err != nil {
+		return &ProcessMap{
+			useFallbackIterator: true,
+		}, nil
+	}
+
+	return &ProcessMap{
+		bpfIter:             bpfIter,
+		useFallbackIterator: false,
+	}, nil
+}
+
+// Fetch returns a map containing processes using eBPF programs.
+// The map key is the program ID, and the value is a slice of Process structs
+// containing the PID and command name of the processes using that program.
+func (p *ProcessMap) Fetch() (map[uint32][]types.Process, error) {
+	if p.useFallbackIterator {
+		return fetchPidMapFromProcFs()
+	}
+
+	return p.bpfIter.fetch()
+}
+
+func (p *ProcessMap) Close() {
+	if p.bpfIter != nil {
+		p.bpfIter.Close()
+	}
+}
diff --git a/pkg/utils/processmap/procfs.go b/pkg/utils/processmap/procfs.go
new file mode 100644
index 000000000..e7c044923
--- /dev/null
+++ b/pkg/utils/processmap/procfs.go
@@ -0,0 +1,109 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package processmap
+
+import (
+	"bufio"
+	"fmt"
+	"math"
+	"os"
+	"path/filepath"
+	"slices"
+	"strconv"
+	"strings"
+
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/host"
+	"github.com/inspektor-gadget/inspektor-gadget/pkg/utils/processmap/types"
+)
+
+// getProgIDFromFile reads a file and extracts the prog_id from it.
+// The file has a format like:
+// pos:    0
+// flags:  02000000
+// mnt_id: 16
+// ino:    61
+// link_type:      perf
+// link_id:        1016
+// prog_tag:       f1795a781ee952cc
+// prog_id:        188
+func getProgIDFromFile(fn string) (uint32, error) {
+	f, err := os.Open(fn)
+	if err != nil {
+		return 0, err
+	}
+	defer f.Close()
+
+	sc := bufio.NewScanner(f)
+	for sc.Scan() {
+		line := sc.Text()
+		after, ok := strings.CutPrefix(line, "prog_id:")
+		if !ok {
+			continue
+		}
+		progID, err := strconv.ParseUint(strings.TrimSpace(after), 10, 32)
+		if err != nil {
+			return 0, err
+		}
+		if progID > math.MaxInt32 {
+			return 0, fmt.Errorf("progID (%d) exceeds math.MaxInt32 (%d)", progID, math.MaxInt32)
+		}
+		return uint32(progID), nil
+	}
+	return 0, os.ErrNotExist
+}
+
+func fetchPidMapFromProcFs() (map[uint32][]types.Process, error) {
+	processes, err := os.ReadDir(host.HostProcFs)
+	if err != nil {
+		return nil, err
+	}
+	pidmap := make(map[uint32][]types.Process)
+	for _, p := range processes {
+		if !p.IsDir() {
+			continue
+		}
+		_, err := strconv.Atoi(p.Name())
+		if err != nil {
+			continue
+		}
+		fdescs, err := os.ReadDir(filepath.Join(host.HostProcFs, p.Name(), "fdinfo"))
+		if err != nil {
+			continue
+		}
+		for _, fd := range fdescs {
+			progID, err := getProgIDFromFile(filepath.Join(host.HostProcFs, p.Name(), "fdinfo", fd.Name()))
+			if err != nil {
+				continue
+			}
+
+			pid, err := strconv.ParseUint(p.Name(), 10, 32)
+			if err != nil {
+				return nil, err
+			}
+			if pid > math.MaxInt32 {
+				return nil, fmt.Errorf("PID (%d) exceeds math.MaxInt32 (%d)", pid, math.MaxInt32)
+			}
+			process := types.Process{
+				Pid:  uint32(pid),
+				Comm: strings.TrimSpace(string(host.GetProcComm(int(pid)))),
+			}
+			if slices.Contains(pidmap[progID], process) {
+				continue
+			}
+			pidmap[progID] = append(pidmap[progID], process)
+		}
+	}
+	return pidmap, nil
+}
diff --git a/pkg/utils/processmap/types/types.go b/pkg/utils/processmap/types/types.go
new file mode 100644
index 000000000..e4c0bcd3d
--- /dev/null
+++ b/pkg/utils/processmap/types/types.go
@@ -0,0 +1,20 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package types
+
+type Process struct {
+	Pid  uint32 `json:"pid,omitempty"`
+	Comm string `json:"comm,omitempty"`
+}
diff --git a/pkg/utils/syscalls/syscalls_amd64.go b/pkg/utils/syscalls/syscalls_amd64.go
index 6be3098e1..ce8caa57d 100644
--- a/pkg/utils/syscalls/syscalls_amd64.go
+++ b/pkg/utils/syscalls/syscalls_amd64.go
@@ -1,4 +1,4 @@
-// Copyright 2023 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -14,7 +14,14 @@
 
 package syscalls
 
-// This is updated to kernel 6.6-rc2
+// This file is automatically generated from:
+//     https://raw.githubusercontent.com/seccomp/libseccomp/refs/heads/main/src/syscalls.csv
+//
+// To update it, run:
+//     make -C tools/syscalls-update
+//
+// Linux version: v6.13.0 2025-01-23
+
 var syscallsNameToNumber = map[string]int{
 	"_sysctl":                 156,
 	"accept":                  43,
@@ -23,6 +30,7 @@ var syscallsNameToNumber = map[string]int{
 	"acct":                    163,
 	"add_key":                 248,
 	"adjtimex":                159,
+	"afs_syscall":             183,
 	"alarm":                   37,
 	"arch_prctl":              158,
 	"bind":                    49,
@@ -75,6 +83,7 @@ var syscallsNameToNumber = map[string]int{
 	"fchdir":                  81,
 	"fchmod":                  91,
 	"fchmodat":                268,
+	"fchmodat2":               452,
 	"fchown":                  93,
 	"fchownat":                260,
 	"fcntl":                   72,
@@ -95,7 +104,10 @@ var syscallsNameToNumber = map[string]int{
 	"fsync":                   74,
 	"ftruncate":               77,
 	"futex":                   202,
+	"futex_requeue":           456,
+	"futex_wait":              455,
 	"futex_waitv":             449,
+	"futex_wake":              454,
 	"futimesat":               261,
 	"get_kernel_syms":         177,
 	"get_mempolicy":           239,
@@ -129,6 +141,7 @@ var syscallsNameToNumber = map[string]int{
 	"gettimeofday":            96,
 	"getuid":                  102,
 	"getxattr":                191,
+	"getxattrat":              464,
 	"init_module":             175,
 	"inotify_add_watch":       254,
 	"inotify_init":            253,
@@ -161,14 +174,20 @@ var syscallsNameToNumber = map[string]int{
 	"link":                    86,
 	"linkat":                  265,
 	"listen":                  50,
+	"listmount":               458,
 	"listxattr":               194,
+	"listxattrat":             465,
 	"llistxattr":              195,
 	"lookup_dcookie":          212,
 	"lremovexattr":            198,
 	"lseek":                   8,
 	"lsetxattr":               189,
+	"lsm_get_self_attr":       459,
+	"lsm_list_modules":        461,
+	"lsm_set_self_attr":       460,
 	"lstat":                   6,
 	"madvise":                 28,
+	"map_shadow_stack":        453,
 	"mbind":                   237,
 	"membarrier":              324,
 	"memfd_create":            319,
@@ -196,6 +215,7 @@ var syscallsNameToNumber = map[string]int{
 	"mq_timedsend":            242,
 	"mq_unlink":               241,
 	"mremap":                  25,
+	"mseal":                   462,
 	"msgctl":                  71,
 	"msgget":                  68,
 	"msgrcv":                  70,
@@ -238,6 +258,7 @@ var syscallsNameToNumber = map[string]int{
 	"process_vm_writev":       311,
 	"pselect6":                270,
 	"ptrace":                  101,
+	"putpmsg":                 182,
 	"pwrite64":                18,
 	"pwritev":                 296,
 	"pwritev2":                328,
@@ -255,6 +276,7 @@ var syscallsNameToNumber = map[string]int{
 	"recvmsg":                 47,
 	"remap_file_pages":        216,
 	"removexattr":             197,
+	"removexattrat":           466,
 	"rename":                  82,
 	"renameat":                264,
 	"renameat2":               316,
@@ -283,6 +305,7 @@ var syscallsNameToNumber = map[string]int{
 	"sched_setscheduler":      144,
 	"sched_yield":             24,
 	"seccomp":                 317,
+	"security":                185,
 	"select":                  23,
 	"semctl":                  66,
 	"semget":                  64,
@@ -317,6 +340,7 @@ var syscallsNameToNumber = map[string]int{
 	"settimeofday":            164,
 	"setuid":                  105,
 	"setxattr":                188,
+	"setxattrat":              463,
 	"shmat":                   30,
 	"shmctl":                  31,
 	"shmdt":                   67,
@@ -330,6 +354,7 @@ var syscallsNameToNumber = map[string]int{
 	"splice":                  275,
 	"stat":                    4,
 	"statfs":                  137,
+	"statmount":               457,
 	"statx":                   332,
 	"swapoff":                 168,
 	"swapon":                  167,
@@ -355,12 +380,14 @@ var syscallsNameToNumber = map[string]int{
 	"times":                   100,
 	"tkill":                   200,
 	"truncate":                76,
+	"tuxcall":                 184,
 	"umask":                   95,
 	"umount2":                 166,
 	"uname":                   63,
 	"unlink":                  87,
 	"unlinkat":                263,
 	"unshare":                 272,
+	"uretprobe":               335,
 	"uselib":                  134,
 	"userfaultfd":             323,
 	"ustat":                   136,
@@ -370,6 +397,7 @@ var syscallsNameToNumber = map[string]int{
 	"vfork":                   58,
 	"vhangup":                 153,
 	"vmsplice":                278,
+	"vserver":                 236,
 	"wait4":                   61,
 	"waitid":                  247,
 	"write":                   1,
@@ -384,6 +412,7 @@ var syscallsNumberToName = map[int]string{
 	163: "acct",
 	248: "add_key",
 	159: "adjtimex",
+	183: "afs_syscall",
 	37:  "alarm",
 	158: "arch_prctl",
 	49:  "bind",
@@ -436,6 +465,7 @@ var syscallsNumberToName = map[int]string{
 	81:  "fchdir",
 	91:  "fchmod",
 	268: "fchmodat",
+	452: "fchmodat2",
 	93:  "fchown",
 	260: "fchownat",
 	72:  "fcntl",
@@ -456,7 +486,10 @@ var syscallsNumberToName = map[int]string{
 	74:  "fsync",
 	77:  "ftruncate",
 	202: "futex",
+	456: "futex_requeue",
+	455: "futex_wait",
 	449: "futex_waitv",
+	454: "futex_wake",
 	261: "futimesat",
 	177: "get_kernel_syms",
 	239: "get_mempolicy",
@@ -490,6 +523,7 @@ var syscallsNumberToName = map[int]string{
 	96:  "gettimeofday",
 	102: "getuid",
 	191: "getxattr",
+	464: "getxattrat",
 	175: "init_module",
 	254: "inotify_add_watch",
 	253: "inotify_init",
@@ -522,14 +556,20 @@ var syscallsNumberToName = map[int]string{
 	86:  "link",
 	265: "linkat",
 	50:  "listen",
+	458: "listmount",
 	194: "listxattr",
+	465: "listxattrat",
 	195: "llistxattr",
 	212: "lookup_dcookie",
 	198: "lremovexattr",
 	8:   "lseek",
 	189: "lsetxattr",
+	459: "lsm_get_self_attr",
+	461: "lsm_list_modules",
+	460: "lsm_set_self_attr",
 	6:   "lstat",
 	28:  "madvise",
+	453: "map_shadow_stack",
 	237: "mbind",
 	324: "membarrier",
 	319: "memfd_create",
@@ -557,6 +597,7 @@ var syscallsNumberToName = map[int]string{
 	242: "mq_timedsend",
 	241: "mq_unlink",
 	25:  "mremap",
+	462: "mseal",
 	71:  "msgctl",
 	68:  "msgget",
 	70:  "msgrcv",
@@ -599,6 +640,7 @@ var syscallsNumberToName = map[int]string{
 	311: "process_vm_writev",
 	270: "pselect6",
 	101: "ptrace",
+	182: "putpmsg",
 	18:  "pwrite64",
 	296: "pwritev",
 	328: "pwritev2",
@@ -616,6 +658,7 @@ var syscallsNumberToName = map[int]string{
 	47:  "recvmsg",
 	216: "remap_file_pages",
 	197: "removexattr",
+	466: "removexattrat",
 	82:  "rename",
 	264: "renameat",
 	316: "renameat2",
@@ -644,6 +687,7 @@ var syscallsNumberToName = map[int]string{
 	144: "sched_setscheduler",
 	24:  "sched_yield",
 	317: "seccomp",
+	185: "security",
 	23:  "select",
 	66:  "semctl",
 	64:  "semget",
@@ -678,6 +722,7 @@ var syscallsNumberToName = map[int]string{
 	164: "settimeofday",
 	105: "setuid",
 	188: "setxattr",
+	463: "setxattrat",
 	30:  "shmat",
 	31:  "shmctl",
 	67:  "shmdt",
@@ -691,6 +736,7 @@ var syscallsNumberToName = map[int]string{
 	275: "splice",
 	4:   "stat",
 	137: "statfs",
+	457: "statmount",
 	332: "statx",
 	168: "swapoff",
 	167: "swapon",
@@ -716,12 +762,14 @@ var syscallsNumberToName = map[int]string{
 	100: "times",
 	200: "tkill",
 	76:  "truncate",
+	184: "tuxcall",
 	95:  "umask",
 	166: "umount2",
 	63:  "uname",
 	87:  "unlink",
 	263: "unlinkat",
 	272: "unshare",
+	335: "uretprobe",
 	134: "uselib",
 	323: "userfaultfd",
 	136: "ustat",
@@ -731,6 +779,7 @@ var syscallsNumberToName = map[int]string{
 	58:  "vfork",
 	153: "vhangup",
 	278: "vmsplice",
+	236: "vserver",
 	61:  "wait4",
 	247: "waitid",
 	1:   "write",
diff --git a/pkg/utils/syscalls/syscalls_arm64.go b/pkg/utils/syscalls/syscalls_arm64.go
index d5609be11..e5394899e 100644
--- a/pkg/utils/syscalls/syscalls_arm64.go
+++ b/pkg/utils/syscalls/syscalls_arm64.go
@@ -1,4 +1,4 @@
-// Copyright 2023 The Inspektor Gadget authors
+// Copyright 2023-2025 The Inspektor Gadget authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -14,7 +14,14 @@
 
 package syscalls
 
-// This is updated to kernel 6.6-rc2
+// This file is automatically generated from:
+//     https://raw.githubusercontent.com/seccomp/libseccomp/refs/heads/main/src/syscalls.csv
+//
+// To update it, run:
+//     make -C tools/syscalls-update
+//
+// Linux version: v6.13.0 2025-01-23
+
 var syscallsNameToNumber = map[string]int{
 	"accept":                  202,
 	"accept4":                 242,
@@ -61,6 +68,7 @@ var syscallsNameToNumber = map[string]int{
 	"fchdir":                  50,
 	"fchmod":                  52,
 	"fchmodat":                53,
+	"fchmodat2":               452,
 	"fchown":                  55,
 	"fchownat":                54,
 	"fcntl":                   25,
@@ -80,7 +88,10 @@ var syscallsNameToNumber = map[string]int{
 	"fsync":                   82,
 	"ftruncate":               46,
 	"futex":                   98,
+	"futex_requeue":           456,
+	"futex_wait":              455,
 	"futex_waitv":             449,
+	"futex_wake":              454,
 	"get_mempolicy":           236,
 	"get_robust_list":         100,
 	"getcpu":                  168,
@@ -108,6 +119,7 @@ var syscallsNameToNumber = map[string]int{
 	"gettimeofday":            169,
 	"getuid":                  174,
 	"getxattr":                8,
+	"getxattrat":              464,
 	"init_module":             105,
 	"inotify_add_watch":       27,
 	"inotify_init1":           26,
@@ -135,13 +147,19 @@ var syscallsNameToNumber = map[string]int{
 	"lgetxattr":               9,
 	"linkat":                  37,
 	"listen":                  201,
+	"listmount":               458,
 	"listxattr":               11,
+	"listxattrat":             465,
 	"llistxattr":              12,
 	"lookup_dcookie":          18,
 	"lremovexattr":            15,
 	"lseek":                   62,
 	"lsetxattr":               6,
+	"lsm_get_self_attr":       459,
+	"lsm_list_modules":        461,
+	"lsm_set_self_attr":       460,
 	"madvise":                 233,
+	"map_shadow_stack":        453,
 	"mbind":                   235,
 	"membarrier":              283,
 	"memfd_create":            279,
@@ -166,6 +184,7 @@ var syscallsNameToNumber = map[string]int{
 	"mq_timedsend":            182,
 	"mq_unlink":               181,
 	"mremap":                  216,
+	"mseal":                   462,
 	"msgctl":                  187,
 	"msgget":                  186,
 	"msgrcv":                  188,
@@ -219,6 +238,7 @@ var syscallsNameToNumber = map[string]int{
 	"recvmsg":                 212,
 	"remap_file_pages":        234,
 	"removexattr":             14,
+	"removexattrat":           466,
 	"renameat":                38,
 	"renameat2":               276,
 	"request_key":             218,
@@ -277,6 +297,7 @@ var syscallsNameToNumber = map[string]int{
 	"settimeofday":            170,
 	"setuid":                  146,
 	"setxattr":                5,
+	"setxattrat":              463,
 	"shmat":                   196,
 	"shmctl":                  195,
 	"shmdt":                   197,
@@ -288,6 +309,7 @@ var syscallsNameToNumber = map[string]int{
 	"socketpair":              199,
 	"splice":                  76,
 	"statfs":                  43,
+	"statmount":               457,
 	"statx":                   291,
 	"swapoff":                 225,
 	"swapon":                  224,
@@ -371,6 +393,7 @@ var syscallsNumberToName = map[int]string{
 	50:  "fchdir",
 	52:  "fchmod",
 	53:  "fchmodat",
+	452: "fchmodat2",
 	55:  "fchown",
 	54:  "fchownat",
 	25:  "fcntl",
@@ -390,7 +413,10 @@ var syscallsNumberToName = map[int]string{
 	82:  "fsync",
 	46:  "ftruncate",
 	98:  "futex",
+	456: "futex_requeue",
+	455: "futex_wait",
 	449: "futex_waitv",
+	454: "futex_wake",
 	236: "get_mempolicy",
 	100: "get_robust_list",
 	168: "getcpu",
@@ -418,6 +444,7 @@ var syscallsNumberToName = map[int]string{
 	169: "gettimeofday",
 	174: "getuid",
 	8:   "getxattr",
+	464: "getxattrat",
 	105: "init_module",
 	27:  "inotify_add_watch",
 	26:  "inotify_init1",
@@ -445,13 +472,19 @@ var syscallsNumberToName = map[int]string{
 	9:   "lgetxattr",
 	37:  "linkat",
 	201: "listen",
+	458: "listmount",
 	11:  "listxattr",
+	465: "listxattrat",
 	12:  "llistxattr",
 	18:  "lookup_dcookie",
 	15:  "lremovexattr",
 	62:  "lseek",
 	6:   "lsetxattr",
+	459: "lsm_get_self_attr",
+	461: "lsm_list_modules",
+	460: "lsm_set_self_attr",
 	233: "madvise",
+	453: "map_shadow_stack",
 	235: "mbind",
 	283: "membarrier",
 	279: "memfd_create",
@@ -476,6 +509,7 @@ var syscallsNumberToName = map[int]string{
 	182: "mq_timedsend",
 	181: "mq_unlink",
 	216: "mremap",
+	462: "mseal",
 	187: "msgctl",
 	186: "msgget",
 	188: "msgrcv",
@@ -529,6 +563,7 @@ var syscallsNumberToName = map[int]string{
 	212: "recvmsg",
 	234: "remap_file_pages",
 	14:  "removexattr",
+	466: "removexattrat",
 	38:  "renameat",
 	276: "renameat2",
 	218: "request_key",
@@ -587,6 +622,7 @@ var syscallsNumberToName = map[int]string{
 	170: "settimeofday",
 	146: "setuid",
 	5:   "setxattr",
+	463: "setxattrat",
 	196: "shmat",
 	195: "shmctl",
 	197: "shmdt",
@@ -598,6 +634,7 @@ var syscallsNumberToName = map[int]string{
 	199: "socketpair",
 	76:  "splice",
 	43:  "statfs",
+	457: "statmount",
 	291: "statx",
 	225: "swapoff",
 	224: "swapon",
diff --git a/testdata/Makefile b/testdata/Makefile
index 76ced761b..994cc5677 100644
--- a/testdata/Makefile
+++ b/testdata/Makefile
@@ -1,6 +1,6 @@
 CLANG ?= clang
 LLVM_STRIP ?= llvm-strip
-EBPF_BUILDER ?= ghcr.io/inspektor-gadget/ebpf-builder
+GADGET_BUILDER ?= ghcr.io/inspektor-gadget/gadget-builder
 
 .PHOHY: all
 all: testdata_docker
@@ -40,7 +40,7 @@ testdata_host: $(TESTDATA)
 .PHONY: testdata_docker
 testdata_docker:
 	docker run --rm --name testdata-builder --user $(shell id -u):$(shell id -g) \
-		-v $(shell pwd):/work $(EBPF_BUILDER) \
+		-v $(shell pwd):/work $(GADGET_BUILDER) \
 		bash -c "cd /work && make testdata_host"
 
 .PHONY: clean
diff --git a/tools/dnstester/Dockerfile b/tools/dnstester/Dockerfile
index 05458ce35..b850a9263 100644
--- a/tools/dnstester/Dockerfile
+++ b/tools/dnstester/Dockerfile
@@ -1,4 +1,4 @@
-FROM --platform=${BUILDPLATFORM} golang:1.23-alpine@sha256:13aaa4b92fd4dc81683816b4b62041442e9f685deeb848897ce78c5e2fb03af7 AS builder
+FROM --platform=${BUILDPLATFORM} golang:1.24.2-alpine@sha256:7772cb5322baa875edd74705556d08f0eeca7b9c4b5367754ce3f2f00041ccee AS builder
 
 ARG TARGETARCH
 
diff --git a/tools/dnstester/go.mod b/tools/dnstester/go.mod
index 8fa3dd60d..bbf576c7e 100644
--- a/tools/dnstester/go.mod
+++ b/tools/dnstester/go.mod
@@ -1,13 +1,13 @@
 module github.com/inspektor-gadget/inspektor-gadget/tools/dnstester
 
-go 1.18
+go 1.24.0
 
-require github.com/miekg/dns v1.1.63
+require github.com/miekg/dns v1.1.66
 
 require (
-	golang.org/x/mod v0.18.0 // indirect
-	golang.org/x/net v0.35.0 // indirect
-	golang.org/x/sync v0.11.0 // indirect
-	golang.org/x/sys v0.30.0 // indirect
-	golang.org/x/tools v0.22.0 // indirect
+	golang.org/x/mod v0.24.0 // indirect
+	golang.org/x/net v0.40.0 // indirect
+	golang.org/x/sync v0.14.0 // indirect
+	golang.org/x/sys v0.33.0 // indirect
+	golang.org/x/tools v0.33.0 // indirect
 )
diff --git a/tools/dnstester/go.sum b/tools/dnstester/go.sum
index e03196bd7..de34b224e 100644
--- a/tools/dnstester/go.sum
+++ b/tools/dnstester/go.sum
@@ -1,12 +1,14 @@
-github.com/miekg/dns v1.1.63 h1:8M5aAw6OMZfFXTT7K5V0Eu5YiiL8l7nUAkyN6C9YwaY=
-github.com/miekg/dns v1.1.63/go.mod h1:6NGHfjhpmr5lt3XPLuyfDJi5AXbNIPM9PY6H6sF1Nfs=
-golang.org/x/mod v0.18.0 h1:5+9lSbEzPSdWkH32vYPBwEpX8KwDbM52Ud9xBUvNlb0=
-golang.org/x/mod v0.18.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
-golang.org/x/net v0.35.0 h1:T5GQRQb2y08kTAByq9L4/bz8cipCdA8FbRTXewonqY8=
-golang.org/x/net v0.35.0/go.mod h1:EglIi67kWsHKlRzzVMUD93VMSWGFOMSZgxFjparz1Qk=
-golang.org/x/sync v0.11.0 h1:GGz8+XQP4FvTTrjZPzNKTMFtSXH80RAzG+5ghFPgK9w=
-golang.org/x/sync v0.11.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
-golang.org/x/sys v0.30.0 h1:QjkSwP/36a20jFYWkSue1YwXzLmsV5Gfq7Eiy72C1uc=
-golang.org/x/sys v0.30.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/tools v0.22.0 h1:gqSGLZqv+AI9lIQzniJ0nZDRG5GBPsSi+DRNHWNz6yA=
-golang.org/x/tools v0.22.0/go.mod h1:aCwcsjqvq7Yqt6TNyX7QMU2enbQ/Gt0bo6krSeEri+c=
+github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
+github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/miekg/dns v1.1.66 h1:FeZXOS3VCVsKnEAd+wBkjMC3D2K+ww66Cq3VnCINuJE=
+github.com/miekg/dns v1.1.66/go.mod h1:jGFzBsSNbJw6z1HYut1RKBKHA9PBdxeHrZG8J+gC2WE=
+golang.org/x/mod v0.24.0 h1:ZfthKaKaT4NrhGVZHO1/WDTwGES4De8KtWO0SIbNJMU=
+golang.org/x/mod v0.24.0/go.mod h1:IXM97Txy2VM4PJ3gI61r1YEk/gAj6zAHN3AdZt6S9Ww=
+golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
+golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
+golang.org/x/sync v0.14.0 h1:woo0S4Yywslg6hp4eUFjTVOyKt0RookbpAHG4c1HmhQ=
+golang.org/x/sync v0.14.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
+golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
+golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
+golang.org/x/tools v0.33.0 h1:4qz2S3zmRxbGIhDIAgjxvFutSvH5EfnsYrRBj0UI0bc=
+golang.org/x/tools v0.33.0/go.mod h1:CIJMaWEY88juyUfo7UbgPqbC8rU2OqfAV1h2Qp0oMYI=
diff --git a/tools/eks-cleanup/go.mod b/tools/eks-cleanup/go.mod
index dcceed85b..00fcfa767 100644
--- a/tools/eks-cleanup/go.mod
+++ b/tools/eks-cleanup/go.mod
@@ -2,6 +2,6 @@ module eks-cleanup
 
 go 1.21.4
 
-require github.com/aws/aws-sdk-go v1.55.6
+require github.com/aws/aws-sdk-go v1.55.7
 
 require github.com/jmespath/go-jmespath v0.4.0 // indirect
diff --git a/tools/eks-cleanup/go.sum b/tools/eks-cleanup/go.sum
index 61d0b9a07..ef80a701e 100644
--- a/tools/eks-cleanup/go.sum
+++ b/tools/eks-cleanup/go.sum
@@ -1,5 +1,5 @@
-github.com/aws/aws-sdk-go v1.55.6 h1:cSg4pvZ3m8dgYcgqB97MrcdjUmZ1BeMYKUxMMB89IPk=
-github.com/aws/aws-sdk-go v1.55.6/go.mod h1:eRwEWoyTWFMVYVQzKMNHWP5/RV4xIUGMQfXQHfHkpNU=
+github.com/aws/aws-sdk-go v1.55.7 h1:UJrkFq7es5CShfBwlWAC8DA077vp8PyVbQd3lqLiztE=
+github.com/aws/aws-sdk-go v1.55.7/go.mod h1:eRwEWoyTWFMVYVQzKMNHWP5/RV4xIUGMQfXQHfHkpNU=
 github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=
diff --git a/tools/image-tag b/tools/image-tag
index 4dc84ec10..e1418ded3 100755
--- a/tools/image-tag
+++ b/tools/image-tag
@@ -14,9 +14,6 @@ fi
 
 BRANCH_PREFIX=$(git rev-parse --abbrev-ref HEAD)
 if [ "$1" = "branch" ] ; then
-  if [ "$BRANCH_PREFIX" = "main" ] ; then
-    BRANCH_PREFIX="latest"
-  fi
   echo "${BRANCH_PREFIX//\//-}"
 else
   echo "${BRANCH_PREFIX//\//-}-$(git rev-parse --short HEAD)"
diff --git a/tools/store-test-reports.sh b/tools/store-test-reports.sh
index aa3f6ef76..ce3494b99 100755
--- a/tools/store-test-reports.sh
+++ b/tools/store-test-reports.sh
@@ -35,12 +35,17 @@ function store-reports {
     mkdir -p data
     echo '{}' > data/workflows.json
   fi
-  for i in ../test-report_*_*.json; do
+  for i in ../test-reports-*-*/test-report_*_*.json; do
       job_key=$(basename $i .json | sed 's/test-report_//')
       jq --slurpfile obj $i \
       --arg job_key ${job_key} \
       '.[$job_key] = (.[$job_key][-99:] + $obj)' \
       data/workflows.json > workflows.json.tmp
+      if [ ! -s workflows.json.tmp ]; then
+        echo "Skipping empty file: $i" >&2
+        rm workflows.json.tmp
+        continue
+      fi
       mv workflows.json.tmp data/workflows.json
   done
 
diff --git a/tools/syscalls-update/Makefile b/tools/syscalls-update/Makefile
new file mode 100644
index 000000000..d476aff49
--- /dev/null
+++ b/tools/syscalls-update/Makefile
@@ -0,0 +1,2 @@
+all:
+	go run main.go
diff --git a/tools/syscalls-update/go.mod b/tools/syscalls-update/go.mod
new file mode 100644
index 000000000..9474b3491
--- /dev/null
+++ b/tools/syscalls-update/go.mod
@@ -0,0 +1,11 @@
+module main
+
+go 1.24.0
+
+require mvdan.cc/gofumpt v0.8.0
+
+require (
+	github.com/google/go-cmp v0.6.0 // indirect
+	golang.org/x/mod v0.24.0 // indirect
+	golang.org/x/tools v0.33.0 // indirect
+)
diff --git a/tools/syscalls-update/go.sum b/tools/syscalls-update/go.sum
new file mode 100644
index 000000000..1d286e394
--- /dev/null
+++ b/tools/syscalls-update/go.sum
@@ -0,0 +1,16 @@
+github.com/go-quicktest/qt v1.101.0 h1:O1K29Txy5P2OK0dGo59b7b0LR6wKfIhttaAhHUyn7eI=
+github.com/go-quicktest/qt v1.101.0/go.mod h1:14Bz/f7NwaXPtdYEgzsx46kqSxVwTbzVZsDC26tQJow=
+github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
+github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
+github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
+github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
+github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/rogpeppe/go-internal v1.14.1 h1:UQB4HGPB6osV0SQTLymcB4TgvyWu6ZyliaW0tI/otEQ=
+github.com/rogpeppe/go-internal v1.14.1/go.mod h1:MaRKkUm5W0goXpeCfT7UZI6fk/L7L7so1lCWt35ZSgc=
+golang.org/x/mod v0.24.0 h1:ZfthKaKaT4NrhGVZHO1/WDTwGES4De8KtWO0SIbNJMU=
+golang.org/x/mod v0.24.0/go.mod h1:IXM97Txy2VM4PJ3gI61r1YEk/gAj6zAHN3AdZt6S9Ww=
+golang.org/x/tools v0.33.0 h1:4qz2S3zmRxbGIhDIAgjxvFutSvH5EfnsYrRBj0UI0bc=
+golang.org/x/tools v0.33.0/go.mod h1:CIJMaWEY88juyUfo7UbgPqbC8rU2OqfAV1h2Qp0oMYI=
+mvdan.cc/gofumpt v0.8.0 h1:nZUCeC2ViFaerTcYKstMmfysj6uhQrA2vJe+2vwGU6k=
+mvdan.cc/gofumpt v0.8.0/go.mod h1:vEYnSzyGPmjvFkqJWtXkh79UwPWP9/HMxQdGEXZHjpg=
diff --git a/tools/syscalls-update/main.go b/tools/syscalls-update/main.go
new file mode 100644
index 000000000..4dfda7051
--- /dev/null
+++ b/tools/syscalls-update/main.go
@@ -0,0 +1,163 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"bytes"
+	_ "embed"
+	"encoding/csv"
+	"errors"
+	"io"
+	"log"
+	"net/http"
+	"os"
+	"sort"
+	"strconv"
+	"strings"
+	"text/template"
+
+	"mvdan.cc/gofumpt/format"
+)
+
+//go:embed syscalls_arch.go.tmpl
+var syscallsTemplate string
+
+const (
+	sourceURL = "https://raw.githubusercontent.com/seccomp/libseccomp/refs/heads/main/src/syscalls.csv"
+
+	nameColumnIndex = 0
+)
+
+type Syscall struct {
+	Name string
+	Nr   int
+}
+
+type TemplateData struct {
+	Source     string
+	Arch       string
+	ColumnName string
+	OutputFile string
+
+	KernelVersion string
+	Syscalls      []Syscall
+	ColumnIndex   int
+}
+
+var allTemplateData = map[string]*TemplateData{
+	"amd64": {
+		Arch:       "amd64",
+		ColumnName: "x86_64",
+		OutputFile: "../../pkg/utils/syscalls/syscalls_amd64.go",
+	},
+	"arm64": {
+		Arch:       "arm64",
+		ColumnName: "aarch64",
+		OutputFile: "../../pkg/utils/syscalls/syscalls_arm64.go",
+	},
+}
+
+func main() {
+	resp, err := http.Get(sourceURL)
+	if err != nil {
+		log.Fatal(err)
+	}
+	defer resp.Body.Close()
+
+	if resp.StatusCode != http.StatusOK {
+		log.Fatalf("HTTP error: %d %s", resp.StatusCode, resp.Status)
+	}
+
+	reader := csv.NewReader(resp.Body)
+	header, err := reader.Read()
+	if err != nil {
+		log.Fatal(err)
+	}
+	if len(header) == 0 {
+		log.Fatal("Empty header")
+	}
+
+	kernelVersion := header[nameColumnIndex]
+	kernelVersion = strings.TrimPrefix(kernelVersion, "#syscall (")
+	kernelVersion = strings.TrimSuffix(kernelVersion, ")")
+	for _, tmplData := range allTemplateData {
+		tmplData.KernelVersion = kernelVersion
+		tmplData.Source = sourceURL
+	}
+	for _, tmplData := range allTemplateData {
+		for i, column := range header {
+			if column == tmplData.ColumnName {
+				tmplData.ColumnIndex = i
+				break
+			}
+		}
+	}
+
+	for {
+		record, err := reader.Read()
+		if errors.Is(err, io.EOF) {
+			break
+		}
+		if err != nil {
+			log.Fatal(err)
+		}
+		name := record[nameColumnIndex]
+
+		for _, tmplData := range allTemplateData {
+			nrStr := record[tmplData.ColumnIndex]
+			// kernel version undefined or pseudo syscall
+			if nrStr == "KV_UNDEF" || nrStr == "PNR" {
+				continue
+			}
+			nr, err := strconv.Atoi(nrStr)
+			if err != nil {
+				log.Printf("Skipping syscall %q: %s", name, err)
+				continue
+			}
+			tmplData.Syscalls = append(tmplData.Syscalls, Syscall{Name: name, Nr: nr})
+		}
+	}
+
+	tmpl, err := template.New("syscalls_arch.go.tmpl").Parse(syscallsTemplate)
+	if err != nil {
+		log.Fatal(err)
+	}
+
+	for _, tmplData := range allTemplateData {
+		sort.Slice(tmplData.Syscalls, func(i, j int) bool {
+			return tmplData.Syscalls[i].Name < tmplData.Syscalls[j].Name
+		})
+
+		file, err := os.Create(tmplData.OutputFile)
+		if err != nil {
+			log.Fatal(err)
+		}
+		defer file.Close()
+
+		buf := new(bytes.Buffer)
+		err = tmpl.Execute(buf, tmplData)
+		if err != nil {
+			log.Fatalf("Error executing template: %v", err)
+		}
+		out, err := format.Source(buf.Bytes(), format.Options{})
+		if err != nil {
+			log.Fatalf("Error formatting source: %v", err)
+		}
+		_, err = file.Write(out)
+		if err != nil {
+			log.Fatalf("Error writing to file: %v", err)
+		}
+	}
+}
diff --git a/tools/syscalls-update/syscalls_arch.go.tmpl b/tools/syscalls-update/syscalls_arch.go.tmpl
new file mode 100644
index 000000000..577b45061
--- /dev/null
+++ b/tools/syscalls-update/syscalls_arch.go.tmpl
@@ -0,0 +1,35 @@
+// Copyright 2023-2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package syscalls
+
+// This file is automatically generated from:
+//     {{.Source}}
+//
+// To update it, run:
+//     make -C tools/syscalls-update
+//
+// Linux version: {{.KernelVersion}}
+
+var syscallsNameToNumber = map[string]int{
+{{- range .Syscalls}}
+	"{{.Name}}": {{.Nr}},
+{{- end}}
+}
+
+var syscallsNumberToName = map[int]string{
+{{- range .Syscalls}}
+	{{.Nr}}: "{{.Name}}",
+{{- end}}
+}
diff --git a/tools/testjson2md/go.mod b/tools/testjson2md/go.mod
index 5fdb384f2..e19692d0c 100644
--- a/tools/testjson2md/go.mod
+++ b/tools/testjson2md/go.mod
@@ -1,6 +1,6 @@
 module github.com/inspektor-gadget/inspektor-gadget/tools/testjson2md
 
-go 1.23.0
+go 1.24.0
 
 require github.com/medyagh/gopogh v0.29.0
 
@@ -36,16 +36,16 @@ require (
 	go.opencensus.io v0.24.0 // indirect
 	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
 	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
-	go.opentelemetry.io/otel v1.34.0 // indirect
-	go.opentelemetry.io/otel/metric v1.34.0 // indirect
-	go.opentelemetry.io/otel/trace v1.34.0 // indirect
+	go.opentelemetry.io/otel v1.36.0 // indirect
+	go.opentelemetry.io/otel/metric v1.36.0 // indirect
+	go.opentelemetry.io/otel/trace v1.36.0 // indirect
 	go.uber.org/multierr v1.11.0 // indirect
 	go.uber.org/zap v1.27.0 // indirect
-	golang.org/x/crypto v0.33.0 // indirect
-	golang.org/x/net v0.35.0 // indirect
+	golang.org/x/crypto v0.38.0 // indirect
+	golang.org/x/net v0.40.0 // indirect
 	golang.org/x/oauth2 v0.23.0 // indirect
-	golang.org/x/sys v0.30.0 // indirect
-	golang.org/x/text v0.22.0 // indirect
+	golang.org/x/sys v0.33.0 // indirect
+	golang.org/x/text v0.25.0 // indirect
 	golang.org/x/time v0.6.0 // indirect
 	google.golang.org/api v0.197.0 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect
diff --git a/tools/testjson2md/go.sum b/tools/testjson2md/go.sum
index d1d8f2bce..415c5573a 100644
--- a/tools/testjson2md/go.sum
+++ b/tools/testjson2md/go.sum
@@ -69,8 +69,8 @@ github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMyw
 github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
-github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
+github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
 github.com/google/pprof v0.0.0-20240409012703-83162a5b38cd h1:gbpYu9NMq8jhDVbvlGkMFWCjLFlqqEZjEmObmhUy6Vo=
 github.com/google/pprof v0.0.0-20240409012703-83162a5b38cd/go.mod h1:kf6iHlnVGwgKolg33glAes7Yg/8iWP8ukqeldJSO7jw=
 github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
@@ -207,12 +207,12 @@ go.opentelemetry.io/auto/sdk v1.1.0 h1:cH53jehLUN6UFLY71z+NDOiNJqDdPRaXzTel0sJyS
 go.opentelemetry.io/auto/sdk v1.1.0/go.mod h1:3wSPjt5PWp2RhlCcmmOial7AvC4DQqZb7a7wCow3W8A=
 go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
 go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
-go.opentelemetry.io/otel v1.34.0 h1:zRLXxLCgL1WyKsPVrgbSdMN4c0FMkDAskSTQP+0hdUY=
-go.opentelemetry.io/otel v1.34.0/go.mod h1:OWFPOQ+h4G8xpyjgqo4SxJYdDQ/qmRH+wivy7zzx9oI=
-go.opentelemetry.io/otel/metric v1.34.0 h1:+eTR3U0MyfWjRDhmFMxe2SsW64QrZ84AOhvqS7Y+PoQ=
-go.opentelemetry.io/otel/metric v1.34.0/go.mod h1:CEDrp0fy2D0MvkXE+dPV7cMi8tWZwX3dmaIhwPOaqHE=
-go.opentelemetry.io/otel/trace v1.34.0 h1:+ouXS2V8Rd4hp4580a8q23bg0azF2nI8cqLYnC8mh/k=
-go.opentelemetry.io/otel/trace v1.34.0/go.mod h1:Svm7lSjQD7kG7KJ/MUHPVXSDGz2OX4h0M2jHBhmSfRE=
+go.opentelemetry.io/otel v1.36.0 h1:UumtzIklRBY6cI/lllNZlALOF5nNIzJVb16APdvgTXg=
+go.opentelemetry.io/otel v1.36.0/go.mod h1:/TcFMXYjyRNh8khOAO9ybYkqaDBb/70aVwkNML4pP8E=
+go.opentelemetry.io/otel/metric v1.36.0 h1:MoWPKVhQvJ+eeXWHFBOPoBOi20jh6Iq2CcCREuTYufE=
+go.opentelemetry.io/otel/metric v1.36.0/go.mod h1:zC7Ks+yeyJt4xig9DEw9kuUFe5C3zLbVjV2PzT6qzbs=
+go.opentelemetry.io/otel/trace v1.36.0 h1:ahxWNuqZjpdiFAyrIoQ4GIiAIhxAunQR6MUoKrsNd4w=
+go.opentelemetry.io/otel/trace v1.36.0/go.mod h1:gQ+OnDZzrybY4k4seLzPAWNwVBBVlF2szhehOBB/tGA=
 go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=
@@ -239,8 +239,8 @@ golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPh
 golang.org/x/crypto v0.0.0-20201203163018-be400aefbc4c/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=
 golang.org/x/crypto v0.0.0-20210616213533-5ff15b29337e/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
-golang.org/x/crypto v0.33.0 h1:IOBPskki6Lysi0lo9qQvbxiQ+FvsCC/YWOecCHAixus=
-golang.org/x/crypto v0.33.0/go.mod h1:bVdXmD7IV/4GdElGPozy6U7lWdRXA4qyRVGJV57uQ5M=
+golang.org/x/crypto v0.38.0 h1:jt+WWG8IZlBnVbomuhg2Mdq0+BBQaHbtqHEFEigjUV8=
+golang.org/x/crypto v0.38.0/go.mod h1:MvrbAqul58NNYPKnOra203SB9vpuZW0e+RRZV+Ggqjw=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
@@ -259,16 +259,16 @@ golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLL
 golang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
-golang.org/x/net v0.35.0 h1:T5GQRQb2y08kTAByq9L4/bz8cipCdA8FbRTXewonqY8=
-golang.org/x/net v0.35.0/go.mod h1:EglIi67kWsHKlRzzVMUD93VMSWGFOMSZgxFjparz1Qk=
+golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
+golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=
 golang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.11.0 h1:GGz8+XQP4FvTTrjZPzNKTMFtSXH80RAzG+5ghFPgK9w=
-golang.org/x/sync v0.11.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sync v0.14.0 h1:woo0S4Yywslg6hp4eUFjTVOyKt0RookbpAHG4c1HmhQ=
+golang.org/x/sync v0.14.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -284,8 +284,8 @@ golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.30.0 h1:QjkSwP/36a20jFYWkSue1YwXzLmsV5Gfq7Eiy72C1uc=
-golang.org/x/sys v0.30.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
+golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
 golang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
@@ -293,8 +293,8 @@ golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.22.0 h1:bofq7m3/HAFvbF51jz3Q9wLg3jkvSPuiZu/pD1XwgtM=
-golang.org/x/text v0.22.0/go.mod h1:YRoo4H8PVmsu+E3Ou7cqLVH8oXWIHVoX0jqUWALQhfY=
+golang.org/x/text v0.25.0 h1:qVyWApTSYLk/drJRO5mDlNYskwQznZmkpV2c8q9zls4=
+golang.org/x/text v0.25.0/go.mod h1:WEdwpYrmk1qmdHvhkSTNPm3app7v4rsT8F2UD6+VHIA=
 golang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=
 golang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
diff --git a/wasmapi/go/config.go b/wasmapi/go/config.go
index be989405f..1c8e3f6b5 100644
--- a/wasmapi/go/config.go
+++ b/wasmapi/go/config.go
@@ -20,7 +20,7 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env setConfig
+//go:wasmimport ig setConfig
 //go:linkname setConfig setConfig
 func setConfig(key uint64, val uint64, kind uint32) uint32
 
diff --git a/wasmapi/go/datasource.go b/wasmapi/go/datasource.go
index ec9b6d0aa..0d2463411 100644
--- a/wasmapi/go/datasource.go
+++ b/wasmapi/go/datasource.go
@@ -21,67 +21,67 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env newDataSource
+//go:wasmimport ig newDataSource
 //go:linkname newDataSource newDataSource
 func newDataSource(name uint64, typ uint32) uint32
 
-//go:wasmimport env getDataSource
+//go:wasmimport ig getDataSource
 //go:linkname getDataSource getDataSource
 func getDataSource(name uint64) uint32
 
-//go:wasmimport env dataSourceSubscribe
+//go:wasmimport ig dataSourceSubscribe
 //go:linkname dataSourceSubscribe dataSourceSubscribe
 func dataSourceSubscribe(ds uint32, typ uint32, prio uint32, cb uint64) uint32
 
-//go:wasmimport env dataSourceGetField
+//go:wasmimport ig dataSourceGetField
 //go:linkname dataSourceGetField dataSourceGetField
 func dataSourceGetField(ds uint32, name uint64) uint32
 
-//go:wasmimport env dataSourceAddField
+//go:wasmimport ig dataSourceAddField
 //go:linkname dataSourceAddField dataSourceAddField
 func dataSourceAddField(ds uint32, name uint64, kind uint32) uint32
 
-//go:wasmimport env dataSourceNewPacketSingle
+//go:wasmimport ig dataSourceNewPacketSingle
 //go:linkname dataSourceNewPacketSingle dataSourceNewPacketSingle
 func dataSourceNewPacketSingle(ds uint32) uint32
 
-//go:wasmimport env dataSourceNewPacketArray
+//go:wasmimport ig dataSourceNewPacketArray
 //go:linkname dataSourceNewPacketArray dataSourceNewPacketArray
 func dataSourceNewPacketArray(ds uint32) uint32
 
-//go:wasmimport env dataSourceEmitAndRelease
+//go:wasmimport ig dataSourceEmitAndRelease
 //go:linkname dataSourceEmitAndRelease dataSourceEmitAndRelease
 func dataSourceEmitAndRelease(ds uint32, packet uint32) uint32
 
-//go:wasmimport env dataSourceRelease
+//go:wasmimport ig dataSourceRelease
 //go:linkname dataSourceRelease dataSourceRelease
 func dataSourceRelease(ds uint32, packet uint32) uint32
 
-//go:wasmimport env dataSourceUnreference
+//go:wasmimport ig dataSourceUnreference
 //go:linkname dataSourceUnreference dataSourceUnreference
 func dataSourceUnreference(ds uint32) uint32
 
-//go:wasmimport env dataSourceIsReferenced
+//go:wasmimport ig dataSourceIsReferenced
 //go:linkname dataSourceIsReferenced dataSourceIsReferenced
 func dataSourceIsReferenced(ds uint32) uint32
 
-//go:wasmimport env dataArrayNew
+//go:wasmimport ig dataArrayNew
 //go:linkname dataArrayNew dataArrayNew
 func dataArrayNew(d uint32) uint32
 
-//go:wasmimport env dataArrayAppend
+//go:wasmimport ig dataArrayAppend
 //go:linkname dataArrayAppend dataArrayAppend
 func dataArrayAppend(d uint32, data uint32) uint32
 
-//go:wasmimport env dataArrayRelease
+//go:wasmimport ig dataArrayRelease
 //go:linkname dataArrayRelease dataArrayRelease
 func dataArrayRelease(d uint32, data uint32) uint32
 
-//go:wasmimport env dataArrayLen
+//go:wasmimport ig dataArrayLen
 //go:linkname dataArrayLen dataArrayLen
 func dataArrayLen(d uint32) uint32
 
-//go:wasmimport env dataArrayGet
+//go:wasmimport ig dataArrayGet
 //go:linkname dataArrayGet dataArrayGet
 func dataArrayGet(d uint32, index uint32) uint32
 
@@ -129,6 +129,17 @@ var (
 	dsSubcriptions    = map[uint64]subscription{}
 )
 
+const (
+	// Well known data sources
+	DataSourceContainers = "containers"
+
+	// Data source "containers" has a field EventType with the following possible values:
+	// - CREATED
+	// - DELETED
+	// The maximum length is 7. Keeping more for future compatibility.
+	DataSourceContainersEventTypeMaxSize = 16
+)
+
 //go:wasmexport dataSourceCallback
 func dataSourceCallback(cbID uint64, ds uint32, data uint32) {
 	sub, ok := dsSubcriptions[cbID]
diff --git a/wasmapi/go/doc.go b/wasmapi/go/doc.go
index 26ee3338f..74ad97fb9 100644
--- a/wasmapi/go/doc.go
+++ b/wasmapi/go/doc.go
@@ -16,9 +16,5 @@
 Package api contains the reference implementation of the wasm API for Inspektor
 Gadget. It's designed to be used by gadgets and not by any other internal
 component of Inspektor Gadget.
-
-This package requires TinyGo to ensure that stacks are not dynamically moved
-between unsafe.StringData and calls to wasm host functions. It doesn't work with
-the official Golang compiler.
 */
 package api
diff --git a/wasmapi/go/fields.go b/wasmapi/go/fields.go
index 024609804..ec3597a7e 100644
--- a/wasmapi/go/fields.go
+++ b/wasmapi/go/fields.go
@@ -18,155 +18,136 @@ import (
 	"errors"
 	"math"
 	"runtime"
-	_ "unsafe"
+	"unsafe"
 )
 
-//go:wasmimport env fieldGetScalar
+//go:wasmimport ig fieldGetScalar
 //go:linkname fieldGetScalar fieldGetScalar
-func fieldGetScalar(field uint32, data uint32, kind uint32) uint64
+func fieldGetScalar(field uint32, data uint32, kind uint32, errPtr uint32) uint64
 
-//go:wasmimport env fieldGetBuffer
+//go:wasmimport ig fieldGetBuffer
 //go:linkname fieldGetBuffer fieldGetBuffer
 func fieldGetBuffer(field uint32, data uint32, kind uint32, dst uint64) int32
 
-//go:wasmimport env fieldSet
+//go:wasmimport ig fieldSet
 //go:linkname fieldSet fieldSet
 func fieldSet(field uint32, data uint32, kind uint32, value uint64) uint32
 
-//go:wasmimport env fieldAddTag
+//go:wasmimport ig fieldAddTag
 //go:linkname fieldAddTag fieldAddTag
 func fieldAddTag(field uint32, tag uint64) uint32
 
-var errSetField = errors.New("error setting field")
+var (
+	errSetField = errors.New("error setting field")
+	errGetField = errors.New("error getting field")
+)
 
-func (f Field) Int8(data Data) (int8, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Int8))
-	return int8(val), nil
+func (f Field) getScalar(data Data, kind FieldKind) (uint64, error) {
+	var err uint32
+	errPtr := uintptr(unsafe.Pointer(&err))
+	val := fieldGetScalar(uint32(f), uint32(data), uint32(kind), uint32(errPtr))
+	if err != 0 {
+		return 0, errGetField
+	}
+	return val, nil
 }
 
-func (f Field) SetInt8(data Data, value int8) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Int8), uint64(value))
+func (f Field) set(data Data, kind FieldKind, value uint64) error {
+	ret := fieldSet(uint32(f), uint32(data), uint32(kind), value)
 	if ret != 0 {
 		return errSetField
 	}
 	return nil
 }
 
+func (f Field) Int8(data Data) (int8, error) {
+	val, err := f.getScalar(data, Kind_Int8)
+	return int8(val), err
+}
+
+func (f Field) SetInt8(data Data, value int8) error {
+	return f.set(data, Kind_Int8, uint64(value))
+}
+
 func (f Field) Int16(data Data) (int16, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Int16))
-	return int16(val), nil
+	val, err := f.getScalar(data, Kind_Int16)
+	return int16(val), err
 }
 
 func (f Field) SetInt16(data Data, value int16) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Int16), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Int16, uint64(value))
 }
 
 func (f Field) Int32(data Data) (int32, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Int32))
-	return int32(val), nil
+	val, err := f.getScalar(data, Kind_Int32)
+	return int32(val), err
 }
 
 func (f Field) SetInt32(data Data, value int32) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Int32), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Int32, uint64(value))
 }
 
 func (f Field) Int64(data Data) (int64, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Int64))
-	return int64(val), nil
+	val, err := f.getScalar(data, Kind_Int64)
+	return int64(val), err
 }
 
 func (f Field) SetInt64(data Data, value int64) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Int64), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Int64, uint64(value))
 }
 
 func (f Field) Uint8(data Data) (uint8, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Uint8))
-	return uint8(val), nil
+	val, err := f.getScalar(data, Kind_Uint8)
+	return uint8(val), err
 }
 
 func (f Field) SetUint8(data Data, value uint8) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Uint8), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Uint8, uint64(value))
 }
 
 func (f Field) Uint16(data Data) (uint16, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Uint16))
-	return uint16(val), nil
+	val, err := f.getScalar(data, Kind_Uint16)
+	return uint16(val), err
 }
 
 func (f Field) SetUint16(data Data, value uint16) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Uint16), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Uint16, uint64(value))
 }
 
 func (f Field) Uint32(data Data) (uint32, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Uint32))
-	return uint32(val), nil
+	val, err := f.getScalar(data, Kind_Uint32)
+	return uint32(val), err
 }
 
 func (f Field) SetUint32(data Data, value uint32) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Uint32), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Uint32, uint64(value))
 }
 
 func (f Field) Uint64(data Data) (uint64, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Uint64))
-	return uint64(val), nil
+	val, err := f.getScalar(data, Kind_Uint64)
+	return uint64(val), err
 }
 
 func (f Field) SetUint64(data Data, value uint64) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Uint64), uint64(value))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Uint64, uint64(value))
 }
 
 func (f Field) Float32(data Data) (float32, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Float32))
-	return math.Float32frombits(uint32(val)), nil
+	val, err := f.getScalar(data, Kind_Float32)
+	return math.Float32frombits(uint32(val)), err
 }
 
 func (f Field) SetFloat32(data Data, value float32) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Float32), uint64(math.Float32bits(value)))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Float32, uint64(math.Float32bits(value)))
 }
 
 func (f Field) Float64(data Data) (float64, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Float64))
-	return math.Float64frombits(uint64(val)), nil
+	val, err := f.getScalar(data, Kind_Float64)
+	return math.Float64frombits(uint64(val)), err
 }
 
 func (f Field) SetFloat64(data Data, value float64) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Float64), uint64(math.Float64bits(value)))
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Float64, uint64(math.Float64bits(value)))
 }
 
 func (f Field) String(data Data, maxSize uint32) (string, error) {
@@ -179,12 +160,9 @@ func (f Field) String(data Data, maxSize uint32) (string, error) {
 }
 
 func (f Field) SetString(data Data, str string) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_String), uint64(stringToBufPtr(str)))
+	err := f.set(data, Kind_String, uint64(stringToBufPtr(str)))
 	runtime.KeepAlive(str)
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return err
 }
 
 // Bytes get the bytes of a field of type string or []byte into an
@@ -198,17 +176,14 @@ func (f Field) Bytes(data Data, dst []byte) (uint32, error) {
 }
 
 func (f Field) SetBytes(data Data, buf []byte) error {
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Bytes), uint64(bytesToBufPtr(buf)))
+	err := f.set(data, Kind_Bytes, uint64(bytesToBufPtr(buf)))
 	runtime.KeepAlive(buf)
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return err
 }
 
 func (f Field) Bool(data Data) (bool, error) {
-	val := fieldGetScalar(uint32(f), uint32(data), uint32(Kind_Bool))
-	return val == 1, nil
+	val, err := f.getScalar(data, Kind_Bool)
+	return val == 1, err
 }
 
 func (f Field) SetBool(data Data, b bool) error {
@@ -216,11 +191,7 @@ func (f Field) SetBool(data Data, b bool) error {
 	if b {
 		value = 1
 	}
-	ret := fieldSet(uint32(f), uint32(data), uint32(Kind_Bool), value)
-	if ret != 0 {
-		return errSetField
-	}
-	return nil
+	return f.set(data, Kind_Bool, uint64(value))
 }
 
 func (f Field) AddTag(tag string) error {
diff --git a/wasmapi/go/filter.go b/wasmapi/go/filter.go
new file mode 100644
index 000000000..5407de245
--- /dev/null
+++ b/wasmapi/go/filter.go
@@ -0,0 +1,28 @@
+// Copyright 2025 The Inspektor Gadget authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package api
+
+import (
+	_ "unsafe"
+)
+
+//go:wasmimport ig shouldDiscardMntnsID
+//go:linkname shouldDiscardMntnsID shouldDiscardMntnsID
+func shouldDiscardMntnsID(mntNsID uint64) uint32
+
+func ShouldDiscardMntNsID(mntNsID uint64) bool {
+	ret := shouldDiscardMntnsID(mntNsID)
+	return ret != 0
+}
diff --git a/wasmapi/go/handle.go b/wasmapi/go/handle.go
index db3e022a5..4dcc1a6dc 100644
--- a/wasmapi/go/handle.go
+++ b/wasmapi/go/handle.go
@@ -19,7 +19,7 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env releaseHandle
+//go:wasmimport ig releaseHandle
 //go:linkname releaseHandle releaseHandle
 func releaseHandle(handle uint32) uint32
 
diff --git a/wasmapi/go/kallsyms.go b/wasmapi/go/kallsyms.go
index fdd78063a..53b160a7a 100644
--- a/wasmapi/go/kallsyms.go
+++ b/wasmapi/go/kallsyms.go
@@ -19,7 +19,7 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env kallsymsSymbolExists
+//go:wasmimport ig kallsymsSymbolExists
 //go:linkname kallsymsSymbolExists kallsymsSymbolExists
 func kallsymsSymbolExists(symbol uint64) uint32
 
diff --git a/wasmapi/go/log.go b/wasmapi/go/log.go
index 35a11ac90..bc65eb453 100644
--- a/wasmapi/go/log.go
+++ b/wasmapi/go/log.go
@@ -20,7 +20,7 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env gadgetLog
+//go:wasmimport ig gadgetLog
 //go:linkname gadgetLog gadgetLog
 func gadgetLog(level uint32, str uint64)
 
diff --git a/wasmapi/go/map.go b/wasmapi/go/map.go
index e7056d8c4..effc3c3fc 100644
--- a/wasmapi/go/map.go
+++ b/wasmapi/go/map.go
@@ -22,27 +22,27 @@ import (
 	"unsafe"
 )
 
-//go:wasmimport env newMap
+//go:wasmimport ig newMap
 //go:linkname newMap newMap
 func newMap(name uint64, typ uint32, keySize uint32, valueSize uint32, maxEntries uint32) uint32
 
-//go:wasmimport env getMap
+//go:wasmimport ig getMap
 //go:linkname getMap getMap
 func getMap(name uint64) uint32
 
-//go:wasmimport env mapLookup
+//go:wasmimport ig mapLookup
 //go:linkname mapLookup mapLookup
 func mapLookup(m uint32, keyptr uint64, valueptr uint64) uint32
 
-//go:wasmimport env mapUpdate
+//go:wasmimport ig mapUpdate
 //go:linkname mapUpdate mapUpdate
 func mapUpdate(m uint32, keyptr uint64, valueptr uint64, flags uint64) uint32
 
-//go:wasmimport env mapDelete
+//go:wasmimport ig mapDelete
 //go:linkname mapDelete mapDelete
 func mapDelete(m uint32, keyptr uint64) uint32
 
-//go:wasmimport env mapRelease
+//go:wasmimport ig mapRelease
 //go:linkname mapRelease mapRelease
 func mapRelease(m uint32) uint32
 
diff --git a/wasmapi/go/params.go b/wasmapi/go/params.go
index 3f95da47e..c08026971 100644
--- a/wasmapi/go/params.go
+++ b/wasmapi/go/params.go
@@ -19,7 +19,7 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env getParamValue
+//go:wasmimport ig getParamValue
 //go:linkname getParamValue getParamValue
 func getParamValue(key uint64, dst uint64) uint32
 
diff --git a/wasmapi/go/perf.go b/wasmapi/go/perf.go
index efd1459a4..45ee55b13 100644
--- a/wasmapi/go/perf.go
+++ b/wasmapi/go/perf.go
@@ -21,23 +21,23 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env newPerfReader
+//go:wasmimport ig newPerfReader
 //go:linkname newPerfReader newPerfReader
 func newPerfReader(mapHandle uint32, size uint32, isOverwritable uint32) uint32
 
-//go:wasmimport env perfReaderPause
+//go:wasmimport ig perfReaderPause
 //go:linkname perfReaderPause perfReaderPause
 func perfReaderPause(perfMapHandle uint32) uint32
 
-//go:wasmimport env perfReaderResume
+//go:wasmimport ig perfReaderResume
 //go:linkname perfReaderResume perfReaderResume
 func perfReaderResume(perfMapHandle uint32) uint32
 
-//go:wasmimport env perfReaderRead
+//go:wasmimport ig perfReaderRead
 //go:linkname perfReaderRead perfReaderRead
 func perfReaderRead(perfMapHandle uint32, dst uint64) uint32
 
-//go:wasmimport env perfReaderClose
+//go:wasmimport ig perfReaderClose
 //go:linkname perfReaderClose perfReaderClose
 func perfReaderClose(perfMapHandle uint32) uint32
 
diff --git a/wasmapi/go/syscall.go b/wasmapi/go/syscall.go
index e97c782ad..cf7c3ab32 100644
--- a/wasmapi/go/syscall.go
+++ b/wasmapi/go/syscall.go
@@ -21,15 +21,15 @@ import (
 	_ "unsafe"
 )
 
-//go:wasmimport env getSyscallName
+//go:wasmimport ig getSyscallName
 //go:linkname getSyscallName getSyscallName
 func getSyscallName(id uint32, dst uint64) uint32
 
-//go:wasmimport env getSyscallID
+//go:wasmimport ig getSyscallID
 //go:linkname getSyscallID getSyscallID
 func getSyscallID(name uint64) int32
 
-//go:wasmimport env getSyscallDeclaration
+//go:wasmimport ig getSyscallDeclaration
 //go:linkname getSyscallDeclaration getSyscallDeclaration
 func getSyscallDeclaration(name uint64, pointer uint64) uint32
 
