# SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)

# disable builtin rules (avoid trying to run cc for .o files)
MAKEFLAGS += --no-builtin-rules

ifndef BTFHUB_ARCHIVE
$(error BTFHUB_ARCHIVE is undefined)
endif

ifndef ARCH
$(error ARCH is undefined)
endif

# architecture naming is a mess:
# - Golang uses amd64 and arm64
# - btfhub uses x86_64 and arm64
# - bpf2go uses x86 and arm64
ARCH_CLEANED = $(subst amd64,x86,$(ARCH))
OUTPUT ?= pkg/btfgen/btfs

SOURCE_BTF_FILES = $(shell find $(BTFHUB_ARCHIVE)/ -iregex ".*$(subst x86,x86_64,$(ARCH_CLEANED)).*" -type f -name '*.btf.tar.xz')
MIN_CORE_BTF_FILES = $(patsubst $(BTFHUB_ARCHIVE)/%.btf.tar.xz, $(OUTPUT)/$(ARCH_CLEANED)/%.btf, $(SOURCE_BTF_FILES))
BPF_ALL_O_FILES = $(shell find pkg/ -type f -regex ".*\($(ARCH_CLEANED)\|bpfel\).o")

.PHONY: all
all: $(MIN_CORE_BTF_FILES)

ifeq ($(V),1)
Q =
msg =
else
Q = @
msg = @printf '  %-8s %s%s\n' "$(1)" "$(notdir $(2))" "$(if $(3), $(3))";
MAKEFLAGS += --no-print-directory
endif

$(MIN_CORE_BTF_FILES): $(BPF_ALL_O_FILES)

$(OUTPUT)/$(ARCH_CLEANED)/%.btf: BTF_FILE = $(<:.tar.xz=)
$(OUTPUT)/$(ARCH_CLEANED)/%.btf: $(BTFHUB_ARCHIVE)/%.btf.tar.xz
	$(call msg,UNTAR,$@)
	$(Q)tar xvfJ $< -C "$(dir $<)" --touch > /dev/null
	$(call msg,BTFGEN,$@)
	$(Q)mkdir -p "$(@D)"
	$(Q)if [ -f $(BTF_FILE) ]; then $(BPFTOOL) gen min_core_btf $(BTF_FILE) $@ $(BPF_ALL_O_FILES); else echo "$(BTF_FILE) does not exist!" >&2; fi
	$(Q)rm -fr $(BTF_FILE)

# delete failed targets
.DELETE_ON_ERROR:

# keep intermediate (.skel.h, .bpf.o, etc) targets
.SECONDARY:
